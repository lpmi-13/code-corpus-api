{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/generate_readme.py#L9", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def sanitize_anchor(s):"}, {"line_number": 2, "line_content": "    return re.sub('\\\\W', '-', s.lower())"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/core.py#L13", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def clear_screen():"}, {"line_number": 2, "line_content": "    if system() == 'Linux':"}, {"line_number": 3, "line_content": "        os.system('clear')"}, {"line_number": 4, "line_content": "    if system() == 'Windows':"}, {"line_number": 5, "line_content": "        os.system('cls')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/core.py#L20", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def validate_input(ip, val_range):"}, {"line_number": 2, "line_content": "    try:"}, {"line_number": 3, "line_content": "        ip = int(ip)"}, {"line_number": 4, "line_content": "        if ip in val_range:"}, {"line_number": 5, "line_content": "            return ip"}, {"line_number": 6, "line_content": "        else:"}, {"line_number": 7, "line_content": "            return None"}, {"line_number": 8, "line_content": "    except:"}, {"line_number": 9, "line_content": "        return None"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/hackingtool.py#L70", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def show_info(self):"}, {"line_number": 2, "line_content": "    print(logo + '\\x1b[0m \\x1b[97m')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/phising_attack.py#L111", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(BlackPhish, self).__init__([('Update', self.update)])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/phising_attack.py#L114", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def update(self):"}, {"line_number": 2, "line_content": "    os.system('cd BlackPhish;sudo bash update.sh')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/post_exploitation.py#L21", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def before_run(self):"}, {"line_number": 2, "line_content": "    os.system("}, {"line_number": 3, "line_content": "        \"\"\"echo \"You can Use Command: "}, {"line_number": 4, "line_content": "[!] Vegile -i / --inject [backdoor/rootkit] "}, {"line_number": 5, "line_content": "[!] Vegile -u / --unlimited [backdoor/rootkit] "}, {"line_number": 6, "line_content": "[!] Vegile -h / --help\"|boxes -d parchment\"\"\""}, {"line_number": 7, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/steganography.py#L13", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    choice_run = input('[1] Hide\\n[2] Extract\\n[99]Cancel\\n>> ')"}, {"line_number": 3, "line_content": "    choice_run = validate_input(choice_run, [1, 2, 99])"}, {"line_number": 4, "line_content": "    if choice_run is None:"}, {"line_number": 5, "line_content": "        print('Please choose a valid input')"}, {"line_number": 6, "line_content": "        return self.run()"}, {"line_number": 7, "line_content": "    if choice_run == 99:"}, {"line_number": 8, "line_content": "        return"}, {"line_number": 9, "line_content": "    if choice_run == 1:"}, {"line_number": 10, "line_content": "        file_hide = input('Enter Filename you want to Embed (1.txt) >> ')"}, {"line_number": 11, "line_content": "        file_to_be_hide = input('Enter Cover Filename(test.jpeg) >> ')"}, {"line_number": 12, "line_content": "        subprocess.run(['steghide', 'embed', '-cf', file_to_be_hide, '-ef',"}, {"line_number": 13, "line_content": "            file_hide])"}, {"line_number": 14, "line_content": "    elif choice_run == '2':"}, {"line_number": 15, "line_content": "        from_file = input('Enter Filename From Extract Data >> ')"}, {"line_number": 16, "line_content": "        subprocess.run(['steghide', 'extract', '-sf', from_file])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/steganography.py#L13", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    filename = input('Enter Filename:- ')"}, {"line_number": 3, "line_content": "    passfile = input('Enter Wordlist Filename:- ')"}, {"line_number": 4, "line_content": "    subprocess.run(['stegcracker', filename, passfile])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/reverse_engineering.py#L15", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(AndroGuard, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/reverse_engineering.py#L28", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    uinput = input('Enter (.apk) File >> ')"}, {"line_number": 3, "line_content": "    subprocess.run(['sudo', 'apk2gold', uinput])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/reverse_engineering.py#L15", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Jadx, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(NMAP, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(PortScan, self).__init__(installable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L46", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    clear_screen()"}, {"line_number": 3, "line_content": "    target = input('Select a Target IP: ')"}, {"line_number": 4, "line_content": "    subprocess.run(['sudo', 'nmap', '-O', '-Pn', target])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Host2IP, self).__init__(installable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L46", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    clear_screen()"}, {"line_number": 3, "line_content": "    host = input('Enter host name (e.g. www.google.com):-  ')"}, {"line_number": 4, "line_content": "    ips = socket.gethostbyname(host)"}, {"line_number": 5, "line_content": "    print(ips)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(IsItDown, self).__init__([('Open', self.open)], installable=False,"}, {"line_number": 3, "line_content": "        runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L111", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def open(self):"}, {"line_number": 2, "line_content": "    webbrowser.open_new_tab('https://www.isitdownrightnow.com/')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L46", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    site = input('Enter Site Name (example.com) >> ')"}, {"line_number": 3, "line_content": "    os.chdir('Striker')"}, {"line_number": 4, "line_content": "    subprocess.run(['sudo', 'python3', 'striker.py', site])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(SecretFinder, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Shodan, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L46", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    ip = input('Enter Ip >> ')"}, {"line_number": 3, "line_content": "    os.chdir('rang3r')"}, {"line_number": 4, "line_content": "    subprocess.run(['sudo', 'python', 'rang3r.py', '--ip', ip])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/information_gathering_tools.py#L46", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    domain = input('Enter domain (example.com) >> ')"}, {"line_number": 3, "line_content": "    os.chdir('Breacher')"}, {"line_number": 4, "line_content": "    subprocess.run(['python3', 'breacher.py', '-u', domain])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L16", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Autopsy, self).__init__(installable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L16", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Wireshark, self).__init__(installable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L16", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(BulkExtractor, self).__init__([('GUI Mode (Download required)',"}, {"line_number": 3, "line_content": "        self.gui_mode), ('CLI Mode', self.cli_mode)], installable=False,"}, {"line_number": 4, "line_content": "        runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L42", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def gui_mode(self):"}, {"line_number": 2, "line_content": "    os.system('sudo git clone https://github.com/simsong/bulk_extractor.git')"}, {"line_number": 3, "line_content": "    os.system('ls src/ && cd .. && cd java_gui && ./BEViewer')"}, {"line_number": 4, "line_content": "    print("}, {"line_number": 5, "line_content": "        'If you getting error after clone go to /java_gui/src/ And Compile .Jar file && run ./BEViewer'"}, {"line_number": 6, "line_content": "        )"}, {"line_number": 7, "line_content": "    print("}, {"line_number": 8, "line_content": "        'Please Visit For More Details About Installation >> https://github.com/simsong/bulk_extractor'"}, {"line_number": 9, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L51", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def cli_mode(self):"}, {"line_number": 2, "line_content": "    os.system('sudo apt install bulk-extractor')"}, {"line_number": 3, "line_content": "    print('bulk_extractor and options')"}, {"line_number": 4, "line_content": "    os.system('bulk_extractor -h')"}, {"line_number": 5, "line_content": "    os.system("}, {"line_number": 6, "line_content": "        'echo \"bulk_extractor [options] imagefile\" | boxes -d headline | lolcat'"}, {"line_number": 7, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/forensic_tools.py#L16", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Toolsley, self).__init__(installable=False, runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/exploit_frameworks.py#L44", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Commix, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/other_tools.py#L26", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    site = input('Enter Site >> ')"}, {"line_number": 3, "line_content": "    os.chdir('HatCloud')"}, {"line_number": 4, "line_content": "    subprocess.run(['sudo', 'ruby', 'hatcloud.rb', '-b', site])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/xss_attack.py#L42", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def after_install(self):"}, {"line_number": 2, "line_content": "    print("}, {"line_number": 3, "line_content": "        \"\"\"\u001b[96m "}, {"line_number": 4, "line_content": "        Follow This Steps After Installation:-"}, {"line_number": 5, "line_content": "            \u001b[31m [*] Go To extended-xss-search directory,"}, {"line_number": 6, "line_content": "                and Rename the example.app-settings.conf to app-settings.conf"}, {"line_number": 7, "line_content": "        \"\"\""}, {"line_number": 8, "line_content": "        )"}, {"line_number": 9, "line_content": "    input('Press ENTER to continue')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/xss_attack.py#L50", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    print("}, {"line_number": 3, "line_content": "        \"\"\"\u001b[96m "}, {"line_number": 4, "line_content": "        You have To Add Links to scan"}, {"line_number": 5, "line_content": "        \u001b[31m[!] Go to extended-xss-search"}, {"line_number": 6, "line_content": "            [*] config/urls-to-test.txt"}, {"line_number": 7, "line_content": "            [!] python3 extended-xss-search.py"}, {"line_number": 8, "line_content": "        \"\"\""}, {"line_number": 9, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/xss_attack.py#L50", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    website = input('Enter Website >> ')"}, {"line_number": 3, "line_content": "    os.system('cd XSSCon;')"}, {"line_number": 4, "line_content": "    subprocess.run(['python3', 'xsscon.py', '-u', website])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/xss_attack.py#L50", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    os.system('cd XanXSS ;python xanxss.py -h')"}, {"line_number": 3, "line_content": "    print("}, {"line_number": 4, "line_content": "        '\\x1b[96m You Have to run it manually By Using\\n [!]python xanxss.py [Options]'"}, {"line_number": 5, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/xss_attack.py#L115", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(XSSStrike, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/anonsurf.py#L19", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(AnonymouslySurf, self).__init__([('Stop', self.stop)])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/anonsurf.py#L22", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def stop(self):"}, {"line_number": 2, "line_content": "    os.system('sudo anonsurf stop')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/anonsurf.py#L19", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Multitor, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/tool_manager.py#L13", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(UpdateTool, self).__init__([('Update System', self.update_sys), ("}, {"line_number": 3, "line_content": "        'Update Hackingtool', self.update_ht)], installable=False, runnable"}, {"line_number": 4, "line_content": "        =False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/tool_manager.py#L19", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def update_sys(self):"}, {"line_number": 2, "line_content": "    os.system('sudo apt update && sudo apt full-upgrade -y')"}, {"line_number": 3, "line_content": "    os.system("}, {"line_number": 4, "line_content": "        'sudo apt-get install tor openssl curl && sudo apt-get update tor openssl curl'"}, {"line_number": 5, "line_content": "        )"}, {"line_number": 6, "line_content": "    os.system('sudo apt-get install python3-pip')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/tool_manager.py#L25", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def update_ht(self):"}, {"line_number": 2, "line_content": "    os.system("}, {"line_number": 3, "line_content": "        'sudo chmod +x /etc/;sudo chmod +x /usr/share/doc;sudo rm -rf /usr/share/doc/hackingtool/;cd /etc/;sudo rm -rf /etc/hackingtool/;mkdir hackingtool;cd hackingtool;git clone https://github.com/Z4nzu/hackingtool.git;cd hackingtool;sudo chmod +x install.sh;./install.sh'"}, {"line_number": 4, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/tool_manager.py#L13", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(UninstallTool, self).__init__([('Uninstall', self.uninstall)],"}, {"line_number": 3, "line_content": "        installable=False, runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/tool_manager.py#L48", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def uninstall(self):"}, {"line_number": 2, "line_content": "    print('hackingtool started to uninstall..\\n')"}, {"line_number": 3, "line_content": "    sleep(1)"}, {"line_number": 4, "line_content": "    os.system("}, {"line_number": 5, "line_content": "        'sudo chmod +x /etc/;sudo chmod +x /usr/share/doc;sudo rm -rf /usr/share/doc/hackingtool/;cd /etc/;sudo rm -rf /etc/hackingtool/;'"}, {"line_number": 6, "line_content": "        )"}, {"line_number": 7, "line_content": "    print('\\nHackingtool Successfully Uninstalled..')"}, {"line_number": 8, "line_content": "    print('Happy Hacking..!!')"}, {"line_number": 9, "line_content": "    sleep(1)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/sql_tools.py#L42", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(SQLiScanner, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/sql_tools.py#L42", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Explo, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/sql_tools.py#L42", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Blisqy, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/payload_creator.py#L19", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(TheFatRat, self).__init__([('Update', self.update), ("}, {"line_number": 3, "line_content": "        'Troubleshoot', self.troubleshoot)])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/payload_creator.py#L25", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def update(self):"}, {"line_number": 2, "line_content": "    os.system("}, {"line_number": 3, "line_content": "        'cd TheFatRat && bash update && chmod +x setup.sh && bash setup.sh')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/payload_creator.py#L29", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def troubleshoot(self):"}, {"line_number": 2, "line_content": "    os.system('cd TheFatRat && sudo chmod +x chk_tools && ./chk_tools')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/payload_creator.py#L45", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def show_info(self):"}, {"line_number": 2, "line_content": "    super(Brutal, self).show_info()"}, {"line_number": 3, "line_content": "    print("}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "        [!] Requirement"}, {"line_number": 6, "line_content": "            >> Arduino Software (I used v1.6.7)"}, {"line_number": 7, "line_content": "            >> TeensyDuino"}, {"line_number": 8, "line_content": "            >> Linux udev rules"}, {"line_number": 9, "line_content": "            >> Copy and paste the PaensyLib folder inside your Arduino\\\\libraries"}, {"line_number": 10, "line_content": "    "}, {"line_number": 11, "line_content": "        [!] Kindly Visit below link for Installation for Arduino "}, {"line_number": 12, "line_content": "            >> https://github.com/Screetsec/Brutal/wiki/Install-Requirements "}, {"line_number": 13, "line_content": "        \"\"\""}, {"line_number": 14, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/webattack.py#L27", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Skipfish, self).__init__(installable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/webattack.py#L27", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(SubDomainTakeOver, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/webattack.py#L96", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    uinput = input('Enter Url >> ')"}, {"line_number": 3, "line_content": "    subprocess.run(['sudo', 'dirb', uinput])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/wireless_attack_tools.py#L38", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    os.system("}, {"line_number": 3, "line_content": "        \"\"\"echo \"1.> Put your interface into monitor mode using 'airmon-ng start {wireless interface}"}, {"line_number": 4, "line_content": "2.> wash -i {monitor-interface like mon0}'"}, {"line_number": 5, "line_content": "3.> reaver -i {monitor interface} -b {BSSID of router} -c {router channel} -vvv -K 1 -f\"| boxes -d boy\"\"\""}, {"line_number": 6, "line_content": "        )"}, {"line_number": 7, "line_content": "    print('You Have To Run Manually By USing >>pixiewps -h ')"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/socialmedia_finder.py#L28", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    os.system('cd social_mapper/setup')"}, {"line_number": 3, "line_content": "    os.system('sudo python social_mapper.py -h')"}, {"line_number": 4, "line_content": "    print("}, {"line_number": 5, "line_content": "        \"\"\"\u001b[95m "}, {"line_number": 6, "line_content": "                You have to set Username and password of your AC Or Any Fack Account"}, {"line_number": 7, "line_content": "                [#] Type in Terminal nano social_mapper.py"}, {"line_number": 8, "line_content": "        \"\"\""}, {"line_number": 9, "line_content": "        )"}, {"line_number": 10, "line_content": "    os.system("}, {"line_number": 11, "line_content": "        'echo \"python social_mapper.py -f [<imageFoldername>] -i [<imgFolderPath>] -m fast [<AcName>] -fb -tw\"| boxes | lolcat'"}, {"line_number": 12, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/socialmedia_finder.py#L28", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    name = input('Enter Username >> ')"}, {"line_number": 3, "line_content": "    os.chdir('sherlock')"}, {"line_number": 4, "line_content": "    subprocess.run(['sudo', 'python3', 'sherlock', f'{name}'])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/socialmedia_finder.py#L28", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    name = input("}, {"line_number": 3, "line_content": "        'Enter Username or Emailid (if both then please space between email & username) >> '"}, {"line_number": 4, "line_content": "        )"}, {"line_number": 5, "line_content": "    subprocess.run(['sudo', 'socialscan', f'{name}'])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/mix_tools.py#L13", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(TerminalMultiplexer, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/socialmedia.py#L18", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    name = input('Enter Username >> ')"}, {"line_number": 3, "line_content": "    wordlist = input('Enter wordword list >> ')"}, {"line_number": 4, "line_content": "    os.chdir('instaBrute')"}, {"line_number": 5, "line_content": "    subprocess.run(['sudo', 'python', 'instaBrute.py', '-u', f'{name}',"}, {"line_number": 6, "line_content": "        '-d', f'{wordlist}'])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/socialmedia.py#L18", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def run(self):"}, {"line_number": 2, "line_content": "    name = input('Enter Username >> ')"}, {"line_number": 3, "line_content": "    wordlist = input('Enter Wordlist >> ')"}, {"line_number": 4, "line_content": "    os.chdir('Brute_Force')"}, {"line_number": 5, "line_content": "    subprocess.run(['python3', 'Brute_Force.py', '-f', f'{name}', '-l',"}, {"line_number": 6, "line_content": "        f'{wordlist}'])"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/payload_injection.py#L25", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(Pixload, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/Z4nzu/hackingtool", "direct_link_to_file_line": "https://github.com/Z4nzu/hackingtool/blob/master/tools/others/web_crawling.py#L12", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    super(GoSpider, self).__init__(runnable=False)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/analytics/tests/test_activity_views.py#L11", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "@mock.patch('stripe.Customer.list', return_value=[])"}, {"line_number": 2, "line_content": "def test_activity(self, unused_mock: mock.Mock) ->None:"}, {"line_number": 3, "line_content": "    self.login('hamlet')"}, {"line_number": 4, "line_content": "    client, _ = Client.objects.get_or_create(name='website')"}, {"line_number": 5, "line_content": "    query = '/json/messages/flags'"}, {"line_number": 6, "line_content": "    last_visit = timezone_now()"}, {"line_number": 7, "line_content": "    count = 150"}, {"line_number": 8, "line_content": "    for activity_user_profile in UserProfile.objects.all():"}, {"line_number": 9, "line_content": "        UserActivity.objects.get_or_create(user_profile="}, {"line_number": 10, "line_content": "            activity_user_profile, client=client, query=query, count=count,"}, {"line_number": 11, "line_content": "            last_visit=last_visit)"}, {"line_number": 12, "line_content": "    result = self.client_get('/activity')"}, {"line_number": 13, "line_content": "    self.assertEqual(result.status_code, 302)"}, {"line_number": 14, "line_content": "    user_profile = self.example_user('hamlet')"}, {"line_number": 15, "line_content": "    user_profile.is_staff = True"}, {"line_number": 16, "line_content": "    user_profile.save(update_fields=['is_staff'])"}, {"line_number": 17, "line_content": "    flush_per_request_caches()"}, {"line_number": 18, "line_content": "    with queries_captured() as queries:"}, {"line_number": 19, "line_content": "        result = self.client_get('/activity')"}, {"line_number": 20, "line_content": "        self.assertEqual(result.status_code, 200)"}, {"line_number": 21, "line_content": "    self.assert_length(queries, 19)"}, {"line_number": 22, "line_content": "    flush_per_request_caches()"}, {"line_number": 23, "line_content": "    with queries_captured() as queries:"}, {"line_number": 24, "line_content": "        result = self.client_get('/realm_activity/zulip/')"}, {"line_number": 25, "line_content": "        self.assertEqual(result.status_code, 200)"}, {"line_number": 26, "line_content": "    self.assert_length(queries, 8)"}, {"line_number": 27, "line_content": "    iago = self.example_user('iago')"}, {"line_number": 28, "line_content": "    flush_per_request_caches()"}, {"line_number": 29, "line_content": "    with queries_captured() as queries:"}, {"line_number": 30, "line_content": "        result = self.client_get(f'/user_activity/{iago.id}/')"}, {"line_number": 31, "line_content": "        self.assertEqual(result.status_code, 200)"}, {"line_number": 32, "line_content": "    self.assert_length(queries, 5)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zproject/config.py#L21", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def get_secret(key: str, default_value: str, development_only: bool=False"}, {"line_number": 3, "line_content": "    ) ->str:"}, {"line_number": 4, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zproject/config.py#L21", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def get_secret(key: str, default_value: Optional[str]=None,"}, {"line_number": 3, "line_content": "    development_only: bool=False) ->Optional[str]:"}, {"line_number": 4, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/solano/view.py#L22", "contents": {"total_lines": 38, "lines": [{"line_number": 1, "line_content": "@webhook_view('SolanoLabs', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_solano_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    event = payload.get('event')"}, {"line_number": 6, "line_content": "    topic = 'build update'"}, {"line_number": 7, "line_content": "    if event == 'test':"}, {"line_number": 8, "line_content": "        return handle_test_event(request, user_profile, topic)"}, {"line_number": 9, "line_content": "    try:"}, {"line_number": 10, "line_content": "        author = payload['committers'][0]"}, {"line_number": 11, "line_content": "    except KeyError:"}, {"line_number": 12, "line_content": "        author = 'Unknown'"}, {"line_number": 13, "line_content": "    status = payload['status']"}, {"line_number": 14, "line_content": "    build_log = payload['url']"}, {"line_number": 15, "line_content": "    repository = payload['repository']['url']"}, {"line_number": 16, "line_content": "    commit_id = payload['commit_id']"}, {"line_number": 17, "line_content": "    good_status = ['passed']"}, {"line_number": 18, "line_content": "    bad_status = ['failed', 'error']"}, {"line_number": 19, "line_content": "    neutral_status = ['running']"}, {"line_number": 20, "line_content": "    emoji = ''"}, {"line_number": 21, "line_content": "    if status in good_status:"}, {"line_number": 22, "line_content": "        emoji = ':thumbs_up:'"}, {"line_number": 23, "line_content": "    elif status in bad_status:"}, {"line_number": 24, "line_content": "        emoji = ':thumbs_down:'"}, {"line_number": 25, "line_content": "    elif status in neutral_status:"}, {"line_number": 26, "line_content": "        emoji = ':arrows_counterclockwise:'"}, {"line_number": 27, "line_content": "    commit_url = repository.split('@')[1]"}, {"line_number": 28, "line_content": "    if 'github' in repository:"}, {"line_number": 29, "line_content": "        commit_url += f'/commit/{commit_id}'"}, {"line_number": 30, "line_content": "    elif 'bitbucket' in repository:"}, {"line_number": 31, "line_content": "        commit_url += f'/commits/{commit_id}'"}, {"line_number": 32, "line_content": "    elif 'gitlab' in repository:"}, {"line_number": 33, "line_content": "        commit_url += f'/pipelines/{commit_id}'"}, {"line_number": 34, "line_content": "    body = MESSAGE_TEMPLATE.format(author=author, build_log_url=build_log,"}, {"line_number": 35, "line_content": "        commit_id=commit_id[:7], commit_url=commit_url, status=status,"}, {"line_number": 36, "line_content": "        emoji=emoji)"}, {"line_number": 37, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, event)"}, {"line_number": 38, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/insping/view.py#L20", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@webhook_view('Insping')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_insping_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Dict[str, Any]]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    data = payload['webhook_event_data']"}, {"line_number": 7, "line_content": "    state_name = data['check_state_name']"}, {"line_number": 8, "line_content": "    url_tested = data['request_url']"}, {"line_number": 9, "line_content": "    response_time = data['response_time']"}, {"line_number": 10, "line_content": "    timestamp = data['request_start_time']"}, {"line_number": 11, "line_content": "    time_formatted = time.strftime('%c', time.strptime(timestamp,"}, {"line_number": 12, "line_content": "        '%Y-%m-%dT%H:%M:%S.%f+00:00'))"}, {"line_number": 13, "line_content": "    body = MESSAGE_TEMPLATE.format(state=state_name, url=url_tested,"}, {"line_number": 14, "line_content": "        response_time=response_time, timestamp=time_formatted)"}, {"line_number": 15, "line_content": "    topic = 'insping'"}, {"line_number": 16, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 17, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/homeassistant/view.py#L12", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('HomeAssistant')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_homeassistant_webhook(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, payload: Dict[str, str]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    body = payload['message']"}, {"line_number": 7, "line_content": "    if 'topic' in payload:"}, {"line_number": 8, "line_content": "        topic = payload['topic']"}, {"line_number": 9, "line_content": "    else:"}, {"line_number": 10, "line_content": "        topic = 'homeassistant'"}, {"line_number": 11, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/travis/view.py#L27", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "@webhook_view('Travis', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_travis_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    ignore_pull_requests: bool=REQ(json_validator=check_bool, default=True),"}, {"line_number": 5, "line_content": "    message: Dict[str, object]=REQ('payload', json_validator=check_dict([("}, {"line_number": 6, "line_content": "    'author_name', check_string), ('status_message', check_string), ("}, {"line_number": 7, "line_content": "    'compare_url', check_string)]))) ->HttpResponse:"}, {"line_number": 8, "line_content": "    event = str(message['type'])"}, {"line_number": 9, "line_content": "    message_status = message['status_message']"}, {"line_number": 10, "line_content": "    if ignore_pull_requests and message['type'] == 'pull_request':"}, {"line_number": 11, "line_content": "        return json_success(request)"}, {"line_number": 12, "line_content": "    if message_status in GOOD_STATUSES:"}, {"line_number": 13, "line_content": "        emoji = ':thumbs_up:'"}, {"line_number": 14, "line_content": "    elif message_status in BAD_STATUSES:"}, {"line_number": 15, "line_content": "        emoji = ':thumbs_down:'"}, {"line_number": 16, "line_content": "    elif message_status in PENDING_STATUSES:"}, {"line_number": 17, "line_content": "        emoji = ':counterclockwise:'"}, {"line_number": 18, "line_content": "    else:"}, {"line_number": 19, "line_content": "        emoji = f\"(No emoji specified for status '{message_status}'.)\""}, {"line_number": 20, "line_content": "    body = MESSAGE_TEMPLATE.format(message['author_name'], message_status,"}, {"line_number": 21, "line_content": "        emoji, message['compare_url'], message['build_url'])"}, {"line_number": 22, "line_content": "    topic = 'builds'"}, {"line_number": 23, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, event)"}, {"line_number": 24, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/slack_incoming/view.py#L18", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "@webhook_view('SlackIncoming')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_slack_incoming_webhook(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, user_specified_topic: Optional[str]=REQ('topic', default="}, {"line_number": 5, "line_content": "    None), payload: Optional[Dict[str, Any]]=REQ('payload', json_validator="}, {"line_number": 6, "line_content": "    check_dict(), default=None)) ->HttpResponse:"}, {"line_number": 7, "line_content": "    if payload is None:"}, {"line_number": 8, "line_content": "        try:"}, {"line_number": 9, "line_content": "            payload = orjson.loads(request.body)"}, {"line_number": 10, "line_content": "        except orjson.JSONDecodeError:"}, {"line_number": 11, "line_content": "            raise InvalidJSONError(_('Malformed JSON'))"}, {"line_number": 12, "line_content": "    if user_specified_topic is None and 'channel' in payload:"}, {"line_number": 13, "line_content": "        user_specified_topic = re.sub('^[@#]', '', payload['channel'])"}, {"line_number": 14, "line_content": "    if user_specified_topic is None:"}, {"line_number": 15, "line_content": "        user_specified_topic = '(no topic)'"}, {"line_number": 16, "line_content": "    body = ''"}, {"line_number": 17, "line_content": "    if 'blocks' in payload:"}, {"line_number": 18, "line_content": "        for block in payload['blocks']:"}, {"line_number": 19, "line_content": "            body = add_block(block, body)"}, {"line_number": 20, "line_content": "    if 'attachments' in payload:"}, {"line_number": 21, "line_content": "        for attachment in payload['attachments']:"}, {"line_number": 22, "line_content": "            body = add_attachment(attachment, body)"}, {"line_number": 23, "line_content": "    if body == '' and 'text' in payload and payload['text'] is not None:"}, {"line_number": 24, "line_content": "        body += payload['text']"}, {"line_number": 25, "line_content": "        if 'icon_emoji' in payload and payload['icon_emoji'] is not None:"}, {"line_number": 26, "line_content": "            body = '{} {}'.format(payload['icon_emoji'], body)"}, {"line_number": 27, "line_content": "    if body != '':"}, {"line_number": 28, "line_content": "        body = replace_formatting(replace_links(body).strip())"}, {"line_number": 29, "line_content": "        check_send_webhook_message(request, user_profile,"}, {"line_number": 30, "line_content": "            user_specified_topic, body)"}, {"line_number": 31, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/slack/view.py#L16", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "@webhook_view('Slack', notify_bot_owner_on_invalid_json=False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_slack_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    user_name: str=REQ(), text: str=REQ(), channel_name: str=REQ(), stream:"}, {"line_number": 5, "line_content": "    str=REQ(default='slack'), channels_map_to_topics: str=REQ(default='1')"}, {"line_number": 6, "line_content": "    ) ->HttpResponse:"}, {"line_number": 7, "line_content": "    if channels_map_to_topics not in list(VALID_OPTIONS.values()):"}, {"line_number": 8, "line_content": "        raise JsonableError(_("}, {"line_number": 9, "line_content": "            'Error: channels_map_to_topics parameter other than 0 or 1'))"}, {"line_number": 10, "line_content": "    if channels_map_to_topics == VALID_OPTIONS['SHOULD_BE_MAPPED']:"}, {"line_number": 11, "line_content": "        subject = f'channel: {channel_name}'"}, {"line_number": 12, "line_content": "    else:"}, {"line_number": 13, "line_content": "        stream = channel_name"}, {"line_number": 14, "line_content": "        subject = _('Message from Slack')"}, {"line_number": 15, "line_content": "    content = ZULIP_MESSAGE_TEMPLATE.format(message_sender=user_name, text=text"}, {"line_number": 16, "line_content": "        )"}, {"line_number": 17, "line_content": "    client = RequestNotes.get_notes(request).client"}, {"line_number": 18, "line_content": "    assert client is not None"}, {"line_number": 19, "line_content": "    check_send_stream_message(user_profile, client, stream, subject, content)"}, {"line_number": 20, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/yo/view.py#L13", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('Yo', notify_bot_owner_on_invalid_json=False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_yo_app_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    email: str=REQ(default=''), username: str=REQ(default='Yo Bot'), topic:"}, {"line_number": 5, "line_content": "    Optional[str]=REQ(default=None), user_ip: Optional[str]=REQ(default=None)"}, {"line_number": 6, "line_content": "    ) ->HttpResponse:"}, {"line_number": 7, "line_content": "    body = f'Yo from {username}'"}, {"line_number": 8, "line_content": "    receiving_user = get_user(email, user_profile.realm)"}, {"line_number": 9, "line_content": "    client = RequestNotes.get_notes(request).client"}, {"line_number": 10, "line_content": "    assert client is not None"}, {"line_number": 11, "line_content": "    check_send_private_message(user_profile, client, receiving_user, body)"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/gocd/view.py#L21", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "@webhook_view('Gocd')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_gocd_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    modifications = payload['build_cause']['material_revisions'][0]["}, {"line_number": 6, "line_content": "        'modifications'][0]"}, {"line_number": 7, "line_content": "    result = payload['stages'][0]['result']"}, {"line_number": 8, "line_content": "    material = payload['build_cause']['material_revisions'][0]['material']"}, {"line_number": 9, "line_content": "    if result == 'Passed':"}, {"line_number": 10, "line_content": "        emoji = ':thumbs_up:'"}, {"line_number": 11, "line_content": "    elif result == 'Failed':"}, {"line_number": 12, "line_content": "        emoji = ':thumbs_down:'"}, {"line_number": 13, "line_content": "    build_details_file = os.path.join(os.path.dirname(__file__),"}, {"line_number": 14, "line_content": "        'fixtures/build_details.json')"}, {"line_number": 15, "line_content": "    with open(build_details_file) as f:"}, {"line_number": 16, "line_content": "        contents = json.load(f)"}, {"line_number": 17, "line_content": "        build_link = contents['build_details']['_links']['pipeline']['href']"}, {"line_number": 18, "line_content": "    body = MESSAGE_TEMPLATE.format(modifications['user_name'], result,"}, {"line_number": 19, "line_content": "        emoji, build_link, modifications['comment'])"}, {"line_number": 20, "line_content": "    branch = material['description'].split(',')"}, {"line_number": 21, "line_content": "    topic = branch[0].split(' ')[1]"}, {"line_number": 22, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 23, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/pingdom/view.py#L42", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@webhook_view('Pingdom', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_pingdom_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    check_type = get_check_type(payload)"}, {"line_number": 6, "line_content": "    if check_type in SUPPORTED_CHECK_TYPES:"}, {"line_number": 7, "line_content": "        subject = get_subject_for_http_request(payload)"}, {"line_number": 8, "line_content": "        body = get_body_for_http_request(payload)"}, {"line_number": 9, "line_content": "    else:"}, {"line_number": 10, "line_content": "        raise UnsupportedWebhookEventType(check_type)"}, {"line_number": 11, "line_content": "    check_send_webhook_message(request, user_profile, subject, body, check_type"}, {"line_number": 12, "line_content": "        )"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/freshping/view.py#L22", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Freshping', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_freshping_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 6, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 7, "line_content": "    check_send_webhook_message(request, user_profile, subject, body,"}, {"line_number": 8, "line_content": "        payload['webhook_event_data']['check_state_name'])"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/alertmanager/view.py#L14", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "@webhook_view('Alertmanager')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_alertmanager_webhook(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, payload: WildValue=REQ(argument_type='body', converter="}, {"line_number": 5, "line_content": "    to_wild_value), name_field: str=REQ('name', default='instance'),"}, {"line_number": 6, "line_content": "    desc_field: str=REQ('desc', default='alertname')) ->HttpResponse:"}, {"line_number": 7, "line_content": "    topics: Dict[str, Dict[str, List[str]]] = {}"}, {"line_number": 8, "line_content": "    for alert in payload['alerts']:"}, {"line_number": 9, "line_content": "        labels = alert.get('labels', {})"}, {"line_number": 10, "line_content": "        annotations = alert.get('annotations', {})"}, {"line_number": 11, "line_content": "        name = labels.get(name_field, annotations.get(name_field, '(unknown)')"}, {"line_number": 12, "line_content": "            ).tame(check_string)"}, {"line_number": 13, "line_content": "        desc = labels.get(desc_field, annotations.get(desc_field,"}, {"line_number": 14, "line_content": "            f'<missing field: {desc_field}>')).tame(check_string)"}, {"line_number": 15, "line_content": "        url = alert['generatorURL'].tame(check_string).replace('tab=1', 'tab=0'"}, {"line_number": 16, "line_content": "            )"}, {"line_number": 17, "line_content": "        body = f'{desc} ([graph]({url}))'"}, {"line_number": 18, "line_content": "        if name not in topics:"}, {"line_number": 19, "line_content": "            topics[name] = {'firing': [], 'resolved': []}"}, {"line_number": 20, "line_content": "        topics[name][alert['status'].tame(check_string)].append(body)"}, {"line_number": 21, "line_content": "    for topic, statuses in topics.items():"}, {"line_number": 22, "line_content": "        for status, messages in statuses.items():"}, {"line_number": 23, "line_content": "            if len(messages) == 0:"}, {"line_number": 24, "line_content": "                continue"}, {"line_number": 25, "line_content": "            if status == 'firing':"}, {"line_number": 26, "line_content": "                icon = ':alert:'"}, {"line_number": 27, "line_content": "                title = 'FIRING'"}, {"line_number": 28, "line_content": "            else:"}, {"line_number": 29, "line_content": "                title = 'Resolved'"}, {"line_number": 30, "line_content": "                icon = ':squared_ok:'"}, {"line_number": 31, "line_content": "            if len(messages) == 1:"}, {"line_number": 32, "line_content": "                body = f'{icon} **{title}** {messages[0]}'"}, {"line_number": 33, "line_content": "            else:"}, {"line_number": 34, "line_content": "                message_list = '\\n'.join(f'* {m}' for m in messages)"}, {"line_number": 35, "line_content": "                body = f'{icon} **{title}**\\n{message_list}'"}, {"line_number": 36, "line_content": "            check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 37, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/freshstatus/view.py#L79", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@webhook_view('Freshstatus', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_freshstatus_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    try:"}, {"line_number": 6, "line_content": "        body = get_body_for_http_request(payload)"}, {"line_number": 7, "line_content": "        subject = get_subject_for_http_request(payload)"}, {"line_number": 8, "line_content": "    except KeyError:"}, {"line_number": 9, "line_content": "        message = MISCONFIGURED_PAYLOAD_ERROR_MESSAGE.format(bot_name="}, {"line_number": 10, "line_content": "            user_profile.full_name, support_email=FromAddress.SUPPORT).strip()"}, {"line_number": 11, "line_content": "        send_rate_limited_pm_notification_to_bot_owner(user_profile,"}, {"line_number": 12, "line_content": "            user_profile.realm, message)"}, {"line_number": 13, "line_content": "        raise JsonableError(_('Invalid payload'))"}, {"line_number": 14, "line_content": "    check_send_webhook_message(request, user_profile, subject, body,"}, {"line_number": 15, "line_content": "        payload['event_data']['event_type'])"}, {"line_number": 16, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/ifttt/view.py#L14", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "@webhook_view('IFTTT')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_iftt_app_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    topic = payload.get('topic')"}, {"line_number": 6, "line_content": "    content = payload.get('content')"}, {"line_number": 7, "line_content": "    if topic is None:"}, {"line_number": 8, "line_content": "        topic = payload.get('subject')"}, {"line_number": 9, "line_content": "        if topic is None:"}, {"line_number": 10, "line_content": "            raise JsonableError(_(\"Topic can't be empty\"))"}, {"line_number": 11, "line_content": "    if content is None:"}, {"line_number": 12, "line_content": "        raise JsonableError(_(\"Content can't be empty\"))"}, {"line_number": 13, "line_content": "    if not isinstance(topic, str):"}, {"line_number": 14, "line_content": "        raise JsonableError(_('Topic must be a string'))"}, {"line_number": 15, "line_content": "    if not isinstance(content, str):"}, {"line_number": 16, "line_content": "        raise JsonableError(_('Content must be a string'))"}, {"line_number": 17, "line_content": "    check_send_webhook_message(request, user_profile, topic, content)"}, {"line_number": 18, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/opencollective/view.py#L15", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@webhook_view('OpenCollective')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_opencollective_webhook(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, payload: Dict[str, Any]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    name = get_name(payload)"}, {"line_number": 7, "line_content": "    amount = get_amount(payload)"}, {"line_number": 8, "line_content": "    body = ''"}, {"line_number": 9, "line_content": "    if name == 'Incognito':"}, {"line_number": 10, "line_content": "        body = f'An **Incognito** member donated **{amount}**! :tada:'"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        body = f'@_**{name}** donated **{amount}**! :tada:'"}, {"line_number": 13, "line_content": "    topic = 'New Member'"}, {"line_number": 14, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 15, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/errbit/view.py#L15", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@webhook_view('Errbit')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_errbit_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    subject = get_subject(payload)"}, {"line_number": 6, "line_content": "    body = get_body(payload)"}, {"line_number": 7, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/opsgenie/view.py#L29", "contents": {"total_lines": 48, "lines": [{"line_number": 1, "line_content": "@webhook_view('Opsgenie', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_opsgenie_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    info = {'additional_info': '', 'alert_type': payload['action'],"}, {"line_number": 6, "line_content": "        'alert_id': payload['alert']['alertId'], 'integration_name':"}, {"line_number": 7, "line_content": "        payload['integrationName'], 'tags': ', '.join('`' + tag + '`' for"}, {"line_number": 8, "line_content": "        tag in payload['alert'].get('tags', []))}"}, {"line_number": 9, "line_content": "    topic = info['integration_name']"}, {"line_number": 10, "line_content": "    bullet_template = '* **{key}**: {value}\\n'"}, {"line_number": 11, "line_content": "    if 'note' in payload['alert']:"}, {"line_number": 12, "line_content": "        info['additional_info'] += bullet_template.format(key='Note', value"}, {"line_number": 13, "line_content": "            =payload['alert']['note'])"}, {"line_number": 14, "line_content": "    if 'recipient' in payload['alert']:"}, {"line_number": 15, "line_content": "        info['additional_info'] += bullet_template.format(key='Recipient',"}, {"line_number": 16, "line_content": "            value=payload['alert']['recipient'])"}, {"line_number": 17, "line_content": "    if 'addedTags' in payload['alert']:"}, {"line_number": 18, "line_content": "        info['additional_info'] += bullet_template.format(key='Tags added',"}, {"line_number": 19, "line_content": "            value=payload['alert']['addedTags'])"}, {"line_number": 20, "line_content": "    if 'team' in payload['alert']:"}, {"line_number": 21, "line_content": "        info['additional_info'] += bullet_template.format(key='Team added',"}, {"line_number": 22, "line_content": "            value=payload['alert']['team'])"}, {"line_number": 23, "line_content": "    if 'owner' in payload['alert']:"}, {"line_number": 24, "line_content": "        info['additional_info'] += bullet_template.format(key="}, {"line_number": 25, "line_content": "            'Assigned owner', value=payload['alert']['owner'])"}, {"line_number": 26, "line_content": "    if 'escalationName' in payload:"}, {"line_number": 27, "line_content": "        info['additional_info'] += bullet_template.format(key='Escalation',"}, {"line_number": 28, "line_content": "            value=payload['escalationName'])"}, {"line_number": 29, "line_content": "    if 'removedTags' in payload['alert']:"}, {"line_number": 30, "line_content": "        info['additional_info'] += bullet_template.format(key="}, {"line_number": 31, "line_content": "            'Tags removed', value=payload['alert']['removedTags'])"}, {"line_number": 32, "line_content": "    if 'message' in payload['alert']:"}, {"line_number": 33, "line_content": "        info['additional_info'] += bullet_template.format(key='Message',"}, {"line_number": 34, "line_content": "            value=payload['alert']['message'])"}, {"line_number": 35, "line_content": "    if info['tags']:"}, {"line_number": 36, "line_content": "        info['additional_info'] += bullet_template.format(key='Tags', value"}, {"line_number": 37, "line_content": "            =info['tags'])"}, {"line_number": 38, "line_content": "    body_template = ("}, {"line_number": 39, "line_content": "        \"\"\""}, {"line_number": 40, "line_content": "[Opsgenie alert for {integration_name}](https://app.opsgenie.com/alert/V2#/show/{alert_id}):"}, {"line_number": 41, "line_content": "* **Type**: {alert_type}"}, {"line_number": 42, "line_content": "{additional_info}"}, {"line_number": 43, "line_content": "\"\"\""}, {"line_number": 44, "line_content": "        .strip())"}, {"line_number": 45, "line_content": "    body = body_template.format(**info)"}, {"line_number": 46, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, info["}, {"line_number": 47, "line_content": "        'alert_type'])"}, {"line_number": 48, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/uptimerobot/view.py#L34", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "@webhook_view('UptimeRobot', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_uptimerobot_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if payload['alert_type_friendly_name'] == 'Up':"}, {"line_number": 6, "line_content": "        event = 'up'"}, {"line_number": 7, "line_content": "    elif payload['alert_type_friendly_name'] == 'Down':"}, {"line_number": 8, "line_content": "        event = 'down'"}, {"line_number": 9, "line_content": "    try:"}, {"line_number": 10, "line_content": "        body = get_body_for_http_request(payload)"}, {"line_number": 11, "line_content": "        subject = get_subject_for_http_request(payload)"}, {"line_number": 12, "line_content": "    except KeyError:"}, {"line_number": 13, "line_content": "        message = MISCONFIGURED_PAYLOAD_ERROR_MESSAGE.format(bot_name="}, {"line_number": 14, "line_content": "            user_profile.full_name, support_email=FromAddress.SUPPORT).strip()"}, {"line_number": 15, "line_content": "        send_rate_limited_pm_notification_to_bot_owner(user_profile,"}, {"line_number": 16, "line_content": "            user_profile.realm, message)"}, {"line_number": 17, "line_content": "        raise JsonableError(_('Invalid payload'))"}, {"line_number": 18, "line_content": "    check_send_webhook_message(request, user_profile, subject, body, event)"}, {"line_number": 19, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/beeminder/tests.py#L11", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@patch('zerver.webhooks.beeminder.view.time.time')"}, {"line_number": 2, "line_content": "def test_beeminder_derail(self, time: MagicMock) ->None:"}, {"line_number": 3, "line_content": "    time.return_value = 1517739100"}, {"line_number": 4, "line_content": "    expected_topic = 'beekeeper'"}, {"line_number": 5, "line_content": "    expected_message = ("}, {"line_number": 6, "line_content": "        \"\"\""}, {"line_number": 7, "line_content": "You are going to derail from goal **gainweight** in **5.6 hours**. You need **+2 in 7 days (60)** to avoid derailing."}, {"line_number": 8, "line_content": "* Pledge: **0$** :relieved:"}, {"line_number": 9, "line_content": "\"\"\""}, {"line_number": 10, "line_content": "        .strip())"}, {"line_number": 11, "line_content": "    self.check_webhook('derail', expected_topic, expected_message,"}, {"line_number": 12, "line_content": "        content_type='application/x-www-form-urlencoded')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/beeminder/tests.py#L11", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@patch('zerver.webhooks.beeminder.view.time.time')"}, {"line_number": 2, "line_content": "def test_beeminder_derail_worried(self, time: MagicMock) ->None:"}, {"line_number": 3, "line_content": "    time.return_value = 1517739100"}, {"line_number": 4, "line_content": "    expected_topic = 'beekeeper'"}, {"line_number": 5, "line_content": "    expected_message = ("}, {"line_number": 6, "line_content": "        \"\"\""}, {"line_number": 7, "line_content": "You are going to derail from goal **gainweight** in **5.6 hours**. You need **+2 in 7 days (60)** to avoid derailing."}, {"line_number": 8, "line_content": "* Pledge: **5$** :worried:"}, {"line_number": 9, "line_content": "\"\"\""}, {"line_number": 10, "line_content": "        .strip())"}, {"line_number": 11, "line_content": "    self.check_webhook('derail_worried', expected_topic, expected_message,"}, {"line_number": 12, "line_content": "        content_type='application/json')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/stripe/view.py#L48", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('Stripe', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_stripe_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body'), stream: str=REQ("}, {"line_number": 5, "line_content": "    default='test')) ->HttpResponse:"}, {"line_number": 6, "line_content": "    try:"}, {"line_number": 7, "line_content": "        topic, body = topic_and_body(payload)"}, {"line_number": 8, "line_content": "    except SuppressedEvent:"}, {"line_number": 9, "line_content": "        return json_success(request)"}, {"line_number": 10, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, payload["}, {"line_number": 11, "line_content": "        'type'])"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/librato/view.py#L161", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "@webhook_view('Librato')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_librato_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(json_validator=check_dict(), default={})"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    try:"}, {"line_number": 7, "line_content": "        attachments = orjson.loads(request.body).get('attachments', [])"}, {"line_number": 8, "line_content": "    except orjson.JSONDecodeError:"}, {"line_number": 9, "line_content": "        attachments = []"}, {"line_number": 10, "line_content": "    if not attachments and not payload:"}, {"line_number": 11, "line_content": "        raise JsonableError(_('Malformed JSON input'))"}, {"line_number": 12, "line_content": "    message_handler = LibratoWebhookHandler(payload, attachments)"}, {"line_number": 13, "line_content": "    topic = message_handler.generate_topic()"}, {"line_number": 14, "line_content": "    try:"}, {"line_number": 15, "line_content": "        content = message_handler.handle()"}, {"line_number": 16, "line_content": "    except Exception as e:"}, {"line_number": 17, "line_content": "        raise JsonableError(str(e))"}, {"line_number": 18, "line_content": "    check_send_webhook_message(request, user_profile, topic, content)"}, {"line_number": 19, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/appveyor/view.py#L19", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Appveyor')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_appveyor_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 7, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 8, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/deskdotcom/view.py#L16", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@authenticated_rest_api_view(webhook_client_name='Desk')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_deskdotcom_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    data: str=REQ()) ->HttpResponse:"}, {"line_number": 5, "line_content": "    topic = 'Desk.com notification'"}, {"line_number": 6, "line_content": "    check_send_webhook_message(request, user_profile, topic, data)"}, {"line_number": 7, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/grafana/view.py#L22", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "@webhook_view('Grafana', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_grafana_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    topic = GRAFANA_TOPIC_TEMPLATE.format(alert_title=payload['title'])"}, {"line_number": 6, "line_content": "    eval_matches_text = ''"}, {"line_number": 7, "line_content": "    eval_matches = payload.get('evalMatches')"}, {"line_number": 8, "line_content": "    if eval_matches is not None:"}, {"line_number": 9, "line_content": "        for match in eval_matches:"}, {"line_number": 10, "line_content": "            eval_matches_text += '**{}:** {}\\n'.format(match['metric'],"}, {"line_number": 11, "line_content": "                match['value'])"}, {"line_number": 12, "line_content": "    message_text = ''"}, {"line_number": 13, "line_content": "    if payload.get('message') is not None:"}, {"line_number": 14, "line_content": "        message_text = payload['message'] + '\\n\\n'"}, {"line_number": 15, "line_content": "    if payload.get('state') is not None:"}, {"line_number": 16, "line_content": "        if payload.get('state') == 'alerting':"}, {"line_number": 17, "line_content": "            alert_status = GRAFANA_ALERT_STATUS_TEMPLATE.format(alert_icon="}, {"line_number": 18, "line_content": "                ':alert:', alert_state=payload['state'].upper())"}, {"line_number": 19, "line_content": "        elif payload.get('state') == 'ok':"}, {"line_number": 20, "line_content": "            alert_status = GRAFANA_ALERT_STATUS_TEMPLATE.format(alert_icon="}, {"line_number": 21, "line_content": "                ':squared_ok:', alert_state=payload['state'].upper())"}, {"line_number": 22, "line_content": "        else:"}, {"line_number": 23, "line_content": "            alert_status = GRAFANA_ALERT_STATUS_TEMPLATE.format(alert_icon="}, {"line_number": 24, "line_content": "                ':info:', alert_state=payload['state'].upper())"}, {"line_number": 25, "line_content": "    body = GRAFANA_MESSAGE_TEMPLATE.format(alert_message=message_text,"}, {"line_number": 26, "line_content": "        alert_status=alert_status, rule_name=payload['ruleName'], rule_url="}, {"line_number": 27, "line_content": "        payload['ruleUrl'], eval_matches=eval_matches_text)"}, {"line_number": 28, "line_content": "    if payload.get('imageUrl') is not None:"}, {"line_number": 29, "line_content": "        body += '\\n[Click to view visualization]({visualization})'.format("}, {"line_number": 30, "line_content": "            visualization=payload['imageUrl'])"}, {"line_number": 31, "line_content": "    body = body.strip()"}, {"line_number": 32, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, payload."}, {"line_number": 33, "line_content": "        get('state'))"}, {"line_number": 34, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/splunk/view.py#L21", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@webhook_view('Splunk')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_splunk_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    search_name = payload.get('search_name', 'Missing search_name')"}, {"line_number": 6, "line_content": "    results_link = payload.get('results_link', 'Missing results_link')"}, {"line_number": 7, "line_content": "    host = payload.get('result', {}).get('host', 'Missing host')"}, {"line_number": 8, "line_content": "    source = payload.get('result', {}).get('source', 'Missing source')"}, {"line_number": 9, "line_content": "    raw = payload.get('result', {}).get('_raw', 'Missing _raw')"}, {"line_number": 10, "line_content": "    if len(search_name) >= MAX_TOPIC_NAME_LENGTH:"}, {"line_number": 11, "line_content": "        topic = f'{search_name[:MAX_TOPIC_NAME_LENGTH - 3]}...'"}, {"line_number": 12, "line_content": "    else:"}, {"line_number": 13, "line_content": "        topic = search_name"}, {"line_number": 14, "line_content": "    body = MESSAGE_TEMPLATE.format(search=search_name, link=results_link,"}, {"line_number": 15, "line_content": "        host=host, source=source, raw=raw)"}, {"line_number": 16, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 17, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/papertrail/view.py#L21", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "@webhook_view('Papertrail')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_papertrail_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(json_validator=check_dict([('events',"}, {"line_number": 5, "line_content": "    check_list(check_dict([]))), ('saved_search', check_dict([('name',"}, {"line_number": 6, "line_content": "    check_string), ('html_search_url', check_string)]))]))) ->HttpResponse:"}, {"line_number": 7, "line_content": "    matches = MATCHES_TEMPLATE.format(name=payload['saved_search']['name'],"}, {"line_number": 8, "line_content": "        url=payload['saved_search']['html_search_url'], number=str(len("}, {"line_number": 9, "line_content": "        payload['events'])))"}, {"line_number": 10, "line_content": "    message = [matches]"}, {"line_number": 11, "line_content": "    for i, event in enumerate(payload['events']):"}, {"line_number": 12, "line_content": "        event_text = SEARCH_TEMPLATE.format(timestamp=event["}, {"line_number": 13, "line_content": "            'display_received_at'], source=event['source_name'], query="}, {"line_number": 14, "line_content": "            payload['saved_search']['query'], message=event['message'])"}, {"line_number": 15, "line_content": "        message.append(event_text)"}, {"line_number": 16, "line_content": "        if i >= 3:"}, {"line_number": 17, "line_content": "            message.append('[See more]({})'.format(payload['saved_search']["}, {"line_number": 18, "line_content": "                'html_search_url']))"}, {"line_number": 19, "line_content": "            break"}, {"line_number": 20, "line_content": "    post = '\\n'.join(message)"}, {"line_number": 21, "line_content": "    topic = 'logs'"}, {"line_number": 22, "line_content": "    check_send_webhook_message(request, user_profile, topic, post)"}, {"line_number": 23, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/basecamp/view.py#L40", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "@webhook_view('Basecamp', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_basecamp_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    event = get_event_type(payload)"}, {"line_number": 7, "line_content": "    if event not in SUPPORT_EVENTS:"}, {"line_number": 8, "line_content": "        raise UnsupportedWebhookEventType(event)"}, {"line_number": 9, "line_content": "    subject = get_project_name(payload)"}, {"line_number": 10, "line_content": "    if event.startswith('document_'):"}, {"line_number": 11, "line_content": "        body = get_document_body(event, payload)"}, {"line_number": 12, "line_content": "        event = 'document'"}, {"line_number": 13, "line_content": "    elif event.startswith('question_answer_'):"}, {"line_number": 14, "line_content": "        body = get_questions_answer_body(event, payload)"}, {"line_number": 15, "line_content": "        event = 'question_answer'"}, {"line_number": 16, "line_content": "    elif event.startswith('question_'):"}, {"line_number": 17, "line_content": "        body = get_questions_body(event, payload)"}, {"line_number": 18, "line_content": "        event = 'question'"}, {"line_number": 19, "line_content": "    elif event.startswith('message_'):"}, {"line_number": 20, "line_content": "        body = get_message_body(event, payload)"}, {"line_number": 21, "line_content": "        event = 'message'"}, {"line_number": 22, "line_content": "    elif event.startswith('todolist_'):"}, {"line_number": 23, "line_content": "        body = get_todo_list_body(event, payload)"}, {"line_number": 24, "line_content": "        event = 'todolist'"}, {"line_number": 25, "line_content": "    elif event.startswith('todo_'):"}, {"line_number": 26, "line_content": "        body = get_todo_body(event, payload)"}, {"line_number": 27, "line_content": "        event = 'todo'"}, {"line_number": 28, "line_content": "    elif event.startswith('comment_'):"}, {"line_number": 29, "line_content": "        body = get_comment_body(event, payload)"}, {"line_number": 30, "line_content": "        event = 'comment'"}, {"line_number": 31, "line_content": "    else:"}, {"line_number": 32, "line_content": "        raise UnsupportedWebhookEventType(event)"}, {"line_number": 33, "line_content": "    check_send_webhook_message(request, user_profile, subject, body, event)"}, {"line_number": 34, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/semaphore/view.py#L92", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "@webhook_view('Semaphore', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_semaphore_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    content, project_name, branch_name, event = semaphore_classic(payload"}, {"line_number": 6, "line_content": "        ) if 'event' in payload else semaphore_2(payload)"}, {"line_number": 7, "line_content": "    subject = TOPIC_TEMPLATE.format(project=project_name, branch=branch_name"}, {"line_number": 8, "line_content": "        ) if branch_name else project_name"}, {"line_number": 9, "line_content": "    check_send_webhook_message(request, user_profile, subject, content, event)"}, {"line_number": 10, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/taiga/view.py#L20", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@webhook_view('Taiga')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_taiga_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    message: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    parsed_events = parse_message(message)"}, {"line_number": 6, "line_content": "    content_lines = []"}, {"line_number": 7, "line_content": "    for event in parsed_events:"}, {"line_number": 8, "line_content": "        content_lines.append(generate_content(event) + '\\n')"}, {"line_number": 9, "line_content": "    content = ''.join(sorted(content_lines))"}, {"line_number": 10, "line_content": "    topic = 'General'"}, {"line_number": 11, "line_content": "    if message['data'].get('milestone') is not None:"}, {"line_number": 12, "line_content": "        if message['data']['milestone'].get('name') is not None:"}, {"line_number": 13, "line_content": "            topic = message['data']['milestone']['name']"}, {"line_number": 14, "line_content": "    check_send_webhook_message(request, user_profile, topic, content)"}, {"line_number": 15, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/buildbot/view.py#L13", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('Buildbot', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_buildbot_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    topic = payload['project'].tame(check_string)"}, {"line_number": 7, "line_content": "    if not topic:"}, {"line_number": 8, "line_content": "        topic = 'general'"}, {"line_number": 9, "line_content": "    body = get_message(payload)"}, {"line_number": 10, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, payload["}, {"line_number": 11, "line_content": "        'event'].tame(check_string))"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/zabbix/view.py#L32", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@webhook_view('Zabbix')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_zabbix_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    try:"}, {"line_number": 6, "line_content": "        body = get_body_for_http_request(payload)"}, {"line_number": 7, "line_content": "        subject = get_subject_for_http_request(payload)"}, {"line_number": 8, "line_content": "    except KeyError:"}, {"line_number": 9, "line_content": "        message = MISCONFIGURED_PAYLOAD_ERROR_MESSAGE.format(bot_name="}, {"line_number": 10, "line_content": "            user_profile.full_name, support_email=FromAddress.SUPPORT).strip()"}, {"line_number": 11, "line_content": "        send_rate_limited_pm_notification_to_bot_owner(user_profile,"}, {"line_number": 12, "line_content": "            user_profile.realm, message)"}, {"line_number": 13, "line_content": "        raise JsonableError(_('Invalid payload'))"}, {"line_number": 14, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 15, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/netlify/view.py#L27", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "@webhook_view('Netlify', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_netlify_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Sequence[Dict[str, Any]]]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    message_template, event = get_template(request, payload)"}, {"line_number": 7, "line_content": "    body = message_template.format(build_name=payload['name'], build_url="}, {"line_number": 8, "line_content": "        payload['url'], branch_name=payload['branch'], state=payload['state'])"}, {"line_number": 9, "line_content": "    topic = '{topic}'.format(topic=payload['branch'])"}, {"line_number": 10, "line_content": "    check_send_webhook_message(request, user_profile, topic, body, event)"}, {"line_number": 11, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/bitbucket/view.py#L14", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "@authenticated_rest_api_view(webhook_client_name='Bitbucket')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_bitbucket_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(converter=to_wild_value), branches: Optional[str"}, {"line_number": 5, "line_content": "    ]=REQ(default=None)) ->HttpResponse:"}, {"line_number": 6, "line_content": "    repository = payload['repository']"}, {"line_number": 7, "line_content": "    commits = [{'name': commit['author'].tame(check_string) if 'author' in"}, {"line_number": 8, "line_content": "        commit else payload.get('user', 'Someone').tame(check_string),"}, {"line_number": 9, "line_content": "        'sha': commit['raw_node'].tame(check_string), 'message': commit["}, {"line_number": 10, "line_content": "        'message'].tame(check_string), 'url': '{}{}commits/{}'.format("}, {"line_number": 11, "line_content": "        payload['canon_url'].tame(check_string), repository['absolute_url']"}, {"line_number": 12, "line_content": "        .tame(check_string), commit['raw_node'].tame(check_string))} for"}, {"line_number": 13, "line_content": "        commit in payload['commits']]"}, {"line_number": 14, "line_content": "    if len(commits) == 0:"}, {"line_number": 15, "line_content": "        subject = repository['name'].tame(check_string)"}, {"line_number": 16, "line_content": "        content = '{} [force pushed]({}).'.format(payload.get('user',"}, {"line_number": 17, "line_content": "            'Someone').tame(check_string), payload['canon_url'].tame("}, {"line_number": 18, "line_content": "            check_string) + repository['absolute_url'].tame(check_string))"}, {"line_number": 19, "line_content": "    else:"}, {"line_number": 20, "line_content": "        branch = payload['commits'][-1]['branch'].tame(check_string)"}, {"line_number": 21, "line_content": "        if branches is not None and branches.find(branch) == -1:"}, {"line_number": 22, "line_content": "            return json_success(request)"}, {"line_number": 23, "line_content": "        committer = payload.get('user', 'Someone').tame(check_string)"}, {"line_number": 24, "line_content": "        content = get_push_commits_event_message(committer, None, branch,"}, {"line_number": 25, "line_content": "            commits)"}, {"line_number": 26, "line_content": "        subject = TOPIC_WITH_BRANCH_TEMPLATE.format(repo=repository['name']"}, {"line_number": 27, "line_content": "            .tame(check_string), branch=branch)"}, {"line_number": 28, "line_content": "    check_send_webhook_message(request, user_profile, subject, content,"}, {"line_number": 29, "line_content": "        unquote_url_parameters=True)"}, {"line_number": 30, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/jotform/view.py#L13", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@webhook_view('Jotform')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_jotform_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    topic = payload['formTitle']"}, {"line_number": 6, "line_content": "    submission_id = payload['submissionID']"}, {"line_number": 7, "line_content": "    fields_dict = list(payload['pretty'].split(', '))"}, {"line_number": 8, "line_content": "    form_response = f'A new submission (ID {submission_id}) was received:\\n'"}, {"line_number": 9, "line_content": "    for field in fields_dict:"}, {"line_number": 10, "line_content": "        form_response += f'* {field}\\n'"}, {"line_number": 11, "line_content": "    message = form_response.strip()"}, {"line_number": 12, "line_content": "    check_send_webhook_message(request, user_profile, topic, message)"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/raygun/view.py#L16", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "@webhook_view('Raygun', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_raygun_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    event = payload['event']"}, {"line_number": 6, "line_content": "    if event == 'error_notification':"}, {"line_number": 7, "line_content": "        message = compose_notification_message(payload)"}, {"line_number": 8, "line_content": "    elif event == 'error_activity':"}, {"line_number": 9, "line_content": "        message = compose_activity_message(payload)"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        raise UnsupportedWebhookEventType(event)"}, {"line_number": 12, "line_content": "    topic = 'test'"}, {"line_number": 13, "line_content": "    check_send_webhook_message(request, user_profile, topic, message, event)"}, {"line_number": 14, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/airbrake/view.py#L15", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Airbrake')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_airbrake_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    subject = get_subject(payload)"}, {"line_number": 7, "line_content": "    body = get_body(payload)"}, {"line_number": 8, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/crashlytics/view.py#L20", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "@webhook_view('Crashlytics')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_crashlytics_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    event = payload['event']"}, {"line_number": 7, "line_content": "    if event == VERIFICATION_EVENT:"}, {"line_number": 8, "line_content": "        subject = CRASHLYTICS_SETUP_TOPIC_TEMPLATE"}, {"line_number": 9, "line_content": "        body = CRASHLYTICS_SETUP_MESSAGE_TEMPLATE"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        issue_body = payload['payload']"}, {"line_number": 12, "line_content": "        subject = CRASHLYTICS_TOPIC_TEMPLATE.format(display_id=issue_body["}, {"line_number": 13, "line_content": "            'display_id'].tame(check_int), title=issue_body['title'].tame("}, {"line_number": 14, "line_content": "            check_string))"}, {"line_number": 15, "line_content": "        body = CRASHLYTICS_MESSAGE_TEMPLATE.format(impacted_devices_count="}, {"line_number": 16, "line_content": "            issue_body['impacted_devices_count'].tame(check_int), url="}, {"line_number": 17, "line_content": "            issue_body['url'].tame(check_string))"}, {"line_number": 18, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 19, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/sonarr/view.py#L42", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Sonarr', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_sonarr_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 6, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 7, "line_content": "    check_send_webhook_message(request, user_profile, subject, body,"}, {"line_number": 8, "line_content": "        payload['eventType'])"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/canarytoken/view.py#L14", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "@webhook_view('Canarytokens')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_canarytoken_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    message: WildValue=REQ(argument_type='body', converter=to_wild_value),"}, {"line_number": 5, "line_content": "    user_specified_topic: Optional[str]=REQ('topic', default=None)"}, {"line_number": 6, "line_content": "    ) ->HttpResponse:"}, {"line_number": 7, "line_content": "    \"\"\""}, {"line_number": 8, "line_content": "    Construct a response to a webhook event from a Thinkst canarytoken from"}, {"line_number": 9, "line_content": "    canarytokens.org. Canarytokens from Thinkst's paid product have a different"}, {"line_number": 10, "line_content": "    schema and should use the \"thinkst\" integration. See linked documentation"}, {"line_number": 11, "line_content": "    below for a schema:"}, {"line_number": 12, "line_content": "    https://help.canary.tools/hc/en-gb/articles/360002426577-How-do-I-configure-notifications-for-a-Generic-Webhook-"}, {"line_number": 13, "line_content": "    \"\"\""}, {"line_number": 14, "line_content": "    topic = 'canarytoken alert'"}, {"line_number": 15, "line_content": "    body = f\"\"\"**:alert: Canarytoken has been triggered on {message['time'].tame(check_string)}!**"}, {"line_number": 16, "line_content": "{message['memo'].tame(check_string)} "}, {"line_number": 17, "line_content": "[Manage this canarytoken]({message['manage_url'].tame(check_string)})\"\"\""}, {"line_number": 18, "line_content": "    if user_specified_topic:"}, {"line_number": 19, "line_content": "        topic = user_specified_topic"}, {"line_number": 20, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 21, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/codeship/view.py#L24", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "@webhook_view('Codeship')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_codeship_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    payload = payload['build']"}, {"line_number": 7, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 8, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 9, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 10, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/dropbox/view.py#L12", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "@webhook_view('Dropbox', notify_bot_owner_on_invalid_json=False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_dropbox_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    challenge: Optional[str]=REQ(default=None)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if request.method == 'POST':"}, {"line_number": 6, "line_content": "        topic = 'Dropbox'"}, {"line_number": 7, "line_content": "        check_send_webhook_message(request, user_profile, topic,"}, {"line_number": 8, "line_content": "            'File has been updated on Dropbox!')"}, {"line_number": 9, "line_content": "        return json_success(request)"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        if challenge is None:"}, {"line_number": 12, "line_content": "            raise RequestVariableMissingError('challenge')"}, {"line_number": 13, "line_content": "        return HttpResponse(challenge, content_type='text/plain; charset=UTF-8'"}, {"line_number": 14, "line_content": "            )"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/newrelic/view.py#L30", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "@webhook_view('NewRelic', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_newrelic_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    info = {'condition_name': payload.get('condition_name',"}, {"line_number": 6, "line_content": "        'Unknown condition'), 'details': payload.get('details',"}, {"line_number": 7, "line_content": "        'No details.'), 'incident_url': payload.get('incident_url',"}, {"line_number": 8, "line_content": "        'https://alerts.newrelic.com'), 'incident_acknowledge_url': payload"}, {"line_number": 9, "line_content": "        .get('incident_acknowledge_url', 'https://alerts.newrelic.com'),"}, {"line_number": 10, "line_content": "        'status': payload.get('current_state', 'None'), 'iso_timestamp': '',"}, {"line_number": 11, "line_content": "        'owner': payload.get('owner', '')}"}, {"line_number": 12, "line_content": "    unix_time = payload.get('timestamp', None)"}, {"line_number": 13, "line_content": "    if unix_time is None:"}, {"line_number": 14, "line_content": "        raise JsonableError(_("}, {"line_number": 15, "line_content": "            'The newrelic webhook requires timestamp in milliseconds'))"}, {"line_number": 16, "line_content": "    info['iso_timestamp'] = unix_milliseconds_to_timestamp(unix_time,"}, {"line_number": 17, "line_content": "        'newrelic')"}, {"line_number": 18, "line_content": "    if info['owner'] != '':"}, {"line_number": 19, "line_content": "        info['owner'] = 'by **{}** '.format(info['owner'])"}, {"line_number": 20, "line_content": "    if 'open' in info['status']:"}, {"line_number": 21, "line_content": "        content = OPEN_TEMPLATE.format(**info)"}, {"line_number": 22, "line_content": "    elif 'acknowledged' in info['status']:"}, {"line_number": 23, "line_content": "        content = DEFAULT_TEMPLATE.format(**info)"}, {"line_number": 24, "line_content": "    elif 'closed' in info['status']:"}, {"line_number": 25, "line_content": "        content = DEFAULT_TEMPLATE.format(**info)"}, {"line_number": 26, "line_content": "    else:"}, {"line_number": 27, "line_content": "        raise JsonableError(_("}, {"line_number": 28, "line_content": "            'The newrelic webhook requires current_state be in [open|acknowledged|closed]'"}, {"line_number": 29, "line_content": "            ))"}, {"line_number": 30, "line_content": "    topic_info = {'policy_name': payload.get('policy_name',"}, {"line_number": 31, "line_content": "        'Unknown Policy'), 'incident_id': payload.get('incident_id',"}, {"line_number": 32, "line_content": "        'Unknown ID')}"}, {"line_number": 33, "line_content": "    topic = TOPIC_TEMPLATE.format(**topic_info)"}, {"line_number": 34, "line_content": "    check_send_webhook_message(request, user_profile, topic, content, info["}, {"line_number": 35, "line_content": "        'status'])"}, {"line_number": 36, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/bitbucket2/view.py#L77", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "@webhook_view('Bitbucket2', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_bitbucket2_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value),"}, {"line_number": 5, "line_content": "    branches: Optional[str]=REQ(default=None), user_specified_topic:"}, {"line_number": 6, "line_content": "    Optional[str]=REQ('topic', default=None)) ->HttpResponse:"}, {"line_number": 7, "line_content": "    type = get_type(request, payload)"}, {"line_number": 8, "line_content": "    if type == 'push':"}, {"line_number": 9, "line_content": "        if not payload['push']['changes']:"}, {"line_number": 10, "line_content": "            return json_success(request)"}, {"line_number": 11, "line_content": "        branch = get_branch_name_for_push_event(payload)"}, {"line_number": 12, "line_content": "        if branch and branches:"}, {"line_number": 13, "line_content": "            if branches.find(branch) == -1:"}, {"line_number": 14, "line_content": "                return json_success(request)"}, {"line_number": 15, "line_content": "        subjects = get_push_subjects(payload)"}, {"line_number": 16, "line_content": "        bodies = get_push_bodies(payload)"}, {"line_number": 17, "line_content": "        for b, s in zip(bodies, subjects):"}, {"line_number": 18, "line_content": "            check_send_webhook_message(request, user_profile, s, b, type,"}, {"line_number": 19, "line_content": "                unquote_url_parameters=True)"}, {"line_number": 20, "line_content": "    else:"}, {"line_number": 21, "line_content": "        subject = get_subject_based_on_type(payload, type)"}, {"line_number": 22, "line_content": "        body_function = get_body_based_on_type(type)"}, {"line_number": 23, "line_content": "        body = body_function(payload, include_title=user_specified_topic is not"}, {"line_number": 24, "line_content": "            None)"}, {"line_number": 25, "line_content": "        check_send_webhook_message(request, user_profile, subject, body,"}, {"line_number": 26, "line_content": "            type, unquote_url_parameters=True)"}, {"line_number": 27, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/trello/view/__init__.py#L18", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "@webhook_view('Trello')"}, {"line_number": 2, "line_content": "@return_success_on_head_request"}, {"line_number": 3, "line_content": "@has_request_variables"}, {"line_number": 4, "line_content": "def api_trello_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 5, "line_content": "    payload: Mapping[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 6, "line_content": "    payload = orjson.loads(request.body)"}, {"line_number": 7, "line_content": "    action_type = payload['action'].get('type')"}, {"line_number": 8, "line_content": "    message = get_subject_and_body(payload, action_type)"}, {"line_number": 9, "line_content": "    if message is None:"}, {"line_number": 10, "line_content": "        return json_success(request)"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        subject, body = message"}, {"line_number": 13, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 14, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/json/view.py#L19", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@webhook_view('JSON')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_json_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 6, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 7, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/flock/view.py#L13", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('Flock')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_flock_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if len(payload['text']) != 0:"}, {"line_number": 6, "line_content": "        message_body = payload['text']"}, {"line_number": 7, "line_content": "    else:"}, {"line_number": 8, "line_content": "        message_body = payload['notification']"}, {"line_number": 9, "line_content": "    topic = 'Flock notifications'"}, {"line_number": 10, "line_content": "    body = f'{message_body}'"}, {"line_number": 11, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/dialogflow/view.py#L13", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "@webhook_view('Dialogflow')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_dialogflow_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body'), email: str=REQ()"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    status = payload['status']['code']"}, {"line_number": 7, "line_content": "    if status == 200:"}, {"line_number": 8, "line_content": "        result = payload['result']['fulfillment']['speech']"}, {"line_number": 9, "line_content": "        if not result:"}, {"line_number": 10, "line_content": "            alternate_result = payload['alternateResult']['fulfillment']["}, {"line_number": 11, "line_content": "                'speech']"}, {"line_number": 12, "line_content": "            if not alternate_result:"}, {"line_number": 13, "line_content": "                body = \"Dialogflow couldn't process your query.\""}, {"line_number": 14, "line_content": "            else:"}, {"line_number": 15, "line_content": "                body = alternate_result"}, {"line_number": 16, "line_content": "        else:"}, {"line_number": 17, "line_content": "            body = result"}, {"line_number": 18, "line_content": "    else:"}, {"line_number": 19, "line_content": "        error_status = payload['status']['errorDetails']"}, {"line_number": 20, "line_content": "        body = f'{status} - {error_status}'"}, {"line_number": 21, "line_content": "    receiving_user = get_user(email, user_profile.realm)"}, {"line_number": 22, "line_content": "    client = RequestNotes.get_notes(request).client"}, {"line_number": 23, "line_content": "    assert client is not None"}, {"line_number": 24, "line_content": "    check_send_private_message(user_profile, client, receiving_user, body)"}, {"line_number": 25, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/helloworld/view.py#L13", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('HelloWorld')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_helloworld_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Sequence[Dict[str, Any]]]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    body = 'Hello! I am happy to be here! :smile:'"}, {"line_number": 7, "line_content": "    body_template = \"\"\""}, {"line_number": 8, "line_content": "The Wikipedia featured article for today is **[{featured_title}]({featured_url})**\"\"\""}, {"line_number": 9, "line_content": "    body += body_template.format(**payload)"}, {"line_number": 10, "line_content": "    topic = 'Hello World'"}, {"line_number": 11, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/circleci/view.py#L19", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@webhook_view('CircleCI', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_circleci_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    payload = payload['payload']"}, {"line_number": 7, "line_content": "    subject = get_subject(payload)"}, {"line_number": 8, "line_content": "    body = get_body(payload)"}, {"line_number": 9, "line_content": "    check_send_webhook_message(request, user_profile, subject, body, "}, {"line_number": 10, "line_content": "        payload['status'].tame(check_string) if 'build_num' not in payload else"}, {"line_number": 11, "line_content": "        payload['outcome'].tame(check_string))"}, {"line_number": 12, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/radarr/view.py#L27", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Radarr', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_radarr_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    body = get_body_for_http_request(payload)"}, {"line_number": 6, "line_content": "    subject = get_subject_for_http_request(payload)"}, {"line_number": 7, "line_content": "    check_send_webhook_message(request, user_profile, subject, body,"}, {"line_number": 8, "line_content": "        payload['eventType'])"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/ansibletower/view.py#L24", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('AnsibleTower')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_ansibletower_webhook(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, payload: WildValue=REQ(argument_type='body', converter="}, {"line_number": 5, "line_content": "    to_wild_value)) ->HttpResponse:"}, {"line_number": 6, "line_content": "    body = get_body(payload)"}, {"line_number": 7, "line_content": "    subject = payload['name'].tame(check_string)"}, {"line_number": 8, "line_content": "    check_send_webhook_message(request, user_profile, subject, body)"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/mention/view.py#L13", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@webhook_view('Mention')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_mention_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Sequence[Dict[str, Any]]]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    title = payload['title']"}, {"line_number": 7, "line_content": "    source_url = payload['url']"}, {"line_number": 8, "line_content": "    description = payload['description']"}, {"line_number": 9, "line_content": "    template = ('\\n**[{title}]({url})**:\\n\\n``` quote\\n{description}\\n```\\n'"}, {"line_number": 10, "line_content": "        .strip())"}, {"line_number": 11, "line_content": "    body = template.format(title=title, url=source_url, description=description"}, {"line_number": 12, "line_content": "        )"}, {"line_number": 13, "line_content": "    topic = 'news'"}, {"line_number": 14, "line_content": "    check_send_webhook_message(request, user_profile, topic, body)"}, {"line_number": 15, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/appfollow/view.py#L14", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@webhook_view('AppFollow')"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_appfollow_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: WildValue=REQ(argument_type='body', converter=to_wild_value)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    message = payload['text'].tame(check_string)"}, {"line_number": 7, "line_content": "    app_name_search = re.search('\\\\A(.+)', message)"}, {"line_number": 8, "line_content": "    assert app_name_search is not None"}, {"line_number": 9, "line_content": "    app_name = app_name_search.group(0)"}, {"line_number": 10, "line_content": "    topic = app_name"}, {"line_number": 11, "line_content": "    check_send_webhook_message(request, user_profile, topic, body="}, {"line_number": 12, "line_content": "        convert_markdown(message))"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/gosquared/view.py#L25", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "@webhook_view('GoSquared', all_event_types=ALL_EVENT_TYPES)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_gosquared_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Dict[str, Any]]=REQ(argument_type='body')"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    body = ''"}, {"line_number": 7, "line_content": "    topic = ''"}, {"line_number": 8, "line_content": "    if payload.get('concurrents') is not None and payload.get('siteDetails'"}, {"line_number": 9, "line_content": "        ) is not None:"}, {"line_number": 10, "line_content": "        domain_name = payload['siteDetails']['domain']"}, {"line_number": 11, "line_content": "        user_num = payload['concurrents']"}, {"line_number": 12, "line_content": "        user_acc = payload['siteDetails']['acct']"}, {"line_number": 13, "line_content": "        acc_url = 'https://www.gosquared.com/now/' + user_acc"}, {"line_number": 14, "line_content": "        body = TRAFFIC_SPIKE_TEMPLATE.format(website_name=domain_name,"}, {"line_number": 15, "line_content": "            website_url=acc_url, user_num=user_num)"}, {"line_number": 16, "line_content": "        topic = f'GoSquared - {domain_name}'"}, {"line_number": 17, "line_content": "        check_send_webhook_message(request, user_profile, topic, body,"}, {"line_number": 18, "line_content": "            'traffic_spike')"}, {"line_number": 19, "line_content": "    elif payload.get('message') is not None and payload.get('person'"}, {"line_number": 20, "line_content": "        ) is not None:"}, {"line_number": 21, "line_content": "        if not payload['message']['private']:"}, {"line_number": 22, "line_content": "            session_title = payload['message']['session']['title']"}, {"line_number": 23, "line_content": "            topic = f'Live chat session - {session_title}'"}, {"line_number": 24, "line_content": "            body = CHAT_MESSAGE_TEMPLATE.format(status=payload['person']["}, {"line_number": 25, "line_content": "                'status'], name=payload['person']['_anon']['name'], content"}, {"line_number": 26, "line_content": "                =payload['message']['content'])"}, {"line_number": 27, "line_content": "            check_send_webhook_message(request, user_profile, topic, body,"}, {"line_number": 28, "line_content": "                'chat_message')"}, {"line_number": 29, "line_content": "    else:"}, {"line_number": 30, "line_content": "        raise UnsupportedWebhookEventType('unknown_event')"}, {"line_number": 31, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/zapier/view.py#L14", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@webhook_view('Zapier', notify_bot_owner_on_invalid_json=False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_zapier_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    payload: Dict[str, Any]=REQ(argument_type='body')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if payload.get('type') == 'auth':"}, {"line_number": 6, "line_content": "        return json_success(request, data={'full_name': user_profile."}, {"line_number": 7, "line_content": "            full_name, 'email': user_profile.email, 'id': user_profile.id})"}, {"line_number": 8, "line_content": "    topic = payload.get('topic')"}, {"line_number": 9, "line_content": "    content = payload.get('content')"}, {"line_number": 10, "line_content": "    if topic is None:"}, {"line_number": 11, "line_content": "        topic = payload.get('subject')"}, {"line_number": 12, "line_content": "        if topic is None:"}, {"line_number": 13, "line_content": "            raise JsonableError(_(\"Topic can't be empty\"))"}, {"line_number": 14, "line_content": "    if content is None:"}, {"line_number": 15, "line_content": "        raise JsonableError(_(\"Content can't be empty\"))"}, {"line_number": 16, "line_content": "    check_send_webhook_message(request, user_profile, topic, content)"}, {"line_number": 17, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/heroku/view.py#L19", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@webhook_view('Heroku', notify_bot_owner_on_invalid_json=False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def api_heroku_webhook(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    head: str=REQ(), app: str=REQ(), user: str=REQ(), url: str=REQ(),"}, {"line_number": 5, "line_content": "    git_log: str=REQ()) ->HttpResponse:"}, {"line_number": 6, "line_content": "    content = TEMPLATE.format(user=user, head=head, app=app, url=url,"}, {"line_number": 7, "line_content": "        git_log=git_log)"}, {"line_number": 8, "line_content": "    check_send_webhook_message(request, user_profile, app, content)"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/webhooks/intercom/tests.py#L11", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@patch('zerver.webhooks.intercom.view.check_send_webhook_message')"}, {"line_number": 2, "line_content": "def test_ping_ignore(self, check_send_webhook_message_mock: MagicMock) ->None:"}, {"line_number": 3, "line_content": "    self.url = self.build_webhook_url()"}, {"line_number": 4, "line_content": "    payload = self.get_body('ping')"}, {"line_number": 5, "line_content": "    result = self.client_post(self.url, payload, content_type="}, {"line_number": 6, "line_content": "        'application/json')"}, {"line_number": 7, "line_content": "    self.assertFalse(check_send_webhook_message_mock.called)"}, {"line_number": 8, "line_content": "    self.assert_json_success(result)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/timezone.py#L8", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@lru_cache(maxsize=None)"}, {"line_number": 2, "line_content": "def get_canonical_timezone_map() ->Dict[str, str]:"}, {"line_number": 3, "line_content": "    canonical = {}"}, {"line_number": 4, "line_content": "    with TextIOWrapper(pytz.open_resource('tzdata.zi')) as f:"}, {"line_number": 5, "line_content": "        for line in f:"}, {"line_number": 6, "line_content": "            if line.startswith('L '):"}, {"line_number": 7, "line_content": "                l, name, alias = line.split()"}, {"line_number": 8, "line_content": "                canonical[alias] = name"}, {"line_number": 9, "line_content": "    return canonical"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/retention.py#L95", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(savepoint=False)"}, {"line_number": 2, "line_content": "def move_rows(base_model: Type[Model], raw_query: SQL, *, src_db_table:"}, {"line_number": 3, "line_content": "    Optional[str]=None, returning_id: bool=False, **kwargs: Composable) ->List["}, {"line_number": 4, "line_content": "    int]:"}, {"line_number": 5, "line_content": "    \"\"\"Core helper for bulk moving rows between a table and its archive table\"\"\""}, {"line_number": 6, "line_content": "    if src_db_table is None:"}, {"line_number": 7, "line_content": "        src_db_table = base_model._meta.db_table"}, {"line_number": 8, "line_content": "    fields = [field for field in base_model._meta.fields if field not in"}, {"line_number": 9, "line_content": "        EXCLUDE_FIELDS]"}, {"line_number": 10, "line_content": "    src_fields = [Identifier(src_db_table, field.column) for field in fields]"}, {"line_number": 11, "line_content": "    dst_fields = [Identifier(field.column) for field in fields]"}, {"line_number": 12, "line_content": "    sql_args = {'src_fields': SQL(',').join(src_fields), 'dst_fields': SQL("}, {"line_number": 13, "line_content": "        ',').join(dst_fields)}"}, {"line_number": 14, "line_content": "    sql_args.update(kwargs)"}, {"line_number": 15, "line_content": "    with connection.cursor() as cursor:"}, {"line_number": 16, "line_content": "        cursor.execute(raw_query.format(**sql_args))"}, {"line_number": 17, "line_content": "        if returning_id:"}, {"line_number": 18, "line_content": "            return [id for id, in cursor.fetchall()]"}, {"line_number": 19, "line_content": "        else:"}, {"line_number": 20, "line_content": "            return []"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_console_output.py#L132", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def tee_stderr_and_find_extra_console_output(extra_output_finder:"}, {"line_number": 3, "line_content": "    ExtraConsoleOutputFinder) ->Iterator[None]:"}, {"line_number": 4, "line_content": "    stderr = sys.stderr"}, {"line_number": 5, "line_content": "    console_log_handler = logging.getLogger('django.server').handlers[0]"}, {"line_number": 6, "line_content": "    assert isinstance(console_log_handler, logging.StreamHandler)"}, {"line_number": 7, "line_content": "    assert console_log_handler.stream == stderr"}, {"line_number": 8, "line_content": "    sys.stderr = console_log_handler.stream = TextIOWrapper(WrappedIO("}, {"line_number": 9, "line_content": "        stderr.buffer, extra_output_finder), line_buffering=True)"}, {"line_number": 10, "line_content": "    try:"}, {"line_number": 11, "line_content": "        yield"}, {"line_number": 12, "line_content": "    finally:"}, {"line_number": 13, "line_content": "        try:"}, {"line_number": 14, "line_content": "            sys.stderr.flush()"}, {"line_number": 15, "line_content": "        finally:"}, {"line_number": 16, "line_content": "            sys.stderr = console_log_handler.stream = stderr"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_console_output.py#L132", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def tee_stdout_and_find_extra_console_output(extra_output_finder:"}, {"line_number": 3, "line_content": "    ExtraConsoleOutputFinder) ->Iterator[None]:"}, {"line_number": 4, "line_content": "    stdout = sys.stdout"}, {"line_number": 5, "line_content": "    sys.stdout = TextIOWrapper(WrappedIO(sys.stdout.buffer,"}, {"line_number": 6, "line_content": "        extra_output_finder), line_buffering=True)"}, {"line_number": 7, "line_content": "    try:"}, {"line_number": 8, "line_content": "        yield"}, {"line_number": 9, "line_content": "    finally:"}, {"line_number": 10, "line_content": "        try:"}, {"line_number": 11, "line_content": "            sys.stdout.flush()"}, {"line_number": 12, "line_content": "        finally:"}, {"line_number": 13, "line_content": "            sys.stdout = stdout"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/notes.py#L31", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def get_notes(cls, key: _KeyT) ->_DataT:"}, {"line_number": 3, "line_content": "    try:"}, {"line_number": 4, "line_content": "        return cls.__notes_map[key]"}, {"line_number": 5, "line_content": "    except KeyError:"}, {"line_number": 6, "line_content": "        cls.__notes_map[key] = cls.init_notes()"}, {"line_number": 7, "line_content": "        return cls.__notes_map[key]"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/notes.py#L31", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def set_notes(cls, key: _KeyT, notes: _DataT) ->None:"}, {"line_number": 3, "line_content": "    cls.__notes_map[key] = notes"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/notes.py#L31", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "@abstractmethod"}, {"line_number": 3, "line_content": "def init_notes(cls) ->_DataT:"}, {"line_number": 4, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/realm_description.py#L11", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@cache_with_key(realm_rendered_description_cache_key, timeout=3600 * 24 * 7)"}, {"line_number": 2, "line_content": "def get_realm_rendered_description(realm: Realm) ->str:"}, {"line_number": 3, "line_content": "    realm_description_raw = (realm.description or"}, {"line_number": 4, "line_content": "        'The coolest place in the universe.')"}, {"line_number": 5, "line_content": "    return markdown_convert(realm_description_raw, message_realm=realm,"}, {"line_number": 6, "line_content": "        no_previews=True).rendered_content"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/realm_description.py#L19", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@cache_with_key(realm_text_description_cache_key, timeout=3600 * 24 * 7)"}, {"line_number": 2, "line_content": "def get_realm_text_description(realm: Realm) ->str:"}, {"line_number": 3, "line_content": "    html_description = get_realm_rendered_description(realm)"}, {"line_number": 4, "line_content": "    return html_to_text(html_description, {'p': ' | ', 'li': ' * '})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/i18n.py#L16", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@lru_cache(None)"}, {"line_number": 2, "line_content": "def get_language_list() ->List[Dict[str, Any]]:"}, {"line_number": 3, "line_content": "    path = os.path.join(settings.DEPLOY_ROOT, 'locale',"}, {"line_number": 4, "line_content": "        'language_name_map.json')"}, {"line_number": 5, "line_content": "    with open(path, 'rb') as reader:"}, {"line_number": 6, "line_content": "        languages = orjson.loads(reader.read())"}, {"line_number": 7, "line_content": "        return languages['name_map']"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/scim_filter.py#L47", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def get_extras(cls, q: str, request: Optional[HttpRequest]=None) ->Tuple["}, {"line_number": 3, "line_content": "    str, List[object]]:"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "        Return extra SQL and params to be attached to end of current Query's"}, {"line_number": 6, "line_content": "        SQL and params. The return format matches the format that should be used"}, {"line_number": 7, "line_content": "        for providing raw SQL with params to Django's .raw():"}, {"line_number": 8, "line_content": "        https://docs.djangoproject.com/en/3.2/topics/db/sql/#passing-parameters-into-raw"}, {"line_number": 9, "line_content": "        Here we ensure that results are limited to the subdomain of the request"}, {"line_number": 10, "line_content": "        and also exclude bots, as we currently don't want them to be managed by SCIM2."}, {"line_number": 11, "line_content": "        \"\"\""}, {"line_number": 12, "line_content": "    assert request is not None"}, {"line_number": 13, "line_content": "    realm = RequestNotes.get_notes(request).realm"}, {"line_number": 14, "line_content": "    assert realm is not None"}, {"line_number": 15, "line_content": "    return ("}, {"line_number": 16, "line_content": "        'AND zerver_realm.id = %s AND zerver_userprofile.is_bot = False ORDER BY zerver_userprofile.id'"}, {"line_number": 17, "line_content": "        , [realm.id])"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/alert_words.py#L14", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "@cache_with_key(realm_alert_words_cache_key, timeout=3600 * 24)"}, {"line_number": 2, "line_content": "def alert_words_in_realm(realm: Realm) ->Dict[int, List[str]]:"}, {"line_number": 3, "line_content": "    user_ids_and_words = AlertWord.objects.filter(realm=realm,"}, {"line_number": 4, "line_content": "        user_profile__is_active=True).values('user_profile_id', 'word')"}, {"line_number": 5, "line_content": "    user_ids_with_words: Dict[int, List[str]] = {}"}, {"line_number": 6, "line_content": "    for id_and_word in user_ids_and_words:"}, {"line_number": 7, "line_content": "        user_ids_with_words.setdefault(id_and_word['user_profile_id'], [])"}, {"line_number": 8, "line_content": "        user_ids_with_words[id_and_word['user_profile_id']].append(id_and_word"}, {"line_number": 9, "line_content": "            ['word'])"}, {"line_number": 10, "line_content": "    return user_ids_with_words"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/alert_words.py#L26", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "@cache_with_key(realm_alert_words_automaton_cache_key, timeout=3600 * 24)"}, {"line_number": 2, "line_content": "def get_alert_word_automaton(realm: Realm) ->ahocorasick.Automaton:"}, {"line_number": 3, "line_content": "    user_id_with_words = alert_words_in_realm(realm)"}, {"line_number": 4, "line_content": "    alert_word_automaton = ahocorasick.Automaton()"}, {"line_number": 5, "line_content": "    for user_id, alert_words in user_id_with_words.items():"}, {"line_number": 6, "line_content": "        for alert_word in alert_words:"}, {"line_number": 7, "line_content": "            alert_word_lower = alert_word.lower()"}, {"line_number": 8, "line_content": "            if alert_word_automaton.exists(alert_word_lower):"}, {"line_number": 9, "line_content": "                key, user_ids_for_alert_word = alert_word_automaton.get("}, {"line_number": 10, "line_content": "                    alert_word_lower)"}, {"line_number": 11, "line_content": "                user_ids_for_alert_word.add(user_id)"}, {"line_number": 12, "line_content": "            else:"}, {"line_number": 13, "line_content": "                alert_word_automaton.add_word(alert_word_lower, ("}, {"line_number": 14, "line_content": "                    alert_word_lower, {user_id}))"}, {"line_number": 15, "line_content": "    alert_word_automaton.make_automaton()"}, {"line_number": 16, "line_content": "    if alert_word_automaton.kind != ahocorasick.AHOCORASICK:"}, {"line_number": 17, "line_content": "        return None"}, {"line_number": 18, "line_content": "    return alert_word_automaton"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/sqlalchemy_utils.py#L24", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def get_sqlalchemy_connection() ->Iterator[Connection]:"}, {"line_number": 3, "line_content": "    global sqlalchemy_engine"}, {"line_number": 4, "line_content": "    if sqlalchemy_engine is None:"}, {"line_number": 5, "line_content": "        def get_dj_conn() ->TimeTrackingConnection:"}, {"line_number": 6, "line_content": "            connection.ensure_connection()"}, {"line_number": 7, "line_content": "            return connection.connection"}, {"line_number": 8, "line_content": "        sqlalchemy_engine = sqlalchemy.create_engine('postgresql://',"}, {"line_number": 9, "line_content": "            creator=get_dj_conn, poolclass=NonClosingPool,"}, {"line_number": 10, "line_content": "            pool_reset_on_return=None)"}, {"line_number": 11, "line_content": "    with sqlalchemy_engine.connect().execution_options(autocommit=False"}, {"line_number": 12, "line_content": "        ) as sa_connection:"}, {"line_number": 13, "line_content": "        yield sa_connection"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_helpers.py#L85", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def stub_event_queue_user_events(event_queue_return: Any,"}, {"line_number": 3, "line_content": "    user_events_return: Any) ->Iterator[None]:"}, {"line_number": 4, "line_content": "    with mock.patch('zerver.lib.events.request_event_queue', return_value="}, {"line_number": 5, "line_content": "        event_queue_return):"}, {"line_number": 6, "line_content": "        with mock.patch('zerver.lib.events.get_user_events', return_value="}, {"line_number": 7, "line_content": "            user_events_return):"}, {"line_number": 8, "line_content": "            yield"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_helpers.py#L85", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def cache_tries_captured() ->Iterator[List[Tuple[str, Union[str, List[str]],"}, {"line_number": 3, "line_content": "    Optional[str]]]]:"}, {"line_number": 4, "line_content": "    cache_queries: List[Tuple[str, Union[str, List[str]], Optional[str]]] = []"}, {"line_number": 5, "line_content": "    orig_get = cache.cache_get"}, {"line_number": 6, "line_content": "    orig_get_many = cache.cache_get_many"}, {"line_number": 7, "line_content": "    def my_cache_get(key: str, cache_name: Optional[str]=None) ->Optional["}, {"line_number": 8, "line_content": "        Dict[str, Any]]:"}, {"line_number": 9, "line_content": "        cache_queries.append(('get', key, cache_name))"}, {"line_number": 10, "line_content": "        return orig_get(key, cache_name)"}, {"line_number": 11, "line_content": "    def my_cache_get_many(keys: List[str], cache_name: Optional[str]=None"}, {"line_number": 12, "line_content": "        ) ->Dict[str, Any]:"}, {"line_number": 13, "line_content": "        cache_queries.append(('getmany', keys, cache_name))"}, {"line_number": 14, "line_content": "        return orig_get_many(keys, cache_name)"}, {"line_number": 15, "line_content": "    with mock.patch.multiple(cache, cache_get=my_cache_get, cache_get_many="}, {"line_number": 16, "line_content": "        my_cache_get_many):"}, {"line_number": 17, "line_content": "        yield cache_queries"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_helpers.py#L85", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def simulated_empty_cache() ->Iterator[List[Tuple[str, Union[str, List[str]"}, {"line_number": 3, "line_content": "    ], Optional[str]]]]:"}, {"line_number": 4, "line_content": "    cache_queries: List[Tuple[str, Union[str, List[str]], Optional[str]]] = []"}, {"line_number": 5, "line_content": "    def my_cache_get(key: str, cache_name: Optional[str]=None) ->Optional["}, {"line_number": 6, "line_content": "        Dict[str, Any]]:"}, {"line_number": 7, "line_content": "        cache_queries.append(('get', key, cache_name))"}, {"line_number": 8, "line_content": "        return None"}, {"line_number": 9, "line_content": "    def my_cache_get_many(keys: List[str], cache_name: Optional[str]=None"}, {"line_number": 10, "line_content": "        ) ->Dict[str, Any]:"}, {"line_number": 11, "line_content": "        cache_queries.append(('getmany', keys, cache_name))"}, {"line_number": 12, "line_content": "        return {}"}, {"line_number": 13, "line_content": "    with mock.patch.multiple(cache, cache_get=my_cache_get, cache_get_many="}, {"line_number": 14, "line_content": "        my_cache_get_many):"}, {"line_number": 15, "line_content": "        yield cache_queries"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_helpers.py#L85", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def queries_captured(include_savepoints: bool=False, keep_cache_warm: bool="}, {"line_number": 3, "line_content": "    False) ->Generator[List[Dict[str, Union[str, bytes]]], None, None]:"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    Allow a user to capture just the queries executed during"}, {"line_number": 6, "line_content": "    the with statement."}, {"line_number": 7, "line_content": "    \"\"\""}, {"line_number": 8, "line_content": "    queries: List[Dict[str, Union[str, bytes]]] = []"}, {"line_number": 9, "line_content": "    def wrapper_execute(self: TimeTrackingCursor, action: Callable[[Query,"}, {"line_number": 10, "line_content": "        ParamsT], None], sql: Query, params: ParamsT) ->None:"}, {"line_number": 11, "line_content": "        start = time.time()"}, {"line_number": 12, "line_content": "        try:"}, {"line_number": 13, "line_content": "            return action(sql, params)"}, {"line_number": 14, "line_content": "        finally:"}, {"line_number": 15, "line_content": "            stop = time.time()"}, {"line_number": 16, "line_content": "            duration = stop - start"}, {"line_number": 17, "line_content": "            if include_savepoints or not isinstance(sql, str"}, {"line_number": 18, "line_content": "                ) or 'SAVEPOINT' not in sql:"}, {"line_number": 19, "line_content": "                queries.append({'sql': self.mogrify(sql, params).decode(),"}, {"line_number": 20, "line_content": "                    'time': f'{duration:.3f}'})"}, {"line_number": 21, "line_content": "    def cursor_execute(self: TimeTrackingCursor, sql: Query, params:"}, {"line_number": 22, "line_content": "        Optional[Params]=None) ->None:"}, {"line_number": 23, "line_content": "        return wrapper_execute(self, super(TimeTrackingCursor, self)."}, {"line_number": 24, "line_content": "            execute, sql, params)"}, {"line_number": 25, "line_content": "    def cursor_executemany(self: TimeTrackingCursor, sql: Query, params:"}, {"line_number": 26, "line_content": "        Iterable[Params]) ->None:"}, {"line_number": 27, "line_content": "        return wrapper_execute(self, super(TimeTrackingCursor, self)."}, {"line_number": 28, "line_content": "            executemany, sql, params)"}, {"line_number": 29, "line_content": "    if not keep_cache_warm:"}, {"line_number": 30, "line_content": "        cache = get_cache_backend(None)"}, {"line_number": 31, "line_content": "        cache.clear()"}, {"line_number": 32, "line_content": "    with mock.patch.multiple(TimeTrackingCursor, execute=cursor_execute,"}, {"line_number": 33, "line_content": "        executemany=cursor_executemany):"}, {"line_number": 34, "line_content": "        yield queries"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/test_helpers.py#L85", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def stdout_suppressed() ->Iterator[IO[str]]:"}, {"line_number": 3, "line_content": "    \"\"\"Redirect stdout to /dev/null.\"\"\""}, {"line_number": 4, "line_content": "    with open(os.devnull, 'a') as devnull:"}, {"line_number": 5, "line_content": "        stdout, sys.stdout = sys.stdout, devnull"}, {"line_number": 6, "line_content": "        try:"}, {"line_number": 7, "line_content": "            yield stdout"}, {"line_number": 8, "line_content": "        finally:"}, {"line_number": 9, "line_content": "            sys.stdout = stdout"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/context_managers.py#L9", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def flock(lockfile: Union[int, IO[Any]], shared: bool=False) ->Iterator[None]:"}, {"line_number": 3, "line_content": "    \"\"\"Lock a file object using flock(2) for the duration of a 'with' statement."}, {"line_number": 4, "line_content": "    If shared is True, use a LOCK_SH lock, otherwise LOCK_EX.\"\"\""}, {"line_number": 5, "line_content": "    fcntl.flock(lockfile, fcntl.LOCK_SH if shared else fcntl.LOCK_EX)"}, {"line_number": 6, "line_content": "    try:"}, {"line_number": 7, "line_content": "        yield"}, {"line_number": 8, "line_content": "    finally:"}, {"line_number": 9, "line_content": "        fcntl.flock(lockfile, fcntl.LOCK_UN)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/context_managers.py#L9", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def lockfile(filename: str, shared: bool=False) ->Iterator[None]:"}, {"line_number": 3, "line_content": "    \"\"\"Lock a file using flock(2) for the duration of a 'with' statement."}, {"line_number": 4, "line_content": "    If shared is True, use a LOCK_SH lock, otherwise LOCK_EX."}, {"line_number": 5, "line_content": "    The file is given by name and will be created if it does not exist.\"\"\""}, {"line_number": 6, "line_content": "    with open(filename, 'w') as lock:"}, {"line_number": 7, "line_content": "        with flock(lock, shared=shared):"}, {"line_number": 8, "line_content": "            yield"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/request.py#L208", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def REQ(whence: Optional[str]=..., *, converter: Callable[[str, str],"}, {"line_number": 3, "line_content": "    ResultT], default: ResultT=..., argument_type: Optional[Literal['body']"}, {"line_number": 4, "line_content": "    ]=..., intentionally_undocumented: bool=..., documentation_pending:"}, {"line_number": 5, "line_content": "    bool=..., aliases: Sequence[str]=..., path_only: bool=...) ->ResultT:"}, {"line_number": 6, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/request.py#L208", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def REQ(whence: Optional[str]=..., *, default: ResultT=..., json_validator:"}, {"line_number": 3, "line_content": "    Validator[ResultT], argument_type: Optional[Literal['body']]=...,"}, {"line_number": 4, "line_content": "    intentionally_undocumented: bool=..., documentation_pending: bool=...,"}, {"line_number": 5, "line_content": "    aliases: Sequence[str]=..., path_only: bool=...) ->ResultT:"}, {"line_number": 6, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/request.py#L208", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def REQ(whence: Optional[str]=..., *, default: str=..., str_validator:"}, {"line_number": 3, "line_content": "    Optional[Validator[str]]=..., intentionally_undocumented: bool=...,"}, {"line_number": 4, "line_content": "    documentation_pending: bool=..., aliases: Sequence[str]=..., path_only:"}, {"line_number": 5, "line_content": "    bool=...) ->str:"}, {"line_number": 6, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/request.py#L208", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def REQ(whence: Optional[str]=..., *, default: None, str_validator:"}, {"line_number": 3, "line_content": "    Optional[Validator[str]]=..., intentionally_undocumented: bool=...,"}, {"line_number": 4, "line_content": "    documentation_pending: bool=..., aliases: Sequence[str]=..., path_only:"}, {"line_number": 5, "line_content": "    bool=...) ->Optional[str]:"}, {"line_number": 6, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/lib/request.py#L208", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@overload"}, {"line_number": 2, "line_content": "def REQ(whence: Optional[str]=..., *, default: ResultT=..., argument_type:"}, {"line_number": 3, "line_content": "    Literal['body'], intentionally_undocumented: bool=...,"}, {"line_number": 4, "line_content": "    documentation_pending: bool=..., aliases: Sequence[str]=..., path_only:"}, {"line_number": 5, "line_content": "    bool=...) ->ResultT:"}, {"line_number": 6, "line_content": "    ..."}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/management/commands/sync_ldap_user_data.py#L19", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "@transaction.atomic"}, {"line_number": 2, "line_content": "def sync_ldap_user_data(user_profiles: List[UserProfile],"}, {"line_number": 3, "line_content": "    deactivation_protection: bool=True) ->None:"}, {"line_number": 4, "line_content": "    logger.info('Starting update.')"}, {"line_number": 5, "line_content": "    try:"}, {"line_number": 6, "line_content": "        realms = {u.realm.string_id for u in user_profiles}"}, {"line_number": 7, "line_content": "        for u in user_profiles:"}, {"line_number": 8, "line_content": "            try:"}, {"line_number": 9, "line_content": "                sync_user_from_ldap(u, logger)"}, {"line_number": 10, "line_content": "            except ZulipLDAPException as e:"}, {"line_number": 11, "line_content": "                logger.error('Error attempting to update user %s:', u."}, {"line_number": 12, "line_content": "                    delivery_email)"}, {"line_number": 13, "line_content": "                logger.error(e.args[0])"}, {"line_number": 14, "line_content": "        if deactivation_protection:"}, {"line_number": 15, "line_content": "            if not UserProfile.objects.filter(is_bot=False, is_active=True"}, {"line_number": 16, "line_content": "                ).exists():"}, {"line_number": 17, "line_content": "                raise Exception("}, {"line_number": 18, "line_content": "                    \"\"\"LDAP sync would have deactivated all users. This is most likely due to a misconfiguration of LDAP settings. Rolling back..."}, {"line_number": 19, "line_content": "Use the --force option if the mass deactivation is intended.\"\"\""}, {"line_number": 20, "line_content": "                    )"}, {"line_number": 21, "line_content": "            for string_id in realms:"}, {"line_number": 22, "line_content": "                if not UserProfile.objects.filter(is_bot=False, is_active="}, {"line_number": 23, "line_content": "                    True, realm__string_id=string_id, role=UserProfile."}, {"line_number": 24, "line_content": "                    ROLE_REALM_OWNER).exists():"}, {"line_number": 25, "line_content": "                    raise Exception("}, {"line_number": 26, "line_content": "                        f\"\"\"LDAP sync would have deactivated all owners of realm {string_id}. This is most likely due to a misconfiguration of LDAP settings. Rolling back..."}, {"line_number": 27, "line_content": "Use the --force option if the mass deactivation is intended.\"\"\""}, {"line_number": 28, "line_content": "                        )"}, {"line_number": 29, "line_content": "    except Exception:"}, {"line_number": 30, "line_content": "        logger.error('LDAP sync failed', exc_info=True)"}, {"line_number": 31, "line_content": "        raise"}, {"line_number": 32, "line_content": "    logger.info('Finished update.')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/management/commands/process_queue.py#L19", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def log_and_exit_if_exception(logger: logging.Logger, queue_name: str,"}, {"line_number": 3, "line_content": "    threaded: bool) ->Iterator[None]:"}, {"line_number": 4, "line_content": "    try:"}, {"line_number": 5, "line_content": "        yield"}, {"line_number": 6, "line_content": "    except Exception:"}, {"line_number": 7, "line_content": "        logger.exception('Unhandled exception from queue: %s', queue_name,"}, {"line_number": 8, "line_content": "            stack_info=True)"}, {"line_number": 9, "line_content": "        if threaded:"}, {"line_number": 10, "line_content": "            os.kill(os.getpid(), signal.SIGUSR1)"}, {"line_number": 11, "line_content": "        else:"}, {"line_number": 12, "line_content": "            sys.exit(1)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_transfer.py#L27", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@patch('zerver.lib.transfer.transfer_avatars_to_s3')"}, {"line_number": 2, "line_content": "@patch('zerver.lib.transfer.transfer_message_files_to_s3')"}, {"line_number": 3, "line_content": "@patch('zerver.lib.transfer.transfer_emoji_to_s3')"}, {"line_number": 4, "line_content": "def test_transfer_uploads_to_s3(self, m3: Mock, m2: Mock, m1: Mock) ->None:"}, {"line_number": 5, "line_content": "    transfer_uploads_to_s3(4)"}, {"line_number": 6, "line_content": "    m1.assert_called_with(4)"}, {"line_number": 7, "line_content": "    m2.assert_called_with(4)"}, {"line_number": 8, "line_content": "    m3.assert_called_with(4)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_transfer.py#L37", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "@mock_s3"}, {"line_number": 2, "line_content": "def test_transfer_avatars_to_s3(self) ->None:"}, {"line_number": 3, "line_content": "    bucket = create_s3_buckets(settings.S3_AVATAR_BUCKET)[0]"}, {"line_number": 4, "line_content": "    self.login('hamlet')"}, {"line_number": 5, "line_content": "    with get_test_image_file('img.png') as image_file:"}, {"line_number": 6, "line_content": "        self.client_post('/json/users/me/avatar', {'file': image_file})"}, {"line_number": 7, "line_content": "    user = self.example_user('hamlet')"}, {"line_number": 8, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 9, "line_content": "        transfer_avatars_to_s3(1)"}, {"line_number": 10, "line_content": "    path_id = user_avatar_path(user)"}, {"line_number": 11, "line_content": "    image_key = bucket.Object(path_id)"}, {"line_number": 12, "line_content": "    original_image_key = bucket.Object(path_id + '.original')"}, {"line_number": 13, "line_content": "    medium_image_key = bucket.Object(path_id + '-medium.png')"}, {"line_number": 14, "line_content": "    self.assert_length(list(bucket.objects.all()), 3)"}, {"line_number": 15, "line_content": "    with open(avatar_disk_path(user), 'rb') as f:"}, {"line_number": 16, "line_content": "        self.assertEqual(image_key.get()['Body'].read(), f.read())"}, {"line_number": 17, "line_content": "    with open(avatar_disk_path(user, original=True), 'rb') as f:"}, {"line_number": 18, "line_content": "        self.assertEqual(original_image_key.get()['Body'].read(), f.read())"}, {"line_number": 19, "line_content": "    with open(avatar_disk_path(user, medium=True), 'rb') as f:"}, {"line_number": 20, "line_content": "        self.assertEqual(medium_image_key.get()['Body'].read(), f.read())"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_transfer.py#L37", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "@mock_s3"}, {"line_number": 2, "line_content": "def test_transfer_message_files(self) ->None:"}, {"line_number": 3, "line_content": "    bucket = create_s3_buckets(settings.S3_AUTH_UPLOADS_BUCKET)[0]"}, {"line_number": 4, "line_content": "    hamlet = self.example_user('hamlet')"}, {"line_number": 5, "line_content": "    othello = self.example_user('othello')"}, {"line_number": 6, "line_content": "    upload_message_file('dummy1.txt', len(b'zulip1!'), 'text/plain',"}, {"line_number": 7, "line_content": "        b'zulip1!', hamlet)"}, {"line_number": 8, "line_content": "    upload_message_file('dummy2.txt', len(b'zulip2!'), 'text/plain',"}, {"line_number": 9, "line_content": "        b'zulip2!', othello)"}, {"line_number": 10, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 11, "line_content": "        transfer_message_files_to_s3(1)"}, {"line_number": 12, "line_content": "    attachments = Attachment.objects.all().order_by('id')"}, {"line_number": 13, "line_content": "    self.assert_length(list(bucket.objects.all()), 2)"}, {"line_number": 14, "line_content": "    self.assertEqual(bucket.Object(attachments[0].path_id).get()['Body']."}, {"line_number": 15, "line_content": "        read(), b'zulip1!')"}, {"line_number": 16, "line_content": "    self.assertEqual(bucket.Object(attachments[1].path_id).get()['Body']."}, {"line_number": 17, "line_content": "        read(), b'zulip2!')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_transfer.py#L37", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "@mock_s3"}, {"line_number": 2, "line_content": "def test_transfer_emoji_to_s3(self) ->None:"}, {"line_number": 3, "line_content": "    bucket = create_s3_buckets(settings.S3_AVATAR_BUCKET)[0]"}, {"line_number": 4, "line_content": "    othello = self.example_user('othello')"}, {"line_number": 5, "line_content": "    RealmEmoji.objects.all().delete()"}, {"line_number": 6, "line_content": "    emoji_name = 'emoji.png'"}, {"line_number": 7, "line_content": "    with get_test_image_file('img.png') as image_file:"}, {"line_number": 8, "line_content": "        emoji = check_add_realm_emoji(othello.realm, emoji_name, othello,"}, {"line_number": 9, "line_content": "            image_file)"}, {"line_number": 10, "line_content": "    if not emoji:"}, {"line_number": 11, "line_content": "        raise AssertionError('Unable to add emoji.')"}, {"line_number": 12, "line_content": "    emoji_path = RealmEmoji.PATH_ID_TEMPLATE.format(realm_id=othello."}, {"line_number": 13, "line_content": "        realm_id, emoji_file_name=emoji.file_name)"}, {"line_number": 14, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 15, "line_content": "        transfer_emoji_to_s3(1)"}, {"line_number": 16, "line_content": "    self.assert_length(list(bucket.objects.all()), 2)"}, {"line_number": 17, "line_content": "    original_key = bucket.Object(emoji_path + '.original')"}, {"line_number": 18, "line_content": "    resized_key = bucket.Object(emoji_path)"}, {"line_number": 19, "line_content": "    image_data = read_test_image_file('img.png')"}, {"line_number": 20, "line_content": "    resized_image_data, is_animated, still_image_data = resize_emoji(image_data"}, {"line_number": 21, "line_content": "        )"}, {"line_number": 22, "line_content": "    self.assertEqual(is_animated, False)"}, {"line_number": 23, "line_content": "    self.assertEqual(still_image_data, None)"}, {"line_number": 24, "line_content": "    self.assertEqual(image_data, original_key.get()['Body'].read())"}, {"line_number": 25, "line_content": "    self.assertEqual(resized_image_data, resized_key.get()['Body'].read())"}, {"line_number": 26, "line_content": "    emoji_name = 'emoji2.png'"}, {"line_number": 27, "line_content": "    with get_test_image_file('animated_img.gif') as image_file:"}, {"line_number": 28, "line_content": "        emoji = check_add_realm_emoji(othello.realm, emoji_name, othello,"}, {"line_number": 29, "line_content": "            image_file)"}, {"line_number": 30, "line_content": "    if not emoji:"}, {"line_number": 31, "line_content": "        raise AssertionError('Unable to add emoji.')"}, {"line_number": 32, "line_content": "    emoji_path = RealmEmoji.PATH_ID_TEMPLATE.format(realm_id=othello."}, {"line_number": 33, "line_content": "        realm_id, emoji_file_name=emoji.file_name)"}, {"line_number": 34, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 35, "line_content": "        transfer_emoji_to_s3(1)"}, {"line_number": 36, "line_content": "    self.assert_length(list(bucket.objects.all()), 5)"}, {"line_number": 37, "line_content": "    original_key = bucket.Object(emoji_path + '.original')"}, {"line_number": 38, "line_content": "    resized_key = bucket.Object(emoji_path)"}, {"line_number": 39, "line_content": "    assert emoji.file_name"}, {"line_number": 40, "line_content": "    still_key = bucket.Object(RealmEmoji.STILL_PATH_ID_TEMPLATE.format("}, {"line_number": 41, "line_content": "        realm_id=othello.realm_id, emoji_filename_without_extension=os.path"}, {"line_number": 42, "line_content": "        .splitext(emoji.file_name)[0]))"}, {"line_number": 43, "line_content": "    image_data = read_test_image_file('animated_img.gif')"}, {"line_number": 44, "line_content": "    resized_image_data, is_animated, still_image_data = resize_emoji(image_data"}, {"line_number": 45, "line_content": "        )"}, {"line_number": 46, "line_content": "    self.assertEqual(is_animated, True)"}, {"line_number": 47, "line_content": "    self.assertEqual(type(still_image_data), bytes)"}, {"line_number": 48, "line_content": "    self.assertEqual(image_data, original_key.get()['Body'].read())"}, {"line_number": 49, "line_content": "    self.assertEqual(resized_image_data, resized_key.get()['Body'].read())"}, {"line_number": 50, "line_content": "    self.assertEqual(still_image_data, still_key.get()['Body'].read())"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue_worker.py#L75", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def simulated_queue_client(client: FakeClient) ->Iterator[None]:"}, {"line_number": 3, "line_content": "    with patch.object(queue_processors, 'SimpleQueueClient', lambda *args,"}, {"line_number": 4, "line_content": "        **kwargs: client):"}, {"line_number": 5, "line_content": "        yield"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_redis_utils.py#L18", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def setUpClass(cls) ->None:"}, {"line_number": 3, "line_content": "    cls.redis_client = get_redis_client()"}, {"line_number": 4, "line_content": "    return super().setUpClass()"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_migrations.py#L41", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "@use_db_models"}, {"line_number": 2, "line_content": "def setUpBeforeMigration(self, apps: StateApps) ->None:"}, {"line_number": 3, "line_content": "    Recipient = apps.get_model('zerver', 'Recipient')"}, {"line_number": 4, "line_content": "    Message = apps.get_model('zerver', 'Message')"}, {"line_number": 5, "line_content": "    iago = self.example_user('iago')"}, {"line_number": 6, "line_content": "    stream_name = 'Denmark'"}, {"line_number": 7, "line_content": "    denmark = get_stream(stream_name, iago.realm)"}, {"line_number": 8, "line_content": "    denmark_recipient = Recipient.objects.get(type=2, type_id=denmark.id)"}, {"line_number": 9, "line_content": "    self.msg_id = Message.objects.create(recipient_id=denmark_recipient.id,"}, {"line_number": 10, "line_content": "        subject='topic 4', sender_id=iago.id, sending_client_id=1, content="}, {"line_number": 11, "line_content": "        'current message text', date_sent=timezone_now()).id"}, {"line_number": 12, "line_content": "    msg = Message.objects.filter(id=self.msg_id).first()"}, {"line_number": 13, "line_content": "    msg.edit_history = orjson.dumps([{'user_id': 11, 'timestamp': "}, {"line_number": 14, "line_content": "        1644405050, 'prev_stream': 3, 'prev_subject': 'topic 3'}, {"}, {"line_number": 15, "line_content": "        'user_id': 11, 'timestamp': 1644405040, 'prev_stream': 2}, {"}, {"line_number": 16, "line_content": "        'user_id': 11, 'timestamp': 1644405030, 'prev_content':"}, {"line_number": 17, "line_content": "        'test content and topic edit', 'prev_rendered_content':"}, {"line_number": 18, "line_content": "        '<p>test content and topic edit</p>',"}, {"line_number": 19, "line_content": "        'prev_rendered_content_version': 1, 'prev_subject': 'topic 2'}, {"}, {"line_number": 20, "line_content": "        'user_id': 11, 'timestamp': 1644405020, 'prev_subject': 'topic 1'},"}, {"line_number": 21, "line_content": "        {'user_id': 11, 'timestamp': 1644405010, 'prev_content':"}, {"line_number": 22, "line_content": "        'test content only edit', 'prev_rendered_content':"}, {"line_number": 23, "line_content": "        '<p>test content only edit</p>', 'prev_rendered_content_version': 1}]"}, {"line_number": 24, "line_content": "        ).decode()"}, {"line_number": 25, "line_content": "    msg.save(update_fields=['edit_history'])"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_gitter_importer.py#L14", "contents": {"total_lines": 55, "lines": [{"line_number": 1, "line_content": "@mock.patch('zerver.data_import.gitter.process_avatars', return_value=[])"}, {"line_number": 2, "line_content": "def test_gitter_import_data_conversion(self, mock_process_avatars: mock.Mock"}, {"line_number": 3, "line_content": "    ) ->None:"}, {"line_number": 4, "line_content": "    output_dir = self.make_import_output_dir('gitter')"}, {"line_number": 5, "line_content": "    gitter_file = os.path.join(os.path.dirname(__file__),"}, {"line_number": 6, "line_content": "        'fixtures/gitter_data.json')"}, {"line_number": 7, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 8, "line_content": "        do_convert_data(gitter_file, output_dir)"}, {"line_number": 9, "line_content": "    def read_file(output_file: str) ->Any:"}, {"line_number": 10, "line_content": "        full_path = os.path.join(output_dir, output_file)"}, {"line_number": 11, "line_content": "        with open(full_path, 'rb') as f:"}, {"line_number": 12, "line_content": "            return orjson.loads(f.read())"}, {"line_number": 13, "line_content": "    self.assertEqual(os.path.exists(os.path.join(output_dir, 'avatars')), True)"}, {"line_number": 14, "line_content": "    self.assertEqual(os.path.exists(os.path.join(output_dir, 'emoji')), True)"}, {"line_number": 15, "line_content": "    self.assertEqual(os.path.exists(os.path.join(output_dir,"}, {"line_number": 16, "line_content": "        'attachment.json')), True)"}, {"line_number": 17, "line_content": "    realm = read_file('realm.json')"}, {"line_number": 18, "line_content": "    self.assertEqual('Organization imported from Gitter!', realm["}, {"line_number": 19, "line_content": "        'zerver_realm'][0]['description'])"}, {"line_number": 20, "line_content": "    exported_user_ids = self.get_set(realm['zerver_userprofile'], 'id')"}, {"line_number": 21, "line_content": "    exported_user_full_name = self.get_set(realm['zerver_userprofile'],"}, {"line_number": 22, "line_content": "        'full_name')"}, {"line_number": 23, "line_content": "    self.assertIn('User Full Name', exported_user_full_name)"}, {"line_number": 24, "line_content": "    exported_user_email = self.get_set(realm['zerver_userprofile'], 'email')"}, {"line_number": 25, "line_content": "    self.assertIn('username2@users.noreply.github.com', exported_user_email)"}, {"line_number": 26, "line_content": "    self.assert_length(realm['zerver_stream'], 1)"}, {"line_number": 27, "line_content": "    self.assertEqual(realm['zerver_stream'][0]['name'], 'from gitter')"}, {"line_number": 28, "line_content": "    self.assertEqual(realm['zerver_stream'][0]['deactivated'], False)"}, {"line_number": 29, "line_content": "    self.assertEqual(realm['zerver_stream'][0]['realm'], realm["}, {"line_number": 30, "line_content": "        'zerver_realm'][0]['id'])"}, {"line_number": 31, "line_content": "    self.assertEqual(realm['zerver_defaultstream'][0]['stream'], realm["}, {"line_number": 32, "line_content": "        'zerver_stream'][0]['id'])"}, {"line_number": 33, "line_content": "    exported_recipient_id = self.get_set(realm['zerver_recipient'], 'id')"}, {"line_number": 34, "line_content": "    exported_recipient_type = self.get_set(realm['zerver_recipient'], 'type')"}, {"line_number": 35, "line_content": "    self.assertEqual({1, 2}, exported_recipient_type)"}, {"line_number": 36, "line_content": "    exported_subscription_userprofile = self.get_set(realm["}, {"line_number": 37, "line_content": "        'zerver_subscription'], 'user_profile')"}, {"line_number": 38, "line_content": "    self.assertEqual({0, 1}, exported_subscription_userprofile)"}, {"line_number": 39, "line_content": "    exported_subscription_recipient = self.get_set(realm["}, {"line_number": 40, "line_content": "        'zerver_subscription'], 'recipient')"}, {"line_number": 41, "line_content": "    self.assert_length(exported_subscription_recipient, 3)"}, {"line_number": 42, "line_content": "    self.assertIn(realm['zerver_subscription'][1]['recipient'],"}, {"line_number": 43, "line_content": "        exported_recipient_id)"}, {"line_number": 44, "line_content": "    messages = read_file('messages-000001.json')"}, {"line_number": 45, "line_content": "    exported_messages_id = self.get_set(messages['zerver_message'], 'id')"}, {"line_number": 46, "line_content": "    self.assertIn(messages['zerver_message'][0]['sender'], exported_user_ids)"}, {"line_number": 47, "line_content": "    self.assertIn(messages['zerver_message'][1]['recipient'],"}, {"line_number": 48, "line_content": "        exported_recipient_id)"}, {"line_number": 49, "line_content": "    self.assertIn(messages['zerver_message'][0]['content'], 'test message')"}, {"line_number": 50, "line_content": "    exported_usermessage_userprofile = self.get_set(messages["}, {"line_number": 51, "line_content": "        'zerver_usermessage'], 'user_profile')"}, {"line_number": 52, "line_content": "    self.assertEqual(exported_user_ids, exported_usermessage_userprofile)"}, {"line_number": 53, "line_content": "    exported_usermessage_message = self.get_set(messages["}, {"line_number": 54, "line_content": "        'zerver_usermessage'], 'message')"}, {"line_number": 55, "line_content": "    self.assertEqual(exported_usermessage_message, exported_messages_id)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_gitter_importer.py#L14", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@mock.patch('zerver.data_import.gitter.process_avatars', return_value=[])"}, {"line_number": 2, "line_content": "def test_gitter_import_to_existing_database(self, mock_process_avatars:"}, {"line_number": 3, "line_content": "    mock.Mock) ->None:"}, {"line_number": 4, "line_content": "    output_dir = self.make_import_output_dir('gitter')"}, {"line_number": 5, "line_content": "    gitter_file = os.path.join(os.path.dirname(__file__),"}, {"line_number": 6, "line_content": "        'fixtures/gitter_data.json')"}, {"line_number": 7, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 8, "line_content": "        do_convert_data(gitter_file, output_dir)"}, {"line_number": 9, "line_content": "    with self.assertLogs(level='INFO'):"}, {"line_number": 10, "line_content": "        do_import_realm(output_dir, 'test-gitter-import')"}, {"line_number": 11, "line_content": "    realm = get_realm('test-gitter-import')"}, {"line_number": 12, "line_content": "    realm_users = UserProfile.objects.filter(realm=realm)"}, {"line_number": 13, "line_content": "    messages = Message.objects.filter(sender__in=realm_users)"}, {"line_number": 14, "line_content": "    for message in messages:"}, {"line_number": 15, "line_content": "        self.assertIsNotNone(message.rendered_content, None)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_github.py#L12", "contents": {"total_lines": 52, "lines": [{"line_number": 1, "line_content": "@responses.activate"}, {"line_number": 2, "line_content": "def test_get_latest_github_release_download_link_for_platform(self) ->None:"}, {"line_number": 3, "line_content": "    responses.add(responses.GET,"}, {"line_number": 4, "line_content": "        'https://api.github.com/repos/zulip/zulip-desktop/releases/latest',"}, {"line_number": 5, "line_content": "        json={'tag_name': 'v5.4.3'}, status=200)"}, {"line_number": 6, "line_content": "    responses.add(responses.HEAD,"}, {"line_number": 7, "line_content": "        'https://desktop-download.zulip.com/v5.4.3/Zulip-Web-Setup-5.4.3.exe',"}, {"line_number": 8, "line_content": "        status=302)"}, {"line_number": 9, "line_content": "    self.assertEqual(get_latest_github_release_download_link_for_platform("}, {"line_number": 10, "line_content": "        'windows'),"}, {"line_number": 11, "line_content": "        'https://desktop-download.zulip.com/v5.4.3/Zulip-Web-Setup-5.4.3.exe')"}, {"line_number": 12, "line_content": "    responses.add(responses.HEAD,"}, {"line_number": 13, "line_content": "        'https://desktop-download.zulip.com/v5.4.3/Zulip-5.4.3-x86_64.AppImage'"}, {"line_number": 14, "line_content": "        , status=302)"}, {"line_number": 15, "line_content": "    self.assertEqual(get_latest_github_release_download_link_for_platform("}, {"line_number": 16, "line_content": "        'linux'),"}, {"line_number": 17, "line_content": "        'https://desktop-download.zulip.com/v5.4.3/Zulip-5.4.3-x86_64.AppImage'"}, {"line_number": 18, "line_content": "        )"}, {"line_number": 19, "line_content": "    responses.add(responses.HEAD,"}, {"line_number": 20, "line_content": "        'https://desktop-download.zulip.com/v5.4.3/Zulip-5.4.3-x64.dmg',"}, {"line_number": 21, "line_content": "        status=302)"}, {"line_number": 22, "line_content": "    self.assertEqual(get_latest_github_release_download_link_for_platform("}, {"line_number": 23, "line_content": "        'mac'), 'https://desktop-download.zulip.com/v5.4.3/Zulip-5.4.3-x64.dmg'"}, {"line_number": 24, "line_content": "        )"}, {"line_number": 25, "line_content": "    api_url = ("}, {"line_number": 26, "line_content": "        'https://api.github.com/repos/zulip/zulip-desktop/releases/latest')"}, {"line_number": 27, "line_content": "    responses.replace(responses.GET, api_url, body=requests.RequestException())"}, {"line_number": 28, "line_content": "    cache_delete('download_link:windows')"}, {"line_number": 29, "line_content": "    with self.assertLogs(logger_string, level='ERROR') as error_log:"}, {"line_number": 30, "line_content": "        self.assertEqual(get_latest_github_release_download_link_for_platform"}, {"line_number": 31, "line_content": "            ('windows'),"}, {"line_number": 32, "line_content": "            'https://github.com/zulip/zulip-desktop/releases/latest')"}, {"line_number": 33, "line_content": "        self.assertIn("}, {"line_number": 34, "line_content": "            f'ERROR:{logger_string}:Unable to fetch the latest release version from GitHub {api_url}'"}, {"line_number": 35, "line_content": "            , error_log.output[0])"}, {"line_number": 36, "line_content": "    responses.replace(responses.GET,"}, {"line_number": 37, "line_content": "        'https://api.github.com/repos/zulip/zulip-desktop/releases/latest',"}, {"line_number": 38, "line_content": "        json={'tag_name': '5.4.4'}, status=200)"}, {"line_number": 39, "line_content": "    download_link = ("}, {"line_number": 40, "line_content": "        'https://desktop-download.zulip.com/v5.4.4/Zulip-5.4.4-x86_64.AppImage'"}, {"line_number": 41, "line_content": "        )"}, {"line_number": 42, "line_content": "    responses.add(responses.HEAD, download_link, status=404)"}, {"line_number": 43, "line_content": "    cache_delete('download_link:linux')"}, {"line_number": 44, "line_content": "    with self.assertLogs(logger_string, level='ERROR') as error_log:"}, {"line_number": 45, "line_content": "        self.assertEqual(get_latest_github_release_download_link_for_platform"}, {"line_number": 46, "line_content": "            ('linux'), 'https://github.com/zulip/zulip-desktop/releases/latest'"}, {"line_number": 47, "line_content": "            )"}, {"line_number": 48, "line_content": "        self.assertEqual(error_log.output, ["}, {"line_number": 49, "line_content": "            f'ERROR:{logger_string}:App download link is broken {download_link}'"}, {"line_number": 50, "line_content": "            ])"}, {"line_number": 51, "line_content": "    with self.assertRaises(InvalidPlatform):"}, {"line_number": 52, "line_content": "        get_latest_github_release_download_link_for_platform('plan9')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_digest.py#L43", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "@mock.patch('zerver.lib.digest.enough_traffic')"}, {"line_number": 2, "line_content": "@mock.patch('zerver.lib.digest.send_future_email')"}, {"line_number": 3, "line_content": "def test_multiple_stream_senders(self, mock_send_future_email: mock."}, {"line_number": 4, "line_content": "    MagicMock, mock_enough_traffic: mock.MagicMock) ->None:"}, {"line_number": 5, "line_content": "    othello = self.example_user('othello')"}, {"line_number": 6, "line_content": "    self.subscribe(othello, 'Verona')"}, {"line_number": 7, "line_content": "    one_day_ago = timezone_now() - datetime.timedelta(days=1)"}, {"line_number": 8, "line_content": "    Message.objects.all().update(date_sent=one_day_ago)"}, {"line_number": 9, "line_content": "    one_hour_ago = timezone_now() - datetime.timedelta(seconds=3600)"}, {"line_number": 10, "line_content": "    cutoff = time.mktime(one_hour_ago.timetuple())"}, {"line_number": 11, "line_content": "    senders = ['hamlet', 'cordelia', 'iago', 'prospero', 'ZOE']"}, {"line_number": 12, "line_content": "    self.simulate_stream_conversation('Verona', senders)"}, {"line_number": 13, "line_content": "    RealmAuditLog.objects.all().delete()"}, {"line_number": 14, "line_content": "    flush_per_request_caches()"}, {"line_number": 15, "line_content": "    one_click_unsubscribe_link(othello, 'digest')"}, {"line_number": 16, "line_content": "    with queries_captured() as queries:"}, {"line_number": 17, "line_content": "        bulk_handle_digest_email([othello.id], cutoff)"}, {"line_number": 18, "line_content": "    self.assert_length(queries, 9)"}, {"line_number": 19, "line_content": "    self.assertEqual(mock_send_future_email.call_count, 1)"}, {"line_number": 20, "line_content": "    kwargs = mock_send_future_email.call_args[1]"}, {"line_number": 21, "line_content": "    self.assertEqual(kwargs['to_user_ids'], [othello.id])"}, {"line_number": 22, "line_content": "    hot_convo = kwargs['context']['hot_conversations'][0]"}, {"line_number": 23, "line_content": "    expected_participants = {self.example_user(sender).full_name for sender in"}, {"line_number": 24, "line_content": "        senders}"}, {"line_number": 25, "line_content": "    self.assertEqual(set(hot_convo['participants']), expected_participants)"}, {"line_number": 26, "line_content": "    self.assertEqual(hot_convo['count'], 5 - 2)"}, {"line_number": 27, "line_content": "    teaser_messages = hot_convo['first_few_messages'][0]['senders']"}, {"line_number": 28, "line_content": "    self.assertIn('some content', teaser_messages[0]['content'][0]['plain'])"}, {"line_number": 29, "line_content": "    self.assertIn(teaser_messages[0]['sender'], expected_participants)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_external.py#L77", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def rate_limit_rule(range_seconds: int, num_requests: int, domain: str"}, {"line_number": 3, "line_content": "    ) ->Iterator[None]:"}, {"line_number": 4, "line_content": "    RateLimitedIPAddr('127.0.0.1', domain=domain).clear_history()"}, {"line_number": 5, "line_content": "    add_ratelimit_rule(range_seconds, num_requests, domain=domain)"}, {"line_number": 6, "line_content": "    try:"}, {"line_number": 7, "line_content": "        yield"}, {"line_number": 8, "line_content": "    finally:"}, {"line_number": 9, "line_content": "        remove_ratelimit_rule(range_seconds, num_requests, domain=domain)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue.py#L18", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@mock.patch('zerver.lib.queue.ExceptionFreeTornadoConnection', autospec=True)"}, {"line_number": 2, "line_content": "def test_on_open_closed(self, mock_cxn: mock.MagicMock) ->None:"}, {"line_number": 3, "line_content": "    with self.assertLogs('zulip.queue', 'WARNING') as m:"}, {"line_number": 4, "line_content": "        mock_cxn().channel.side_effect = ConnectionClosed(500, 'test')"}, {"line_number": 5, "line_content": "        connection = TornadoQueueClient()"}, {"line_number": 6, "line_content": "        connection._on_open(mock.MagicMock())"}, {"line_number": 7, "line_content": "        self.assertEqual(m.output, ["}, {"line_number": 8, "line_content": "            \"WARNING:zulip.queue:TornadoQueueClient couldn't open channel: connection already closed\""}, {"line_number": 9, "line_content": "            ])"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue.py#L33", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@override_settings(USING_RABBITMQ=True)"}, {"line_number": 2, "line_content": "def test_register_consumer(self) ->None:"}, {"line_number": 3, "line_content": "    output = []"}, {"line_number": 4, "line_content": "    queue_client = get_queue_client()"}, {"line_number": 5, "line_content": "    def collect(events: List[Dict[str, Any]]) ->None:"}, {"line_number": 6, "line_content": "        assert isinstance(queue_client, SimpleQueueClient)"}, {"line_number": 7, "line_content": "        assert len(events) == 1"}, {"line_number": 8, "line_content": "        output.append(events[0])"}, {"line_number": 9, "line_content": "        queue_client.stop_consuming()"}, {"line_number": 10, "line_content": "    queue_json_publish('test_suite', {'event': 'my_event'})"}, {"line_number": 11, "line_content": "    queue_client.start_json_consumer('test_suite', collect)"}, {"line_number": 12, "line_content": "    self.assert_length(output, 1)"}, {"line_number": 13, "line_content": "    self.assertEqual(output[0]['event'], 'my_event')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue.py#L33", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "@override_settings(USING_RABBITMQ=True)"}, {"line_number": 2, "line_content": "def test_register_consumer_nack(self) ->None:"}, {"line_number": 3, "line_content": "    output = []"}, {"line_number": 4, "line_content": "    count = 0"}, {"line_number": 5, "line_content": "    queue_client = get_queue_client()"}, {"line_number": 6, "line_content": "    def collect(events: List[Dict[str, Any]]) ->None:"}, {"line_number": 7, "line_content": "        assert isinstance(queue_client, SimpleQueueClient)"}, {"line_number": 8, "line_content": "        assert len(events) == 1"}, {"line_number": 9, "line_content": "        queue_client.stop_consuming()"}, {"line_number": 10, "line_content": "        nonlocal count"}, {"line_number": 11, "line_content": "        count += 1"}, {"line_number": 12, "line_content": "        if count == 1:"}, {"line_number": 13, "line_content": "            raise Exception('Make me nack!')"}, {"line_number": 14, "line_content": "        output.append(events[0])"}, {"line_number": 15, "line_content": "    queue_json_publish('test_suite', {'event': 'my_event'})"}, {"line_number": 16, "line_content": "    try:"}, {"line_number": 17, "line_content": "        queue_client.start_json_consumer('test_suite', collect)"}, {"line_number": 18, "line_content": "    except Exception:"}, {"line_number": 19, "line_content": "        queue_client.start_json_consumer('test_suite', collect)"}, {"line_number": 20, "line_content": "    self.assertEqual(count, 2)"}, {"line_number": 21, "line_content": "    self.assert_length(output, 1)"}, {"line_number": 22, "line_content": "    self.assertEqual(output[0]['event'], 'my_event')"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue.py#L33", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "@override_settings(USING_RABBITMQ=True)"}, {"line_number": 2, "line_content": "def test_queue_error_json(self) ->None:"}, {"line_number": 3, "line_content": "    queue_client = get_queue_client()"}, {"line_number": 4, "line_content": "    assert isinstance(queue_client, SimpleQueueClient)"}, {"line_number": 5, "line_content": "    actual_publish = queue_client.publish"}, {"line_number": 6, "line_content": "    self.counter = 0"}, {"line_number": 7, "line_content": "    def throw_connection_error_once(self_obj: Any, *args: Any, **kwargs: Any"}, {"line_number": 8, "line_content": "        ) ->None:"}, {"line_number": 9, "line_content": "        self.counter += 1"}, {"line_number": 10, "line_content": "        if self.counter <= 1:"}, {"line_number": 11, "line_content": "            raise AMQPConnectionError('test')"}, {"line_number": 12, "line_content": "        actual_publish(*args, **kwargs)"}, {"line_number": 13, "line_content": "    with mock.patch('zerver.lib.queue.SimpleQueueClient.publish',"}, {"line_number": 14, "line_content": "        throw_connection_error_once), self.assertLogs('zulip.queue', level="}, {"line_number": 15, "line_content": "        'WARN') as warn_logs:"}, {"line_number": 16, "line_content": "        queue_json_publish('test_suite', {'event': 'my_event'})"}, {"line_number": 17, "line_content": "    self.assertEqual(warn_logs.output, ["}, {"line_number": 18, "line_content": "        'WARNING:zulip.queue:Failed to send to rabbitmq, trying to reconnect and send again'"}, {"line_number": 19, "line_content": "        ])"}, {"line_number": 20, "line_content": "    assert queue_client.channel"}, {"line_number": 21, "line_content": "    method, header, message = queue_client.channel.basic_get('test_suite')"}, {"line_number": 22, "line_content": "    assert method is not None"}, {"line_number": 23, "line_content": "    assert method.delivery_tag is not None"}, {"line_number": 24, "line_content": "    assert message is not None"}, {"line_number": 25, "line_content": "    queue_client.channel.basic_ack(method.delivery_tag)"}, {"line_number": 26, "line_content": "    result = orjson.loads(message)"}, {"line_number": 27, "line_content": "    self.assertEqual(result['event'], 'my_event')"}, {"line_number": 28, "line_content": "    method, header, message = queue_client.channel.basic_get('test_suite')"}, {"line_number": 29, "line_content": "    assert message is None"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tests/test_queue.py#L33", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@override_settings(USING_RABBITMQ=True)"}, {"line_number": 2, "line_content": "def setUp(self) ->None:"}, {"line_number": 3, "line_content": "    queue_client = get_queue_client()"}, {"line_number": 4, "line_content": "    assert queue_client.channel"}, {"line_number": 5, "line_content": "    queue_client.channel.queue_declare('test_suite', durable=True)"}, {"line_number": 6, "line_content": "    queue_client.channel.queue_purge('test_suite')"}, {"line_number": 7, "line_content": "    super().setUp()"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/streams.py#L67", "contents": {"total_lines": 41, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(savepoint=False)"}, {"line_number": 2, "line_content": "def do_deactivate_stream(stream: Stream, log: bool=True, *, acting_user:"}, {"line_number": 3, "line_content": "    Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    deferred_work_event = {'type':"}, {"line_number": 5, "line_content": "        'mark_stream_messages_as_read_for_everyone', 'stream_recipient_id':"}, {"line_number": 6, "line_content": "        stream.recipient_id}"}, {"line_number": 7, "line_content": "    transaction.on_commit(lambda : queue_json_publish('deferred_work',"}, {"line_number": 8, "line_content": "        deferred_work_event))"}, {"line_number": 9, "line_content": "    affected_user_ids = can_access_stream_user_ids(stream)"}, {"line_number": 10, "line_content": "    get_active_subscriptions_for_stream_id(stream.id,"}, {"line_number": 11, "line_content": "        include_deactivated_users=True).update(active=False)"}, {"line_number": 12, "line_content": "    was_invite_only = stream.invite_only"}, {"line_number": 13, "line_content": "    stream.deactivated = True"}, {"line_number": 14, "line_content": "    stream.invite_only = True"}, {"line_number": 15, "line_content": "    old_name = stream.name"}, {"line_number": 16, "line_content": "    streamID = str(stream.id)"}, {"line_number": 17, "line_content": "    stream_id_hash_object = hashlib.sha512(streamID.encode())"}, {"line_number": 18, "line_content": "    hashed_stream_id = stream_id_hash_object.hexdigest()[0:7]"}, {"line_number": 19, "line_content": "    new_name = (hashed_stream_id + '!DEACTIVATED:' + old_name)[:Stream."}, {"line_number": 20, "line_content": "        MAX_NAME_LENGTH]"}, {"line_number": 21, "line_content": "    stream.name = new_name[:Stream.MAX_NAME_LENGTH]"}, {"line_number": 22, "line_content": "    stream.save(update_fields=['name', 'deactivated', 'invite_only'])"}, {"line_number": 23, "line_content": "    if DefaultStream.objects.filter(realm_id=stream.realm_id, stream_id="}, {"line_number": 24, "line_content": "        stream.id).exists():"}, {"line_number": 25, "line_content": "        do_remove_default_stream(stream)"}, {"line_number": 26, "line_content": "    default_stream_groups_for_stream = DefaultStreamGroup.objects.filter("}, {"line_number": 27, "line_content": "        streams__id=stream.id)"}, {"line_number": 28, "line_content": "    for group in default_stream_groups_for_stream:"}, {"line_number": 29, "line_content": "        do_remove_streams_from_default_stream_group(stream.realm, group, ["}, {"line_number": 30, "line_content": "            stream])"}, {"line_number": 31, "line_content": "    old_cache_key = get_stream_cache_key(old_name, stream.realm_id)"}, {"line_number": 32, "line_content": "    cache_delete(old_cache_key)"}, {"line_number": 33, "line_content": "    stream_dict = stream.to_dict()"}, {"line_number": 34, "line_content": "    stream_dict.update(dict(name=old_name, invite_only=was_invite_only))"}, {"line_number": 35, "line_content": "    event = dict(type='stream', op='delete', streams=[stream_dict])"}, {"line_number": 36, "line_content": "    transaction.on_commit(lambda : send_event(stream.realm, event,"}, {"line_number": 37, "line_content": "        affected_user_ids))"}, {"line_number": 38, "line_content": "    event_time = timezone_now()"}, {"line_number": 39, "line_content": "    RealmAuditLog.objects.create(realm=stream.realm, acting_user="}, {"line_number": 40, "line_content": "        acting_user, modified_stream=stream, event_type=RealmAuditLog."}, {"line_number": 41, "line_content": "        STREAM_DEACTIVATED, event_time=event_time)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/realm_icon.py#L11", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_icon_source(realm: Realm, icon_source: str, *, acting_user:"}, {"line_number": 3, "line_content": "    Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    realm.icon_source = icon_source"}, {"line_number": 5, "line_content": "    realm.icon_version += 1"}, {"line_number": 6, "line_content": "    realm.save(update_fields=['icon_source', 'icon_version'])"}, {"line_number": 7, "line_content": "    event_time = timezone_now()"}, {"line_number": 8, "line_content": "    RealmAuditLog.objects.create(realm=realm, event_type=RealmAuditLog."}, {"line_number": 9, "line_content": "        REALM_ICON_SOURCE_CHANGED, extra_data={'icon_source': icon_source,"}, {"line_number": 10, "line_content": "        'icon_version': realm.icon_version}, event_time=event_time,"}, {"line_number": 11, "line_content": "        acting_user=acting_user)"}, {"line_number": 12, "line_content": "    event = dict(type='realm', op='update_dict', property='icon', data=dict"}, {"line_number": 13, "line_content": "        (icon_source=realm.icon_source, icon_url=realm_icon_url(realm)))"}, {"line_number": 14, "line_content": "    transaction.on_commit(lambda : send_event(realm, event, active_user_ids"}, {"line_number": 15, "line_content": "        (realm.id)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/realm_logo.py#L11", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_logo_source(realm: Realm, logo_source: str, night: bool, *,"}, {"line_number": 3, "line_content": "    acting_user: Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    if not night:"}, {"line_number": 5, "line_content": "        realm.logo_source = logo_source"}, {"line_number": 6, "line_content": "        realm.logo_version += 1"}, {"line_number": 7, "line_content": "        realm.save(update_fields=['logo_source', 'logo_version'])"}, {"line_number": 8, "line_content": "    else:"}, {"line_number": 9, "line_content": "        realm.night_logo_source = logo_source"}, {"line_number": 10, "line_content": "        realm.night_logo_version += 1"}, {"line_number": 11, "line_content": "        realm.save(update_fields=['night_logo_source', 'night_logo_version'])"}, {"line_number": 12, "line_content": "    RealmAuditLog.objects.create(event_type=RealmAuditLog."}, {"line_number": 13, "line_content": "        REALM_LOGO_CHANGED, realm=realm, event_time=timezone_now(),"}, {"line_number": 14, "line_content": "        acting_user=acting_user)"}, {"line_number": 15, "line_content": "    event = dict(type='realm', op='update_dict', property='night_logo' if"}, {"line_number": 16, "line_content": "        night else 'logo', data=get_realm_logo_data(realm, night))"}, {"line_number": 17, "line_content": "    transaction.on_commit(lambda : send_event(realm, event, active_user_ids"}, {"line_number": 18, "line_content": "        (realm.id)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/bots.py#L12", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_bot_owner(user_profile: UserProfile, bot_owner: UserProfile,"}, {"line_number": 3, "line_content": "    acting_user: UserProfile) ->None:"}, {"line_number": 4, "line_content": "    previous_owner = user_profile.bot_owner"}, {"line_number": 5, "line_content": "    user_profile.bot_owner = bot_owner"}, {"line_number": 6, "line_content": "    user_profile.save()"}, {"line_number": 7, "line_content": "    event_time = timezone_now()"}, {"line_number": 8, "line_content": "    RealmAuditLog.objects.create(realm=user_profile.realm, acting_user="}, {"line_number": 9, "line_content": "        acting_user, modified_user=user_profile, event_type=RealmAuditLog."}, {"line_number": 10, "line_content": "        USER_BOT_OWNER_CHANGED, event_time=event_time)"}, {"line_number": 11, "line_content": "    update_users = bot_owner_user_ids(user_profile)"}, {"line_number": 12, "line_content": "    if previous_owner and not previous_owner.is_realm_admin:"}, {"line_number": 13, "line_content": "        delete_event = dict(type='realm_bot', op='delete', bot=dict(user_id"}, {"line_number": 14, "line_content": "            =user_profile.id))"}, {"line_number": 15, "line_content": "        transaction.on_commit(lambda : send_event(user_profile.realm,"}, {"line_number": 16, "line_content": "            delete_event, {previous_owner.id}))"}, {"line_number": 17, "line_content": "        update_users = update_users - {previous_owner.id}"}, {"line_number": 18, "line_content": "    if not bot_owner.is_realm_admin:"}, {"line_number": 19, "line_content": "        add_event = created_bot_event(user_profile)"}, {"line_number": 20, "line_content": "        transaction.on_commit(lambda : send_event(user_profile.realm,"}, {"line_number": 21, "line_content": "            add_event, {bot_owner.id}))"}, {"line_number": 22, "line_content": "        update_users = update_users - {bot_owner.id}"}, {"line_number": 23, "line_content": "    bot_event = dict(type='realm_bot', op='update', bot=dict(user_id="}, {"line_number": 24, "line_content": "        user_profile.id, owner_id=user_profile.bot_owner.id))"}, {"line_number": 25, "line_content": "    transaction.on_commit(lambda : send_event(user_profile.realm, bot_event,"}, {"line_number": 26, "line_content": "        update_users))"}, {"line_number": 27, "line_content": "    event = dict(type='realm_user', op='update', person=dict(user_id="}, {"line_number": 28, "line_content": "        user_profile.id, bot_owner_id=user_profile.bot_owner.id))"}, {"line_number": 29, "line_content": "    transaction.on_commit(lambda : send_event(user_profile.realm, event,"}, {"line_number": 30, "line_content": "        active_user_ids(user_profile.realm_id)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/bots.py#L12", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_default_sending_stream(user_profile: UserProfile, stream:"}, {"line_number": 3, "line_content": "    Optional[Stream], *, acting_user: Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    old_value = user_profile.default_sending_stream_id"}, {"line_number": 5, "line_content": "    user_profile.default_sending_stream = stream"}, {"line_number": 6, "line_content": "    user_profile.save(update_fields=['default_sending_stream'])"}, {"line_number": 7, "line_content": "    event_time = timezone_now()"}, {"line_number": 8, "line_content": "    RealmAuditLog.objects.create(realm=user_profile.realm, event_type="}, {"line_number": 9, "line_content": "        RealmAuditLog.USER_DEFAULT_SENDING_STREAM_CHANGED, event_time="}, {"line_number": 10, "line_content": "        event_time, modified_user=user_profile, acting_user=acting_user,"}, {"line_number": 11, "line_content": "        extra_data=orjson.dumps({RealmAuditLog.OLD_VALUE: old_value,"}, {"line_number": 12, "line_content": "        RealmAuditLog.NEW_VALUE: None if stream is None else stream.id})."}, {"line_number": 13, "line_content": "        decode())"}, {"line_number": 14, "line_content": "    if user_profile.is_bot:"}, {"line_number": 15, "line_content": "        if stream:"}, {"line_number": 16, "line_content": "            stream_name: Optional[str] = stream.name"}, {"line_number": 17, "line_content": "        else:"}, {"line_number": 18, "line_content": "            stream_name = None"}, {"line_number": 19, "line_content": "        event = dict(type='realm_bot', op='update', bot=dict(user_id="}, {"line_number": 20, "line_content": "            user_profile.id, default_sending_stream=stream_name))"}, {"line_number": 21, "line_content": "        transaction.on_commit(lambda : send_event(user_profile.realm, event,"}, {"line_number": 22, "line_content": "            bot_owner_user_ids(user_profile)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/bots.py#L12", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_default_events_register_stream(user_profile: UserProfile,"}, {"line_number": 3, "line_content": "    stream: Optional[Stream], *, acting_user: Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    old_value = user_profile.default_events_register_stream_id"}, {"line_number": 5, "line_content": "    user_profile.default_events_register_stream = stream"}, {"line_number": 6, "line_content": "    user_profile.save(update_fields=['default_events_register_stream'])"}, {"line_number": 7, "line_content": "    event_time = timezone_now()"}, {"line_number": 8, "line_content": "    RealmAuditLog.objects.create(realm=user_profile.realm, event_type="}, {"line_number": 9, "line_content": "        RealmAuditLog.USER_DEFAULT_REGISTER_STREAM_CHANGED, event_time="}, {"line_number": 10, "line_content": "        event_time, modified_user=user_profile, acting_user=acting_user,"}, {"line_number": 11, "line_content": "        extra_data=orjson.dumps({RealmAuditLog.OLD_VALUE: old_value,"}, {"line_number": 12, "line_content": "        RealmAuditLog.NEW_VALUE: None if stream is None else stream.id})."}, {"line_number": 13, "line_content": "        decode())"}, {"line_number": 14, "line_content": "    if user_profile.is_bot:"}, {"line_number": 15, "line_content": "        if stream:"}, {"line_number": 16, "line_content": "            stream_name: Optional[str] = stream.name"}, {"line_number": 17, "line_content": "        else:"}, {"line_number": 18, "line_content": "            stream_name = None"}, {"line_number": 19, "line_content": "        event = dict(type='realm_bot', op='update', bot=dict(user_id="}, {"line_number": 20, "line_content": "            user_profile.id, default_events_register_stream=stream_name))"}, {"line_number": 21, "line_content": "        transaction.on_commit(lambda : send_event(user_profile.realm, event,"}, {"line_number": 22, "line_content": "            bot_owner_user_ids(user_profile)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/bots.py#L12", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_default_all_public_streams(user_profile: UserProfile, value:"}, {"line_number": 3, "line_content": "    bool, *, acting_user: Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    old_value = user_profile.default_all_public_streams"}, {"line_number": 5, "line_content": "    user_profile.default_all_public_streams = value"}, {"line_number": 6, "line_content": "    user_profile.save(update_fields=['default_all_public_streams'])"}, {"line_number": 7, "line_content": "    event_time = timezone_now()"}, {"line_number": 8, "line_content": "    RealmAuditLog.objects.create(realm=user_profile.realm, event_type="}, {"line_number": 9, "line_content": "        RealmAuditLog.USER_DEFAULT_ALL_PUBLIC_STREAMS_CHANGED, event_time="}, {"line_number": 10, "line_content": "        event_time, modified_user=user_profile, acting_user=acting_user,"}, {"line_number": 11, "line_content": "        extra_data=orjson.dumps({RealmAuditLog.OLD_VALUE: old_value,"}, {"line_number": 12, "line_content": "        RealmAuditLog.NEW_VALUE: value}).decode())"}, {"line_number": 13, "line_content": "    if user_profile.is_bot:"}, {"line_number": 14, "line_content": "        event = dict(type='realm_bot', op='update', bot=dict(user_id="}, {"line_number": 15, "line_content": "            user_profile.id, default_all_public_streams=user_profile."}, {"line_number": 16, "line_content": "            default_all_public_streams))"}, {"line_number": 17, "line_content": "        transaction.on_commit(lambda : send_event(user_profile.realm, event,"}, {"line_number": 18, "line_content": "            bot_owner_user_ids(user_profile)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/user_groups.py#L22", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(savepoint=False)"}, {"line_number": 2, "line_content": "def update_users_in_full_members_system_group(realm: Realm,"}, {"line_number": 3, "line_content": "    affected_user_ids: Sequence[int]=[]) ->None:"}, {"line_number": 4, "line_content": "    full_members_system_group = UserGroup.objects.get(realm=realm, name="}, {"line_number": 5, "line_content": "        '@role:fullmembers', is_system_group=True)"}, {"line_number": 6, "line_content": "    members_system_group = UserGroup.objects.get(realm=realm, name="}, {"line_number": 7, "line_content": "        '@role:members', is_system_group=True)"}, {"line_number": 8, "line_content": "    full_member_group_users: List[Dict[str, Union[int, datetime.datetime]]"}, {"line_number": 9, "line_content": "        ] = list()"}, {"line_number": 10, "line_content": "    member_group_users: List[Dict[str, Union[int, datetime.datetime]]] = list()"}, {"line_number": 11, "line_content": "    if affected_user_ids:"}, {"line_number": 12, "line_content": "        full_member_group_users = list(full_members_system_group."}, {"line_number": 13, "line_content": "            direct_members.filter(id__in=affected_user_ids).values('id',"}, {"line_number": 14, "line_content": "            'role', 'date_joined'))"}, {"line_number": 15, "line_content": "        member_group_users = list(members_system_group.direct_members."}, {"line_number": 16, "line_content": "            filter(id__in=affected_user_ids).values('id', 'role',"}, {"line_number": 17, "line_content": "            'date_joined'))"}, {"line_number": 18, "line_content": "    else:"}, {"line_number": 19, "line_content": "        full_member_group_users = list(full_members_system_group."}, {"line_number": 20, "line_content": "            direct_members.all().values('id', 'role', 'date_joined'))"}, {"line_number": 21, "line_content": "        member_group_users = list(members_system_group.direct_members.all()"}, {"line_number": 22, "line_content": "            .values('id', 'role', 'date_joined'))"}, {"line_number": 23, "line_content": "    def is_provisional_member(user: Dict[str, Union[int, datetime.datetime]]"}, {"line_number": 24, "line_content": "        ) ->bool:"}, {"line_number": 25, "line_content": "        diff = (timezone_now() - user['date_joined']).days"}, {"line_number": 26, "line_content": "        if diff < realm.waiting_period_threshold:"}, {"line_number": 27, "line_content": "            return True"}, {"line_number": 28, "line_content": "        return False"}, {"line_number": 29, "line_content": "    old_full_members = [user for user in full_member_group_users if "}, {"line_number": 30, "line_content": "        is_provisional_member(user) or user['role'] != UserProfile.ROLE_MEMBER]"}, {"line_number": 31, "line_content": "    full_member_group_user_ids = [user['id'] for user in"}, {"line_number": 32, "line_content": "        full_member_group_users]"}, {"line_number": 33, "line_content": "    members_excluding_full_members = [user for user in member_group_users if"}, {"line_number": 34, "line_content": "        user['id'] not in full_member_group_user_ids]"}, {"line_number": 35, "line_content": "    new_full_members = [user for user in members_excluding_full_members if "}, {"line_number": 36, "line_content": "        not is_provisional_member(user)]"}, {"line_number": 37, "line_content": "    old_full_member_ids = [user['id'] for user in old_full_members]"}, {"line_number": 38, "line_content": "    new_full_member_ids = [user['id'] for user in new_full_members]"}, {"line_number": 39, "line_content": "    if len(old_full_members) > 0:"}, {"line_number": 40, "line_content": "        remove_members_from_user_group(full_members_system_group,"}, {"line_number": 41, "line_content": "            old_full_member_ids)"}, {"line_number": 42, "line_content": "    if len(new_full_members) > 0:"}, {"line_number": 43, "line_content": "        bulk_add_members_to_user_group(full_members_system_group,"}, {"line_number": 44, "line_content": "            new_full_member_ids)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/realm_domains.py#L19", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_add_realm_domain(realm: Realm, domain: str, allow_subdomains: bool,"}, {"line_number": 3, "line_content": "    *, acting_user: Optional[UserProfile]) ->RealmDomain:"}, {"line_number": 4, "line_content": "    realm_domain = RealmDomain.objects.create(realm=realm, domain=domain,"}, {"line_number": 5, "line_content": "        allow_subdomains=allow_subdomains)"}, {"line_number": 6, "line_content": "    RealmAuditLog.objects.create(realm=realm, acting_user=acting_user,"}, {"line_number": 7, "line_content": "        event_type=RealmAuditLog.REALM_DOMAIN_ADDED, event_time="}, {"line_number": 8, "line_content": "        timezone_now(), extra_data=orjson.dumps({'realm_domains':"}, {"line_number": 9, "line_content": "        get_realm_domains(realm), 'added_domain': {'domain': domain,"}, {"line_number": 10, "line_content": "        'allow_subdomains': allow_subdomains}}).decode())"}, {"line_number": 11, "line_content": "    event = dict(type='realm_domains', op='add', realm_domain=dict(domain="}, {"line_number": 12, "line_content": "        realm_domain.domain, allow_subdomains=realm_domain.allow_subdomains))"}, {"line_number": 13, "line_content": "    transaction.on_commit(lambda : send_event(realm, event, active_user_ids"}, {"line_number": 14, "line_content": "        (realm.id)))"}, {"line_number": 15, "line_content": "    return realm_domain"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/realm_domains.py#L19", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_change_realm_domain(realm_domain: RealmDomain, allow_subdomains:"}, {"line_number": 3, "line_content": "    bool, *, acting_user: Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    realm_domain.allow_subdomains = allow_subdomains"}, {"line_number": 5, "line_content": "    realm_domain.save(update_fields=['allow_subdomains'])"}, {"line_number": 6, "line_content": "    RealmAuditLog.objects.create(realm=realm_domain.realm, acting_user="}, {"line_number": 7, "line_content": "        acting_user, event_type=RealmAuditLog.REALM_DOMAIN_CHANGED,"}, {"line_number": 8, "line_content": "        event_time=timezone_now(), extra_data=orjson.dumps({'realm_domains':"}, {"line_number": 9, "line_content": "        get_realm_domains(realm_domain.realm), 'changed_domain': {'domain':"}, {"line_number": 10, "line_content": "        realm_domain.domain, 'allow_subdomains': realm_domain."}, {"line_number": 11, "line_content": "        allow_subdomains}}).decode())"}, {"line_number": 12, "line_content": "    event = dict(type='realm_domains', op='change', realm_domain=dict("}, {"line_number": 13, "line_content": "        domain=realm_domain.domain, allow_subdomains=realm_domain."}, {"line_number": 14, "line_content": "        allow_subdomains))"}, {"line_number": 15, "line_content": "    transaction.on_commit(lambda : send_event(realm_domain.realm, event,"}, {"line_number": 16, "line_content": "        active_user_ids(realm_domain.realm_id)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/actions/realm_domains.py#L19", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "@transaction.atomic(durable=True)"}, {"line_number": 2, "line_content": "def do_remove_realm_domain(realm_domain: RealmDomain, *, acting_user:"}, {"line_number": 3, "line_content": "    Optional[UserProfile]) ->None:"}, {"line_number": 4, "line_content": "    realm = realm_domain.realm"}, {"line_number": 5, "line_content": "    domain = realm_domain.domain"}, {"line_number": 6, "line_content": "    realm_domain.delete()"}, {"line_number": 7, "line_content": "    RealmAuditLog.objects.create(realm=realm, acting_user=acting_user,"}, {"line_number": 8, "line_content": "        event_type=RealmAuditLog.REALM_DOMAIN_REMOVED, event_time="}, {"line_number": 9, "line_content": "        timezone_now(), extra_data=orjson.dumps({'realm_domains':"}, {"line_number": 10, "line_content": "        get_realm_domains(realm), 'removed_domain': {'domain': realm_domain"}, {"line_number": 11, "line_content": "        .domain, 'allow_subdomains': realm_domain.allow_subdomains}}).decode())"}, {"line_number": 12, "line_content": "    if RealmDomain.objects.filter(realm=realm).count("}, {"line_number": 13, "line_content": "        ) == 0 and realm.emails_restricted_to_domains:"}, {"line_number": 14, "line_content": "        do_set_realm_property(realm, 'emails_restricted_to_domains', False,"}, {"line_number": 15, "line_content": "            acting_user=acting_user)"}, {"line_number": 16, "line_content": "    event = dict(type='realm_domains', op='remove', domain=domain)"}, {"line_number": 17, "line_content": "    transaction.on_commit(lambda : send_event(realm, event, active_user_ids"}, {"line_number": 18, "line_content": "        (realm.id)))"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/views.py#L24", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@internal_notify_view(True)"}, {"line_number": 2, "line_content": "def notify(request: HttpRequest) ->HttpResponse:"}, {"line_number": 3, "line_content": "    process_notification(orjson.loads(request.POST['data']))"}, {"line_number": 4, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/views.py#L30", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def cleanup_event_queue(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 3, "line_content": "    queue_id: str=REQ()) ->HttpResponse:"}, {"line_number": 4, "line_content": "    client = get_client_descriptor(str(queue_id))"}, {"line_number": 5, "line_content": "    if client is None:"}, {"line_number": 6, "line_content": "        raise BadEventQueueIdError(queue_id)"}, {"line_number": 7, "line_content": "    if user_profile.id != client.user_profile_id:"}, {"line_number": 8, "line_content": "        raise JsonableError(_('You are not authorized to access this queue'))"}, {"line_number": 9, "line_content": "    log_data = RequestNotes.get_notes(request).log_data"}, {"line_number": 10, "line_content": "    assert log_data is not None"}, {"line_number": 11, "line_content": "    log_data['extra'] = f'[{queue_id}]'"}, {"line_number": 12, "line_content": "    client.cleanup()"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/views.py#L24", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@internal_notify_view(True)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def get_events_internal(request: HttpRequest, user_profile_id: int=REQ("}, {"line_number": 4, "line_content": "    json_validator=check_int)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    user_profile = get_user_profile_by_id(user_profile_id)"}, {"line_number": 6, "line_content": "    RequestNotes.get_notes(request"}, {"line_number": 7, "line_content": "        ).requestor_for_logs = user_profile.format_requestor_for_logs()"}, {"line_number": 8, "line_content": "    process_client(request, user_profile, client_name='internal')"}, {"line_number": 9, "line_content": "    return get_events_backend(request, user_profile)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L84", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "def start(io_loop=None, check_time=500):"}, {"line_number": 2, "line_content": "    \"\"\"Begins watching source files for changes."}, {"line_number": 3, "line_content": "    .. versionchanged:: 4.1"}, {"line_number": 4, "line_content": "       The ``io_loop`` argument is deprecated."}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    io_loop = io_loop or ioloop.IOLoop.current()"}, {"line_number": 7, "line_content": "    if io_loop in _io_loops:"}, {"line_number": 8, "line_content": "        return"}, {"line_number": 9, "line_content": "    _io_loops[io_loop] = True"}, {"line_number": 10, "line_content": "    if len(_io_loops) > 1:"}, {"line_number": 11, "line_content": "        gen_log.warning("}, {"line_number": 12, "line_content": "            'tornado.autoreload started more than once in the same process')"}, {"line_number": 13, "line_content": "    modify_times = {}"}, {"line_number": 14, "line_content": "    callback = functools.partial(_reload_on_update, modify_times)"}, {"line_number": 15, "line_content": "    scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)"}, {"line_number": 16, "line_content": "    scheduler.start()"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L102", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def wait():"}, {"line_number": 2, "line_content": "    \"\"\"Wait for a watched file to change, then restart the process."}, {"line_number": 3, "line_content": "    Intended to be used at the end of scripts like unit test runners,"}, {"line_number": 4, "line_content": "    to run the tests again after any source file changes (but see also"}, {"line_number": 5, "line_content": "    the command-line interface in `main`)"}, {"line_number": 6, "line_content": "    \"\"\""}, {"line_number": 7, "line_content": "    io_loop = ioloop.IOLoop()"}, {"line_number": 8, "line_content": "    start(io_loop)"}, {"line_number": 9, "line_content": "    io_loop.start()"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L114", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def watch(filename):"}, {"line_number": 2, "line_content": "    \"\"\"Add a file to the watch list."}, {"line_number": 3, "line_content": "    All imported modules are watched by default."}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    _watched_files.add(filename)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L122", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def add_reload_hook(fn):"}, {"line_number": 2, "line_content": "    \"\"\"Add a function to be called before reloading the process."}, {"line_number": 3, "line_content": "    Note that for open file and socket handles it is generally"}, {"line_number": 4, "line_content": "    preferable to set the ``FD_CLOEXEC`` flag (using `fcntl` or"}, {"line_number": 5, "line_content": "    ``tornado.platform.auto.set_close_exec``) instead"}, {"line_number": 6, "line_content": "    of using a reload hook to close them."}, {"line_number": 7, "line_content": "    \"\"\""}, {"line_number": 8, "line_content": "    _reload_hooks.append(fn)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L133", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "def _reload_on_update(modify_times):"}, {"line_number": 2, "line_content": "    global needs_to_reload"}, {"line_number": 3, "line_content": "    if _reload_attempted:"}, {"line_number": 4, "line_content": "        return"}, {"line_number": 5, "line_content": "    if process.task_id() is not None:"}, {"line_number": 6, "line_content": "        return"}, {"line_number": 7, "line_content": "    for module in list(sys.modules.values()):"}, {"line_number": 8, "line_content": "        if not isinstance(module, types.ModuleType):"}, {"line_number": 9, "line_content": "            continue"}, {"line_number": 10, "line_content": "        path = getattr(module, '__file__', None)"}, {"line_number": 11, "line_content": "        if not path:"}, {"line_number": 12, "line_content": "            continue"}, {"line_number": 13, "line_content": "        if path.endswith('.pyc') or path.endswith('.pyo'):"}, {"line_number": 14, "line_content": "            path = path[:-1]"}, {"line_number": 15, "line_content": "        result = _check_file(modify_times, module, path)"}, {"line_number": 16, "line_content": "        if result is False:"}, {"line_number": 17, "line_content": "            return"}, {"line_number": 18, "line_content": "        if result is True:"}, {"line_number": 19, "line_content": "            needs_to_reload = True"}, {"line_number": 20, "line_content": "    if needs_to_reload:"}, {"line_number": 21, "line_content": "        _reload()"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L170", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "def _check_file(modify_times, module, path):"}, {"line_number": 2, "line_content": "    try:"}, {"line_number": 3, "line_content": "        modified = os.stat(path).st_mtime"}, {"line_number": 4, "line_content": "    except Exception:"}, {"line_number": 5, "line_content": "        return"}, {"line_number": 6, "line_content": "    if path not in modify_times:"}, {"line_number": 7, "line_content": "        modify_times[path] = modified"}, {"line_number": 8, "line_content": "        return"}, {"line_number": 9, "line_content": "    if modify_times[path] != modified:"}, {"line_number": 10, "line_content": "        gen_log.info('%s modified; restarting server', path)"}, {"line_number": 11, "line_content": "        modify_times[path] = modified"}, {"line_number": 12, "line_content": "    else:"}, {"line_number": 13, "line_content": "        return"}, {"line_number": 14, "line_content": "    if path == __file__ or path == os.path.join(os.path.dirname(__file__),"}, {"line_number": 15, "line_content": "        'event_queue.py'):"}, {"line_number": 16, "line_content": "        return True"}, {"line_number": 17, "line_content": "    try:"}, {"line_number": 18, "line_content": "        importlib.reload(module)"}, {"line_number": 19, "line_content": "    except Exception:"}, {"line_number": 20, "line_content": "        gen_log.error(f'Error importing {path}, not reloading')"}, {"line_number": 21, "line_content": "        traceback.print_exc()"}, {"line_number": 22, "line_content": "        return False"}, {"line_number": 23, "line_content": "    return True"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/autoreload.py#L199", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "def _reload():"}, {"line_number": 2, "line_content": "    global _reload_attempted"}, {"line_number": 3, "line_content": "    _reload_attempted = True"}, {"line_number": 4, "line_content": "    for fn in _reload_hooks:"}, {"line_number": 5, "line_content": "        fn()"}, {"line_number": 6, "line_content": "    sys.stdout.flush()"}, {"line_number": 7, "line_content": "    if hasattr(signal, 'setitimer'):"}, {"line_number": 8, "line_content": "        signal.setitimer(signal.ITIMER_REAL, 0, 0)"}, {"line_number": 9, "line_content": "    path_prefix = '.' + os.pathsep"}, {"line_number": 10, "line_content": "    if sys.path[0] == '' and not os.environ.get('PYTHONPATH', '').startswith("}, {"line_number": 11, "line_content": "        path_prefix):"}, {"line_number": 12, "line_content": "        os.environ['PYTHONPATH'] = path_prefix + os.environ.get('PYTHONPATH',"}, {"line_number": 13, "line_content": "            '')"}, {"line_number": 14, "line_content": "    if not _has_execv:"}, {"line_number": 15, "line_content": "        subprocess.Popen([sys.executable] + sys.argv)"}, {"line_number": 16, "line_content": "        sys.exit(0)"}, {"line_number": 17, "line_content": "    else:"}, {"line_number": 18, "line_content": "        try:"}, {"line_number": 19, "line_content": "            os.execv(sys.executable, [sys.executable] + sys.argv)"}, {"line_number": 20, "line_content": "        except OSError:"}, {"line_number": 21, "line_content": "            os.spawnv(os.P_NOWAIT, sys.executable, [sys.executable] + sys.argv)"}, {"line_number": 22, "line_content": "            os._exit(0)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/tornado/django_api.py#L56", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@lru_cache(None)"}, {"line_number": 2, "line_content": "def requests_client() ->requests.Session:"}, {"line_number": 3, "line_content": "    c = requests.Session()"}, {"line_number": 4, "line_content": "    adapter = TornadoAdapter()"}, {"line_number": 5, "line_content": "    for scheme in ('https://', 'http://'):"}, {"line_number": 6, "line_content": "        c.mount(scheme, adapter)"}, {"line_number": 7, "line_content": "    return c"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/migrations/0377_message_edit_history_format.py#L39", "contents": {"total_lines": 49, "lines": [{"line_number": 1, "line_content": "@transaction.atomic"}, {"line_number": 2, "line_content": "def backfill_message_edit_history_chunk(first_id: int, last_id: int,"}, {"line_number": 3, "line_content": "    message_model: Model) ->None:"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    Migrate edit history events for the messages in the provided range to:"}, {"line_number": 6, "line_content": "    * Rename prev_subject => prev_topic."}, {"line_number": 7, "line_content": "    * Provide topic and stream fields with the current values."}, {"line_number": 8, "line_content": "    The range of message IDs to be processed is inclusive on both ends."}, {"line_number": 9, "line_content": "    \"\"\""}, {"line_number": 10, "line_content": "    messages = message_model.objects.select_for_update().only('recipient',"}, {"line_number": 11, "line_content": "        'recipient__type', 'recipient__type_id', 'subject', 'edit_history'"}, {"line_number": 12, "line_content": "        ).filter(edit_history__isnull=False, id__range=(first_id, last_id))"}, {"line_number": 13, "line_content": "    for message in messages:"}, {"line_number": 14, "line_content": "        legacy_edit_history: List[LegacyEditHistoryEvent] = orjson.loads("}, {"line_number": 15, "line_content": "            message.edit_history)"}, {"line_number": 16, "line_content": "        message_type = message.recipient.type"}, {"line_number": 17, "line_content": "        modern_edit_history: List[EditHistoryEvent] = []"}, {"line_number": 18, "line_content": "        if message_type == STREAM:"}, {"line_number": 19, "line_content": "            topic = message.subject"}, {"line_number": 20, "line_content": "            stream_id = message.recipient.type_id"}, {"line_number": 21, "line_content": "        for edit_history_event in legacy_edit_history:"}, {"line_number": 22, "line_content": "            modern_entry: EditHistoryEvent = {'user_id': edit_history_event"}, {"line_number": 23, "line_content": "                .get('user_id'), 'timestamp': edit_history_event['timestamp']}"}, {"line_number": 24, "line_content": "            if 'prev_content' in edit_history_event:"}, {"line_number": 25, "line_content": "                modern_entry['prev_content'] = edit_history_event["}, {"line_number": 26, "line_content": "                    'prev_content']"}, {"line_number": 27, "line_content": "                modern_entry['prev_rendered_content'] = edit_history_event["}, {"line_number": 28, "line_content": "                    'prev_rendered_content']"}, {"line_number": 29, "line_content": "                modern_entry['prev_rendered_content_version'"}, {"line_number": 30, "line_content": "                    ] = edit_history_event['prev_rendered_content_version']"}, {"line_number": 31, "line_content": "            if message_type == STREAM:"}, {"line_number": 32, "line_content": "                if 'prev_subject' in edit_history_event:"}, {"line_number": 33, "line_content": "                    modern_entry['topic'] = topic"}, {"line_number": 34, "line_content": "                    modern_entry['prev_topic'] = edit_history_event["}, {"line_number": 35, "line_content": "                        'prev_subject']"}, {"line_number": 36, "line_content": "                    topic = edit_history_event['prev_subject']"}, {"line_number": 37, "line_content": "                elif 'prev_topic' in edit_history_event:"}, {"line_number": 38, "line_content": "                    modern_entry['topic'] = topic"}, {"line_number": 39, "line_content": "                    modern_entry['prev_topic'] = edit_history_event["}, {"line_number": 40, "line_content": "                        'prev_topic']"}, {"line_number": 41, "line_content": "                    topic = edit_history_event['prev_topic']"}, {"line_number": 42, "line_content": "                if 'prev_stream' in edit_history_event:"}, {"line_number": 43, "line_content": "                    modern_entry['stream'] = stream_id"}, {"line_number": 44, "line_content": "                    modern_entry['prev_stream'] = edit_history_event["}, {"line_number": 45, "line_content": "                        'prev_stream']"}, {"line_number": 46, "line_content": "                    stream_id = edit_history_event['prev_stream']"}, {"line_number": 47, "line_content": "            modern_edit_history.append(modern_entry)"}, {"line_number": 48, "line_content": "        message.edit_history = orjson.dumps(modern_edit_history).decode()"}, {"line_number": 49, "line_content": "    message_model.objects.bulk_update(messages, ['edit_history'])"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_icon.py#L16", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "def upload_icon(request: HttpRequest, user_profile: UserProfile"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    if len(request.FILES) != 1:"}, {"line_number": 5, "line_content": "        raise JsonableError(_('You must upload exactly one icon.'))"}, {"line_number": 6, "line_content": "    icon_file = list(request.FILES.values())[0]"}, {"line_number": 7, "line_content": "    if settings.MAX_ICON_FILE_SIZE_MIB * 1024 * 1024 < icon_file.size:"}, {"line_number": 8, "line_content": "        raise JsonableError(_("}, {"line_number": 9, "line_content": "            'Uploaded file is larger than the allowed limit of {} MiB')."}, {"line_number": 10, "line_content": "            format(settings.MAX_ICON_FILE_SIZE_MIB))"}, {"line_number": 11, "line_content": "    upload_icon_image(icon_file, user_profile)"}, {"line_number": 12, "line_content": "    do_change_icon_source(user_profile.realm, user_profile.realm."}, {"line_number": 13, "line_content": "        ICON_UPLOADED, acting_user=user_profile)"}, {"line_number": 14, "line_content": "    icon_url = realm_icon_url(user_profile.realm)"}, {"line_number": 15, "line_content": "    json_result = dict(icon_url=icon_url)"}, {"line_number": 16, "line_content": "    return json_success(request, data=json_result)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_icon.py#L16", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "def delete_icon_backend(request: HttpRequest, user_profile: UserProfile"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    do_change_icon_source(user_profile.realm, user_profile.realm."}, {"line_number": 5, "line_content": "        ICON_FROM_GRAVATAR, acting_user=user_profile)"}, {"line_number": 6, "line_content": "    gravatar_url = realm_icon_url(user_profile.realm)"}, {"line_number": 7, "line_content": "    json_result = dict(icon_url=gravatar_url)"}, {"line_number": 8, "line_content": "    return json_success(request, data=json_result)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_export.py#L20", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "def export_realm(request: HttpRequest, user: UserProfile) ->HttpResponse:"}, {"line_number": 3, "line_content": "    event_type = RealmAuditLog.REALM_EXPORTED"}, {"line_number": 4, "line_content": "    event_time = timezone_now()"}, {"line_number": 5, "line_content": "    realm = user.realm"}, {"line_number": 6, "line_content": "    EXPORT_LIMIT = 5"}, {"line_number": 7, "line_content": "    MAX_MESSAGE_HISTORY = 250000"}, {"line_number": 8, "line_content": "    MAX_UPLOAD_QUOTA = 10 * 1024 * 1024 * 1024"}, {"line_number": 9, "line_content": "    event_time_delta = event_time - timedelta(days=7)"}, {"line_number": 10, "line_content": "    limit_check = RealmAuditLog.objects.filter(realm=realm, event_type="}, {"line_number": 11, "line_content": "        event_type, event_time__gte=event_time_delta)"}, {"line_number": 12, "line_content": "    if len(limit_check) >= EXPORT_LIMIT:"}, {"line_number": 13, "line_content": "        raise JsonableError(_('Exceeded rate limit.'))"}, {"line_number": 14, "line_content": "    total_messages = sum(realm_count.value for realm_count in RealmCount."}, {"line_number": 15, "line_content": "        objects.filter(realm=user.realm, property='messages_sent:client:day'))"}, {"line_number": 16, "line_content": "    if (total_messages > MAX_MESSAGE_HISTORY or user.realm."}, {"line_number": 17, "line_content": "        currently_used_upload_space_bytes() > MAX_UPLOAD_QUOTA):"}, {"line_number": 18, "line_content": "        raise JsonableError(_("}, {"line_number": 19, "line_content": "            'Please request a manual export from {email}.').format(email="}, {"line_number": 20, "line_content": "            settings.ZULIP_ADMINISTRATOR))"}, {"line_number": 21, "line_content": "    row = RealmAuditLog.objects.create(realm=realm, event_type=event_type,"}, {"line_number": 22, "line_content": "        event_time=event_time, acting_user=user)"}, {"line_number": 23, "line_content": "    notify_realm_export(user)"}, {"line_number": 24, "line_content": "    event = {'type': 'realm_export', 'time': event_time, 'realm_id': realm."}, {"line_number": 25, "line_content": "        id, 'user_profile_id': user.id, 'id': row.id}"}, {"line_number": 26, "line_content": "    queue_json_publish('deferred_work', event)"}, {"line_number": 27, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_export.py#L20", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "def get_realm_exports(request: HttpRequest, user: UserProfile) ->HttpResponse:"}, {"line_number": 3, "line_content": "    realm_exports = get_realm_exports_serialized(user)"}, {"line_number": 4, "line_content": "    return json_success(request, data={'exports': realm_exports})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_export.py#L20", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "def delete_realm_export(request: HttpRequest, user: UserProfile, export_id: int"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    try:"}, {"line_number": 5, "line_content": "        audit_log_entry = RealmAuditLog.objects.get(id=export_id, realm="}, {"line_number": 6, "line_content": "            user.realm, event_type=RealmAuditLog.REALM_EXPORTED)"}, {"line_number": 7, "line_content": "    except RealmAuditLog.DoesNotExist:"}, {"line_number": 8, "line_content": "        raise JsonableError(_('Invalid data export ID'))"}, {"line_number": 9, "line_content": "    export_data = orjson.loads(assert_is_not_none(audit_log_entry.extra_data))"}, {"line_number": 10, "line_content": "    if 'deleted_timestamp' in export_data:"}, {"line_number": 11, "line_content": "        raise JsonableError(_('Export already deleted'))"}, {"line_number": 12, "line_content": "    do_delete_realm_export(user, audit_log_entry)"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/reactions.py#L17", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@transaction.atomic"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def add_reaction(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    message_id: int, emoji_name: str=REQ(), emoji_code: Optional[str]=REQ("}, {"line_number": 5, "line_content": "    default=None), reaction_type: Optional[str]=REQ(default=None)"}, {"line_number": 6, "line_content": "    ) ->HttpResponse:"}, {"line_number": 7, "line_content": "    check_add_reaction(user_profile, message_id, emoji_name, emoji_code,"}, {"line_number": 8, "line_content": "        reaction_type)"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/reactions.py#L17", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "@transaction.atomic"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def remove_reaction(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    message_id: int, emoji_name: Optional[str]=REQ(default=None),"}, {"line_number": 5, "line_content": "    emoji_code: Optional[str]=REQ(default=None), reaction_type: str=REQ("}, {"line_number": 6, "line_content": "    default='unicode_emoji')) ->HttpResponse:"}, {"line_number": 7, "line_content": "    message, user_message = access_message(user_profile, message_id,"}, {"line_number": 8, "line_content": "        lock_message=True)"}, {"line_number": 9, "line_content": "    if emoji_code is None:"}, {"line_number": 10, "line_content": "        if emoji_name is None:"}, {"line_number": 11, "line_content": "            raise JsonableError(_("}, {"line_number": 12, "line_content": "                'At least one of the following arguments must be present: emoji_name, emoji_code'"}, {"line_number": 13, "line_content": "                ))"}, {"line_number": 14, "line_content": "        emoji_code = emoji_name_to_emoji_code(message.sender.realm, emoji_name"}, {"line_number": 15, "line_content": "            )[0]"}, {"line_number": 16, "line_content": "    if not Reaction.objects.filter(user_profile=user_profile, message="}, {"line_number": 17, "line_content": "        message, emoji_code=emoji_code, reaction_type=reaction_type).exists():"}, {"line_number": 18, "line_content": "        raise JsonableError(_(\"Reaction doesn't exist.\"))"}, {"line_number": 19, "line_content": "    do_remove_reaction(user_profile, message, emoji_code, reaction_type)"}, {"line_number": 20, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/hotspots.py#L13", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@human_users_only"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def mark_hotspot_as_read(request: HttpRequest, user: UserProfile, hotspot:"}, {"line_number": 4, "line_content": "    str=REQ()) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if hotspot not in ALL_HOTSPOTS:"}, {"line_number": 6, "line_content": "        raise JsonableError(_('Unknown hotspot: {}').format(hotspot))"}, {"line_number": 7, "line_content": "    do_mark_hotspot_as_read(user, hotspot)"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/email_mirror.py#L10", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@internal_notify_view(False)"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def email_mirror_message(request: HttpRequest, rcpt_to: str=REQ(),"}, {"line_number": 4, "line_content": "    msg_base64: str=REQ()) ->HttpResponse:"}, {"line_number": 5, "line_content": "    result = mirror_email_message(rcpt_to, msg_base64)"}, {"line_number": 6, "line_content": "    if result['status'] == 'error':"}, {"line_number": 7, "line_content": "        raise JsonableError(result['msg'])"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/typing.py#L18", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def send_notification_backend(request: HttpRequest, user_profile:"}, {"line_number": 3, "line_content": "    UserProfile, message_type: str=REQ('type', str_validator="}, {"line_number": 4, "line_content": "    check_string_in(VALID_MESSAGE_TYPES), default='private'), operator: str"}, {"line_number": 5, "line_content": "    =REQ('op', str_validator=check_string_in(VALID_OPERATOR_TYPES)),"}, {"line_number": 6, "line_content": "    notification_to: List[int]=REQ('to', json_validator=check_list("}, {"line_number": 7, "line_content": "    check_int)), topic: Optional[str]=REQ('topic', default=None)"}, {"line_number": 8, "line_content": "    ) ->HttpResponse:"}, {"line_number": 9, "line_content": "    to_length = len(notification_to)"}, {"line_number": 10, "line_content": "    if to_length == 0:"}, {"line_number": 11, "line_content": "        raise JsonableError(_(\"Empty 'to' list\"))"}, {"line_number": 12, "line_content": "    if message_type == 'stream':"}, {"line_number": 13, "line_content": "        if to_length > 1:"}, {"line_number": 14, "line_content": "            raise JsonableError(_('Cannot send to multiple streams'))"}, {"line_number": 15, "line_content": "        if topic is None:"}, {"line_number": 16, "line_content": "            raise JsonableError(_('Missing topic'))"}, {"line_number": 17, "line_content": "        if not user_profile.send_stream_typing_notifications:"}, {"line_number": 18, "line_content": "            raise JsonableError(_("}, {"line_number": 19, "line_content": "                'User has disabled typing notifications for stream messages'))"}, {"line_number": 20, "line_content": "        stream_id = notification_to[0]"}, {"line_number": 21, "line_content": "        stream = access_stream_by_id(user_profile, stream_id)[0]"}, {"line_number": 22, "line_content": "        access_stream_for_send_message(user_profile, stream,"}, {"line_number": 23, "line_content": "            forwarder_user_profile=None)"}, {"line_number": 24, "line_content": "        do_send_stream_typing_notification(user_profile, operator, stream,"}, {"line_number": 25, "line_content": "            topic)"}, {"line_number": 26, "line_content": "    else:"}, {"line_number": 27, "line_content": "        if not user_profile.send_private_typing_notifications:"}, {"line_number": 28, "line_content": "            raise JsonableError(_("}, {"line_number": 29, "line_content": "                'User has disabled typing notifications for private messages'))"}, {"line_number": 30, "line_content": "        user_ids = notification_to"}, {"line_number": 31, "line_content": "        check_send_typing_notification(user_profile, user_ids, operator)"}, {"line_number": 32, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_logo.py#L18", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def upload_logo(request: HttpRequest, user_profile: UserProfile, night:"}, {"line_number": 4, "line_content": "    bool=REQ(json_validator=check_bool)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    user_profile.realm.ensure_not_on_limited_plan()"}, {"line_number": 6, "line_content": "    if len(request.FILES) != 1:"}, {"line_number": 7, "line_content": "        raise JsonableError(_('You must upload exactly one logo.'))"}, {"line_number": 8, "line_content": "    logo_file = list(request.FILES.values())[0]"}, {"line_number": 9, "line_content": "    if settings.MAX_LOGO_FILE_SIZE_MIB * 1024 * 1024 < logo_file.size:"}, {"line_number": 10, "line_content": "        raise JsonableError(_("}, {"line_number": 11, "line_content": "            'Uploaded file is larger than the allowed limit of {} MiB')."}, {"line_number": 12, "line_content": "            format(settings.MAX_LOGO_FILE_SIZE_MIB))"}, {"line_number": 13, "line_content": "    upload_logo_image(logo_file, user_profile, night)"}, {"line_number": 14, "line_content": "    do_change_logo_source(user_profile.realm, user_profile.realm."}, {"line_number": 15, "line_content": "        LOGO_UPLOADED, night, acting_user=user_profile)"}, {"line_number": 16, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_logo.py#L18", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def delete_logo_backend(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    night: bool=REQ(json_validator=check_bool)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    do_change_logo_source(user_profile.realm, user_profile.realm."}, {"line_number": 6, "line_content": "        LOGO_DEFAULT, night, acting_user=user_profile)"}, {"line_number": 7, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm_logo.py#L19", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def get_logo_backend(request: HttpRequest, user_profile: UserProfile, night:"}, {"line_number": 3, "line_content": "    bool=REQ(json_validator=check_bool)) ->HttpResponse:"}, {"line_number": 4, "line_content": "    url = get_realm_logo_url(user_profile.realm, night)"}, {"line_number": 5, "line_content": "    url = append_url_query_string(url, request.META['QUERY_STRING'])"}, {"line_number": 6, "line_content": "    return redirect(url)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/tutorial.py#L9", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "@human_users_only"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def set_tutorial_status(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    status: str=REQ()) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if status == 'started':"}, {"line_number": 6, "line_content": "        user_profile.tutorial_status = UserProfile.TUTORIAL_STARTED"}, {"line_number": 7, "line_content": "    elif status == 'finished':"}, {"line_number": 8, "line_content": "        user_profile.tutorial_status = UserProfile.TUTORIAL_FINISHED"}, {"line_number": 9, "line_content": "    user_profile.save(update_fields=['tutorial_status'])"}, {"line_number": 10, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/digest.py#L13", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@zulip_login_required"}, {"line_number": 2, "line_content": "def digest_page(request: HttpRequest) ->HttpResponse:"}, {"line_number": 3, "line_content": "    user_profile = request.user"}, {"line_number": 4, "line_content": "    assert user_profile.is_authenticated"}, {"line_number": 5, "line_content": "    cutoff = time.mktime((timezone_now() - timedelta(days=DIGEST_CUTOFF))."}, {"line_number": 6, "line_content": "        timetuple())"}, {"line_number": 7, "line_content": "    context = get_digest_context(user_profile, cutoff)"}, {"line_number": 8, "line_content": "    context.update(physical_address=settings.PHYSICAL_ADDRESS)"}, {"line_number": 9, "line_content": "    return render(request, 'zerver/digest_base.html', context=context)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/submessage.py#L18", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "@transaction.atomic"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def process_submessage(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    message_id: int=REQ(json_validator=check_int), msg_type: str=REQ(),"}, {"line_number": 5, "line_content": "    content: str=REQ()) ->HttpResponse:"}, {"line_number": 6, "line_content": "    message, user_message = access_message(user_profile, message_id,"}, {"line_number": 7, "line_content": "        lock_message=True)"}, {"line_number": 8, "line_content": "    verify_submessage_sender(message_id=message.id, message_sender_id="}, {"line_number": 9, "line_content": "        message.sender_id, submessage_sender_id=user_profile.id)"}, {"line_number": 10, "line_content": "    try:"}, {"line_number": 11, "line_content": "        widget_data = orjson.loads(content)"}, {"line_number": 12, "line_content": "    except orjson.JSONDecodeError:"}, {"line_number": 13, "line_content": "        raise JsonableError(_('Invalid json for submessage'))"}, {"line_number": 14, "line_content": "    widget_type = get_widget_type(message_id=message.id)"}, {"line_number": 15, "line_content": "    is_widget_author = message.sender_id == user_profile.id"}, {"line_number": 16, "line_content": "    if widget_type == 'poll':"}, {"line_number": 17, "line_content": "        try:"}, {"line_number": 18, "line_content": "            validate_poll_data(poll_data=widget_data, is_widget_author="}, {"line_number": 19, "line_content": "                is_widget_author)"}, {"line_number": 20, "line_content": "        except ValidationError as error:"}, {"line_number": 21, "line_content": "            raise JsonableError(error.message)"}, {"line_number": 22, "line_content": "    if widget_type == 'todo':"}, {"line_number": 23, "line_content": "        try:"}, {"line_number": 24, "line_content": "            validate_todo_data(todo_data=widget_data)"}, {"line_number": 25, "line_content": "        except ValidationError as error:"}, {"line_number": 26, "line_content": "            raise JsonableError(error.message)"}, {"line_number": 27, "line_content": "    do_add_submessage(realm=user_profile.realm, sender_id=user_profile.id,"}, {"line_number": 28, "line_content": "        message_id=message.id, msg_type=msg_type, content=content)"}, {"line_number": 29, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm.py#L47", "contents": {"total_lines": 189, "lines": [{"line_number": 1, "line_content": "@require_realm_admin"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def update_realm(request: HttpRequest, user_profile: UserProfile, name:"}, {"line_number": 4, "line_content": "    Optional[str]=REQ(str_validator=check_capped_string(Realm."}, {"line_number": 5, "line_content": "    MAX_REALM_NAME_LENGTH), default=None), description: Optional[str]=REQ("}, {"line_number": 6, "line_content": "    str_validator=check_capped_string(Realm.MAX_REALM_DESCRIPTION_LENGTH),"}, {"line_number": 7, "line_content": "    default=None), emails_restricted_to_domains: Optional[bool]=REQ("}, {"line_number": 8, "line_content": "    json_validator=check_bool, default=None),"}, {"line_number": 9, "line_content": "    disallow_disposable_email_addresses: Optional[bool]=REQ(json_validator="}, {"line_number": 10, "line_content": "    check_bool, default=None), invite_required: Optional[bool]=REQ("}, {"line_number": 11, "line_content": "    json_validator=check_bool, default=None), invite_to_realm_policy:"}, {"line_number": 12, "line_content": "    Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 13, "line_content": "    INVITE_TO_REALM_POLICY_TYPES), default=None), name_changes_disabled:"}, {"line_number": 14, "line_content": "    Optional[bool]=REQ(json_validator=check_bool, default=None),"}, {"line_number": 15, "line_content": "    email_changes_disabled: Optional[bool]=REQ(json_validator=check_bool,"}, {"line_number": 16, "line_content": "    default=None), avatar_changes_disabled: Optional[bool]=REQ("}, {"line_number": 17, "line_content": "    json_validator=check_bool, default=None), inline_image_preview:"}, {"line_number": 18, "line_content": "    Optional[bool]=REQ(json_validator=check_bool, default=None),"}, {"line_number": 19, "line_content": "    inline_url_embed_preview: Optional[bool]=REQ(json_validator=check_bool,"}, {"line_number": 20, "line_content": "    default=None), add_custom_emoji_policy: Optional[int]=REQ("}, {"line_number": 21, "line_content": "    json_validator=check_int_in(Realm.COMMON_POLICY_TYPES), default=None),"}, {"line_number": 22, "line_content": "    delete_own_message_policy: Optional[int]=REQ(json_validator="}, {"line_number": 23, "line_content": "    check_int_in(Realm.COMMON_MESSAGE_POLICY_TYPES), default=None),"}, {"line_number": 24, "line_content": "    message_content_delete_limit_seconds_raw: Optional[Union[int, str]]=REQ"}, {"line_number": 25, "line_content": "    ('message_content_delete_limit_seconds', json_validator="}, {"line_number": 26, "line_content": "    check_string_or_int, default=None), allow_message_editing: Optional["}, {"line_number": 27, "line_content": "    bool]=REQ(json_validator=check_bool, default=None), edit_topic_policy:"}, {"line_number": 28, "line_content": "    Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 29, "line_content": "    COMMON_MESSAGE_POLICY_TYPES), default=None), mandatory_topics: Optional"}, {"line_number": 30, "line_content": "    [bool]=REQ(json_validator=check_bool, default=None),"}, {"line_number": 31, "line_content": "    message_content_edit_limit_seconds: Optional[int]=REQ(converter="}, {"line_number": 32, "line_content": "    to_non_negative_int, default=None), allow_edit_history: Optional[bool]="}, {"line_number": 33, "line_content": "    REQ(json_validator=check_bool, default=None), default_language:"}, {"line_number": 34, "line_content": "    Optional[str]=REQ(default=None), waiting_period_threshold: Optional[int"}, {"line_number": 35, "line_content": "    ]=REQ(converter=to_non_negative_int, default=None),"}, {"line_number": 36, "line_content": "    authentication_methods: Optional[Dict[str, Any]]=REQ(json_validator="}, {"line_number": 37, "line_content": "    check_dict([]), default=None), notifications_stream_id: Optional[int]="}, {"line_number": 38, "line_content": "    REQ(json_validator=check_int, default=None),"}, {"line_number": 39, "line_content": "    signup_notifications_stream_id: Optional[int]=REQ(json_validator="}, {"line_number": 40, "line_content": "    check_int, default=None), message_retention_days_raw: Optional[Union["}, {"line_number": 41, "line_content": "    int, str]]=REQ('message_retention_days', json_validator="}, {"line_number": 42, "line_content": "    check_string_or_int, default=None), send_welcome_emails: Optional[bool]"}, {"line_number": 43, "line_content": "    =REQ(json_validator=check_bool, default=None), digest_emails_enabled:"}, {"line_number": 44, "line_content": "    Optional[bool]=REQ(json_validator=check_bool, default=None),"}, {"line_number": 45, "line_content": "    message_content_allowed_in_email_notifications: Optional[bool]=REQ("}, {"line_number": 46, "line_content": "    json_validator=check_bool, default=None), bot_creation_policy: Optional"}, {"line_number": 47, "line_content": "    [int]=REQ(json_validator=check_int_in(Realm.BOT_CREATION_POLICY_TYPES),"}, {"line_number": 48, "line_content": "    default=None), create_public_stream_policy: Optional[int]=REQ("}, {"line_number": 49, "line_content": "    json_validator=check_int_in(Realm.COMMON_POLICY_TYPES), default=None),"}, {"line_number": 50, "line_content": "    create_private_stream_policy: Optional[int]=REQ(json_validator="}, {"line_number": 51, "line_content": "    check_int_in(Realm.COMMON_POLICY_TYPES), default=None),"}, {"line_number": 52, "line_content": "    create_web_public_stream_policy: Optional[int]=REQ(json_validator="}, {"line_number": 53, "line_content": "    check_int_in(Realm.CREATE_WEB_PUBLIC_STREAM_POLICY_TYPES), default=None"}, {"line_number": 54, "line_content": "    ), invite_to_stream_policy: Optional[int]=REQ(json_validator="}, {"line_number": 55, "line_content": "    check_int_in(Realm.COMMON_POLICY_TYPES), default=None),"}, {"line_number": 56, "line_content": "    move_messages_between_streams_policy: Optional[int]=REQ(json_validator="}, {"line_number": 57, "line_content": "    check_int_in(Realm.COMMON_POLICY_TYPES), default=None),"}, {"line_number": 58, "line_content": "    user_group_edit_policy: Optional[int]=REQ(json_validator=check_int_in("}, {"line_number": 59, "line_content": "    Realm.COMMON_POLICY_TYPES), default=None), private_message_policy:"}, {"line_number": 60, "line_content": "    Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 61, "line_content": "    PRIVATE_MESSAGE_POLICY_TYPES), default=None), wildcard_mention_policy:"}, {"line_number": 62, "line_content": "    Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 63, "line_content": "    WILDCARD_MENTION_POLICY_TYPES), default=None), email_address_visibility:"}, {"line_number": 64, "line_content": "    Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 65, "line_content": "    EMAIL_ADDRESS_VISIBILITY_TYPES), default=None), video_chat_provider:"}, {"line_number": 66, "line_content": "    Optional[int]=REQ(json_validator=check_int, default=None), giphy_rating:"}, {"line_number": 67, "line_content": "    Optional[int]=REQ(json_validator=check_int, default=None),"}, {"line_number": 68, "line_content": "    default_code_block_language: Optional[str]=REQ(default=None),"}, {"line_number": 69, "line_content": "    digest_weekday: Optional[int]=REQ(json_validator=check_int_in(Realm."}, {"line_number": 70, "line_content": "    DIGEST_WEEKDAY_VALUES), default=None), string_id: Optional[str]=REQ("}, {"line_number": 71, "line_content": "    str_validator=check_capped_string(Realm.MAX_REALM_SUBDOMAIN_LENGTH),"}, {"line_number": 72, "line_content": "    default=None), org_type: Optional[int]=REQ(json_validator=check_int_in("}, {"line_number": 73, "line_content": "    ORG_TYPE_IDS), default=None), enable_spectator_access: Optional[bool]="}, {"line_number": 74, "line_content": "    REQ(json_validator=check_bool, default=None)) ->HttpResponse:"}, {"line_number": 75, "line_content": "    realm = user_profile.realm"}, {"line_number": 76, "line_content": "    if (default_language is not None and default_language not in"}, {"line_number": 77, "line_content": "        get_available_language_codes()):"}, {"line_number": 78, "line_content": "        raise JsonableError(_(\"Invalid language '{}'\").format(default_language)"}, {"line_number": 79, "line_content": "            )"}, {"line_number": 80, "line_content": "    if authentication_methods is not None:"}, {"line_number": 81, "line_content": "        if not user_profile.is_realm_owner:"}, {"line_number": 82, "line_content": "            raise OrganizationOwnerRequired()"}, {"line_number": 83, "line_content": "        if True not in list(authentication_methods.values()):"}, {"line_number": 84, "line_content": "            raise JsonableError(_("}, {"line_number": 85, "line_content": "                'At least one authentication method must be enabled.'))"}, {"line_number": 86, "line_content": "    if video_chat_provider is not None and video_chat_provider not in {p["}, {"line_number": 87, "line_content": "        'id'] for p in Realm.VIDEO_CHAT_PROVIDERS.values()}:"}, {"line_number": 88, "line_content": "        raise JsonableError(_('Invalid video_chat_provider {}').format("}, {"line_number": 89, "line_content": "            video_chat_provider))"}, {"line_number": 90, "line_content": "    if giphy_rating is not None and giphy_rating not in {p['id'] for p in"}, {"line_number": 91, "line_content": "        Realm.GIPHY_RATING_OPTIONS.values()}:"}, {"line_number": 92, "line_content": "        raise JsonableError(_('Invalid giphy_rating {}').format(giphy_rating))"}, {"line_number": 93, "line_content": "    message_retention_days: Optional[int] = None"}, {"line_number": 94, "line_content": "    if message_retention_days_raw is not None:"}, {"line_number": 95, "line_content": "        if not user_profile.is_realm_owner:"}, {"line_number": 96, "line_content": "            raise OrganizationOwnerRequired()"}, {"line_number": 97, "line_content": "        realm.ensure_not_on_limited_plan()"}, {"line_number": 98, "line_content": "        message_retention_days = parse_message_retention_days("}, {"line_number": 99, "line_content": "            message_retention_days_raw, Realm."}, {"line_number": 100, "line_content": "            MESSAGE_RETENTION_SPECIAL_VALUES_MAP)"}, {"line_number": 101, "line_content": "    if invite_to_realm_policy is not None and not user_profile.is_realm_owner:"}, {"line_number": 102, "line_content": "        raise OrganizationOwnerRequired()"}, {"line_number": 103, "line_content": "    data: Dict[str, Any] = {}"}, {"line_number": 104, "line_content": "    message_content_delete_limit_seconds: Optional[int] = None"}, {"line_number": 105, "line_content": "    if message_content_delete_limit_seconds_raw is not None:"}, {"line_number": 106, "line_content": "        message_content_delete_limit_seconds = ("}, {"line_number": 107, "line_content": "            parse_message_content_delete_limit("}, {"line_number": 108, "line_content": "            message_content_delete_limit_seconds_raw, Realm."}, {"line_number": 109, "line_content": "            MESSAGE_CONTENT_DELETE_LIMIT_SPECIAL_VALUES_MAP))"}, {"line_number": 110, "line_content": "        do_set_realm_property(realm, 'message_content_delete_limit_seconds',"}, {"line_number": 111, "line_content": "            message_content_delete_limit_seconds, acting_user=user_profile)"}, {"line_number": 112, "line_content": "        data['message_content_delete_limit_seconds'"}, {"line_number": 113, "line_content": "            ] = message_content_delete_limit_seconds"}, {"line_number": 114, "line_content": "    req_vars = {k: v for k, v in list(locals().items()) if k in realm."}, {"line_number": 115, "line_content": "        property_types}"}, {"line_number": 116, "line_content": "    for k, v in list(req_vars.items()):"}, {"line_number": 117, "line_content": "        if v is not None and getattr(realm, k) != v:"}, {"line_number": 118, "line_content": "            do_set_realm_property(realm, k, v, acting_user=user_profile)"}, {"line_number": 119, "line_content": "            if isinstance(v, str):"}, {"line_number": 120, "line_content": "                data[k] = 'updated'"}, {"line_number": 121, "line_content": "            else:"}, {"line_number": 122, "line_content": "                data[k] = v"}, {"line_number": 123, "line_content": "    if (authentication_methods is not None and realm."}, {"line_number": 124, "line_content": "        authentication_methods_dict() != authentication_methods):"}, {"line_number": 125, "line_content": "        do_set_realm_authentication_methods(realm, authentication_methods,"}, {"line_number": 126, "line_content": "            acting_user=user_profile)"}, {"line_number": 127, "line_content": "        data['authentication_methods'] = authentication_methods"}, {"line_number": 128, "line_content": "    if (allow_message_editing is not None and realm.allow_message_editing !="}, {"line_number": 129, "line_content": "        allow_message_editing or message_content_edit_limit_seconds is not"}, {"line_number": 130, "line_content": "        None and realm.message_content_edit_limit_seconds !="}, {"line_number": 131, "line_content": "        message_content_edit_limit_seconds or edit_topic_policy is not None and"}, {"line_number": 132, "line_content": "        realm.edit_topic_policy != edit_topic_policy):"}, {"line_number": 133, "line_content": "        if allow_message_editing is None:"}, {"line_number": 134, "line_content": "            allow_message_editing = realm.allow_message_editing"}, {"line_number": 135, "line_content": "        if message_content_edit_limit_seconds is None:"}, {"line_number": 136, "line_content": "            message_content_edit_limit_seconds = (realm."}, {"line_number": 137, "line_content": "                message_content_edit_limit_seconds)"}, {"line_number": 138, "line_content": "        if edit_topic_policy is None:"}, {"line_number": 139, "line_content": "            edit_topic_policy = realm.edit_topic_policy"}, {"line_number": 140, "line_content": "        do_set_realm_message_editing(realm, allow_message_editing,"}, {"line_number": 141, "line_content": "            message_content_edit_limit_seconds, edit_topic_policy,"}, {"line_number": 142, "line_content": "            acting_user=user_profile)"}, {"line_number": 143, "line_content": "        data['allow_message_editing'] = allow_message_editing"}, {"line_number": 144, "line_content": "        data['message_content_edit_limit_seconds'"}, {"line_number": 145, "line_content": "            ] = message_content_edit_limit_seconds"}, {"line_number": 146, "line_content": "        data['edit_topic_policy'] = edit_topic_policy"}, {"line_number": 147, "line_content": "    if notifications_stream_id is not None:"}, {"line_number": 148, "line_content": "        if (realm.notifications_stream is None or realm."}, {"line_number": 149, "line_content": "            notifications_stream.id != notifications_stream_id):"}, {"line_number": 150, "line_content": "            new_notifications_stream = None"}, {"line_number": 151, "line_content": "            if notifications_stream_id >= 0:"}, {"line_number": 152, "line_content": "                new_notifications_stream, sub = access_stream_by_id("}, {"line_number": 153, "line_content": "                    user_profile, notifications_stream_id)"}, {"line_number": 154, "line_content": "            do_set_realm_notifications_stream(realm,"}, {"line_number": 155, "line_content": "                new_notifications_stream, notifications_stream_id,"}, {"line_number": 156, "line_content": "                acting_user=user_profile)"}, {"line_number": 157, "line_content": "            data['notifications_stream_id'] = notifications_stream_id"}, {"line_number": 158, "line_content": "    if signup_notifications_stream_id is not None:"}, {"line_number": 159, "line_content": "        if (realm.signup_notifications_stream is None or realm."}, {"line_number": 160, "line_content": "            signup_notifications_stream.id != signup_notifications_stream_id):"}, {"line_number": 161, "line_content": "            new_signup_notifications_stream = None"}, {"line_number": 162, "line_content": "            if signup_notifications_stream_id >= 0:"}, {"line_number": 163, "line_content": "                new_signup_notifications_stream, sub = access_stream_by_id("}, {"line_number": 164, "line_content": "                    user_profile, signup_notifications_stream_id)"}, {"line_number": 165, "line_content": "            do_set_realm_signup_notifications_stream(realm,"}, {"line_number": 166, "line_content": "                new_signup_notifications_stream,"}, {"line_number": 167, "line_content": "                signup_notifications_stream_id, acting_user=user_profile)"}, {"line_number": 168, "line_content": "            data['signup_notifications_stream_id'"}, {"line_number": 169, "line_content": "                ] = signup_notifications_stream_id"}, {"line_number": 170, "line_content": "    if default_code_block_language is not None:"}, {"line_number": 171, "line_content": "        if default_code_block_language == '':"}, {"line_number": 172, "line_content": "            data['default_code_block_language'] = None"}, {"line_number": 173, "line_content": "        else:"}, {"line_number": 174, "line_content": "            data['default_code_block_language'] = default_code_block_language"}, {"line_number": 175, "line_content": "    if string_id is not None:"}, {"line_number": 176, "line_content": "        if not user_profile.is_realm_owner:"}, {"line_number": 177, "line_content": "            raise OrganizationOwnerRequired()"}, {"line_number": 178, "line_content": "        if realm.demo_organization_scheduled_deletion_date is None:"}, {"line_number": 179, "line_content": "            raise JsonableError(_('Must be a demo organization.'))"}, {"line_number": 180, "line_content": "        try:"}, {"line_number": 181, "line_content": "            check_subdomain(string_id)"}, {"line_number": 182, "line_content": "        except ValidationError as err:"}, {"line_number": 183, "line_content": "            raise JsonableError(str(err.message))"}, {"line_number": 184, "line_content": "        do_change_realm_subdomain(realm, string_id, acting_user=user_profile)"}, {"line_number": 185, "line_content": "        data['realm_uri'] = realm.uri"}, {"line_number": 186, "line_content": "    if org_type is not None:"}, {"line_number": 187, "line_content": "        do_change_realm_org_type(realm, org_type, acting_user=user_profile)"}, {"line_number": 188, "line_content": "        data['org_type'] = org_type"}, {"line_number": 189, "line_content": "    return json_success(request, data)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm.py#L308", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@require_realm_owner"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def deactivate_realm(request: HttpRequest, user: UserProfile) ->HttpResponse:"}, {"line_number": 4, "line_content": "    realm = user.realm"}, {"line_number": 5, "line_content": "    do_deactivate_realm(realm, acting_user=user)"}, {"line_number": 6, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/realm.py#L316", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@require_safe"}, {"line_number": 2, "line_content": "def check_subdomain_available(request: HttpRequest, subdomain: str"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    try:"}, {"line_number": 5, "line_content": "        check_subdomain(subdomain)"}, {"line_number": 6, "line_content": "        return json_success(request, data={'msg': 'available'})"}, {"line_number": 7, "line_content": "    except ValidationError as e:"}, {"line_number": 8, "line_content": "        return json_success(request, data={'msg': e.message})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/drafts.py#L18", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@draft_endpoint"}, {"line_number": 2, "line_content": "def fetch_drafts(request: HttpRequest, user_profile: UserProfile"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    user_drafts = Draft.objects.filter(user_profile=user_profile).order_by("}, {"line_number": 5, "line_content": "        'last_edit_time')"}, {"line_number": 6, "line_content": "    draft_dicts = [draft.to_dict() for draft in user_drafts]"}, {"line_number": 7, "line_content": "    return json_success(request, data={'count': user_drafts.count(),"}, {"line_number": 8, "line_content": "        'drafts': draft_dicts})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/drafts.py#L18", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@draft_endpoint"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def create_drafts(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    draft_dicts: List[Dict[str, Any]]=REQ('drafts', json_validator="}, {"line_number": 5, "line_content": "    check_list(draft_dict_validator))) ->HttpResponse:"}, {"line_number": 6, "line_content": "    created_draft_objects = do_create_drafts(draft_dicts, user_profile)"}, {"line_number": 7, "line_content": "    draft_ids = [draft_object.id for draft_object in created_draft_objects]"}, {"line_number": 8, "line_content": "    return json_success(request, data={'ids': draft_ids})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/drafts.py#L18", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@draft_endpoint"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def edit_draft(request: HttpRequest, user_profile: UserProfile, draft_id:"}, {"line_number": 4, "line_content": "    int, draft_dict: Dict[str, Any]=REQ('draft', json_validator="}, {"line_number": 5, "line_content": "    draft_dict_validator)) ->HttpResponse:"}, {"line_number": 6, "line_content": "    do_edit_draft(draft_id, draft_dict, user_profile)"}, {"line_number": 7, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/drafts.py#L18", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "@draft_endpoint"}, {"line_number": 2, "line_content": "def delete_draft(request: HttpRequest, user_profile: UserProfile, draft_id: int"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    do_delete_draft(draft_id, user_profile)"}, {"line_number": 5, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/portico.py#L17", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@add_google_analytics"}, {"line_number": 2, "line_content": "def apps_view(request: HttpRequest, platform: Optional[str]=None"}, {"line_number": 3, "line_content": "    ) ->HttpResponse:"}, {"line_number": 4, "line_content": "    if settings.ZILENCER_ENABLED:"}, {"line_number": 5, "line_content": "        return TemplateResponse(request, 'zerver/apps.html')"}, {"line_number": 6, "line_content": "    return HttpResponseRedirect('https://zulip.com/apps/', status=301)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/storage.py#L19", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def update_storage(request: HttpRequest, user_profile: UserProfile, storage:"}, {"line_number": 3, "line_content": "    Dict[str, str]=REQ(json_validator=check_dict([], value_validator="}, {"line_number": 4, "line_content": "    check_string))) ->HttpResponse:"}, {"line_number": 5, "line_content": "    try:"}, {"line_number": 6, "line_content": "        set_bot_storage(user_profile, list(storage.items()))"}, {"line_number": 7, "line_content": "    except StateError as e:"}, {"line_number": 8, "line_content": "        raise JsonableError(str(e))"}, {"line_number": 9, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/storage.py#L19", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def get_storage(request: HttpRequest, user_profile: UserProfile, keys:"}, {"line_number": 3, "line_content": "    Optional[List[str]]=REQ(json_validator=check_list(check_string),"}, {"line_number": 4, "line_content": "    default=None)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if keys is None:"}, {"line_number": 6, "line_content": "        keys = get_keys_in_bot_storage(user_profile)"}, {"line_number": 7, "line_content": "    try:"}, {"line_number": 8, "line_content": "        storage = {key: get_bot_storage(user_profile, key) for key in keys}"}, {"line_number": 9, "line_content": "    except StateError as e:"}, {"line_number": 10, "line_content": "        raise JsonableError(str(e))"}, {"line_number": 11, "line_content": "    return json_success(request, data={'storage': storage})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/storage.py#L19", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def remove_storage(request: HttpRequest, user_profile: UserProfile, keys:"}, {"line_number": 3, "line_content": "    Optional[List[str]]=REQ(json_validator=check_list(check_string),"}, {"line_number": 4, "line_content": "    default=None)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    if keys is None:"}, {"line_number": 6, "line_content": "        keys = get_keys_in_bot_storage(user_profile)"}, {"line_number": 7, "line_content": "    try:"}, {"line_number": 8, "line_content": "        remove_bot_storage(user_profile, keys)"}, {"line_number": 9, "line_content": "    except StateError as e:"}, {"line_number": 10, "line_content": "        raise JsonableError(str(e))"}, {"line_number": 11, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/zephyr.py#L29", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "@authenticated_json_view"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def webathena_kerberos_login(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, cred: Optional[str]=REQ(default=None)) ->HttpResponse:"}, {"line_number": 5, "line_content": "    global kerberos_alter_egos"}, {"line_number": 6, "line_content": "    if cred is None:"}, {"line_number": 7, "line_content": "        raise JsonableError(_('Could not find Kerberos credential'))"}, {"line_number": 8, "line_content": "    if not user_profile.realm.webathena_enabled:"}, {"line_number": 9, "line_content": "        raise JsonableError(_('Webathena login not enabled'))"}, {"line_number": 10, "line_content": "    try:"}, {"line_number": 11, "line_content": "        parsed_cred = orjson.loads(cred)"}, {"line_number": 12, "line_content": "        user = parsed_cred['cname']['nameString'][0]"}, {"line_number": 13, "line_content": "        if user in kerberos_alter_egos:"}, {"line_number": 14, "line_content": "            user = kerberos_alter_egos[user]"}, {"line_number": 15, "line_content": "        assert user == user_profile.email.split('@')[0]"}, {"line_number": 16, "line_content": "        assert re.match('^[a-z0-9_.-]+$', user) is not None"}, {"line_number": 17, "line_content": "        ccache = make_ccache(parsed_cred)"}, {"line_number": 18, "line_content": "        user = mark_sanitized(user)"}, {"line_number": 19, "line_content": "        ccache = mark_sanitized(ccache)"}, {"line_number": 20, "line_content": "    except Exception:"}, {"line_number": 21, "line_content": "        raise JsonableError(_('Invalid Kerberos cache'))"}, {"line_number": 22, "line_content": "    try:"}, {"line_number": 23, "line_content": "        api_key = get_api_key(user_profile)"}, {"line_number": 24, "line_content": "        command = ["}, {"line_number": 25, "line_content": "            '/home/zulip/python-zulip-api/zulip/integrations/zephyr/process_ccache'"}, {"line_number": 26, "line_content": "            , user, api_key, base64.b64encode(ccache).decode()]"}, {"line_number": 27, "line_content": "        subprocess.check_call(['ssh', settings.PERSONAL_ZMIRROR_SERVER,"}, {"line_number": 28, "line_content": "            '--', shlex.join(command)])"}, {"line_number": 29, "line_content": "    except subprocess.CalledProcessError:"}, {"line_number": 30, "line_content": "        logging.exception(\"Error updating the user's ccache\", stack_info=True)"}, {"line_number": 31, "line_content": "        raise JsonableError(_('We were unable to set up mirroring for you'))"}, {"line_number": 32, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/user_groups.py#L36", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@require_user_group_edit_permission"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def add_user_group(request: HttpRequest, user_profile: UserProfile, name:"}, {"line_number": 4, "line_content": "    str=REQ(), members: Sequence[int]=REQ(json_validator=check_list("}, {"line_number": 5, "line_content": "    check_int), default=[]), description: str=REQ()) ->HttpResponse:"}, {"line_number": 6, "line_content": "    user_profiles = user_ids_to_users(members, user_profile.realm)"}, {"line_number": 7, "line_content": "    check_add_user_group(user_profile.realm, name, user_profiles, description)"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/user_groups.py#L50", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@require_member_or_admin"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def get_user_group(request: HttpRequest, user_profile: UserProfile"}, {"line_number": 4, "line_content": "    ) ->HttpResponse:"}, {"line_number": 5, "line_content": "    user_groups = user_groups_in_realm_serialized(user_profile.realm)"}, {"line_number": 6, "line_content": "    return json_success(request, data={'user_groups': user_groups})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/user_groups.py#L36", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "@require_user_group_edit_permission"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def edit_user_group(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    user_group_id: int=REQ(json_validator=check_int, path_only=True), name:"}, {"line_number": 5, "line_content": "    str=REQ(default=''), description: str=REQ(default='')) ->HttpResponse:"}, {"line_number": 6, "line_content": "    if not (name or description):"}, {"line_number": 7, "line_content": "        raise JsonableError(_('No new data supplied'))"}, {"line_number": 8, "line_content": "    user_group = access_user_group_by_id(user_group_id, user_profile)"}, {"line_number": 9, "line_content": "    if name != user_group.name:"}, {"line_number": 10, "line_content": "        do_update_user_group_name(user_group, name)"}, {"line_number": 11, "line_content": "    if description != user_group.description:"}, {"line_number": 12, "line_content": "        do_update_user_group_description(user_group, description)"}, {"line_number": 13, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/user_groups.py#L36", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@require_user_group_edit_permission"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def delete_user_group(request: HttpRequest, user_profile: UserProfile,"}, {"line_number": 4, "line_content": "    user_group_id: int=REQ(json_validator=check_int, path_only=True)"}, {"line_number": 5, "line_content": "    ) ->HttpResponse:"}, {"line_number": 6, "line_content": "    check_delete_user_group(user_group_id, user_profile)"}, {"line_number": 7, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/user_groups.py#L36", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@require_user_group_edit_permission"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def update_user_group_backend(request: HttpRequest, user_profile:"}, {"line_number": 4, "line_content": "    UserProfile, user_group_id: int=REQ(json_validator=check_int, path_only"}, {"line_number": 5, "line_content": "    =True), delete: Sequence[int]=REQ(json_validator=check_list(check_int),"}, {"line_number": 6, "line_content": "    default=[]), add: Sequence[int]=REQ(json_validator=check_list(check_int"}, {"line_number": 7, "line_content": "    ), default=[])) ->HttpResponse:"}, {"line_number": 8, "line_content": "    if not add and not delete:"}, {"line_number": 9, "line_content": "        raise JsonableError(_("}, {"line_number": 10, "line_content": "            'Nothing to do. Specify at least one of \"add\" or \"delete\".'))"}, {"line_number": 11, "line_content": "    thunks = [lambda : add_members_to_group_backend(request, user_profile,"}, {"line_number": 12, "line_content": "        user_group_id=user_group_id, members=add), lambda :"}, {"line_number": 13, "line_content": "        remove_members_from_group_backend(request, user_profile,"}, {"line_number": 14, "line_content": "        user_group_id=user_group_id, members=delete)]"}, {"line_number": 15, "line_content": "    data = compose_views(thunks)"}, {"line_number": 16, "line_content": "    return json_success(request, data)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/registration.py#L95", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "@has_request_variables"}, {"line_number": 2, "line_content": "def get_prereg_key_and_redirect(request: HttpRequest, confirmation_key: str,"}, {"line_number": 3, "line_content": "    full_name: Optional[str]=REQ(default=None)) ->HttpResponse:"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    The purpose of this little endpoint is primarily to take a GET"}, {"line_number": 6, "line_content": "    request to a long URL containing a confirmation key, and render"}, {"line_number": 7, "line_content": "    a page that will via JavaScript immediately do a POST request to"}, {"line_number": 8, "line_content": "    /accounts/register, so that the user can create their account on"}, {"line_number": 9, "line_content": "    a page with a cleaner URL (and with the browser security and UX"}, {"line_number": 10, "line_content": "    benefits of an HTTP POST having generated the page)."}, {"line_number": 11, "line_content": "    The only thing it does before rendering that page is to check"}, {"line_number": 12, "line_content": "    the validity of the confirmation link. This is redundant with a"}, {"line_number": 13, "line_content": "    similar check in accounts_register, but it provides a slightly nicer"}, {"line_number": 14, "line_content": "    user-facing error handling experience if the URL you visited is"}, {"line_number": 15, "line_content": "    displayed in the browser. (E.g. you can debug that you"}, {"line_number": 16, "line_content": "    accidentally adding an extra character after pasting)."}, {"line_number": 17, "line_content": "    \"\"\""}, {"line_number": 18, "line_content": "    try:"}, {"line_number": 19, "line_content": "        check_prereg_key(request, confirmation_key)"}, {"line_number": 20, "line_content": "    except ConfirmationKeyException as e:"}, {"line_number": 21, "line_content": "        return render_confirmation_key_error(request, e)"}, {"line_number": 22, "line_content": "    return render(request, 'confirmation/confirm_preregistrationuser.html',"}, {"line_number": 23, "line_content": "        context={'key': confirmation_key, 'full_name': full_name})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/zerver/views/development/cache.py#L14", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "@csrf_exempt"}, {"line_number": 2, "line_content": "@require_post"}, {"line_number": 3, "line_content": "def remove_caches(request: HttpRequest) ->HttpResponse:"}, {"line_number": 4, "line_content": "    cache = get_cache_backend(None)"}, {"line_number": 5, "line_content": "    cache.clear()"}, {"line_number": 6, "line_content": "    clear_client_cache()"}, {"line_number": 7, "line_content": "    flush_per_request_caches()"}, {"line_number": 8, "line_content": "    return json_success(request)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/webhook.py#L22", "contents": {"total_lines": 69, "lines": [{"line_number": 1, "line_content": "@csrf_exempt"}, {"line_number": 2, "line_content": "def stripe_webhook(request: HttpRequest) ->HttpResponse:"}, {"line_number": 3, "line_content": "    stripe_webhook_endpoint_secret = get_secret("}, {"line_number": 4, "line_content": "        'stripe_webhook_endpoint_secret', '')"}, {"line_number": 5, "line_content": "    if stripe_webhook_endpoint_secret and not settings.TEST_SUITE:"}, {"line_number": 6, "line_content": "        try:"}, {"line_number": 7, "line_content": "            stripe_event = stripe.Webhook.construct_event(request.body,"}, {"line_number": 8, "line_content": "                request.META.get('HTTP_STRIPE_SIGNATURE'),"}, {"line_number": 9, "line_content": "                stripe_webhook_endpoint_secret)"}, {"line_number": 10, "line_content": "        except ValueError:"}, {"line_number": 11, "line_content": "            return HttpResponse(status=400)"}, {"line_number": 12, "line_content": "        except stripe.error.SignatureVerificationError:"}, {"line_number": 13, "line_content": "            return HttpResponse(status=400)"}, {"line_number": 14, "line_content": "    else:"}, {"line_number": 15, "line_content": "        assert not settings.PRODUCTION"}, {"line_number": 16, "line_content": "        try:"}, {"line_number": 17, "line_content": "            stripe_event = stripe.Event.construct_from(json.loads(request."}, {"line_number": 18, "line_content": "                body), stripe.api_key)"}, {"line_number": 19, "line_content": "        except Exception:"}, {"line_number": 20, "line_content": "            return HttpResponse(status=400)"}, {"line_number": 21, "line_content": "    if stripe_event.api_version != STRIPE_API_VERSION:"}, {"line_number": 22, "line_content": "        error_message = ("}, {"line_number": 23, "line_content": "            f'Mismatch between billing system Stripe API version({STRIPE_API_VERSION}) and Stripe webhook event API version({stripe_event.api_version}).'"}, {"line_number": 24, "line_content": "            )"}, {"line_number": 25, "line_content": "        billing_logger.error(error_message)"}, {"line_number": 26, "line_content": "        return HttpResponse(status=400)"}, {"line_number": 27, "line_content": "    if stripe_event.type not in ['checkout.session.completed',"}, {"line_number": 28, "line_content": "        'payment_intent.succeeded', 'payment_intent.payment_failed']:"}, {"line_number": 29, "line_content": "        return HttpResponse(status=200)"}, {"line_number": 30, "line_content": "    if Event.objects.filter(stripe_event_id=stripe_event.id).exists():"}, {"line_number": 31, "line_content": "        return HttpResponse(status=200)"}, {"line_number": 32, "line_content": "    event = Event(stripe_event_id=stripe_event.id, type=stripe_event.type)"}, {"line_number": 33, "line_content": "    if stripe_event.type == 'checkout.session.completed':"}, {"line_number": 34, "line_content": "        stripe_session = stripe_event.data.object"}, {"line_number": 35, "line_content": "        assert isinstance(stripe_session, stripe.checkout.Session)"}, {"line_number": 36, "line_content": "        try:"}, {"line_number": 37, "line_content": "            session = Session.objects.get(stripe_session_id=stripe_session.id)"}, {"line_number": 38, "line_content": "        except Session.DoesNotExist:"}, {"line_number": 39, "line_content": "            return HttpResponse(status=200)"}, {"line_number": 40, "line_content": "        event.content_type = ContentType.objects.get_for_model(Session)"}, {"line_number": 41, "line_content": "        event.object_id = session.id"}, {"line_number": 42, "line_content": "        event.save()"}, {"line_number": 43, "line_content": "        handle_checkout_session_completed_event(stripe_session, event)"}, {"line_number": 44, "line_content": "    elif stripe_event.type == 'payment_intent.succeeded':"}, {"line_number": 45, "line_content": "        stripe_payment_intent = stripe_event.data.object"}, {"line_number": 46, "line_content": "        assert isinstance(stripe_payment_intent, stripe.PaymentIntent)"}, {"line_number": 47, "line_content": "        try:"}, {"line_number": 48, "line_content": "            payment_intent = PaymentIntent.objects.get(stripe_payment_intent_id"}, {"line_number": 49, "line_content": "                =stripe_payment_intent.id)"}, {"line_number": 50, "line_content": "        except PaymentIntent.DoesNotExist:"}, {"line_number": 51, "line_content": "            return HttpResponse(status=200)"}, {"line_number": 52, "line_content": "        event.content_type = ContentType.objects.get_for_model(PaymentIntent)"}, {"line_number": 53, "line_content": "        event.object_id = payment_intent.id"}, {"line_number": 54, "line_content": "        event.save()"}, {"line_number": 55, "line_content": "        handle_payment_intent_succeeded_event(stripe_payment_intent, event)"}, {"line_number": 56, "line_content": "    elif stripe_event.type == 'payment_intent.payment_failed':"}, {"line_number": 57, "line_content": "        stripe_payment_intent = stripe_event.data.object"}, {"line_number": 58, "line_content": "        try:"}, {"line_number": 59, "line_content": "            assert isinstance(stripe_payment_intent, stripe.PaymentIntent)"}, {"line_number": 60, "line_content": "            payment_intent = PaymentIntent.objects.get(stripe_payment_intent_id"}, {"line_number": 61, "line_content": "                =stripe_payment_intent.id)"}, {"line_number": 62, "line_content": "        except PaymentIntent.DoesNotExist:"}, {"line_number": 63, "line_content": "            return HttpResponse(status=200)"}, {"line_number": 64, "line_content": "        event.content_type = ContentType.objects.get_for_model(PaymentIntent)"}, {"line_number": 65, "line_content": "        event.object_id = payment_intent.id"}, {"line_number": 66, "line_content": "        event.save()"}, {"line_number": 67, "line_content": "        handle_payment_intent_payment_failed_event(stripe_payment_intent, event"}, {"line_number": 68, "line_content": "            )"}, {"line_number": 69, "line_content": "    return HttpResponse(status=200)"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/session.py#L18", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "@require_billing_access"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def start_card_update_stripe_session(request: HttpRequest, user: UserProfile"}, {"line_number": 4, "line_content": "    ) ->HttpResponse:"}, {"line_number": 5, "line_content": "    customer = get_customer_by_realm(user.realm)"}, {"line_number": 6, "line_content": "    assert customer"}, {"line_number": 7, "line_content": "    stripe_session = stripe.checkout.Session.create(cancel_url="}, {"line_number": 8, "line_content": "        f'{user.realm.uri}/billing/', customer=customer.stripe_customer_id,"}, {"line_number": 9, "line_content": "        metadata={'type': 'card_update', 'user_id': user.id}, mode='setup',"}, {"line_number": 10, "line_content": "        payment_method_types=['card'], success_url="}, {"line_number": 11, "line_content": "        f'{user.realm.uri}/billing/event_status?stripe_session_id={{CHECKOUT_SESSION_ID}}'"}, {"line_number": 12, "line_content": "        )"}, {"line_number": 13, "line_content": "    Session.objects.create(stripe_session_id=stripe_session.id, customer="}, {"line_number": 14, "line_content": "        customer, type=Session.CARD_UPDATE_FROM_BILLING_PAGE)"}, {"line_number": 15, "line_content": "    return json_success(request, data={'stripe_session_url': stripe_session"}, {"line_number": 16, "line_content": "        .url, 'stripe_session_id': stripe_session.id})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/session.py#L48", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "@require_organization_member"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def start_retry_payment_intent_session(request: HttpRequest, user:"}, {"line_number": 4, "line_content": "    UserProfile, stripe_payment_intent_id: str=REQ()) ->HttpResponse:"}, {"line_number": 5, "line_content": "    customer = get_customer_by_realm(user.realm)"}, {"line_number": 6, "line_content": "    if customer is None:"}, {"line_number": 7, "line_content": "        raise JsonableError(_('Please create a customer first.'))"}, {"line_number": 8, "line_content": "    try:"}, {"line_number": 9, "line_content": "        payment_intent = PaymentIntent.objects.get(stripe_payment_intent_id"}, {"line_number": 10, "line_content": "            =stripe_payment_intent_id, customer=customer)"}, {"line_number": 11, "line_content": "    except PaymentIntent.DoesNotExist:"}, {"line_number": 12, "line_content": "        raise JsonableError(_('Invalid payment intent id.'))"}, {"line_number": 13, "line_content": "    stripe_payment_intent = stripe.PaymentIntent.retrieve("}, {"line_number": 14, "line_content": "        stripe_payment_intent_id)"}, {"line_number": 15, "line_content": "    if stripe_payment_intent.status == 'succeeded':"}, {"line_number": 16, "line_content": "        raise JsonableError(_('Payment already succeeded.'))"}, {"line_number": 17, "line_content": "    if stripe_payment_intent.status == 'processing':"}, {"line_number": 18, "line_content": "        raise JsonableError(_('Payment processing.'))"}, {"line_number": 19, "line_content": "    metadata: Dict[str, Any] = {'user_id': user.id}"}, {"line_number": 20, "line_content": "    metadata.update(stripe_payment_intent.metadata)"}, {"line_number": 21, "line_content": "    stripe_session = stripe.checkout.Session.create(cancel_url="}, {"line_number": 22, "line_content": "        f'{user.realm.uri}/upgrade/', customer=customer.stripe_customer_id,"}, {"line_number": 23, "line_content": "        metadata=metadata, setup_intent_data={'metadata': metadata}, mode="}, {"line_number": 24, "line_content": "        'setup', payment_method_types=['card'], success_url="}, {"line_number": 25, "line_content": "        f'{user.realm.uri}/billing/event_status?stripe_session_id={{CHECKOUT_SESSION_ID}}'"}, {"line_number": 26, "line_content": "        )"}, {"line_number": 27, "line_content": "    session = Session.objects.create(stripe_session_id=stripe_session.id,"}, {"line_number": 28, "line_content": "        customer=customer, type=Session."}, {"line_number": 29, "line_content": "        RETRY_UPGRADE_WITH_ANOTHER_PAYMENT_METHOD)"}, {"line_number": 30, "line_content": "    session.payment_intent = payment_intent"}, {"line_number": 31, "line_content": "    session.save(update_fields=['payment_intent'])"}, {"line_number": 32, "line_content": "    session.save()"}, {"line_number": 33, "line_content": "    return json_success(request, data={'stripe_session_id': stripe_session."}, {"line_number": 34, "line_content": "        id, 'stripe_session_url': stripe_session.url})"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/support.py#L19", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "@zulip_login_required"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def support_request(request: HttpRequest) ->HttpResponse:"}, {"line_number": 4, "line_content": "    user = request.user"}, {"line_number": 5, "line_content": "    assert user.is_authenticated"}, {"line_number": 6, "line_content": "    context = {'email': user.delivery_email, 'realm_name': user.realm.name,"}, {"line_number": 7, "line_content": "        'MAX_SUBJECT_LENGTH': SupportRequestForm.MAX_SUBJECT_LENGTH}"}, {"line_number": 8, "line_content": "    if request.POST:"}, {"line_number": 9, "line_content": "        post_data = request.POST.copy()"}, {"line_number": 10, "line_content": "        form = SupportRequestForm(post_data)"}, {"line_number": 11, "line_content": "        if form.is_valid():"}, {"line_number": 12, "line_content": "            email_context = {'requested_by': user.full_name,"}, {"line_number": 13, "line_content": "                'realm_string_id': user.realm.string_id, 'request_subject':"}, {"line_number": 14, "line_content": "                form.cleaned_data['request_subject'], 'request_message':"}, {"line_number": 15, "line_content": "                form.cleaned_data['request_message'], 'support_url':"}, {"line_number": 16, "line_content": "                get_support_url(user.realm), 'user_role': user.get_role_name()}"}, {"line_number": 17, "line_content": "            send_email('zerver/emails/support_request', to_emails=["}, {"line_number": 18, "line_content": "                FromAddress.SUPPORT], from_name='Zulip Support',"}, {"line_number": 19, "line_content": "                from_address=FromAddress.tokenized_no_reply_address(),"}, {"line_number": 20, "line_content": "                reply_to_email=user.delivery_email, context=email_context)"}, {"line_number": 21, "line_content": "            response = render(request,"}, {"line_number": 22, "line_content": "                'corporate/support_request_thanks.html', context=context)"}, {"line_number": 23, "line_content": "            return response"}, {"line_number": 24, "line_content": "    response = render(request, 'corporate/support_request.html', context="}, {"line_number": 25, "line_content": "        context)"}, {"line_number": 26, "line_content": "    return response"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/event_status.py#L18", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "@require_organization_member"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def event_status(request: HttpRequest, user: UserProfile, stripe_session_id:"}, {"line_number": 4, "line_content": "    Optional[str]=REQ(default=None), stripe_payment_intent_id: Optional[str"}, {"line_number": 5, "line_content": "    ]=REQ(default=None)) ->HttpResponse:"}, {"line_number": 6, "line_content": "    customer = get_customer_by_realm(user.realm)"}, {"line_number": 7, "line_content": "    if customer is None:"}, {"line_number": 8, "line_content": "        raise JsonableError(_('No customer for this organization!'))"}, {"line_number": 9, "line_content": "    if stripe_session_id is not None:"}, {"line_number": 10, "line_content": "        try:"}, {"line_number": 11, "line_content": "            session = Session.objects.get(stripe_session_id="}, {"line_number": 12, "line_content": "                stripe_session_id, customer=customer)"}, {"line_number": 13, "line_content": "        except Session.DoesNotExist:"}, {"line_number": 14, "line_content": "            raise JsonableError(_('Session not found'))"}, {"line_number": 15, "line_content": "        if (session.type == Session.CARD_UPDATE_FROM_BILLING_PAGE and not"}, {"line_number": 16, "line_content": "            user.has_billing_access):"}, {"line_number": 17, "line_content": "            raise JsonableError(_("}, {"line_number": 18, "line_content": "                'Must be a billing administrator or an organization owner'))"}, {"line_number": 19, "line_content": "        return json_success(request, data={'session': session.to_dict()})"}, {"line_number": 20, "line_content": "    if stripe_payment_intent_id is not None:"}, {"line_number": 21, "line_content": "        payment_intent = PaymentIntent.objects.filter(stripe_payment_intent_id"}, {"line_number": 22, "line_content": "            =stripe_payment_intent_id, customer=customer).last()"}, {"line_number": 23, "line_content": "        if payment_intent is None:"}, {"line_number": 24, "line_content": "            raise JsonableError(_('Payment intent not found'))"}, {"line_number": 25, "line_content": "        return json_success(request, data={'payment_intent': payment_intent"}, {"line_number": 26, "line_content": "            .to_dict()})"}, {"line_number": 27, "line_content": "    raise JsonableError(_('Pass stripe_session_id or stripe_payment_intent_id')"}, {"line_number": 28, "line_content": "        )"}]}}
{"type": "functions", "project_source": "https://github.com/zulip/zulip", "direct_link_to_file_line": "https://github.com/zulip/zulip/blob/master/corporate/views/event_status.py#L52", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "@zulip_login_required"}, {"line_number": 2, "line_content": "@has_request_variables"}, {"line_number": 3, "line_content": "def event_status_page(request: HttpRequest, stripe_session_id: str=REQ("}, {"line_number": 4, "line_content": "    default=''), stripe_payment_intent_id: str=REQ(default='')) ->HttpResponse:"}, {"line_number": 5, "line_content": "    context = {'stripe_session_id': stripe_session_id,"}, {"line_number": 6, "line_content": "        'stripe_payment_intent_id': stripe_payment_intent_id}"}, {"line_number": 7, "line_content": "    return render(request, 'corporate/event_status.html', context=context)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L12", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def getin(m, path, default=None):"}, {"line_number": 2, "line_content": "    \"\"\"returns the value in a nested dict\"\"\""}, {"line_number": 3, "line_content": "    keynotfound = ':com.gooey-project/not-found'"}, {"line_number": 4, "line_content": "    result = reduce(lambda acc, val: acc.get(val, {keynotfound: None}), path, m"}, {"line_number": 5, "line_content": "        )"}, {"line_number": 6, "line_content": "    if isinstance(result, dict) and keynotfound in result:"}, {"line_number": 7, "line_content": "        return default"}, {"line_number": 8, "line_content": "    return result"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L23", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def assoc(m, key, val):"}, {"line_number": 2, "line_content": "    \"\"\"Copy-on-write associates a value in a dict\"\"\""}, {"line_number": 3, "line_content": "    cpy = deepcopy(m)"}, {"line_number": 4, "line_content": "    cpy[key] = val"}, {"line_number": 5, "line_content": "    return cpy"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L29", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def dissoc(m, key, val):"}, {"line_number": 2, "line_content": "    cpy = deepcopy(m)"}, {"line_number": 3, "line_content": "    del cpy[key]"}, {"line_number": 4, "line_content": "    return cpy"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L34", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def associn(m, path, value):"}, {"line_number": 2, "line_content": "    \"\"\" Copy-on-write associates a value in a nested dict \"\"\""}, {"line_number": 3, "line_content": "    def assoc_recursively(m, path, value):"}, {"line_number": 4, "line_content": "        if not path:"}, {"line_number": 5, "line_content": "            return value"}, {"line_number": 6, "line_content": "        p = path[0]"}, {"line_number": 7, "line_content": "        return assoc(m, p, assoc_recursively(m.get(p, {}), path[1:], value))"}, {"line_number": 8, "line_content": "    return assoc_recursively(m, path, value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L44", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def associnMany(m, *args: Tuple[Union[str, List[str]], Any]):"}, {"line_number": 2, "line_content": "    def apply(_m, change: Tuple[Union[str, List[str]], Any]):"}, {"line_number": 3, "line_content": "        path, value = change"}, {"line_number": 4, "line_content": "        if isinstance(path, list):"}, {"line_number": 5, "line_content": "            return associn(_m, path, value)"}, {"line_number": 6, "line_content": "        else:"}, {"line_number": 7, "line_content": "            return associn(_m, path.split('.'), value)"}, {"line_number": 8, "line_content": "    return reduce(apply, args, m)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L55", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def merge(*maps):"}, {"line_number": 2, "line_content": "    \"\"\"Merge all maps left to right\"\"\""}, {"line_number": 3, "line_content": "    copies = map(deepcopy, maps)"}, {"line_number": 4, "line_content": "    return reduce(lambda acc, val: acc.update(val) or acc, copies)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L61", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def flatmap(f, coll):"}, {"line_number": 2, "line_content": "    \"\"\"Applies concat to the result of applying f to colls\"\"\""}, {"line_number": 3, "line_content": "    return list(chain(*map(f, coll)))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L66", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def indexunique(f, coll):"}, {"line_number": 2, "line_content": "    \"\"\"Build a map from the collection keyed off of f"}, {"line_number": 3, "line_content": "    e.g."}, {"line_number": 4, "line_content": "        [{id:1,..}, {id:2, ...}] => {1: {id:1,...}, 2: {id:2,...}}"}, {"line_number": 5, "line_content": "    Note: duplicates, if present, are overwritten"}, {"line_number": 6, "line_content": "    \"\"\""}, {"line_number": 7, "line_content": "    return zipmap(map(f, coll), coll)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L76", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def zipmap(keys, vals):"}, {"line_number": 2, "line_content": "    \"\"\"Return a map from keys to values\"\"\""}, {"line_number": 3, "line_content": "    return dict(zip(keys, vals))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L81", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def compact(coll):"}, {"line_number": 2, "line_content": "    \"\"\"Returns a new list with all falsy values removed\"\"\""}, {"line_number": 3, "line_content": "    if isinstance(coll, dict):"}, {"line_number": 4, "line_content": "        return {k: v for k, v in coll.items() if v is not None}"}, {"line_number": 5, "line_content": "    else:"}, {"line_number": 6, "line_content": "        return list(filter(None, coll))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L89", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def ifPresent(f):"}, {"line_number": 2, "line_content": "    \"\"\"Execute f only if value is present and not None\"\"\""}, {"line_number": 3, "line_content": "    def inner(value):"}, {"line_number": 4, "line_content": "        if value:"}, {"line_number": 5, "line_content": "            return f(value)"}, {"line_number": 6, "line_content": "        else:"}, {"line_number": 7, "line_content": "            return True"}, {"line_number": 8, "line_content": "    return inner"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L99", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def identity(x):"}, {"line_number": 2, "line_content": "    \"\"\"Identity function always returns the supplied argument\"\"\""}, {"line_number": 3, "line_content": "    return x"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L104", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def unit(val):"}, {"line_number": 2, "line_content": "    return val"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L108", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def bind(val, f):"}, {"line_number": 2, "line_content": "    return f(val) if val else None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L112", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def lift(f):"}, {"line_number": 2, "line_content": "    @wraps(f)"}, {"line_number": 3, "line_content": "    def inner(x) ->Try:"}, {"line_number": 4, "line_content": "        try:"}, {"line_number": 5, "line_content": "            return Success(f(x))"}, {"line_number": 6, "line_content": "        except Exception as e:"}, {"line_number": 7, "line_content": "            return Failure(e)"}, {"line_number": 8, "line_content": "    return inner"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L36", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def assoc_recursively(m, path, value):"}, {"line_number": 2, "line_content": "    if not path:"}, {"line_number": 3, "line_content": "        return value"}, {"line_number": 4, "line_content": "    p = path[0]"}, {"line_number": 5, "line_content": "    return assoc(m, p, assoc_recursively(m.get(p, {}), path[1:], value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L45", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def apply(_m, change: Tuple[Union[str, List[str]], Any]):"}, {"line_number": 2, "line_content": "    path, value = change"}, {"line_number": 3, "line_content": "    if isinstance(path, list):"}, {"line_number": 4, "line_content": "        return associn(_m, path, value)"}, {"line_number": 5, "line_content": "    else:"}, {"line_number": 6, "line_content": "        return associn(_m, path.split('.'), value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L91", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def inner(value):"}, {"line_number": 2, "line_content": "    if value:"}, {"line_number": 3, "line_content": "        return f(value)"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return True"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/util/functional.py#L113", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "@wraps(f)"}, {"line_number": 2, "line_content": "def inner(x) ->Try:"}, {"line_number": 3, "line_content": "    try:"}, {"line_number": 4, "line_content": "        return Success(f(x))"}, {"line_number": 5, "line_content": "    except Exception as e:"}, {"line_number": 6, "line_content": "        return Failure(e)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/imageutil.py#L13", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def loadImage(img_path):"}, {"line_number": 2, "line_content": "    return Image.open(img_path)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/imageutil.py#L17", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def resizeImage(im, targetHeight):"}, {"line_number": 2, "line_content": "    im.thumbnail((six.MAXSIZE, targetHeight))"}, {"line_number": 3, "line_content": "    return im"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/imageutil.py#L22", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def wrapBitmap(im, parent):"}, {"line_number": 2, "line_content": "    try:"}, {"line_number": 3, "line_content": "        rgba = im.convert('RGBA').tobytes()"}, {"line_number": 4, "line_content": "    except AttributeError:"}, {"line_number": 5, "line_content": "        rgba = im.convert('RGBA').tostring()"}, {"line_number": 6, "line_content": "    bitmapData = bitmapFromBufferRGBA(im, rgba)"}, {"line_number": 7, "line_content": "    return wx.StaticBitmap(parent, bitmap=bitmapData)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/pubsub.py#L12", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self):"}, {"line_number": 2, "line_content": "    self.registry = defaultdict(list)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/pubsub.py#L15", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def subscribe(self, event, handler):"}, {"line_number": 2, "line_content": "    self.registry[event].append(handler)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/pubsub.py#L18", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def send_message(self, event, **kwargs):"}, {"line_number": 2, "line_content": "    for event_handler in self.registry.get(event, []):"}, {"line_number": 3, "line_content": "        wx.CallAfter(event_handler, **kwargs)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/pubsub.py#L22", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def send_message_sync(self, event, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        ===== THIS IS NOT THREAD SAFE ====="}, {"line_number": 4, "line_content": "        Synchronously sends the message to all relevant consumers"}, {"line_number": 5, "line_content": "        and blocks until a response is received."}, {"line_number": 6, "line_content": "        This MUST ONLY be used for communication within"}, {"line_number": 7, "line_content": "        the same thread! It exists primarily as an escape"}, {"line_number": 8, "line_content": "        hatch for bubbling up messages (which would be garbage"}, {"line_number": 9, "line_content": "        collected in the CallAfter form) to interested components"}, {"line_number": 10, "line_content": "        \"\"\""}, {"line_number": 11, "line_content": "    for event_handler in self.registry.get(event, []):"}, {"line_number": 12, "line_content": "        event_handler(**kwargs)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/bootstrap.py#L22", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def run(build_spec):"}, {"line_number": 2, "line_content": "    app, _ = build_app(build_spec)"}, {"line_number": 3, "line_content": "    app.MainLoop()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/bootstrap.py#L27", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def build_app(build_spec):"}, {"line_number": 2, "line_content": "    app = wx.App(False)"}, {"line_number": 3, "line_content": "    return _build_app(build_spec, app)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L11", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def value(field: FormField):"}, {"line_number": 2, "line_content": "    if field['type'] in ['Checkbox', 'BlockCheckbox']:"}, {"line_number": 3, "line_content": "        return field['checked']"}, {"line_number": 4, "line_content": "    elif field['type'] in ['Dropdown', 'Listbox', 'Counter']:"}, {"line_number": 5, "line_content": "        return field['selected']"}, {"line_number": 6, "line_content": "    elif field['type'] == 'RadioGroup':"}, {"line_number": 7, "line_content": "        if field['selected'] is not None:"}, {"line_number": 8, "line_content": "            return value(field['options'][field['selected']])"}, {"line_number": 9, "line_content": "        else:"}, {"line_number": 10, "line_content": "            return None"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        return field['value']"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L25", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def add_placeholder(field: FormField, placeholder=VALUE_PLACEHOLDER):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    TODO: Docs about placeholders"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    if field['type'] in ['Checkbox', 'CheckBox', 'BlockCheckbox']:"}, {"line_number": 6, "line_content": "        return assoc(field, 'checked', True)"}, {"line_number": 7, "line_content": "    elif field['type'] in ['Dropdown', 'Listbox', 'Counter']:"}, {"line_number": 8, "line_content": "        return assoc(field, 'selected', placeholder)"}, {"line_number": 9, "line_content": "    elif field['type'] == 'RadioGroup':"}, {"line_number": 10, "line_content": "        return {**field, 'selected': 0, 'options': [add_placeholder(field["}, {"line_number": 11, "line_content": "            'options'][0], placeholder=RADIO_PLACEHOLDER), *field['options'"}, {"line_number": 12, "line_content": "            ][1:]]}"}, {"line_number": 13, "line_content": "    else:"}, {"line_number": 14, "line_content": "        return assoc(field, 'value', placeholder)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L54", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "def formatArgument(item: EnrichedItem):"}, {"line_number": 2, "line_content": "    if item['type'] in ['Checkbox', 'CheckBox', 'BlockCheckbox']:"}, {"line_number": 3, "line_content": "        return checkbox(item['data'], value(item['field']))"}, {"line_number": 4, "line_content": "    elif item['type'] == 'MultiFileChooser':"}, {"line_number": 5, "line_content": "        return multiFileChooser(item['data'], value(item['field']))"}, {"line_number": 6, "line_content": "    elif item['type'] == 'Textarea':"}, {"line_number": 7, "line_content": "        return textArea(item['data'], value(item['field']))"}, {"line_number": 8, "line_content": "    elif item['type'] == 'CommandField':"}, {"line_number": 9, "line_content": "        return textArea(item['data'], value(item['field']))"}, {"line_number": 10, "line_content": "    elif item['type'] == 'Counter':"}, {"line_number": 11, "line_content": "        return counter(item['data'], value(item['field']))"}, {"line_number": 12, "line_content": "    elif item['type'] == 'Dropdown':"}, {"line_number": 13, "line_content": "        return dropdown(item['data'], value(item['field']))"}, {"line_number": 14, "line_content": "    elif item['type'] == 'Listbox':"}, {"line_number": 15, "line_content": "        return listbox(item['data'], value(item['field']))"}, {"line_number": 16, "line_content": "    elif item['type'] == 'RadioGroup':"}, {"line_number": 17, "line_content": "        selected = item['field']['selected']"}, {"line_number": 18, "line_content": "        if selected is not None:"}, {"line_number": 19, "line_content": "            formField = item['field']['options'][selected]"}, {"line_number": 20, "line_content": "            argparseDefinition = item['data']['widgets'][selected]"}, {"line_number": 21, "line_content": "            return formatArgument(assoc(argparseDefinition, 'field', formField)"}, {"line_number": 22, "line_content": "                )"}, {"line_number": 23, "line_content": "        else:"}, {"line_number": 24, "line_content": "            return None"}, {"line_number": 25, "line_content": "    else:"}, {"line_number": 26, "line_content": "        return general(item['data'], value(item['field']))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L81", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def placeholder(item: EnrichedItem):"}, {"line_number": 2, "line_content": "    pass"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L85", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def checkbox(metadata, value):"}, {"line_number": 2, "line_content": "    return metadata['commands'][0] if value else None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L89", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def multiFileChooser(metadata, value):"}, {"line_number": 2, "line_content": "    paths = ' '.join(quote(x) for x in value.split(os.pathsep) if x)"}, {"line_number": 3, "line_content": "    if metadata['commands'] and paths:"}, {"line_number": 4, "line_content": "        return u'{} {}'.format(metadata['commands'][0], paths)"}, {"line_number": 5, "line_content": "    return paths or None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L96", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def textArea(metadata, value):"}, {"line_number": 2, "line_content": "    if metadata['commands'] and value:"}, {"line_number": 3, "line_content": "        return '{} {}'.format(metadata['commands'][0], quote(value.encode("}, {"line_number": 4, "line_content": "            'unicode_escape')))"}, {"line_number": 5, "line_content": "    else:"}, {"line_number": 6, "line_content": "        return quote(value.encode('unicode_escape')) if value else ''"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L103", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def commandField(metadata, value):"}, {"line_number": 2, "line_content": "    if metadata['commands'] and value:"}, {"line_number": 3, "line_content": "        return u'{} {}'.format(metadata['commands'][0], value)"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return value or None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L110", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def counter(metatdata, value):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Returns"}, {"line_number": 4, "line_content": "      str(option_string * DropDown Value)"}, {"line_number": 5, "line_content": "      e.g."}, {"line_number": 6, "line_content": "      -vvvvv"}, {"line_number": 7, "line_content": "    \"\"\""}, {"line_number": 8, "line_content": "    if not str(value).isdigit():"}, {"line_number": 9, "line_content": "        return None"}, {"line_number": 10, "line_content": "    command = str(metatdata['commands'][0]).strip()"}, {"line_number": 11, "line_content": "    return ' '.join(itertools.repeat(command, int(value)))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L123", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def dropdown(metadata, value):"}, {"line_number": 2, "line_content": "    if value == 'Select Option':"}, {"line_number": 3, "line_content": "        return None"}, {"line_number": 4, "line_content": "    elif metadata['commands'] and value:"}, {"line_number": 5, "line_content": "        return u'{} {}'.format(metadata['commands'][0], quote(value))"}, {"line_number": 6, "line_content": "    else:"}, {"line_number": 7, "line_content": "        return quote(value) if value else ''"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L132", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def listbox(meta, value):"}, {"line_number": 2, "line_content": "    if meta['commands'] and value:"}, {"line_number": 3, "line_content": "        return u'{} {}'.format(meta['commands'][0], ' '.join(map(quote, value))"}, {"line_number": 4, "line_content": "            )"}, {"line_number": 5, "line_content": "    else:"}, {"line_number": 6, "line_content": "        return ' '.join(map(quote, value)) if value else ''"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/formatters.py#L139", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "def general(metadata, value):"}, {"line_number": 2, "line_content": "    if metadata.get('commands') and value:"}, {"line_number": 3, "line_content": "        if not metadata.get('nargs'):"}, {"line_number": 4, "line_content": "            v = quote(value)"}, {"line_number": 5, "line_content": "        else:"}, {"line_number": 6, "line_content": "            v = value"}, {"line_number": 7, "line_content": "        return u'{0} {1}'.format(metadata['commands'][0], v)"}, {"line_number": 8, "line_content": "    elif not value:"}, {"line_number": 9, "line_content": "        return None"}, {"line_number": 10, "line_content": "    elif not metadata.get('nargs'):"}, {"line_number": 11, "line_content": "        return quote(value)"}, {"line_number": 12, "line_content": "    else:"}, {"line_number": 13, "line_content": "        return value"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/image_repository.py#L23", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def loadImages(targetDir):"}, {"line_number": 2, "line_content": "    defaultImages = resolvePaths(getResourcePath('images'), filenames)"}, {"line_number": 3, "line_content": "    return {'images': merge(defaultImages, collectOverrides(targetDir,"}, {"line_number": 4, "line_content": "        filenames))}"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/image_repository.py#L28", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getImageDirectory(targetDir):"}, {"line_number": 2, "line_content": "    return getResourcePath('images') if targetDir == 'default' else targetDir"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/image_repository.py#L34", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def collectOverrides(targetDir, filenames):"}, {"line_number": 2, "line_content": "    if targetDir == '::gooey/default':"}, {"line_number": 3, "line_content": "        return {}"}, {"line_number": 4, "line_content": "    pathto = partial(os.path.join, targetDir)"}, {"line_number": 5, "line_content": "    if not os.path.isdir(targetDir):"}, {"line_number": 6, "line_content": "        raise IOError('Unable to find the user supplied directory {}'."}, {"line_number": 7, "line_content": "            format(targetDir))"}, {"line_number": 8, "line_content": "    return {varname: pathto(filename) for varname, filename in filenames."}, {"line_number": 9, "line_content": "        items() if os.path.exists(pathto(filename))}"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/image_repository.py#L48", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def resolvePaths(dirname, filenames):"}, {"line_number": 2, "line_content": "    return {key: os.path.join(dirname, filename) for key, filename in"}, {"line_number": 3, "line_content": "        filenames.items()}"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L28", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def of(cls, params: GooeyParams):"}, {"line_number": 3, "line_content": "    return cls(params.get('progress_regex'), params.get('progress_expr'),"}, {"line_number": 4, "line_content": "        params.get('hide_progress_msg'), params.get('encoding'), params.get"}, {"line_number": 5, "line_content": "        ('requires_shell'), params.get('shutdown_signal', signal.SIGTERM))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L39", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def __init__(self, progress_regex, progress_expr, hide_progress_msg,"}, {"line_number": 2, "line_content": "    encoding, shell=True, shutdown_signal=signal.SIGTERM, testmode=False):"}, {"line_number": 3, "line_content": "    self._process = None"}, {"line_number": 4, "line_content": "    self.progress_regex = progress_regex"}, {"line_number": 5, "line_content": "    self.progress_expr = progress_expr"}, {"line_number": 6, "line_content": "    self.hide_progress_msg = hide_progress_msg"}, {"line_number": 7, "line_content": "    self.encoding = encoding"}, {"line_number": 8, "line_content": "    self.wasForcefullyStopped = False"}, {"line_number": 9, "line_content": "    self.shell_execution = shell"}, {"line_number": 10, "line_content": "    self.shutdown_signal = shutdown_signal"}, {"line_number": 11, "line_content": "    self.testMode = testmode"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L51", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def was_success(self):"}, {"line_number": 2, "line_content": "    self._process.communicate()"}, {"line_number": 3, "line_content": "    return self._process.returncode == 0"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L55", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def poll(self):"}, {"line_number": 2, "line_content": "    if not self._process:"}, {"line_number": 3, "line_content": "        raise Exception('Not started!')"}, {"line_number": 4, "line_content": "    return self._process.poll()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L60", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def stop(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Sends a signal of the user's choosing (default SIGTERM) to"}, {"line_number": 4, "line_content": "        the child process."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    if self.running():"}, {"line_number": 7, "line_content": "        self.wasForcefullyStopped = True"}, {"line_number": 8, "line_content": "        self.send_shutdown_signal()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L69", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def send_shutdown_signal(self):"}, {"line_number": 2, "line_content": "    self._send_signal(self.shutdown_signal)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L72", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def _send_signal(self, sig):"}, {"line_number": 2, "line_content": "    parent = psutil.Process(self._process.pid)"}, {"line_number": 3, "line_content": "    for child in parent.children(recursive=True):"}, {"line_number": 4, "line_content": "        child.send_signal(sig)"}, {"line_number": 5, "line_content": "    parent.send_signal(sig)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L78", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def running(self):"}, {"line_number": 2, "line_content": "    return self._process and self.poll() is None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L81", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "def run(self, command):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Kicks off the user's code in a subprocess."}, {"line_number": 4, "line_content": "        Implementation Note: CREATE_NEW_SUBPROCESS is required to have signals behave sanely"}, {"line_number": 5, "line_content": "        on windows. See the signal_support module for full background."}, {"line_number": 6, "line_content": "        \"\"\""}, {"line_number": 7, "line_content": "    self.wasForcefullyStopped = False"}, {"line_number": 8, "line_content": "    env = os.environ.copy()"}, {"line_number": 9, "line_content": "    env['GOOEY'] = '1'"}, {"line_number": 10, "line_content": "    env['PYTHONIOENCODING'] = self.encoding"}, {"line_number": 11, "line_content": "    try:"}, {"line_number": 12, "line_content": "        self._process = subprocess.Popen(command.encode(sys."}, {"line_number": 13, "line_content": "            getfilesystemencoding()), stdout=subprocess.PIPE, stdin="}, {"line_number": 14, "line_content": "            subprocess.PIPE, stderr=subprocess.STDOUT, shell=self."}, {"line_number": 15, "line_content": "            shell_execution, env=env, creationflags=creationflag)"}, {"line_number": 16, "line_content": "    except:"}, {"line_number": 17, "line_content": "        self._process = subprocess.Popen(command, stdout=subprocess.PIPE,"}, {"line_number": 18, "line_content": "            stdin=subprocess.PIPE, stderr=subprocess.STDOUT, shell=self."}, {"line_number": 19, "line_content": "            shell_execution, env=env, creationflags=creationflag)"}, {"line_number": 20, "line_content": "    if not self.testMode:"}, {"line_number": 21, "line_content": "        t = Thread(target=self._forward_stdout, args=(self._process,))"}, {"line_number": 22, "line_content": "        t.start()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L114", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "def _forward_stdout(self, process):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Reads the stdout of `process` and forwards lines and progress"}, {"line_number": 4, "line_content": "        to any interested subscribers"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    while True:"}, {"line_number": 7, "line_content": "        line = process.stdout.readline()"}, {"line_number": 8, "line_content": "        if not line:"}, {"line_number": 9, "line_content": "            break"}, {"line_number": 10, "line_content": "        _progress = self._extract_progress(line)"}, {"line_number": 11, "line_content": "        pub.send_message(events.PROGRESS_UPDATE, progress=_progress)"}, {"line_number": 12, "line_content": "        if _progress is None or self.hide_progress_msg is False:"}, {"line_number": 13, "line_content": "            pub.send_message(events.CONSOLE_UPDATE, msg=line.decode(self."}, {"line_number": 14, "line_content": "                encoding))"}, {"line_number": 15, "line_content": "    pub.send_message(events.EXECUTION_COMPLETE)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L131", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def _extract_progress(self, text):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Finds progress information in the text using the"}, {"line_number": 4, "line_content": "        user-supplied regex and calculation instructions"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    find = partial(re.search, string=text.strip().decode(self.encoding))"}, {"line_number": 7, "line_content": "    regex = unit(self.progress_regex)"}, {"line_number": 8, "line_content": "    match = bind(regex, find)"}, {"line_number": 9, "line_content": "    result = bind(match, self._calculate_progress)"}, {"line_number": 10, "line_content": "    return result"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L143", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def _calculate_progress(self, match):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Calculates the final progress value found by the regex"}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    if not self.progress_expr:"}, {"line_number": 6, "line_content": "        return safe_float(match.group(1))"}, {"line_number": 7, "line_content": "    else:"}, {"line_number": 8, "line_content": "        return self._eval_progress(match)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/processor.py#L152", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def _eval_progress(self, match):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Runs the user-supplied progress calculation rule"}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    _locals = {k: safe_float(v) for k, v in match.groupdict().items()}"}, {"line_number": 6, "line_content": "    if 'x' not in _locals:"}, {"line_number": 7, "line_content": "        _locals['x'] = [safe_float(x) for x in match.groups()]"}, {"line_number": 8, "line_content": "    try:"}, {"line_number": 9, "line_content": "        return int(eval(self.progress_expr, {}, _locals))"}, {"line_number": 10, "line_content": "    except:"}, {"line_number": 11, "line_content": "        return None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/three_to_four.py#L37", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def imageFromBitmap(bitmap):"}, {"line_number": 2, "line_content": "    if isLatestVersion:"}, {"line_number": 3, "line_content": "        return bitmap.ConvertToImage()"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return wx.ImageFromBitmap(bitmap)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/three_to_four.py#L44", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def bitmapFromImage(image):"}, {"line_number": 2, "line_content": "    if isLatestVersion:"}, {"line_number": 3, "line_content": "        return wx.Bitmap(image)"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return wx.BitmapFromImage(image)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/three_to_four.py#L51", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def bitmapFromBufferRGBA(im, rgba):"}, {"line_number": 2, "line_content": "    if isLatestVersion:"}, {"line_number": 3, "line_content": "        return wx.Bitmap.FromBufferRGBA(im.size[0], im.size[1], rgba)"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return wx.BitmapFromBufferRGBA(im.size[0], im.size[1], rgba)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/three_to_four.py#L57", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def AboutDialog():"}, {"line_number": 2, "line_content": "    if isLatestVersion:"}, {"line_number": 3, "line_content": "        return wx.adv.AboutDialogInfo()"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        return wx.AboutDialogInfo()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/three_to_four.py#L64", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def AboutBox(aboutDialog):"}, {"line_number": 2, "line_content": "    return wx.adv.AboutBox(aboutDialog) if isLatestVersion else wx.AboutBox("}, {"line_number": 3, "line_content": "        aboutDialog)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/cli.py#L26", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def buildSuccessCmd(state: FullGooeyState):"}, {"line_number": 2, "line_content": "    subcommand = state['subcommands'][state['activeSelection']]"}, {"line_number": 3, "line_content": "    widgets = state['widgets'][subcommand]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L12", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def callafter(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Wraps the supplied function in a wx.CallAfter"}, {"line_number": 4, "line_content": "    for Thread-safe interop with WX."}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    @wraps(f)"}, {"line_number": 7, "line_content": "    def inner(*args, **kwargs):"}, {"line_number": 8, "line_content": "        wx.CallAfter(f, *args, **kwargs)"}, {"line_number": 9, "line_content": "    return inner"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L23", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "@contextmanager"}, {"line_number": 2, "line_content": "def transactUI(obj):"}, {"line_number": 3, "line_content": "    \"\"\""}, {"line_number": 4, "line_content": "    Coarse grain UI locking to avoid glitchy UI updates"}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    obj.Freeze()"}, {"line_number": 7, "line_content": "    try:"}, {"line_number": 8, "line_content": "        yield"}, {"line_number": 9, "line_content": "    finally:"}, {"line_number": 10, "line_content": "        obj.Layout()"}, {"line_number": 11, "line_content": "        obj.Thaw()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L46", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def make_bold(statictext):"}, {"line_number": 2, "line_content": "    pointsize = statictext.GetFont().GetPointSize()"}, {"line_number": 3, "line_content": "    font = wx.Font(pointsize, *styles['bold'])"}, {"line_number": 4, "line_content": "    statictext.SetFont(font)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L52", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def dark_grey(statictext):"}, {"line_number": 2, "line_content": "    return withColor(statictext, (54, 54, 54))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L56", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def withColor(statictext, hex):"}, {"line_number": 2, "line_content": "    statictext.SetForegroundColour(hex)"}, {"line_number": 3, "line_content": "    return statictext"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L61", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def h0(parent, label):"}, {"line_number": 2, "line_content": "    text = wx.StaticText(parent, label=label)"}, {"line_number": 3, "line_content": "    font_size = text.GetFont().GetPointSize()"}, {"line_number": 4, "line_content": "    font = wx.Font(int(font_size * 1.4, *styles['h0']))"}, {"line_number": 5, "line_content": "    text.SetFont(font)"}, {"line_number": 6, "line_content": "    return text"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L69", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def h1(parent, label):"}, {"line_number": 2, "line_content": "    return _header(parent, label, styles['h1'])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L73", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def h2(parent, label):"}, {"line_number": 2, "line_content": "    return _header(parent, label, styles['h2'])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L77", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def _header(parent, label, styles):"}, {"line_number": 2, "line_content": "    text = wx.StaticText(parent, label=label)"}, {"line_number": 3, "line_content": "    font_size = text.GetFont().GetPointSize()"}, {"line_number": 4, "line_content": "    font = wx.Font(int(font_size * 1.2), *styles)"}, {"line_number": 5, "line_content": "    text.SetFont(font)"}, {"line_number": 6, "line_content": "    return text"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L85", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def horizontal_rule(parent):"}, {"line_number": 2, "line_content": "    return _rule(parent, wx.LI_HORIZONTAL)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L89", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def vertical_rule(parent):"}, {"line_number": 2, "line_content": "    return _rule(parent, wx.LI_VERTICAL)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L93", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def _rule(parent, direction):"}, {"line_number": 2, "line_content": "    line = wx.StaticLine(parent, -1, style=direction)"}, {"line_number": 3, "line_content": "    line.SetSize((10, 10))"}, {"line_number": 4, "line_content": "    return line"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/wx_util.py#L17", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "@wraps(f)"}, {"line_number": 2, "line_content": "def inner(*args, **kwargs):"}, {"line_number": 3, "line_content": "    wx.CallAfter(f, *args, **kwargs)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/freeze.py#L11", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def is_frozen():"}, {"line_number": 2, "line_content": "    return getattr(sys, 'frozen', False)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/freeze.py#L15", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def getResourcePath(*args):"}, {"line_number": 2, "line_content": "    if is_frozen():"}, {"line_number": 3, "line_content": "        basedir = getattr(sys, '_MEIPASS', None)"}, {"line_number": 4, "line_content": "        if not basedir:"}, {"line_number": 5, "line_content": "            basedir = os.path.dirname(sys.executable)"}, {"line_number": 6, "line_content": "        resource_dir = os.path.join(basedir, 'gooey')"}, {"line_number": 7, "line_content": "        if not os.path.isdir(resource_dir):"}, {"line_number": 8, "line_content": "            raise IOError("}, {"line_number": 9, "line_content": "                'Cannot locate Gooey resources. It seems that the program was frozen, but resource files were not copied into directory of the executable file. Please copy `languages` and `images` folders from gooey module directory into `{}{}` directory. Using PyInstaller, a.datas in .spec file must be specified.'"}, {"line_number": 10, "line_content": "                .format(resource_dir, os.sep))"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        resource_dir = os.path.normpath(os.path.join(os.path.dirname("}, {"line_number": 13, "line_content": "            __file__), '..', '..'))"}, {"line_number": 14, "line_content": "    return os.path.join(resource_dir, *args)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/freeze.py#L37", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def localResourcePath(path):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    A packaging aware util for getting the path to the local working directory."}, {"line_number": 4, "line_content": "    When non-packaged, this is os.getcwd(), when packaged, it will be the local"}, {"line_number": 5, "line_content": "    (dynamic) directory where PyInstaller decompresses content."}, {"line_number": 6, "line_content": "    \"\"\""}, {"line_number": 7, "line_content": "    if is_frozen():"}, {"line_number": 8, "line_content": "        basedir = getattr(sys, '_MEIPASS', None)"}, {"line_number": 9, "line_content": "        return os.path.join(basedir or sys.executable, path)"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        return os.path.join(os.getcwd(), path)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/time.py#L43", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "def format_interval(timeValue):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Formats a number of seconds as a clock time, [H:]MM:SS"}, {"line_number": 4, "line_content": "    Parameters"}, {"line_number": 5, "line_content": "    ----------"}, {"line_number": 6, "line_content": "    t  : int"}, {"line_number": 7, "line_content": "        Number of seconds."}, {"line_number": 8, "line_content": "    Returns"}, {"line_number": 9, "line_content": "    -------"}, {"line_number": 10, "line_content": "    out  : str"}, {"line_number": 11, "line_content": "        [H:]MM:SS"}, {"line_number": 12, "line_content": "    \"\"\""}, {"line_number": 13, "line_content": "    try:"}, {"line_number": 14, "line_content": "        mins, s = divmod(int(timeValue), 60)"}, {"line_number": 15, "line_content": "        h, m = divmod(mins, 60)"}, {"line_number": 16, "line_content": "        if h:"}, {"line_number": 17, "line_content": "            return '{0:d}:{1:02d}:{2:02d}'.format(h, m, s)"}, {"line_number": 18, "line_content": "        else:"}, {"line_number": 19, "line_content": "            return '{0:02d}:{1:02d}'.format(m, s)"}, {"line_number": 20, "line_content": "    except:"}, {"line_number": 21, "line_content": "        return None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/time.py#L66", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def get_elapsed_time(startTime):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Get elapsed time in form of seconds. Provide a start time in seconds as float."}, {"line_number": 4, "line_content": "    Args:"}, {"line_number": 5, "line_content": "        startTime (float): Start time to compare against in seconds."}, {"line_number": 6, "line_content": "    Returns:"}, {"line_number": 7, "line_content": "        float: Time between start time and now"}, {"line_number": 8, "line_content": "    \"\"\""}, {"line_number": 9, "line_content": "    return get_current_time() - startTime"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/filedrop.py#L5", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def __init__(self, window, dropStrategy=None):"}, {"line_number": 2, "line_content": "    wx.FileDropTarget.__init__(self)"}, {"line_number": 3, "line_content": "    self.window = window"}, {"line_number": 4, "line_content": "    self.dropHandler = dropStrategy or self._defaultStrategy"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/filedrop.py#L10", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def OnDropFiles(self, x, y, filenames):"}, {"line_number": 2, "line_content": "    return self.dropHandler(x, y, filenames)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/filedrop.py#L13", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def _defaultStrategy(self, x, y, filenames):"}, {"line_number": 2, "line_content": "    for name in filenames:"}, {"line_number": 3, "line_content": "        self.window.WriteText(name)"}, {"line_number": 4, "line_content": "    return True"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/quoting.py#L5", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def quote(value):"}, {"line_number": 2, "line_content": "    return u'\"{}\"'.format(u'{}'.format(value).replace(u'\"', u'\"\"'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/quoting.py#L5", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def quote(value):"}, {"line_number": 2, "line_content": "    return u\"'{}'\".format(u'{}'.format(value).replace(u\"'\", u\"'\\\\''\"))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/casting.py#L3", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def safe_int(n):"}, {"line_number": 2, "line_content": "    return _safe_cast(int, n)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/casting.py#L6", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def safe_float(n):"}, {"line_number": 2, "line_content": "    return _safe_cast(float, n)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/util/casting.py#L10", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def _safe_cast(_type, val):"}, {"line_number": 2, "line_content": "    try:"}, {"line_number": 3, "line_content": "        return _type(val)"}, {"line_number": 4, "line_content": "    except ValueError:"}, {"line_number": 5, "line_content": "        return None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L70", "contents": {"total_lines": 40, "lines": [{"line_number": 1, "line_content": "def __init__(self, buildSpec, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(GooeyApplication, self).__init__(None, *args, **kwargs)"}, {"line_number": 3, "line_content": "    self._state = {}"}, {"line_number": 4, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 5, "line_content": "    self.applyConfiguration()"}, {"line_number": 6, "line_content": "    self.menu = MenuBar(buildSpec)"}, {"line_number": 7, "line_content": "    self.SetMenuBar(self.menu)"}, {"line_number": 8, "line_content": "    self.header = FrameHeader(self, buildSpec)"}, {"line_number": 9, "line_content": "    self.configs = self.buildConfigPanels(self)"}, {"line_number": 10, "line_content": "    self.navbar = self.buildNavigation()"}, {"line_number": 11, "line_content": "    self.footer = Footer(self, buildSpec)"}, {"line_number": 12, "line_content": "    self.console = Console(self, buildSpec)"}, {"line_number": 13, "line_content": "    self.props = {'background_color': self.buildSpec['header_bg_color'],"}, {"line_number": 14, "line_content": "        'title': self.buildSpec['program_name'], 'subtitle': self.buildSpec"}, {"line_number": 15, "line_content": "        ['program_description'], 'height': self.buildSpec['header_height'],"}, {"line_number": 16, "line_content": "        'image_uri': self.buildSpec['images']['configIcon'], 'image_size':"}, {"line_number": 17, "line_content": "        (six.MAXSIZE, self.buildSpec['header_height'] - 10)}"}, {"line_number": 18, "line_content": "    state = form_page(initial_state(self.buildSpec))"}, {"line_number": 19, "line_content": "    self.fprops = {'buttons': state['buttons'], 'progress': state["}, {"line_number": 20, "line_content": "        'progress'], 'timing': state['timing'], 'bg_color': self.buildSpec["}, {"line_number": 21, "line_content": "        'footer_bg_color']}"}, {"line_number": 22, "line_content": "    self.layoutComponent()"}, {"line_number": 23, "line_content": "    self.timer = Timing(self)"}, {"line_number": 24, "line_content": "    self.clientRunner = ProcessController(self.buildSpec.get("}, {"line_number": 25, "line_content": "        'progress_regex'), self.buildSpec.get('progress_expr'), self."}, {"line_number": 26, "line_content": "        buildSpec.get('hide_progress_msg'), self.buildSpec.get('encoding'),"}, {"line_number": 27, "line_content": "        self.buildSpec.get('requires_shell'), self.buildSpec.get("}, {"line_number": 28, "line_content": "        'shutdown_signal', signal.SIGTERM))"}, {"line_number": 29, "line_content": "    pub.subscribe(events.WINDOW_START, self.onStart)"}, {"line_number": 30, "line_content": "    pub.subscribe(events.WINDOW_RESTART, self.onStart)"}, {"line_number": 31, "line_content": "    pub.subscribe(events.WINDOW_STOP, self.onStopExecution)"}, {"line_number": 32, "line_content": "    pub.subscribe(events.WINDOW_CLOSE, self.onClose)"}, {"line_number": 33, "line_content": "    pub.subscribe(events.WINDOW_CANCEL, self.onCancel)"}, {"line_number": 34, "line_content": "    pub.subscribe(events.WINDOW_EDIT, self.onEdit)"}, {"line_number": 35, "line_content": "    pub.subscribe(events.CONSOLE_UPDATE, self.console.logOutput)"}, {"line_number": 36, "line_content": "    pub.subscribe(events.EXECUTION_COMPLETE, self.onComplete)"}, {"line_number": 37, "line_content": "    pub.subscribe(events.PROGRESS_UPDATE, self.footer.updateProgressBar)"}, {"line_number": 38, "line_content": "    pub.subscribe(events.TIME_UPDATE, self.footer.updateTimeRemaining)"}, {"line_number": 39, "line_content": "    if self.buildSpec.get('auto_start', False):"}, {"line_number": 40, "line_content": "        self.onStart()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L136", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def applyConfiguration(self):"}, {"line_number": 2, "line_content": "    self.SetTitle(self.buildSpec['program_name'])"}, {"line_number": 3, "line_content": "    self.SetBackgroundColour(self.buildSpec.get('body_bg_color'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L141", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def onStart(self, *args, **kwarg):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Verify user input and kick off the client's program if valid"}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    self.footer.cancel_button.Disable()"}, {"line_number": 6, "line_content": "    self.footer.start_button.Disable()"}, {"line_number": 7, "line_content": "    self.footer.start_button.Navigate()"}, {"line_number": 8, "line_content": "    if Events.VALIDATE_FORM in self.buildSpec.get('use_events', []):"}, {"line_number": 9, "line_content": "        Thread(target=self.onStartAsync).run()"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        Thread(target=self.onStartAsync).run()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L157", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "def onStartAsync(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    with transactUI(self):"}, {"line_number": 3, "line_content": "        try:"}, {"line_number": 4, "line_content": "            errors = self.validateForm().getOrThrow()"}, {"line_number": 5, "line_content": "            if errors:"}, {"line_number": 6, "line_content": "                config = self.navbar.getActiveConfig()"}, {"line_number": 7, "line_content": "                config.setErrors(errors)"}, {"line_number": 8, "line_content": "                self.Layout()"}, {"line_number": 9, "line_content": "                self.configs[0].Scroll(0, 0)"}, {"line_number": 10, "line_content": "            else:"}, {"line_number": 11, "line_content": "                if self.buildSpec['clear_before_run']:"}, {"line_number": 12, "line_content": "                    self.console.clear()"}, {"line_number": 13, "line_content": "                self.clientRunner.run(self.buildCliString())"}, {"line_number": 14, "line_content": "                self.showConsole()"}, {"line_number": 15, "line_content": "        except CalledProcessError as e:"}, {"line_number": 16, "line_content": "            self.showError()"}, {"line_number": 17, "line_content": "            self.console.appendText(str(e))"}, {"line_number": 18, "line_content": "            self.console.appendText("}, {"line_number": 19, "line_content": "                \"\"\""}, {"line_number": 20, "line_content": "This failure happens when Gooey tries to invoke your code for the VALIDATE_FORM event and receives an expected error code in response.\"\"\""}, {"line_number": 21, "line_content": "                )"}, {"line_number": 22, "line_content": "            wx.CallAfter(modals.showFailure)"}, {"line_number": 23, "line_content": "        except JSONDecodeError as e:"}, {"line_number": 24, "line_content": "            self.showError()"}, {"line_number": 25, "line_content": "            self.console.appendText(str(e))"}, {"line_number": 26, "line_content": "            self.console.appendText("}, {"line_number": 27, "line_content": "                \"\"\""}, {"line_number": 28, "line_content": "Gooey was unable to parse the response to the VALIDATE_FORM event. This can happen if you have additional logs to stdout beyond what Gooey expects.\"\"\""}, {"line_number": 29, "line_content": "                )"}, {"line_number": 30, "line_content": "            wx.CallAfter(modals.showFailure)"}, {"line_number": 31, "line_content": "        wx.CallLater(20, self.footer.start_button.Enable)"}, {"line_number": 32, "line_content": "        wx.CallLater(20, self.footer.cancel_button.Enable)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L200", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def onEdit(self):"}, {"line_number": 2, "line_content": "    \"\"\"Return the user to the settings screen for further editing\"\"\""}, {"line_number": 3, "line_content": "    with transactUI(self):"}, {"line_number": 4, "line_content": "        for config in self.configs:"}, {"line_number": 5, "line_content": "            config.resetErrors()"}, {"line_number": 6, "line_content": "        self.showSettings()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L208", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "def onComplete(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Display the appropriate screen based on the success/fail of the"}, {"line_number": 4, "line_content": "        host program"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    with transactUI(self):"}, {"line_number": 7, "line_content": "        if self.clientRunner.was_success():"}, {"line_number": 8, "line_content": "            if self.buildSpec.get('return_to_config', False):"}, {"line_number": 9, "line_content": "                self.showSettings()"}, {"line_number": 10, "line_content": "            else:"}, {"line_number": 11, "line_content": "                self.showSuccess()"}, {"line_number": 12, "line_content": "                if self.buildSpec.get('show_success_modal', True):"}, {"line_number": 13, "line_content": "                    wx.CallAfter(modals.showSuccess)"}, {"line_number": 14, "line_content": "        elif self.clientRunner.wasForcefullyStopped:"}, {"line_number": 15, "line_content": "            self.showForceStopped()"}, {"line_number": 16, "line_content": "        else:"}, {"line_number": 17, "line_content": "            self.showError()"}, {"line_number": 18, "line_content": "            if self.buildSpec.get('show_failure_modal'):"}, {"line_number": 19, "line_content": "                wx.CallAfter(modals.showFailure)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L229", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def onCancel(self):"}, {"line_number": 2, "line_content": "    \"\"\"Close the program after confirming"}, {"line_number": 3, "line_content": "        We treat the behavior of the \"cancel\" button slightly"}, {"line_number": 4, "line_content": "        differently than the general window close X button only"}, {"line_number": 5, "line_content": "        because this is 'part of' the form."}, {"line_number": 6, "line_content": "        \"\"\""}, {"line_number": 7, "line_content": "    if modals.confirmExit():"}, {"line_number": 8, "line_content": "        self.onClose()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L240", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def onStopExecution(self):"}, {"line_number": 2, "line_content": "    \"\"\"Displays a scary message and then force-quits the executing"}, {"line_number": 3, "line_content": "        client code if the user accepts\"\"\""}, {"line_number": 4, "line_content": "    if self.shouldStopExecution():"}, {"line_number": 5, "line_content": "        self.clientRunner.stop()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/containers/application.py#L247", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def onClose(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\"Stop any actively running client program, cleanup the top"}, {"line_number": 3, "line_content": "        level WxFrame and shutdown the current process\"\"\""}, {"line_number": 4, "line_content": "    if self.clientRunner.running():"}, {"line_number": 5, "line_content": "        if self.shouldStopExecution():"}, {"line_number": 6, "line_content": "            self.clientRunner.stop()"}, {"line_number": 7, "line_content": "            self.destroyGooey()"}, {"line_number": 8, "line_content": "    else:"}, {"line_number": 9, "line_content": "        self.destroyGooey()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L24", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def attach_notifier(parent):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Recursively attaches the mouseEvent notifier"}, {"line_number": 4, "line_content": "    to all elements in the tree"}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    parent.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 7, "line_content": "    for child in parent.Children:"}, {"line_number": 8, "line_content": "        attach_notifier(child)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L148", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def VerticalSpacer(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'orient': wx.VERTICAL, 'min_size': (-1, props["}, {"line_number": 3, "line_content": "        'height'])}])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L151", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def SidebarControls(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'orient': wx.VERTICAL, 'min_size': (180, 0),"}, {"line_number": 3, "line_content": "        'size': (180, 0), 'show': props.get('show', True), 'flag': wx."}, {"line_number": 4, "line_content": "        EXPAND, 'proportion': 0, 'background_color': props['bg_color']}, [c"}, {"line_number": 5, "line_content": "        .Block, {'orient': wx.VERTICAL, 'min_size': (180, 0), 'size': (180,"}, {"line_number": 6, "line_content": "        0), 'flag': wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 'border': "}, {"line_number": 7, "line_content": "        10, 'proportion': 1, 'background_color': props['bg_color']}, ["}, {"line_number": 8, "line_content": "        VerticalSpacer, {'height': 15}], [TitleText, {'label': props["}, {"line_number": 9, "line_content": "        'label']}], [VerticalSpacer, {'height': 5}], [c.ListBox, {'choices':"}, {"line_number": 10, "line_content": "        props['options'], 'value': props['activeSelection'], 'proportion': "}, {"line_number": 11, "line_content": "        1, 'on_change': props['on_change'], 'flag': wx.EXPAND}], ["}, {"line_number": 12, "line_content": "        VerticalSpacer, {'height': 10}]]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L179", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def ProgressSpinner(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'flag': wx.EXPAND, 'show': props['show']}, [c."}, {"line_number": 3, "line_content": "        Gauge, {'flag': wx.EXPAND, 'value': -1, 'size': (-1, 4)}], [c."}, {"line_number": 4, "line_content": "        StaticLine, {'style': wx.LI_HORIZONTAL, 'flag': wx.EXPAND}]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L190", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def ErrorWarning(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'orient': wx.HORIZONTAL, 'background_color':"}, {"line_number": 3, "line_content": "        '#fdeded', 'style': wx.SIMPLE_BORDER, 'flag': wx.EXPAND | wx.ALL,"}, {"line_number": 4, "line_content": "        'proportion': 0, 'border': 5, 'min_size': (-1, 45), 'show': props."}, {"line_number": 5, "line_content": "        get('show', True)}, [c.StaticBitmap, {'size': (24, 24), 'flag': wx."}, {"line_number": 6, "line_content": "        LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 'border': 6, 'uri':"}, {"line_number": 7, "line_content": "        props['uri']}], [c.StaticText, {'label':"}, {"line_number": 8, "line_content": "        'Whoops! You have some errors which must be corrected', 'flag': wx."}, {"line_number": 9, "line_content": "        ALIGN_CENTER_VERTICAL}]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L208", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def RSidebar(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'orient': wx.HORIZONTAL, 'show': props.get('show',"}, {"line_number": 3, "line_content": "        True), 'flag': props['flag'], 'proportion': props['proportion'],"}, {"line_number": 4, "line_content": "        'ref': props['ref']}, [SidebarControls, {**props, 'show': props["}, {"line_number": 5, "line_content": "        'show_sidebar']}], [c.StaticLine, {'style': wx.LI_VERTICAL, 'flag':"}, {"line_number": 6, "line_content": "        wx.EXPAND, 'min_size': (1, -1)}], *[[TabbedConfigPage if props["}, {"line_number": 7, "line_content": "        'tabbed_groups'] else ConfigPage, {'flag': wx.EXPAND, 'proportion':"}, {"line_number": 8, "line_content": "        3, 'config': config, 'show': i == props['activeSelection']}] for i,"}, {"line_number": 9, "line_content": "        config in enumerate(props['config'].values())]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L229", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def RTabbedLayout(props):"}, {"line_number": 2, "line_content": "    return wsx([c.Notebook, {'flag': wx.EXPAND | wx.ALL, 'show': props.get("}, {"line_number": 3, "line_content": "        'show', True), 'proportion': 1, 'on_change': props['on_change'],"}, {"line_number": 4, "line_content": "        'ref': props['ref']}, *[[c.NotebookItem, {'title': props['options']"}, {"line_number": 5, "line_content": "        [i], 'selected': props['activeSelection'] == i}, [TabbedConfigPage if"}, {"line_number": 6, "line_content": "        props['tabbed_groups'] else ConfigPage, {'flag': wx.EXPAND,"}, {"line_number": 7, "line_content": "        'proportion': 3, 'config': config, 'show': i == props["}, {"line_number": 8, "line_content": "        'activeSelection']}]] for i, config in enumerate(props['config']."}, {"line_number": 9, "line_content": "        values())]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/components.py#L248", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "def layout_choose():"}, {"line_number": 2, "line_content": "    def buildNavigation(self):"}, {"line_number": 3, "line_content": "        \"\"\""}, {"line_number": 4, "line_content": "        Chooses the appropriate layout navigation component based on user prefs"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "        if self.buildSpec['navigation'] == constants.TABBED:"}, {"line_number": 7, "line_content": "            navigation = Tabbar(self, self.buildSpec, self.configs)"}, {"line_number": 8, "line_content": "        else:"}, {"line_number": 9, "line_content": "            navigation = Sidebar(self, self.buildSpec, self.configs)"}, {"line_number": 10, "line_content": "            if self.buildSpec['navigation'] == constants.HIDDEN:"}, {"line_number": 11, "line_content": "                navigation.Hide()"}, {"line_number": 12, "line_content": "        return navigation"}, {"line_number": 13, "line_content": "    def buildConfigPanels(self, parent):"}, {"line_number": 14, "line_content": "        page_class = TabbedConfigPage if self.buildSpec['tabbed_groups'"}, {"line_number": 15, "line_content": "            ] else ConfigPage"}, {"line_number": 16, "line_content": "        return [page_class(parent, widgets, self.buildSpec) for widgets in"}, {"line_number": 17, "line_content": "            self.buildSpec['widgets'].values()]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L60", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "def __init__(self, props):"}, {"line_number": 2, "line_content": "    super().__init__(props)"}, {"line_number": 3, "line_content": "    self.frameRef = Ref()"}, {"line_number": 4, "line_content": "    self.consoleRef = Ref()"}, {"line_number": 5, "line_content": "    self.configRef = Ref()"}, {"line_number": 6, "line_content": "    self.buildSpec = props"}, {"line_number": 7, "line_content": "    self.state = initial_state(props)"}, {"line_number": 8, "line_content": "    self.headerprops = lambda state: {'background_color': self.buildSpec["}, {"line_number": 9, "line_content": "        'header_bg_color'], 'title': state['title'], 'show_title': state["}, {"line_number": 10, "line_content": "        'header_show_title'], 'subtitle': state['subtitle'],"}, {"line_number": 11, "line_content": "        'show_subtitle': state['header_show_subtitle'], 'flag': wx.EXPAND,"}, {"line_number": 12, "line_content": "        'height': self.buildSpec['header_height'], 'image_uri': state["}, {"line_number": 13, "line_content": "        'image'], 'image_size': (six.MAXSIZE, self.buildSpec["}, {"line_number": 14, "line_content": "        'header_height'] - 10)}"}, {"line_number": 15, "line_content": "    self.fprops = lambda state: {'buttons': state['buttons'], 'progress':"}, {"line_number": 16, "line_content": "        state['progress'], 'timing': state['timing'], 'bg_color': self."}, {"line_number": 17, "line_content": "        buildSpec['footer_bg_color'], 'flag': wx.EXPAND}"}, {"line_number": 18, "line_content": "    self.clientRunner = ProcessController.of(self.buildSpec)"}, {"line_number": 19, "line_content": "    self.timer = None"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L90", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "def component_did_mount(self):"}, {"line_number": 2, "line_content": "    pub.subscribe(events.WINDOW_START, self.onStart)"}, {"line_number": 3, "line_content": "    pub.subscribe(events.WINDOW_RESTART, self.onStart)"}, {"line_number": 4, "line_content": "    pub.subscribe(events.WINDOW_STOP, self.handleInterrupt)"}, {"line_number": 5, "line_content": "    pub.subscribe(events.WINDOW_CLOSE, self.handleClose)"}, {"line_number": 6, "line_content": "    pub.subscribe(events.WINDOW_CANCEL, self.handleCancel)"}, {"line_number": 7, "line_content": "    pub.subscribe(events.WINDOW_EDIT, self.handleEdit)"}, {"line_number": 8, "line_content": "    pub.subscribe(events.CONSOLE_UPDATE, self.consoleRef.instance.logOutput)"}, {"line_number": 9, "line_content": "    pub.subscribe(events.EXECUTION_COMPLETE, self.handleComplete)"}, {"line_number": 10, "line_content": "    pub.subscribe(events.PROGRESS_UPDATE, self.updateProgressBar)"}, {"line_number": 11, "line_content": "    pub.subscribe(events.TIME_UPDATE, self.updateTime)"}, {"line_number": 12, "line_content": "    frame: wx.Frame = self.frameRef.instance"}, {"line_number": 13, "line_content": "    frame.Bind(wx.EVT_CLOSE, self.handleClose)"}, {"line_number": 14, "line_content": "    frame.SetMenuBar(MenuBar(self.buildSpec))"}, {"line_number": 15, "line_content": "    self.timer = Timing(frame)"}, {"line_number": 16, "line_content": "    if self.state['fullscreen']:"}, {"line_number": 17, "line_content": "        frame.ShowFullScreen(True)"}, {"line_number": 18, "line_content": "    if self.state['show_preview_warning'"}, {"line_number": 19, "line_content": "        ] and not 'unittest' in sys.modules.keys():"}, {"line_number": 20, "line_content": "        wx.MessageDialog(None, caption='YOU CAN DISABLE THIS MESSAGE',"}, {"line_number": 21, "line_content": "            message="}, {"line_number": 22, "line_content": "            \"\"\""}, {"line_number": 23, "line_content": "                This is a preview build of 1.2.0! There may be instability or "}, {"line_number": 24, "line_content": "                broken functionality. If you encounter any issues, please open an issue "}, {"line_number": 25, "line_content": "                here: https://github.com/chriskiehl/Gooey/issues "}, {"line_number": 26, "line_content": "                "}, {"line_number": 27, "line_content": "                The current stable version is 1.0.8. "}, {"line_number": 28, "line_content": "                "}, {"line_number": 29, "line_content": "                NOTE! You can disable this message by setting `show_preview_warning` to False. "}, {"line_number": 30, "line_content": "                "}, {"line_number": 31, "line_content": "                e.g. "}, {"line_number": 32, "line_content": "                `@Gooey(show_preview_warning=False)`"}, {"line_number": 33, "line_content": "                \"\"\""}, {"line_number": 34, "line_content": "            ).ShowModal()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L125", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getActiveConfig(self):"}, {"line_number": 2, "line_content": "    return [item for child in self.configRef.instance.Children for item in "}, {"line_number": 3, "line_content": "        [child] + list(child.Children) if isinstance(item, ConfigPage) or"}, {"line_number": 4, "line_content": "        isinstance(item, TabbedConfigPage)][self.state['activeSelection']]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L134", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def getActiveFormState(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        This boiler-plate and manual interrogation of the UIs"}, {"line_number": 4, "line_content": "        state is required until we finish porting the Config Form"}, {"line_number": 5, "line_content": "        over to rewx (which is a battle left for another day given"}, {"line_number": 6, "line_content": "        its complexity)"}, {"line_number": 7, "line_content": "        \"\"\""}, {"line_number": 8, "line_content": "    return self.getActiveConfig().getFormState()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L144", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def fullState(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Re: final porting is a to do. For now we merge the UI"}, {"line_number": 4, "line_content": "        state into the main tracked state."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    formState = self.getActiveFormState()"}, {"line_number": 7, "line_content": "    return s.combine(self.state, self.props, formState)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L153", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def onStart(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Dispatches the start behavior."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    if Events.VALIDATE_FORM in self.state['use_events']:"}, {"line_number": 6, "line_content": "        self.runAsyncValidation()"}, {"line_number": 7, "line_content": "    else:"}, {"line_number": 8, "line_content": "        self.startRun()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L163", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def startRun(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Kicks off a run by invoking the host's code"}, {"line_number": 4, "line_content": "        and pumping its stdout to Gooey's Console window."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    state = self.fullState()"}, {"line_number": 7, "line_content": "    if state['clear_before_run']:"}, {"line_number": 8, "line_content": "        self.consoleRef.instance.Clear()"}, {"line_number": 9, "line_content": "    self.set_state(s.consoleScreen(_, state))"}, {"line_number": 10, "line_content": "    self.clientRunner.run(s.buildInvocationCmd(state))"}, {"line_number": 11, "line_content": "    self.timer.start()"}, {"line_number": 12, "line_content": "    self.frameRef.instance.Layout()"}, {"line_number": 13, "line_content": "    for child in self.frameRef.instance.Children:"}, {"line_number": 14, "line_content": "        child.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L179", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def syncExternalState(self, state: FullGooeyState):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Sync the UI's state to what the host program has requested."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    self.getActiveConfig().syncFormState(s.activeFormState(state))"}, {"line_number": 6, "line_content": "    self.frameRef.instance.Layout()"}, {"line_number": 7, "line_content": "    for child in self.frameRef.instance.Children:"}, {"line_number": 8, "line_content": "        child.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L189", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def handleInterrupt(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    if self.shouldStopExecution():"}, {"line_number": 3, "line_content": "        self.clientRunner.stop()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L193", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def handleComplete(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    self.timer.stop()"}, {"line_number": 3, "line_content": "    if self.clientRunner.was_success():"}, {"line_number": 4, "line_content": "        self.handleSuccessfulRun()"}, {"line_number": 5, "line_content": "        if Events.ON_SUCCESS in self.state['use_events']:"}, {"line_number": 6, "line_content": "            self.runAsyncExternalOnCompleteHandler(was_success=True)"}, {"line_number": 7, "line_content": "    else:"}, {"line_number": 8, "line_content": "        self.handleErrantRun()"}, {"line_number": 9, "line_content": "        if Events.ON_ERROR in self.state['use_events']:"}, {"line_number": 10, "line_content": "            self.runAsyncExternalOnCompleteHandler(was_success=False)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L204", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def handleSuccessfulRun(self):"}, {"line_number": 2, "line_content": "    if self.state['return_to_config']:"}, {"line_number": 3, "line_content": "        self.set_state(s.editScreen(_, self.state))"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        self.set_state(s.successScreen(_, self.state))"}, {"line_number": 6, "line_content": "        if self.state['show_success_modal']:"}, {"line_number": 7, "line_content": "            wx.CallAfter(modals.showSuccess)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L213", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def handleErrantRun(self):"}, {"line_number": 2, "line_content": "    if self.clientRunner.wasForcefullyStopped:"}, {"line_number": 3, "line_content": "        self.set_state(s.interruptedScreen(_, self.state))"}, {"line_number": 4, "line_content": "    else:"}, {"line_number": 5, "line_content": "        self.set_state(s.errorScreen(_, self.state))"}, {"line_number": 6, "line_content": "        if self.state['show_failure_modal']:"}, {"line_number": 7, "line_content": "            wx.CallAfter(modals.showFailure)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L222", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def successScreen(self):"}, {"line_number": 2, "line_content": "    strings = {'title': _('finished_title'), 'subtitle': _('finished_msg')}"}, {"line_number": 3, "line_content": "    self.set_state(s.success(self.state, strings, self.buildSpec))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L227", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def handleEdit(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    self.set_state(s.editScreen(_, self.state))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L230", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def handleCancel(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    if modals.confirmExit():"}, {"line_number": 3, "line_content": "        self.handleClose()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L234", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def handleClose(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\"Stop any actively running client program, cleanup the top"}, {"line_number": 3, "line_content": "        level WxFrame and shutdown the current process\"\"\""}, {"line_number": 4, "line_content": "    frame: wx.Frame = self.frameRef.instance"}, {"line_number": 5, "line_content": "    if self.clientRunner.running():"}, {"line_number": 6, "line_content": "        if self.shouldStopExecution():"}, {"line_number": 7, "line_content": "            self.clientRunner.stop()"}, {"line_number": 8, "line_content": "            frame.Destroy()"}, {"line_number": 9, "line_content": "            sys.exit()"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        frame.Destroy()"}, {"line_number": 12, "line_content": "        sys.exit()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L253", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def shouldStopExecution(self):"}, {"line_number": 2, "line_content": "    return not self.state['show_stop_warning'] or modals.confirmForceStop()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/application/application.py#L256", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def updateProgressBar(self, *args, progress=None):"}, {"line_number": 2, "line_content": "    self.set_state(s.updateProgress(self.state, ProgressEvent(progress="}, {"line_number": 3, "line_content": "        progress)))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/lang/i18n.py#L18", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def load(language_dir, filename, encoding):"}, {"line_number": 2, "line_content": "    \"\"\" Open and return the supplied json file \"\"\""}, {"line_number": 3, "line_content": "    global _DICTIONARY"}, {"line_number": 4, "line_content": "    try:"}, {"line_number": 5, "line_content": "        json_file = filename + '.json'"}, {"line_number": 6, "line_content": "        with io.open(os.path.join(language_dir, json_file), 'r', encoding="}, {"line_number": 7, "line_content": "            encoding) as f:"}, {"line_number": 8, "line_content": "            _DICTIONARY = json.load(f)"}, {"line_number": 9, "line_content": "    except IOError:"}, {"line_number": 10, "line_content": "        raise IOError("}, {"line_number": 11, "line_content": "            '{0} Language file not found at location {1}. Make sure that your translation file is in the listed language directory'"}, {"line_number": 12, "line_content": "            .format(filename.title(), language_dir))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/lang/i18n.py#L30", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def translate(key):"}, {"line_number": 2, "line_content": "    return _DICTIONARY.get(key, '(Translate me!) {}'.format(key))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/lang/i18n.py#L33", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def _(key):"}, {"line_number": 2, "line_content": "    return translate(key)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/dialogs.py#L7", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def _html_window(html):"}, {"line_number": 2, "line_content": "    return wsx([c.Block, {'orient': wx.VERTICAL, 'flag': wx.EXPAND}, [c."}, {"line_number": 3, "line_content": "        HtmlWindow, {'style': wx.TE_READONLY, 'flag': wx.EXPAND | wx.ALL,"}, {"line_number": 4, "line_content": "        'proportion': 1, 'value': html}]])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/dialogs.py#L20", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def __init__(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    caption = kwargs.pop('caption', '')"}, {"line_number": 3, "line_content": "    html = kwargs.pop('html', '')"}, {"line_number": 4, "line_content": "    super(HtmlDialog, self).__init__(None, *args, **kwargs)"}, {"line_number": 5, "line_content": "    wx.InitAllImageHandlers()"}, {"line_number": 6, "line_content": "    self.SetTitle(caption)"}, {"line_number": 7, "line_content": "    sizer = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 8, "line_content": "    sizer.Add(render(_html_window(html), self), 1, wx.EXPAND)"}, {"line_number": 9, "line_content": "    btnSizer = self.CreateStdDialogButtonSizer(wx.OK)"}, {"line_number": 10, "line_content": "    sizer.Add(btnSizer, 0, wx.ALL | wx.EXPAND, 9)"}, {"line_number": 11, "line_content": "    self.SetSizer(sizer)"}, {"line_number": 12, "line_content": "    self.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L24", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, buildSpec, **kwargs):"}, {"line_number": 2, "line_content": "    wx.Panel.__init__(self, parent, **kwargs)"}, {"line_number": 3, "line_content": "    self.SetDoubleBuffered(True)"}, {"line_number": 4, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 5, "line_content": "    self._header = None"}, {"line_number": 6, "line_content": "    self._subheader = None"}, {"line_number": 7, "line_content": "    self.settings_img = None"}, {"line_number": 8, "line_content": "    self.running_img = None"}, {"line_number": 9, "line_content": "    self.check_mark = None"}, {"line_number": 10, "line_content": "    self.error_symbol = None"}, {"line_number": 11, "line_content": "    self.images = []"}, {"line_number": 12, "line_content": "    self.layoutComponent()"}, {"line_number": 13, "line_content": "    self.bindMouseEvents()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L44", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setTitle(self, title):"}, {"line_number": 2, "line_content": "    self._header.SetLabel(title)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L47", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setSubtitle(self, subtitle):"}, {"line_number": 2, "line_content": "    self._subheader.SetLabel(subtitle)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L50", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def setImage(self, image):"}, {"line_number": 2, "line_content": "    for img in self.images:"}, {"line_number": 3, "line_content": "        img.Show(False)"}, {"line_number": 4, "line_content": "    getattr(self, image).Show(True)"}, {"line_number": 5, "line_content": "    self.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L57", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "def layoutComponent(self):"}, {"line_number": 2, "line_content": "    self.SetBackgroundColour(self.buildSpec['header_bg_color'])"}, {"line_number": 3, "line_content": "    self.SetSize((30, self.buildSpec['header_height']))"}, {"line_number": 4, "line_content": "    self.SetMinSize((120, self.buildSpec['header_height']))"}, {"line_number": 5, "line_content": "    self._header = wx_util.h1(self, label=self.buildSpec['program_name'])"}, {"line_number": 6, "line_content": "    self._subheader = wx.StaticText(self, label=self.buildSpec["}, {"line_number": 7, "line_content": "        'program_description'])"}, {"line_number": 8, "line_content": "    images = self.buildSpec['images']"}, {"line_number": 9, "line_content": "    targetHeight = self.buildSpec['header_height'] - 10"}, {"line_number": 10, "line_content": "    self.settings_img = self._load_image(images['configIcon'], targetHeight)"}, {"line_number": 11, "line_content": "    self.running_img = self._load_image(images['runningIcon'], targetHeight)"}, {"line_number": 12, "line_content": "    self.check_mark = self._load_image(images['successIcon'], targetHeight)"}, {"line_number": 13, "line_content": "    self.error_symbol = self._load_image(images['errorIcon'], targetHeight)"}, {"line_number": 14, "line_content": "    self.images = [self.settings_img, self.running_img, self.check_mark,"}, {"line_number": 15, "line_content": "        self.error_symbol]"}, {"line_number": 16, "line_content": "    vsizer = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 17, "line_content": "    sizer = wx.BoxSizer(wx.HORIZONTAL)"}, {"line_number": 18, "line_content": "    headings_sizer = self.build_heading_sizer()"}, {"line_number": 19, "line_content": "    sizer.Add(headings_sizer, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.LEFT, PAD_SIZE)"}, {"line_number": 20, "line_content": "    sizer.Add(self.settings_img, 0, wx.EXPAND | wx.RIGHT, PAD_SIZE)"}, {"line_number": 21, "line_content": "    sizer.Add(self.running_img, 0, wx.EXPAND | wx.RIGHT, PAD_SIZE)"}, {"line_number": 22, "line_content": "    sizer.Add(self.check_mark, 0, wx.EXPAND | wx.RIGHT, PAD_SIZE)"}, {"line_number": 23, "line_content": "    sizer.Add(self.error_symbol, 0, wx.EXPAND | wx.RIGHT, PAD_SIZE)"}, {"line_number": 24, "line_content": "    self.running_img.Hide()"}, {"line_number": 25, "line_content": "    self.check_mark.Hide()"}, {"line_number": 26, "line_content": "    self.error_symbol.Hide()"}, {"line_number": 27, "line_content": "    vsizer.Add(sizer, 1, wx.EXPAND)"}, {"line_number": 28, "line_content": "    self.SetSizer(vsizer)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L96", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def _load_image(self, imgPath, targetHeight):"}, {"line_number": 2, "line_content": "    rawImage = imageutil.loadImage(imgPath)"}, {"line_number": 3, "line_content": "    sizedImage = imageutil.resizeImage(rawImage, targetHeight)"}, {"line_number": 4, "line_content": "    return imageutil.wrapBitmap(sizedImage, self)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L102", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "def build_heading_sizer(self):"}, {"line_number": 2, "line_content": "    sizer = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 3, "line_content": "    sizer.AddStretchSpacer(1)"}, {"line_number": 4, "line_content": "    if self.buildSpec['header_show_title']:"}, {"line_number": 5, "line_content": "        sizer.Add(self._header, 0)"}, {"line_number": 6, "line_content": "    else:"}, {"line_number": 7, "line_content": "        self._header.Hide()"}, {"line_number": 8, "line_content": "    if self.buildSpec['header_show_subtitle']:"}, {"line_number": 9, "line_content": "        sizer.Add(self._subheader, 0)"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        self._subheader.Hide()"}, {"line_number": 12, "line_content": "    sizer.AddStretchSpacer(1)"}, {"line_number": 13, "line_content": "    return sizer"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/header.py#L117", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def bindMouseEvents(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Manually binding all LEFT_DOWN events."}, {"line_number": 4, "line_content": "        See: gooey.gui.mouse for background."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    self.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 7, "line_content": "    self._header.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 8, "line_content": "    self._subheader.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 9, "line_content": "    for image in self.images:"}, {"line_number": 10, "line_content": "        image.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L11", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, buildSpec, configPanels, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(Sidebar, self).__init__(parent, *args, **kwargs)"}, {"line_number": 3, "line_content": "    self._parent = parent"}, {"line_number": 4, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 5, "line_content": "    self.configPanels = configPanels"}, {"line_number": 6, "line_content": "    self.activeSelection = 0"}, {"line_number": 7, "line_content": "    self.options = list(self.buildSpec['widgets'].keys())"}, {"line_number": 8, "line_content": "    self.leftPanel = wx.Panel(self)"}, {"line_number": 9, "line_content": "    self.label = wx_util.h1(self.leftPanel, self.buildSpec.get('sidebar_title')"}, {"line_number": 10, "line_content": "        )"}, {"line_number": 11, "line_content": "    self.listbox = wx.ListBox(self.leftPanel, -1, choices=self.options)"}, {"line_number": 12, "line_content": "    self.Bind(wx.EVT_LISTBOX, self.swapConfigPanels, self.listbox)"}, {"line_number": 13, "line_content": "    self.layoutComponent()"}, {"line_number": 14, "line_content": "    self.listbox.SetSelection(0)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L26", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def getSelectedGroup(self):"}, {"line_number": 2, "line_content": "    \"\"\"Return the currently active 'group' i.e. the root SubParser \"\"\""}, {"line_number": 3, "line_content": "    return self.options[self.activeSelection]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L31", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def getActiveConfig(self):"}, {"line_number": 2, "line_content": "    \"\"\"Return the currently visible config screen\"\"\""}, {"line_number": 3, "line_content": "    return self.configPanels[self.activeSelection]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L36", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def swapConfigPanels(self, event):"}, {"line_number": 2, "line_content": "    \"\"\"Hide/show configuration panels based on the currently selected"}, {"line_number": 3, "line_content": "         option in the sidebar \"\"\""}, {"line_number": 4, "line_content": "    for id, panel in enumerate(self.configPanels):"}, {"line_number": 5, "line_content": "        panel.Hide()"}, {"line_number": 6, "line_content": "    self.activeSelection = event.Selection"}, {"line_number": 7, "line_content": "    self.configPanels[event.Selection].Show()"}, {"line_number": 8, "line_content": "    self._parent.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L46", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "def layoutComponent(self):"}, {"line_number": 2, "line_content": "    left = self.layoutLeftSide()"}, {"line_number": 3, "line_content": "    hsizer = wx.BoxSizer(wx.HORIZONTAL)"}, {"line_number": 4, "line_content": "    hsizer.Add(left, 0, wx.EXPAND)"}, {"line_number": 5, "line_content": "    if not self.buildSpec['tabbed_groups']:"}, {"line_number": 6, "line_content": "        hsizer.Add(wx_util.vertical_rule(self), 0, wx.EXPAND)"}, {"line_number": 7, "line_content": "    for body in self.configPanels:"}, {"line_number": 8, "line_content": "        body.Reparent(self)"}, {"line_number": 9, "line_content": "        hsizer.Add(body, 1, wx.EXPAND)"}, {"line_number": 10, "line_content": "        body.Hide()"}, {"line_number": 11, "line_content": "    self.configPanels[0].Show()"}, {"line_number": 12, "line_content": "    self.SetSizer(hsizer)"}, {"line_number": 13, "line_content": "    if not self.buildSpec['show_sidebar']:"}, {"line_number": 14, "line_content": "        left.Show(False)"}, {"line_number": 15, "line_content": "    self.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/sidebar.py#L70", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def layoutLeftSide(self):"}, {"line_number": 2, "line_content": "    self.leftPanel.SetBackgroundColour(self.buildSpec['sidebar_bg_color'])"}, {"line_number": 3, "line_content": "    self.leftPanel.SetSize((180, 0))"}, {"line_number": 4, "line_content": "    self.leftPanel.SetMinSize((180, 0))"}, {"line_number": 5, "line_content": "    container = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 6, "line_content": "    container.AddSpacer(15)"}, {"line_number": 7, "line_content": "    container.Add(self.label, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)"}, {"line_number": 8, "line_content": "    container.AddSpacer(5)"}, {"line_number": 9, "line_content": "    container.Add(self.listbox, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)"}, {"line_number": 10, "line_content": "    container.AddSpacer(20)"}, {"line_number": 11, "line_content": "    self.leftPanel.SetSizer(container)"}, {"line_number": 12, "line_content": "    return self.leftPanel"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L16", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def __init__(self, buildSpec, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(MenuBar, self).__init__(*args, **kwargs)"}, {"line_number": 3, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 4, "line_content": "    self.makeMenuItems(buildSpec.get('menu', []))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L22", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def makeMenuItems(self, menuGroups):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Assign the menu groups list to wx.Menu instances"}, {"line_number": 4, "line_content": "        and bind the appropriate handlers."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    for menuGroup in menuGroups:"}, {"line_number": 7, "line_content": "        menu = wx.Menu()"}, {"line_number": 8, "line_content": "        for item in menuGroup.get('items'):"}, {"line_number": 9, "line_content": "            option = menu.Append(wx.NewId(), item.get('menuTitle', ''))"}, {"line_number": 10, "line_content": "            self.Bind(wx.EVT_MENU, self.handleMenuAction(item), option)"}, {"line_number": 11, "line_content": "        self.Append(menu, '&' + menuGroup.get('name'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L35", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def handleMenuAction(self, item):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Dispatch based on the value of the type field."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    handlers = {'Link': self.openBrowser, 'AboutDialog': self."}, {"line_number": 6, "line_content": "        spawnAboutDialog, 'MessageDialog': self.spawnMessageDialog,"}, {"line_number": 7, "line_content": "        'HtmlDialog': self.spawnHtmlDialog}"}, {"line_number": 8, "line_content": "    f = handlers[item['type']]"}, {"line_number": 9, "line_content": "    return partial(f, item)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L49", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def openBrowser(self, item, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Open the supplied URL in the user's default browser."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    webbrowser.open(item.get('url'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L56", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def spawnMessageDialog(self, item, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Show a simple message dialog with the user's message and caption."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    wx.MessageDialog(self, item.get('message', ''), caption=item.get("}, {"line_number": 6, "line_content": "        'caption', '')).ShowModal()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L64", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def spawnHtmlDialog(self, item, *args, **kwargs):"}, {"line_number": 2, "line_content": "    HtmlDialog(caption=item.get('caption', ''), html=item.get('html')"}, {"line_number": 3, "line_content": "        ).ShowModal()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/menubar.py#L68", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "def spawnAboutDialog(self, item, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Fill the wx.AboutBox with any relevant info the user provided"}, {"line_number": 4, "line_content": "        and launch the dialog"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    aboutOptions = {'name': 'SetName', 'version': 'SetVersion',"}, {"line_number": 7, "line_content": "        'description': 'SetDescription', 'copyright': 'SetCopyright',"}, {"line_number": 8, "line_content": "        'website': 'SetWebSite', 'developer': 'AddDeveloper', 'license':"}, {"line_number": 9, "line_content": "        'SetLicense'}"}, {"line_number": 10, "line_content": "    about = three_to_four.AboutDialog()"}, {"line_number": 11, "line_content": "    for field, method in aboutOptions.items():"}, {"line_number": 12, "line_content": "        if field in item:"}, {"line_number": 13, "line_content": "            getattr(about, method)(item[field])"}, {"line_number": 14, "line_content": "    three_to_four.AboutBox(about)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/footer.py#L16", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, buildSpec, **kwargs):"}, {"line_number": 2, "line_content": "    wx.Panel.__init__(self, parent, **kwargs)"}, {"line_number": 3, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 4, "line_content": "    self.SetMinSize((30, 53))"}, {"line_number": 5, "line_content": "    self.SetDoubleBuffered(False)"}, {"line_number": 6, "line_content": "    self.cancel_button = None"}, {"line_number": 7, "line_content": "    self.start_button = None"}, {"line_number": 8, "line_content": "    self.progress_bar = None"}, {"line_number": 9, "line_content": "    self.close_button = None"}, {"line_number": 10, "line_content": "    self.stop_button = None"}, {"line_number": 11, "line_content": "    self.restart_button = None"}, {"line_number": 12, "line_content": "    self.edit_button = None"}, {"line_number": 13, "line_content": "    self.buttons = []"}, {"line_number": 14, "line_content": "    self.layouts = {}"}, {"line_number": 15, "line_content": "    self._init_components()"}, {"line_number": 16, "line_content": "    self._do_layout()"}, {"line_number": 17, "line_content": "    for button in self.buttons:"}, {"line_number": 18, "line_content": "        self.Bind(wx.EVT_BUTTON, self.dispatch_click, button)"}, {"line_number": 19, "line_content": "        self.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent, button)"}, {"line_number": 20, "line_content": "    self.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/mouse.py#L22", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def notifyMouseEvent(event):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Notify interested listeners of the LEFT_DOWN mouse event"}, {"line_number": 4, "line_content": "    \"\"\""}, {"line_number": 5, "line_content": "    event.Skip()"}, {"line_number": 6, "line_content": "    pub.send_message_sync(events.LEFT_DOWN, wxEvent=event)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L15", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, buildSpec, **kwargs):"}, {"line_number": 2, "line_content": "    wx.Panel.__init__(self, parent, name='console', **kwargs)"}, {"line_number": 3, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 4, "line_content": "    self.text = wx.StaticText(self, label=_('status'))"}, {"line_number": 5, "line_content": "    if buildSpec['richtext_controls']:"}, {"line_number": 6, "line_content": "        from .widgets.richtextconsole import RichTextConsole"}, {"line_number": 7, "line_content": "        self.textbox = RichTextConsole(self)"}, {"line_number": 8, "line_content": "    else:"}, {"line_number": 9, "line_content": "        self.textbox = BasicTextConsole(self)"}, {"line_number": 10, "line_content": "    self.defaultFont = self.textbox.GetFont()"}, {"line_number": 11, "line_content": "    self.textbox.SetFont(wx.Font(self.buildSpec['terminal_font_size'] or"}, {"line_number": 12, "line_content": "        self.defaultFont.GetPointSize(), self.getFontStyle(), wx.NORMAL, "}, {"line_number": 13, "line_content": "        self.buildSpec['terminal_font_weight'] or wx.NORMAL, False, self."}, {"line_number": 14, "line_content": "        getFontFace()))"}, {"line_number": 15, "line_content": "    self.textbox.SetForegroundColour(self.buildSpec['terminal_font_color'])"}, {"line_number": 16, "line_content": "    self.layoutComponent()"}, {"line_number": 17, "line_content": "    self.Layout()"}, {"line_number": 18, "line_content": "    self.Bind(wx.EVT_TEXT_URL, self.evtUrl, self.textbox)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L42", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def evtUrl(self, event):"}, {"line_number": 2, "line_content": "    if event.MouseEvent.LeftUp():"}, {"line_number": 3, "line_content": "        webbrowser.open(event.GetString() or self.textbox.GetRange(event."}, {"line_number": 4, "line_content": "            URLStart, event.URLEnd))"}, {"line_number": 5, "line_content": "    event.Skip()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L52", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def getFontStyle(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Force wx.Modern style to support legacy"}, {"line_number": 4, "line_content": "        monospace_display param when present"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    return wx.MODERN if self.buildSpec['monospace_display'] else wx.DEFAULT"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L62", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def getFontFace(self):"}, {"line_number": 2, "line_content": "    \"\"\"Choose the best font face available given the user options\"\"\""}, {"line_number": 3, "line_content": "    userFace = self.buildSpec['terminal_font_family'"}, {"line_number": 4, "line_content": "        ] or self.defaultFont.GetFaceName()"}, {"line_number": 5, "line_content": "    return '' if self.buildSpec['monospace_display'] else userFace"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L70", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def logOutput(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    \"\"\"Event Handler for console updates coming from the client's program\"\"\""}, {"line_number": 3, "line_content": "    self.appendText(kwargs.get('msg'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L75", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def appendText(self, txt):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Append the text to the main TextCtrl."}, {"line_number": 4, "line_content": "        Note! Must be called from a Wx specific thread handler to avoid"}, {"line_number": 5, "line_content": "        multi-threaded explosions (e.g. wx.CallAfter)"}, {"line_number": 6, "line_content": "        \"\"\""}, {"line_number": 7, "line_content": "    self.textbox.AppendText(txt)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L84", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def clear(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "            Clear the the main TextCtrl."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    self.textbox.Clear()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L91", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getText(self):"}, {"line_number": 2, "line_content": "    return self.textbox.GetValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/console.py#L94", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def layoutComponent(self):"}, {"line_number": 2, "line_content": "    self.SetBackgroundColour(self.buildSpec.get('terminal_panel_color',"}, {"line_number": 3, "line_content": "        '#F0F0F0'))"}, {"line_number": 4, "line_content": "    sizer = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 5, "line_content": "    sizer.AddSpacer(10)"}, {"line_number": 6, "line_content": "    sizer.Add(self.text, 0, wx.LEFT, 20)"}, {"line_number": 7, "line_content": "    sizer.AddSpacer(10)"}, {"line_number": 8, "line_content": "    sizer.Add(self.textbox, 1, wx.LEFT | wx.RIGHT | wx.BOTTOM | wx.EXPAND, 20)"}, {"line_number": 9, "line_content": "    sizer.AddSpacer(20)"}, {"line_number": 10, "line_content": "    self.SetSizer(sizer)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/tabbar.py#L9", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, buildSpec, configPanels, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(Tabbar, self).__init__(parent, *args, **kwargs)"}, {"line_number": 3, "line_content": "    self._parent = parent"}, {"line_number": 4, "line_content": "    self.notebook = wx.Notebook(self, style=wx.BK_DEFAULT)"}, {"line_number": 5, "line_content": "    self.buildSpec = buildSpec"}, {"line_number": 6, "line_content": "    self.configPanels = configPanels"}, {"line_number": 7, "line_content": "    self.options = list(self.buildSpec['widgets'].keys())"}, {"line_number": 8, "line_content": "    self.layoutComponent()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/tabbar.py#L19", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "def layoutComponent(self):"}, {"line_number": 2, "line_content": "    for group, panel in zip(self.options, self.configPanels):"}, {"line_number": 3, "line_content": "        panel.Reparent(self.notebook)"}, {"line_number": 4, "line_content": "        self.notebook.AddPage(panel, group)"}, {"line_number": 5, "line_content": "        self.notebook.Layout()"}, {"line_number": 6, "line_content": "    sizer = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 7, "line_content": "    sizer.Add(self.notebook, 1, wx.EXPAND)"}, {"line_number": 8, "line_content": "    self.SetSizer(sizer)"}, {"line_number": 9, "line_content": "    self.Layout()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/tabbar.py#L30", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getSelectedGroup(self):"}, {"line_number": 2, "line_content": "    return self.options[self.notebook.Selection]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/tabbar.py#L33", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getActiveConfig(self):"}, {"line_number": 2, "line_content": "    return self.configPanels[self.notebook.Selection]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/tabbar.py#L36", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def show(self, b):"}, {"line_number": 2, "line_content": "    self.Show(b)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L15", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def showDialog(title, content, style):"}, {"line_number": 2, "line_content": "    dlg = wx.MessageDialog(None, content, title, style)"}, {"line_number": 3, "line_content": "    dlg.SetYesNoLabels(_('dialog_button_yes'), _('dialog_button_no'))"}, {"line_number": 4, "line_content": "    dlg.SetOKLabel(_('dialog_button_ok'))"}, {"line_number": 5, "line_content": "    result = dlg.ShowModal()"}, {"line_number": 6, "line_content": "    dlg.Destroy()"}, {"line_number": 7, "line_content": "    return result"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L24", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def missingArgsDialog():"}, {"line_number": 2, "line_content": "    showDialog(_('error_title'), _('error_required_fields'), wx.ICON_ERROR)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L28", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def validationFailure():"}, {"line_number": 2, "line_content": "    showDialog(_('error_title'), _('validation_failed'), wx.ICON_WARNING)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L32", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def showSuccess():"}, {"line_number": 2, "line_content": "    showDialog(_('execution_finished'), _('success_message'), wx."}, {"line_number": 3, "line_content": "        ICON_INFORMATION)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L36", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def showFailure():"}, {"line_number": 2, "line_content": "    showDialog(_('execution_finished'), _('uh_oh'), wx.ICON_ERROR)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def confirmExit():"}, {"line_number": 2, "line_content": "    result = showDialog(_('sure_you_want_to_exit'), _('close_program'), wx."}, {"line_number": 3, "line_content": "        YES_NO | wx.ICON_INFORMATION)"}, {"line_number": 4, "line_content": "    return result == DialogConstants.YES"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/modals.py#L45", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def confirmForceStop():"}, {"line_number": 2, "line_content": "    result = showDialog(_('stop_task'), _('sure_you_want_to_stop'), wx."}, {"line_number": 3, "line_content": "        YES_NO | wx.ICON_WARNING)"}, {"line_number": 4, "line_content": "    return result == DialogConstants.YES"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/filtering/prefix_filter.py#L111", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def intersection(a, b):"}, {"line_number": 2, "line_content": "    return a.intersection(b)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/filtering/prefix_filter.py#L115", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def union(a, b):"}, {"line_number": 2, "line_content": "    return a.union(b)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/filtering/prefix_filter.py#L119", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def flatten(xs):"}, {"line_number": 2, "line_content": "    return [item for x in xs for item in x]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/filtering/prefix_filter.py#L17", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "@classmethod"}, {"line_number": 2, "line_content": "def REGEX(cls, expression):"}, {"line_number": 3, "line_content": "    return expression"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/util/wrapped_static_text.py#L31", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, *args, **kwargs):"}, {"line_number": 2, "line_content": "    self.target = kwargs.pop('target', None)"}, {"line_number": 3, "line_content": "    super(AutoWrappedStaticText, self).__init__(parent, *args, **kwargs)"}, {"line_number": 4, "line_content": "    self.label = kwargs.get('label')"}, {"line_number": 5, "line_content": "    self.Bind(wx.EVT_SIZE, self.OnSize)"}, {"line_number": 6, "line_content": "    self.parent = parent"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/util/wrapped_static_text.py#L39", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def OnSize(self, event):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Handles the ``wx.EVT_SIZE`` event for :class:`AutoWrapStaticText`."}, {"line_number": 4, "line_content": "        :param `event`: a :class:`wx.SizeEvent` event to be processed."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    event.Skip()"}, {"line_number": 7, "line_content": "    if self.target:"}, {"line_number": 8, "line_content": "        self.Wrap(self.target.GetSize().width)"}, {"line_number": 9, "line_content": "    else:"}, {"line_number": 10, "line_content": "        self.Wrap(self.parent.GetSize()[0])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/util/wrapped_static_text.py#L52", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "def Wrap(self, width):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        This functions wraps the controls label so that each of its lines becomes at"}, {"line_number": 4, "line_content": "        most `width` pixels wide if possible (the lines are broken at words boundaries"}, {"line_number": 5, "line_content": "        so it might not be the case if words are too long)."}, {"line_number": 6, "line_content": "        If `width` is negative, no wrapping is done."}, {"line_number": 7, "line_content": "        :param integer `width`: the maximum available width for the text, in pixels."}, {"line_number": 8, "line_content": "        :note: Note that this `width` is not necessarily the total width of the control,"}, {"line_number": 9, "line_content": "         since a few pixels for the border (depending on the controls border style) may be added."}, {"line_number": 10, "line_content": "        \"\"\""}, {"line_number": 11, "line_content": "    if width < 0:"}, {"line_number": 12, "line_content": "        return"}, {"line_number": 13, "line_content": "    self.Freeze()"}, {"line_number": 14, "line_content": "    dc = wx.ClientDC(self)"}, {"line_number": 15, "line_content": "    dc.SetFont(self.GetFont())"}, {"line_number": 16, "line_content": "    text = wordwrap(self.label, width, dc)"}, {"line_number": 17, "line_content": "    self.SetLabel(text, wrapped=True)"}, {"line_number": 18, "line_content": "    self.Thaw()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/util/wrapped_static_text.py#L78", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "def SetLabel(self, label, wrapped=False):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Sets the :class:`AutoWrapStaticText` label."}, {"line_number": 4, "line_content": "        All \"&\" characters in the label are special and indicate that the following character is"}, {"line_number": 5, "line_content": "        a mnemonic for this control and can be used to activate it from the keyboard (typically"}, {"line_number": 6, "line_content": "        by using ``Alt`` key in combination with it). To insert a literal ampersand character, you"}, {"line_number": 7, "line_content": "        need to double it, i.e. use \"&&\". If this behaviour is undesirable, use :meth:`~Control.SetLabelText` instead."}, {"line_number": 8, "line_content": "        :param string `label`: the new :class:`AutoWrapStaticText` text label;"}, {"line_number": 9, "line_content": "        :param bool `wrapped`: ``True`` if this method was called by the developer using :meth:`~AutoWrapStaticText.SetLabel`,"}, {"line_number": 10, "line_content": "         ``False`` if it comes from the :meth:`~AutoWrapStaticText.OnSize` event handler."}, {"line_number": 11, "line_content": "        :note: Reimplemented from :class:`wx.Control`."}, {"line_number": 12, "line_content": "        \"\"\""}, {"line_number": 13, "line_content": "    if not wrapped:"}, {"line_number": 14, "line_content": "        self.label = label"}, {"line_number": 15, "line_content": "    wx.StaticText.SetLabel(self, label)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L25", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "def lift(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Lifts a basic predicate to the SuperBool type"}, {"line_number": 4, "line_content": "    stealing the docstring as the rationale message."}, {"line_number": 5, "line_content": "    This is largely just goofing around and experimenting"}, {"line_number": 6, "line_content": "    since it's a private internal API."}, {"line_number": 7, "line_content": "    \"\"\""}, {"line_number": 8, "line_content": "    @wraps(f)"}, {"line_number": 9, "line_content": "    def inner(value):"}, {"line_number": 10, "line_content": "        result = f(value)"}, {"line_number": 11, "line_content": "        return SuperBool(result, f.__doc__) if not isinstance(result, SuperBool"}, {"line_number": 12, "line_content": "            ) else result"}, {"line_number": 13, "line_content": "    return inner"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_tuple_or_list(value):"}, {"line_number": 3, "line_content": "    \"\"\"Must be either a list or tuple\"\"\""}, {"line_number": 4, "line_content": "    return isinstance(value, list) or isinstance(value, tuple)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_str(value):"}, {"line_number": 3, "line_content": "    \"\"\"Must be of type `str`\"\"\""}, {"line_number": 4, "line_content": "    return isinstance(value, str)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_str_or_coll(value):"}, {"line_number": 3, "line_content": "    \"\"\""}, {"line_number": 4, "line_content": "    Colors must be either a hex string or collection of RGB values."}, {"line_number": 5, "line_content": "    e.g."}, {"line_number": 6, "line_content": "        Hex string: #fff0ce"}, {"line_number": 7, "line_content": "        RGB Collection: [0, 255, 128] or (0, 255, 128)"}, {"line_number": 8, "line_content": "    \"\"\""}, {"line_number": 9, "line_content": "    return bool(is_str(value)) or bool(is_tuple_or_list(value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def has_valid_channel_values(rgb_coll):"}, {"line_number": 3, "line_content": "    \"\"\"Colors in an RGB collection must all be in the range 0-255\"\"\""}, {"line_number": 4, "line_content": "    return all([(is_0to255(c) and is_int(c)) for c in rgb_coll])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_three_channeled(value):"}, {"line_number": 3, "line_content": "    \"\"\"Missing channels! Colors in an RGB collection should be of the form [R,G,B] or (R,G,B)\"\"\""}, {"line_number": 4, "line_content": "    return len(value) == 3"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_hex_string(value: str):"}, {"line_number": 3, "line_content": "    \"\"\"Invalid hexadecimal format. Expected: \"#FFFFFF\" \"\"\""}, {"line_number": 4, "line_content": "    return isinstance(value, str) and bool(re.match('^#[\\\\dABCDEF]{6}$',"}, {"line_number": 5, "line_content": "        value, flags=2))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_bool(value):"}, {"line_number": 3, "line_content": "    \"\"\"Must be of type Boolean\"\"\""}, {"line_number": 4, "line_content": "    return isinstance(value, bool)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def non_empty_string(value):"}, {"line_number": 3, "line_content": "    \"\"\"Must be a non-empty non-blank string\"\"\""}, {"line_number": 4, "line_content": "    return bool(value) and bool(value.strip())"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_tokenization_operator(value):"}, {"line_number": 3, "line_content": "    \"\"\"Operator must be a valid OperatorType i.e. one of: (AND, OR)\"\"\""}, {"line_number": 4, "line_content": "    return bool(value) in (OperatorType.AND, OperatorType.OR)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_tokenizer(value):"}, {"line_number": 3, "line_content": "    \"\"\"Tokenizers must be valid Regular expressions. see: options.PrefixTokenizers\"\"\""}, {"line_number": 4, "line_content": "    return bool(non_empty_string(value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_int(value):"}, {"line_number": 3, "line_content": "    \"\"\"Invalid type. Expected `int`\"\"\""}, {"line_number": 4, "line_content": "    return isinstance(value, int)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_0to255(value):"}, {"line_number": 3, "line_content": "    \"\"\"RGB values must be in the range 0 - 255 (inclusive)\"\"\""}, {"line_number": 4, "line_content": "    return 0 <= value <= 255"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L111", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def is_0to20(value):"}, {"line_number": 2, "line_content": "    \"\"\"Precision values must be in the range 0 - 20 (inclusive)\"\"\""}, {"line_number": 3, "line_content": "    return 0 <= value <= 20"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L40", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "@lift"}, {"line_number": 2, "line_content": "def is_valid_color(value):"}, {"line_number": 3, "line_content": "    \"\"\"Must be either a valid hex string or RGB list\"\"\""}, {"line_number": 4, "line_content": "    if is_str(value):"}, {"line_number": 5, "line_content": "        return is_hex_string(value)"}, {"line_number": 6, "line_content": "    elif is_tuple_or_list(value):"}, {"line_number": 7, "line_content": "        return is_tuple_or_list(value) and is_three_channeled(value"}, {"line_number": 8, "line_content": "            ) and has_valid_channel_values(value)"}, {"line_number": 9, "line_content": "    else:"}, {"line_number": 10, "line_content": "        return is_str_or_coll(value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L162", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def collect_errors(predicates, m):"}, {"line_number": 2, "line_content": "    return {k: predicates[k](v).rationale for k, v in m.items() if k in"}, {"line_number": 3, "line_content": "        predicates and not predicates[k](v)}"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L169", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def validate(pred, value):"}, {"line_number": 2, "line_content": "    result = pred(value)"}, {"line_number": 3, "line_content": "    if not result:"}, {"line_number": 4, "line_content": "        raise ValueError(result.rationale)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L12", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def __init__(self, value, rationale):"}, {"line_number": 2, "line_content": "    self.value = value"}, {"line_number": 3, "line_content": "    self.rationale = rationale"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L16", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __bool__(self):"}, {"line_number": 2, "line_content": "    return self.value"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L21", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __str__(self):"}, {"line_number": 2, "line_content": "    return str(self.value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/validators.py#L33", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "@wraps(f)"}, {"line_number": 2, "line_content": "def inner(value):"}, {"line_number": 3, "line_content": "    result = f(value)"}, {"line_number": 4, "line_content": "    return SuperBool(result, f.__doc__) if not isinstance(result, SuperBool"}, {"line_number": 5, "line_content": "        ) else result"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/options.py#L5", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "def _include_layout_docs(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Combines the layout_options docsstring with the"}, {"line_number": 4, "line_content": "    wrapped function's doc string."}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    f.__doc__ = (f.__doc__ or '') + (LayoutOptions.__doc__ or '')"}, {"line_number": 7, "line_content": "    return f"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/options.py#L14", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "def _include_global_option_docs(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Combines docstrings for options available to"}, {"line_number": 4, "line_content": "    all widget types."}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    _doc = ':param initial_value:  Sets the initial value in the UI. \\n    '"}, {"line_number": 7, "line_content": "    f.__doc__ = (f.__doc__ or '') + _doc"}, {"line_number": 8, "line_content": "    return f"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/options.py#L24", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def _include_chooser_msg_wildcard_docs(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "    Combines the basic Chooser options (wildard, message) docsstring"}, {"line_number": 4, "line_content": "    with the wrapped function's doc string."}, {"line_number": 5, "line_content": "    \"\"\""}, {"line_number": 6, "line_content": "    _doc = \"\"\":param wildcard: Sets the wildcard, which can contain multiple file types, for "}, {"line_number": 7, "line_content": "                     example: \"BMP files (.bmp)|.bmp|GIF files (.gif)|.gif\""}, {"line_number": 8, "line_content": "    :param message:  Sets the message that will be displayed on the dialog."}, {"line_number": 9, "line_content": "    \"\"\""}, {"line_number": 10, "line_content": "    f.__doc__ = (f.__doc__ or '') + _doc"}, {"line_number": 11, "line_content": "    return f"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/options/options.py#L36", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def _include_choose_dir_file_docs(f):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Combines the basic Chooser options (wildard, message) docsstring"}, {"line_number": 4, "line_content": "        with the wrapped function's doc string."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    _doc = \"\"\":param default_dir: The default directory selected when the dialog spawns "}, {"line_number": 7, "line_content": "    :param default_file: The default filename used in the dialog"}, {"line_number": 8, "line_content": "    \"\"\""}, {"line_number": 9, "line_content": "    f.__doc__ = (f.__doc__ or '') + _doc"}, {"line_number": 10, "line_content": "    return f"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/layouts/layouts.py#L4", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def standard_layout(title, subtitle, widget):"}, {"line_number": 2, "line_content": "    container = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 3, "line_content": "    container.Add(title)"}, {"line_number": 4, "line_content": "    container.AddSpacer(2)"}, {"line_number": 5, "line_content": "    if subtitle:"}, {"line_number": 6, "line_content": "        container.Add(subtitle, 1, wx.EXPAND)"}, {"line_number": 7, "line_content": "        container.AddSpacer(2)"}, {"line_number": 8, "line_content": "    else:"}, {"line_number": 9, "line_content": "        container.AddStretchSpacer(1)"}, {"line_number": 10, "line_content": "    container.Add(widget, 0, wx.EXPAND)"}, {"line_number": 11, "line_content": "    return container"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/listbox.py#L10", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getWidget(self, parent, *args, **options):"}, {"line_number": 2, "line_content": "    height = self._options.get('height', 60)"}, {"line_number": 3, "line_content": "    return wx.ListBox(parent=parent, choices=self._meta['choices'], size=(-"}, {"line_number": 4, "line_content": "        1, height), style=wx.LB_MULTIPLE)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/listbox.py#L19", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def setOptions(self, options):"}, {"line_number": 2, "line_content": "    self.widget.Clear()"}, {"line_number": 3, "line_content": "    for option in options:"}, {"line_number": 4, "line_content": "        self.widget.Append(option)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/listbox.py#L24", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def setValue(self, values):"}, {"line_number": 2, "line_content": "    for string in values:"}, {"line_number": 3, "line_content": "        self.widget.SetStringSelection(string)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/listbox.py#L28", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    return [self.widget.GetString(index) for index in self.widget."}, {"line_number": 3, "line_content": "        GetSelections()]"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/listbox.py#L32", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metadata, value):"}, {"line_number": 2, "line_content": "    return formatters.listbox(metadata, value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/password.py#L10", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def __init__(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(PasswordField, self).__init__(*args, **kwargs)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L20", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def arrange(self, label, text):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L23", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidget(self, parent: wx.Window, **options):"}, {"line_number": 2, "line_content": "    return self.widget_class(parent, **options)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L26", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def connectSignal(self):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L29", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getSublayout(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L32", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L35", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setPlaceholder(self, value):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L38", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def receiveChange(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L41", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def dispatchChange(self, value, **kwargs):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L44", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L65", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, widgetInfo, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(TextContainer, self).__init__(parent, *args, **kwargs)"}, {"line_number": 3, "line_content": "    self.info = widgetInfo"}, {"line_number": 4, "line_content": "    self._id = widgetInfo['id']"}, {"line_number": 5, "line_content": "    self.widgetInfo = widgetInfo"}, {"line_number": 6, "line_content": "    self._meta = widgetInfo['data']"}, {"line_number": 7, "line_content": "    self._options = widgetInfo['options']"}, {"line_number": 8, "line_content": "    self.label = wx.StaticText(self, label=widgetInfo['data']['display_name'])"}, {"line_number": 9, "line_content": "    self.help_text = AutoWrappedStaticText(self, label=widgetInfo['data']["}, {"line_number": 10, "line_content": "        'help'] or '')"}, {"line_number": 11, "line_content": "    self.error = AutoWrappedStaticText(self, label='')"}, {"line_number": 12, "line_content": "    self.error.Hide()"}, {"line_number": 13, "line_content": "    self.widget = self.getWidget(self)"}, {"line_number": 14, "line_content": "    self.layout = self.arrange(*args, **kwargs)"}, {"line_number": 15, "line_content": "    self.setColors()"}, {"line_number": 16, "line_content": "    self.SetSizer(self.layout)"}, {"line_number": 17, "line_content": "    self.bindMouseEvents()"}, {"line_number": 18, "line_content": "    self.Bind(wx.EVT_SIZE, self.onSize)"}, {"line_number": 19, "line_content": "    if self._options.get('initial_value') is not None:"}, {"line_number": 20, "line_content": "        self.setValue(self._options['initial_value'])"}, {"line_number": 21, "line_content": "    elif self._meta['default'] is not None:"}, {"line_number": 22, "line_content": "        self.setValue(self._meta['default'])"}, {"line_number": 23, "line_content": "    if self._options.get('placeholder'):"}, {"line_number": 24, "line_content": "        self.setPlaceholder(self._options.get('placeholder'))"}, {"line_number": 25, "line_content": "    self.onComponentInitialized()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L96", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def onComponentInitialized(self):"}, {"line_number": 2, "line_content": "    pass"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L99", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "def bindMouseEvents(self):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        Send any LEFT DOWN mouse events to interested"}, {"line_number": 4, "line_content": "        listeners via pubsub. see: gooey.gui.mouse for background."}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    self.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 7, "line_content": "    self.label.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 8, "line_content": "    self.help_text.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 9, "line_content": "    self.error.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}, {"line_number": 10, "line_content": "    self.widget.Bind(wx.EVT_LEFT_DOWN, notifyMouseEvent)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L110", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "def arrange(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    wx_util.make_bold(self.label)"}, {"line_number": 3, "line_content": "    wx_util.withColor(self.label, self._options['label_color'])"}, {"line_number": 4, "line_content": "    wx_util.withColor(self.help_text, self._options['help_color'])"}, {"line_number": 5, "line_content": "    wx_util.withColor(self.error, self._options['error_color'])"}, {"line_number": 6, "line_content": "    self.help_text.SetMinSize((0, -1))"}, {"line_number": 7, "line_content": "    layout = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 8, "line_content": "    if self._options.get('show_label', True):"}, {"line_number": 9, "line_content": "        layout.Add(self.label, 0, wx.EXPAND)"}, {"line_number": 10, "line_content": "    else:"}, {"line_number": 11, "line_content": "        self.label.Show(False)"}, {"line_number": 12, "line_content": "        layout.AddStretchSpacer(1)"}, {"line_number": 13, "line_content": "    layout.AddSpacer(2)"}, {"line_number": 14, "line_content": "    if self.help_text and self._options.get('show_help', True):"}, {"line_number": 15, "line_content": "        layout.Add(self.help_text, 1, wx.EXPAND)"}, {"line_number": 16, "line_content": "        layout.AddSpacer(2)"}, {"line_number": 17, "line_content": "    else:"}, {"line_number": 18, "line_content": "        self.help_text.Show(False)"}, {"line_number": 19, "line_content": "        layout.AddStretchSpacer(1)"}, {"line_number": 20, "line_content": "    layout.Add(self.getSublayout(), 0, wx.EXPAND)"}, {"line_number": 21, "line_content": "    layout.Add(self.error, 1, wx.EXPAND)"}, {"line_number": 22, "line_content": "    return layout"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L142", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "def setColors(self):"}, {"line_number": 2, "line_content": "    wx_util.make_bold(self.label)"}, {"line_number": 3, "line_content": "    wx_util.withColor(self.label, self._options['label_color'])"}, {"line_number": 4, "line_content": "    wx_util.withColor(self.help_text, self._options['help_color'])"}, {"line_number": 5, "line_content": "    wx_util.withColor(self.error, self._options['error_color'])"}, {"line_number": 6, "line_content": "    if self._options.get('label_bg_color'):"}, {"line_number": 7, "line_content": "        self.label.SetBackgroundColour(self._options.get('label_bg_color'))"}, {"line_number": 8, "line_content": "    if self._options.get('help_bg_color'):"}, {"line_number": 9, "line_content": "        self.help_text.SetBackgroundColour(self._options.get('help_bg_color'))"}, {"line_number": 10, "line_content": "    if self._options.get('error_bg_color'):"}, {"line_number": 11, "line_content": "        self.error.SetBackgroundColour(self._options.get('error_bg_color'))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L154", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidget(self, *args, **options):"}, {"line_number": 2, "line_content": "    return self.widget_class(*args, **options)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L157", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    raise NotImplementedError"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L29", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getSublayout(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    layout = wx.BoxSizer(wx.HORIZONTAL)"}, {"line_number": 3, "line_content": "    layout.Add(self.widget, 1, wx.EXPAND)"}, {"line_number": 4, "line_content": "    return layout"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/bases.py#L165", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def onSize(self, event):"}, {"line_number": 2, "line_content": "    event.Skip()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/basictextconsole.py#L4", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent):"}, {"line_number": 2, "line_content": "    super(BasicTextConsole, self).__init__(parent, -1, '', style=wx."}, {"line_number": 3, "line_content": "        TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH | wx.TE_AUTO_URL)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/numeric_fields.py#L12", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getWidget(self, *args, **options):"}, {"line_number": 2, "line_content": "    widget = self.widget_class(self, value='', min=self._options.get('min',"}, {"line_number": 3, "line_content": "        0), max=self._options.get('max', 100))"}, {"line_number": 4, "line_content": "    return widget"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/numeric_fields.py#L19", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    return self.widget.GetValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/numeric_fields.py#L22", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    self.widget.SetValue(int(value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/numeric_fields.py#L25", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value):"}, {"line_number": 2, "line_content": "    return formatters.general(metatdata, str(value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/checkbox.py#L14", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "def arrange(self, *args, **kwargs):"}, {"line_number": 2, "line_content": "    wx_util.make_bold(self.label)"}, {"line_number": 3, "line_content": "    wx_util.withColor(self.label, self._options['label_color'])"}, {"line_number": 4, "line_content": "    wx_util.withColor(self.help_text, self._options['help_color'])"}, {"line_number": 5, "line_content": "    wx_util.withColor(self.error, self._options['error_color'])"}, {"line_number": 6, "line_content": "    self.error.Hide()"}, {"line_number": 7, "line_content": "    self.help_text.SetMinSize((0, -1))"}, {"line_number": 8, "line_content": "    layout = wx.BoxSizer(wx.VERTICAL)"}, {"line_number": 9, "line_content": "    if self._options.get('show_label', True):"}, {"line_number": 10, "line_content": "        layout.Add(self.label, 0, wx.EXPAND)"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        self.label.Show(False)"}, {"line_number": 13, "line_content": "        layout.AddStretchSpacer(1)"}, {"line_number": 14, "line_content": "    layout.AddSpacer(2)"}, {"line_number": 15, "line_content": "    if self.help_text:"}, {"line_number": 16, "line_content": "        hsizer = wx.BoxSizer(wx.HORIZONTAL)"}, {"line_number": 17, "line_content": "        hsizer.Add(self.widget, 0)"}, {"line_number": 18, "line_content": "        hsizer.Add(self.help_text, 1)"}, {"line_number": 19, "line_content": "        layout.Add(hsizer, 1, wx.EXPAND)"}, {"line_number": 20, "line_content": "        layout.AddSpacer(2)"}, {"line_number": 21, "line_content": "    else:"}, {"line_number": 22, "line_content": "        layout.Add(self.widget, 0, wx.EXPAND)"}, {"line_number": 23, "line_content": "        layout.AddStretchSpacer(1)"}, {"line_number": 24, "line_content": "    return layout"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/checkbox.py#L43", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    self.widget.SetValue(value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/checkbox.py#L46", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    return self.widget.GetValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/checkbox.py#L50", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value):"}, {"line_number": 2, "line_content": "    return formatters.checkbox(metatdata, value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/checkbox.py#L54", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def hideInput(self):"}, {"line_number": 2, "line_content": "    self.widget.Hide()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/counter.py#L10", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    index = self._meta['choices'].index(value) + 1"}, {"line_number": 3, "line_content": "    self.widget.SetSelection(index)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/richtextconsole.py#L43", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent):"}, {"line_number": 2, "line_content": "    super(wx.richtext.RichTextCtrl, self).__init__(parent, -1, '', style=wx"}, {"line_number": 3, "line_content": "        .richtext.RE_MULTILINE | wx.richtext.RE_READONLY)"}, {"line_number": 4, "line_content": "    self.regex_urls = re.compile("}, {"line_number": 5, "line_content": "        '\\\\b((?:file://|https?://|mailto:)[^][\\\\s<>|]*)')"}, {"line_number": 6, "line_content": "    self.url_colour = wx.Colour(0, 0, 255)"}, {"line_number": 7, "line_content": "    self.esc = colored.style.ESC"}, {"line_number": 8, "line_content": "    self.end = colored.style.END"}, {"line_number": 9, "line_content": "    self.noop = lambda *args, **kwargs: None"}, {"line_number": 10, "line_content": "    self.actionsMap = {colored.style.BOLD: self.BeginBold, colored.style."}, {"line_number": 11, "line_content": "        RES_BOLD: self.EndBold, colored.style.UNDERLINED: self."}, {"line_number": 12, "line_content": "        BeginUnderline, colored.style.RES_UNDERLINED: self.EndUnderline,"}, {"line_number": 13, "line_content": "        colored.style.RESET: self.EndAllStyles}"}, {"line_number": 14, "line_content": "    for index, hex in enumerate(kColorList):"}, {"line_number": 15, "line_content": "        escSeq = '{}{}{}'.format(colored.fore.ESC, index, colored.fore.END)"}, {"line_number": 16, "line_content": "        wxcolor = wx.Colour(int(hex[1:3], 16), int(hex[3:5], 16), int(hex[5"}, {"line_number": 17, "line_content": "            :], 16), alpha=wx.ALPHA_OPAQUE)"}, {"line_number": 18, "line_content": "        self.actionsMap[escSeq"}, {"line_number": 19, "line_content": "            ] = lambda bindedColor=wxcolor: self.BeginTextColour(bindedColor)"}, {"line_number": 20, "line_content": "    self.Bind(wx.EVT_MOUSEWHEEL, self.onMouseWheel)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/richtextconsole.py#L69", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "def PreprocessAndWriteText(self, content):"}, {"line_number": 2, "line_content": "    \"\"\"Write text into console, while capturing URLs and making "}, {"line_number": 3, "line_content": "        them blue, underlined, and clickable."}, {"line_number": 4, "line_content": "        \"\"\""}, {"line_number": 5, "line_content": "    textStream = iter(re.split(self.regex_urls, content))"}, {"line_number": 6, "line_content": "    for plaintext in textStream:"}, {"line_number": 7, "line_content": "        url = next(textStream, None)"}, {"line_number": 8, "line_content": "        self.WriteText(plaintext)"}, {"line_number": 9, "line_content": "        if url:"}, {"line_number": 10, "line_content": "            self.BeginTextColour(self.url_colour)"}, {"line_number": 11, "line_content": "            self.BeginUnderline()"}, {"line_number": 12, "line_content": "            self.BeginURL(url)"}, {"line_number": 13, "line_content": "            self.WriteText(url)"}, {"line_number": 14, "line_content": "            self.EndURL()"}, {"line_number": 15, "line_content": "            self.EndUnderline()"}, {"line_number": 16, "line_content": "            self.EndTextColour()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/richtextconsole.py#L88", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "def AppendText(self, content):"}, {"line_number": 2, "line_content": "    \"\"\""}, {"line_number": 3, "line_content": "        wx method overridden to capture the terminal control character and translate them into wx styles."}, {"line_number": 4, "line_content": "        Complexity : o(len(content))"}, {"line_number": 5, "line_content": "        \"\"\""}, {"line_number": 6, "line_content": "    self.SetInsertionPointEnd()"}, {"line_number": 7, "line_content": "    unprocIndex = 0"}, {"line_number": 8, "line_content": "    while True:"}, {"line_number": 9, "line_content": "        escPos = content.find(self.esc, unprocIndex)"}, {"line_number": 10, "line_content": "        if escPos == -1:"}, {"line_number": 11, "line_content": "            break"}, {"line_number": 12, "line_content": "        if content[unprocIndex:escPos]:"}, {"line_number": 13, "line_content": "            self.PreprocessAndWriteText(content[unprocIndex:escPos])"}, {"line_number": 14, "line_content": "        endEsc = content.find(self.end, escPos)"}, {"line_number": 15, "line_content": "        if endEsc == -1:"}, {"line_number": 16, "line_content": "            unprocIndex = escPos + len(self.esc)"}, {"line_number": 17, "line_content": "            continue"}, {"line_number": 18, "line_content": "        self.actionsMap.get(content[escPos:endEsc + 1], self.noop)()"}, {"line_number": 19, "line_content": "        unprocIndex = endEsc + 1"}, {"line_number": 20, "line_content": "    self.PreprocessAndWriteText(content[unprocIndex:])"}, {"line_number": 21, "line_content": "    self.ShowPosition(self.GetInsertionPoint())"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/richtextconsole.py#L115", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "def onMouseWheel(self, event):"}, {"line_number": 2, "line_content": "    if event.GetModifiers() == 2 and event.GetWheelAxis("}, {"line_number": 3, "line_content": "        ) == wx.MOUSE_WHEEL_VERTICAL:"}, {"line_number": 4, "line_content": "        if event.GetWheelRotation() >= event.GetWheelDelta():"}, {"line_number": 5, "line_content": "            r = 1.1"}, {"line_number": 6, "line_content": "        elif event.GetWheelRotation() <= -event.GetWheelDelta():"}, {"line_number": 7, "line_content": "            r = 1.0 / 1.1"}, {"line_number": 8, "line_content": "        else:"}, {"line_number": 9, "line_content": "            return"}, {"line_number": 10, "line_content": "        self.SetFontScale(self.GetFontScale() * r, True)"}, {"line_number": 11, "line_content": "    else:"}, {"line_number": 12, "line_content": "        event.Skip()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L18", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def getWidget(self, parent, *args, **options):"}, {"line_number": 2, "line_content": "    default = _('select_option')"}, {"line_number": 3, "line_content": "    return wx.ComboBox(parent=parent, id=-1, value=str(default), choices=["}, {"line_number": 4, "line_content": "        str(default)] + [str(choice) for choice in self._meta['choices']],"}, {"line_number": 5, "line_content": "        style=wx.CB_DROPDOWN)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L28", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def setOptions(self, options):"}, {"line_number": 2, "line_content": "    with self.retainSelection():"}, {"line_number": 3, "line_content": "        self.widget.Clear()"}, {"line_number": 4, "line_content": "        self.widget.SetItems([_('select_option')] + options)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L33", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    index = self._meta['choices'].index(value) + 1"}, {"line_number": 3, "line_content": "    self.widget.SetSelection(index)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L38", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    value = self.widget.GetValue()"}, {"line_number": 3, "line_content": "    if value == _('select_option'):"}, {"line_number": 4, "line_content": "        return None"}, {"line_number": 5, "line_content": "    return value"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L46", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metadata, value):"}, {"line_number": 2, "line_content": "    return formatters.dropdown(metadata, value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/dropdown.py#L50", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def syncUiState(self, state: FormField):"}, {"line_number": 2, "line_content": "    self.setOptions(state['choices'])"}, {"line_number": 3, "line_content": "    if state['selected'] is not None:"}, {"line_number": 4, "line_content": "        self.setValue(state['selected'])"}, {"line_number": 5, "line_content": "    self.error.SetLabel(state['error'] or '')"}, {"line_number": 6, "line_content": "    self.error.Show(state['error'] is not None and state['error'] is not '')"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L15", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getWidget(self, parent, *args, **options):"}, {"line_number": 2, "line_content": "    widgetHeight = self._options.get('height', -1)"}, {"line_number": 3, "line_content": "    return wx.TextCtrl(parent=parent, size=(-1, widgetHeight), style=self."}, {"line_number": 4, "line_content": "        getModifiers())"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L23", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def getModifiers(self):"}, {"line_number": 2, "line_content": "    readonly = wx.TE_READONLY if self._options.get('readonly', False"}, {"line_number": 3, "line_content": "        ) else wx.TE_MULTILINE"}, {"line_number": 4, "line_content": "    return reduce(lambda acc, val: acc | val, [wx.TE_MULTILINE, readonly])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L30", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    return self.widget.GetValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L33", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    self.widget.Clear()"}, {"line_number": 3, "line_content": "    self.widget.AppendText(str(value))"}, {"line_number": 4, "line_content": "    self.widget.SetInsertionPoint(0)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L38", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value: str):"}, {"line_number": 2, "line_content": "    return formatters.general(metatdata, value.replace('\\n', os.linesep))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/textarea.py#L41", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "def syncUiState(self, state: FormField):"}, {"line_number": 2, "line_content": "    self.setValue(state['value'])"}, {"line_number": 3, "line_content": "    self.error.SetLabel(state['error'] or '')"}, {"line_number": 4, "line_content": "    self.error.Show(state['error'] is not None and state['error'] is not '')"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/slider.py#L13", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def getWidget(self, *args, **options):"}, {"line_number": 2, "line_content": "    widget = self.widget_class(self, minValue=self._options.get('min', 0),"}, {"line_number": 3, "line_content": "        maxValue=self._options.get('max', 100), style=wx.SL_MIN_MAX_LABELS |"}, {"line_number": 4, "line_content": "        wx.SL_VALUE_LABEL)"}, {"line_number": 5, "line_content": "    return widget"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/slider.py#L20", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def getWidgetValue(self):"}, {"line_number": 2, "line_content": "    return self.widget.GetValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/slider.py#L23", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def setValue(self, value):"}, {"line_number": 2, "line_content": "    self.widget.SetValue(value)"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/slider.py#L26", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value):"}, {"line_number": 2, "line_content": "    return formatters.general(metatdata, str(value))"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/radio_group.py#L16", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "def __init__(self, parent, widgetInfo, *args, **kwargs):"}, {"line_number": 2, "line_content": "    super(RadioGroup, self).__init__(parent, *args, **kwargs)"}, {"line_number": 3, "line_content": "    self._parent = parent"}, {"line_number": 4, "line_content": "    self.info = widgetInfo"}, {"line_number": 5, "line_content": "    self._id = widgetInfo['id']"}, {"line_number": 6, "line_content": "    self._options = widgetInfo['options']"}, {"line_number": 7, "line_content": "    self.widgetInfo = widgetInfo"}, {"line_number": 8, "line_content": "    self.error = wx.StaticText(self, label='')"}, {"line_number": 9, "line_content": "    self.radioButtons = self.createRadioButtons()"}, {"line_number": 10, "line_content": "    self.selected = None"}, {"line_number": 11, "line_content": "    self.widgets = self.createWidgets()"}, {"line_number": 12, "line_content": "    self.arrange()"}, {"line_number": 13, "line_content": "    for button in self.radioButtons:"}, {"line_number": 14, "line_content": "        button.Bind(wx.EVT_LEFT_DOWN, self.handleButtonClick)"}, {"line_number": 15, "line_content": "    initialSelection = getin(self.info, ['options', 'initial_selection'], None)"}, {"line_number": 16, "line_content": "    if initialSelection is not None:"}, {"line_number": 17, "line_content": "        self.selected = self.radioButtons[initialSelection]"}, {"line_number": 18, "line_content": "        self.selected.SetValue(True)"}, {"line_number": 19, "line_content": "    self.handleImplicitCheck()"}, {"line_number": 20, "line_content": "    self.applyStyleRules()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/radio_group.py#L42", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def getValue(self):"}, {"line_number": 2, "line_content": "    for button, widget in zip(self.radioButtons, self.widgets):"}, {"line_number": 3, "line_content": "        if button.GetValue():"}, {"line_number": 4, "line_content": "            return merge(widget.getValue(), {'id': self._id})"}, {"line_number": 5, "line_content": "    else:"}, {"line_number": 6, "line_content": "        return self.widgets[0].getValue()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/radio_group.py#L52", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "def syncUiState(self, state: t.RadioGroup):"}, {"line_number": 2, "line_content": "    if state['selected'] is not None:"}, {"line_number": 3, "line_content": "        self.radioButtons[state['selected']].SetValue(True)"}, {"line_number": 4, "line_content": "    for option, widget in zip(state['options'], self.widgets):"}, {"line_number": 5, "line_content": "        widget.syncUiState(option)"}, {"line_number": 6, "line_content": "    self.Fit()"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/radio_group.py#L61", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "def getUiState(self):"}, {"line_number": 2, "line_content": "    return t.RadioGroup(id=self._id, type=self.widgetInfo['type'], error="}, {"line_number": 3, "line_content": "        self.error.GetLabel(), enabled=self.Enabled, visible=self.Shown,"}, {"line_number": 4, "line_content": "        selected=self.getSelectedIndex(), options=[x.getUiState() for x in"}, {"line_number": 5, "line_content": "        self.widgets])"}]}}
{"type": "functions", "project_source": "https://github.com/chriskiehl/Gooey", "direct_link_to_file_line": "https://github.com/chriskiehl/Gooey/blob/master/gooey/gui/components/widgets/choosers.py#L25", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "def formatOutput(self, metatdata, value):"}, {"line_number": 2, "line_content": "    return formatters.multiFileChooser(metatdata, value)"}]}}

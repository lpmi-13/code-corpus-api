{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function transInline(input, config) {"}, {"line_number": 2, "line_content": "  return translateGeneric(input, config, '((?<!https?:)//\\\\s*)', '(\\\\s*$)');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function addText(sectionIds) {"}, {"line_number": 2, "line_content": "  if (!sectionIds || !Array.isArray(sectionIds) || sectionIds.length <= 0) {"}, {"line_number": 3, "line_content": "    throw new Error('addText must have an array of section ids supplied');"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  function transformer(tree, file) {"}, {"line_number": 6, "line_content": "    for (const sectionId of sectionIds) {"}, {"line_number": 7, "line_content": "      const textNodes = getAllBetween(tree, `--${sectionId}--`);"}, {"line_number": 8, "line_content": "      const sectionText = mdastToHTML(textNodes);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      if (!isEmpty(sectionText)) {"}, {"line_number": 11, "line_content": "        file.data = {"}, {"line_number": 12, "line_content": "          ...file.data,"}, {"line_number": 13, "line_content": "          [sectionId]: `<section id=\"${sectionId}\">"}, {"line_number": 14, "line_content": "${sectionText}"}, {"line_number": 15, "line_content": "</section>`"}, {"line_number": 16, "line_content": "        };"}, {"line_number": 17, "line_content": "      }"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "  return transformer;"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    const hintNodes = getAllBetween(tree, '--hints--');"}, {"line_number": 6, "line_content": "    if (hintNodes.length % 2 !== 0)"}, {"line_number": 7, "line_content": "      throw Error('Tests must be in (text, ```testString```) order');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    const tests = chunk(hintNodes, 2).map(getTest);"}, {"line_number": 10, "line_content": "    file.data.tests = tests;"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    for (const sectionId of sectionIds) {"}, {"line_number": 3, "line_content": "      const textNodes = getAllBetween(tree, `--${sectionId}--`);"}, {"line_number": 4, "line_content": "      const sectionText = mdastToHTML(textNodes);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "      if (!isEmpty(sectionText)) {"}, {"line_number": 7, "line_content": "        file.data = {"}, {"line_number": 8, "line_content": "          ...file.data,"}, {"line_number": 9, "line_content": "          [sectionId]: `<section id=\"${sectionId}\">"}, {"line_number": 10, "line_content": "${sectionText}"}, {"line_number": 11, "line_content": "</section>`"}, {"line_number": 12, "line_content": "        };"}, {"line_number": 13, "line_content": "      }"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function tableAndStrikethrough() {"}, {"line_number": 2, "line_content": "  var data = this.data();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  add('micromarkExtensions', strikethrough());"}, {"line_number": 5, "line_content": "  add('micromarkExtensions', table);"}, {"line_number": 6, "line_content": "  add('fromMarkdownExtensions', strikethroughFromMD);"}, {"line_number": 7, "line_content": "  add('fromMarkdownExtensions', tableFromMD);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  function add(field, value) {"}, {"line_number": 10, "line_content": "    if (data[field]) data[field].push(value);"}, {"line_number": 11, "line_content": "    else data[field] = [value];"}, {"line_number": 12, "line_content": "  }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function add(field, value) {"}, {"line_number": 2, "line_content": "    if (data[field]) data[field].push(value);"}, {"line_number": 3, "line_content": "    else data[field] = [value];"}, {"line_number": 4, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    const hintNodes = getAllBetween(tree, '--hints--');"}, {"line_number": 3, "line_content": "    if (hintNodes.length % 2 !== 0)"}, {"line_number": 4, "line_content": "      throw Error('Tests must be in (text, ```testString```) order');"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const tests = chunk(hintNodes, 2).map(getTest);"}, {"line_number": 7, "line_content": "    file.data.tests = tests;"}, {"line_number": 8, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getTest(hintNodes) {"}, {"line_number": 2, "line_content": "  const [textNode, testStringNode] = hintNodes;"}, {"line_number": 3, "line_content": "  const text = mdastToHtml([textNode]);"}, {"line_number": 4, "line_content": "  const testString = testStringNode.value;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  if (!text) throw Error('text is missing from hint');"}, {"line_number": 7, "line_content": "  // stub tests (i.e. text, but no testString) are allowed, but the md must"}, {"line_number": 8, "line_content": "  // have a code block, even if it is empty."}, {"line_number": 9, "line_content": "  if (!testString && testString !== '')"}, {"line_number": 10, "line_content": "    throw Error('testString (code block) is missing from hint');"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  return { text, testString };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function hasId(node, index, parent) {"}, {"line_number": 2, "line_content": "  // image references should always be inside paragraphs."}, {"line_number": 3, "line_content": "  if (node.type !== 'paragraph') return;"}, {"line_number": 4, "line_content": "  const idHolder = node.children[0];"}, {"line_number": 5, "line_content": "  if (idHolder.type === 'imageReference') {"}, {"line_number": 6, "line_content": "    if (node.children.length > 1) {"}, {"line_number": 7, "line_content": "      console.log('oooops, too many links together!');"}, {"line_number": 8, "line_content": "      // TODO: optional chaining"}, {"line_number": 9, "line_content": "    } else if ("}, {"line_number": 10, "line_content": "      parent.children[index + 1] &&"}, {"line_number": 11, "line_content": "      parent.children[index + 1].type === 'code'"}, {"line_number": 12, "line_content": "    ) {"}, {"line_number": 13, "line_content": "      console.log('found adjacent code block for id ' + idHolder.identifier);"}, {"line_number": 14, "line_content": "    } else {"}, {"line_number": 15, "line_content": "      console.log("}, {"line_number": 16, "line_content": "        'ooops! the id ' + idHolder.identifier + ' is not next to a code block'"}, {"line_number": 17, "line_content": "      );"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  // we don't want to recurse into the tree, hence visitChildren"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const visit = visitChildren(hasId);"}, {"line_number": 5, "line_content": "  return transformer;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  function transformer(tree) {"}, {"line_number": 8, "line_content": "    visit(tree);"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function transformer(tree) {"}, {"line_number": 2, "line_content": "    visit(tree);"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree) {"}, {"line_number": 5, "line_content": "    visit(tree, visitor);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    function visitor(node, id, parent) {"}, {"line_number": 8, "line_content": "      // currently `remark-directive` seems to be ignoring containerDirectives"}, {"line_number": 9, "line_content": "      // but, assuming that will get fixed, we test for it anyway."}, {"line_number": 10, "line_content": "      const isDirective ="}, {"line_number": 11, "line_content": "        matches('leafDirective', node) ||"}, {"line_number": 12, "line_content": "        matches('textDirective', node) ||"}, {"line_number": 13, "line_content": "        matches('containerDirective', node);"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "      if (isDirective) {"}, {"line_number": 16, "line_content": "        parent.children[id] = {"}, {"line_number": 17, "line_content": "          type: 'text',"}, {"line_number": 18, "line_content": "          value: toMarkdown(node, {"}, {"line_number": 19, "line_content": "            extensions: [directive.toMarkdown]"}, {"line_number": 20, "line_content": "          }).trim()"}, {"line_number": 21, "line_content": "        };"}, {"line_number": 22, "line_content": "      }"}, {"line_number": 23, "line_content": "    }"}, {"line_number": 24, "line_content": "  }"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function transformer(tree) {"}, {"line_number": 2, "line_content": "    visit(tree, visitor);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    function visitor(node, id, parent) {"}, {"line_number": 5, "line_content": "      // currently `remark-directive` seems to be ignoring containerDirectives"}, {"line_number": 6, "line_content": "      // but, assuming that will get fixed, we test for it anyway."}, {"line_number": 7, "line_content": "      const isDirective ="}, {"line_number": 8, "line_content": "        matches('leafDirective', node) ||"}, {"line_number": 9, "line_content": "        matches('textDirective', node) ||"}, {"line_number": 10, "line_content": "        matches('containerDirective', node);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      if (isDirective) {"}, {"line_number": 13, "line_content": "        parent.children[id] = {"}, {"line_number": 14, "line_content": "          type: 'text',"}, {"line_number": 15, "line_content": "          value: toMarkdown(node, {"}, {"line_number": 16, "line_content": "            extensions: [directive.toMarkdown]"}, {"line_number": 17, "line_content": "          }).trim()"}, {"line_number": 18, "line_content": "        };"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function visitor(node, id, parent) {"}, {"line_number": 2, "line_content": "      // currently `remark-directive` seems to be ignoring containerDirectives"}, {"line_number": 3, "line_content": "      // but, assuming that will get fixed, we test for it anyway."}, {"line_number": 4, "line_content": "      const isDirective ="}, {"line_number": 5, "line_content": "        matches('leafDirective', node) ||"}, {"line_number": 6, "line_content": "        matches('textDirective', node) ||"}, {"line_number": 7, "line_content": "        matches('containerDirective', node);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "      if (isDirective) {"}, {"line_number": 10, "line_content": "        parent.children[id] = {"}, {"line_number": 11, "line_content": "          type: 'text',"}, {"line_number": 12, "line_content": "          value: toMarkdown(node, {"}, {"line_number": 13, "line_content": "            extensions: [directive.toMarkdown]"}, {"line_number": 14, "line_content": "          }).trim()"}, {"line_number": 15, "line_content": "        };"}, {"line_number": 16, "line_content": "      }"}, {"line_number": 17, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function findRegionMarkers(challengeFile) {"}, {"line_number": 2, "line_content": "  const lines = challengeFile.contents.split('\\n');"}, {"line_number": 3, "line_content": "  const editableLines = lines"}, {"line_number": 4, "line_content": "    .map((line, id) => (line.trim() === editableRegionMarker ? id : -1))"}, {"line_number": 5, "line_content": "    .filter(id => id >= 0);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  if (editableLines.length > 2) {"}, {"line_number": 8, "line_content": "    throw Error('Editable region has too many markers: ' + editableLines);"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  if (editableLines.length === 0) {"}, {"line_number": 12, "line_content": "    return null;"}, {"line_number": 13, "line_content": "  } else if (editableLines.length === 1) {"}, {"line_number": 14, "line_content": "    throw Error(`Editable region not closed`);"}, {"line_number": 15, "line_content": "  } else {"}, {"line_number": 16, "line_content": "    return editableLines;"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function removeLines(contents, toRemove) {"}, {"line_number": 2, "line_content": "  const lines = contents.split('\\n');"}, {"line_number": 3, "line_content": "  return lines.filter((_, id) => !toRemove.includes(id)).join('\\n');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 54, "lines": [{"line_number": 1, "line_content": "function addSeeds() {"}, {"line_number": 2, "line_content": "  function transformer(tree, file) {"}, {"line_number": 3, "line_content": "    const seedTree = root(getAllBetween(tree, `--seed--`));"}, {"line_number": 4, "line_content": "    // Not all challenges have seeds (video challenges, for example), so we stop"}, {"line_number": 5, "line_content": "    // processing in these cases."}, {"line_number": 6, "line_content": "    if (isEmpty(seedTree.children)) return;"}, {"line_number": 7, "line_content": "    const contentsTree = root(getAllBetween(seedTree, `--seed-contents--`));"}, {"line_number": 8, "line_content": "    const headTree = root(getAllBetween(seedTree, `--before-user-code--`));"}, {"line_number": 9, "line_content": "    const tailTree = root(getAllBetween(seedTree, `--after-user-code--`));"}, {"line_number": 10, "line_content": "    const seeds = {};"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // While before and after code are optional, the contents are not"}, {"line_number": 13, "line_content": "    if (isEmpty(contentsTree.children))"}, {"line_number": 14, "line_content": "      throw Error('## --seed-contents-- must appear in # --seed-- sections');"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    const visitForContents = visitChildren("}, {"line_number": 17, "line_content": "      getFileVisitor(seeds, 'contents', validateEditableMarkers)"}, {"line_number": 18, "line_content": "    );"}, {"line_number": 19, "line_content": "    const visitForHead = visitChildren(getFileVisitor(seeds, 'head'));"}, {"line_number": 20, "line_content": "    const visitForTail = visitChildren(getFileVisitor(seeds, 'tail'));"}, {"line_number": 21, "line_content": "    visitForContents(contentsTree);"}, {"line_number": 22, "line_content": "    visitForHead(headTree);"}, {"line_number": 23, "line_content": "    visitForTail(tailTree);"}, {"line_number": 24, "line_content": "    const seedVals = Object.values(seeds);"}, {"line_number": 25, "line_content": "    file.data = {"}, {"line_number": 26, "line_content": "      ...file.data,"}, {"line_number": 27, "line_content": "      challengeFiles: seedVals"}, {"line_number": 28, "line_content": "    };"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    // process region markers - remove them from content and add them to data"}, {"line_number": 31, "line_content": "    const challengeFiles = Object.values(seeds).map(data => {"}, {"line_number": 32, "line_content": "      const seed = { ...data };"}, {"line_number": 33, "line_content": "      const editRegionMarkers = findRegionMarkers(seed);"}, {"line_number": 34, "line_content": "      if (editRegionMarkers) {"}, {"line_number": 35, "line_content": "        seed.contents = removeLines(seed.contents, editRegionMarkers);"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "        if (editRegionMarkers[1] <= editRegionMarkers[0]) {"}, {"line_number": 38, "line_content": "          throw Error('Editable region must be non zero');"}, {"line_number": 39, "line_content": "        }"}, {"line_number": 40, "line_content": "        seed.editableRegionBoundaries = editRegionMarkers;"}, {"line_number": 41, "line_content": "      } else {"}, {"line_number": 42, "line_content": "        seed.editableRegionBoundaries = [];"}, {"line_number": 43, "line_content": "      }"}, {"line_number": 44, "line_content": "      return seed;"}, {"line_number": 45, "line_content": "    });"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "    file.data = {"}, {"line_number": 48, "line_content": "      ...file.data,"}, {"line_number": 49, "line_content": "      challengeFiles"}, {"line_number": 50, "line_content": "    };"}, {"line_number": 51, "line_content": "  }"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "  return transformer;"}, {"line_number": 54, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    const seedTree = root(getAllBetween(tree, `--seed--`));"}, {"line_number": 3, "line_content": "    // Not all challenges have seeds (video challenges, for example), so we stop"}, {"line_number": 4, "line_content": "    // processing in these cases."}, {"line_number": 5, "line_content": "    if (isEmpty(seedTree.children)) return;"}, {"line_number": 6, "line_content": "    const contentsTree = root(getAllBetween(seedTree, `--seed-contents--`));"}, {"line_number": 7, "line_content": "    const headTree = root(getAllBetween(seedTree, `--before-user-code--`));"}, {"line_number": 8, "line_content": "    const tailTree = root(getAllBetween(seedTree, `--after-user-code--`));"}, {"line_number": 9, "line_content": "    const seeds = {};"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    // While before and after code are optional, the contents are not"}, {"line_number": 12, "line_content": "    if (isEmpty(contentsTree.children))"}, {"line_number": 13, "line_content": "      throw Error('## --seed-contents-- must appear in # --seed-- sections');"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    const visitForContents = visitChildren("}, {"line_number": 16, "line_content": "      getFileVisitor(seeds, 'contents', validateEditableMarkers)"}, {"line_number": 17, "line_content": "    );"}, {"line_number": 18, "line_content": "    const visitForHead = visitChildren(getFileVisitor(seeds, 'head'));"}, {"line_number": 19, "line_content": "    const visitForTail = visitChildren(getFileVisitor(seeds, 'tail'));"}, {"line_number": 20, "line_content": "    visitForContents(contentsTree);"}, {"line_number": 21, "line_content": "    visitForHead(headTree);"}, {"line_number": 22, "line_content": "    visitForTail(tailTree);"}, {"line_number": 23, "line_content": "    const seedVals = Object.values(seeds);"}, {"line_number": 24, "line_content": "    file.data = {"}, {"line_number": 25, "line_content": "      ...file.data,"}, {"line_number": 26, "line_content": "      challengeFiles: seedVals"}, {"line_number": 27, "line_content": "    };"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    // process region markers - remove them from content and add them to data"}, {"line_number": 30, "line_content": "    const challengeFiles = Object.values(seeds).map(data => {"}, {"line_number": 31, "line_content": "      const seed = { ...data };"}, {"line_number": 32, "line_content": "      const editRegionMarkers = findRegionMarkers(seed);"}, {"line_number": 33, "line_content": "      if (editRegionMarkers) {"}, {"line_number": 34, "line_content": "        seed.contents = removeLines(seed.contents, editRegionMarkers);"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "        if (editRegionMarkers[1] <= editRegionMarkers[0]) {"}, {"line_number": 37, "line_content": "          throw Error('Editable region must be non zero');"}, {"line_number": 38, "line_content": "        }"}, {"line_number": 39, "line_content": "        seed.editableRegionBoundaries = editRegionMarkers;"}, {"line_number": 40, "line_content": "      } else {"}, {"line_number": 41, "line_content": "        seed.editableRegionBoundaries = [];"}, {"line_number": 42, "line_content": "      }"}, {"line_number": 43, "line_content": "      return seed;"}, {"line_number": 44, "line_content": "    });"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "    file.data = {"}, {"line_number": 47, "line_content": "      ...file.data,"}, {"line_number": 48, "line_content": "      challengeFiles"}, {"line_number": 49, "line_content": "    };"}, {"line_number": 50, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    const questionNodes = getAllBetween(tree, '--question--');"}, {"line_number": 6, "line_content": "    if (questionNodes.length > 0) {"}, {"line_number": 7, "line_content": "      const questionTree = root(questionNodes);"}, {"line_number": 8, "line_content": "      const textNodes = getAllBetween(questionTree, '--text--');"}, {"line_number": 9, "line_content": "      const answersNodes = getAllBetween(questionTree, '--answers--');"}, {"line_number": 10, "line_content": "      const solutionNodes = getAllBetween(questionTree, '--video-solution--');"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      const question = getQuestion(textNodes, answersNodes, solutionNodes);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      file.data.question = question;"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "  }"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    const questionNodes = getAllBetween(tree, '--question--');"}, {"line_number": 3, "line_content": "    if (questionNodes.length > 0) {"}, {"line_number": 4, "line_content": "      const questionTree = root(questionNodes);"}, {"line_number": 5, "line_content": "      const textNodes = getAllBetween(questionTree, '--text--');"}, {"line_number": 6, "line_content": "      const answersNodes = getAllBetween(questionTree, '--answers--');"}, {"line_number": 7, "line_content": "      const solutionNodes = getAllBetween(questionTree, '--video-solution--');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "      const question = getQuestion(textNodes, answersNodes, solutionNodes);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "      file.data.question = question;"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function getQuestion(textNodes, answersNodes, solutionNodes) {"}, {"line_number": 2, "line_content": "  const text = mdastToHtml(textNodes);"}, {"line_number": 3, "line_content": "  const answers = getAnswers(answersNodes);"}, {"line_number": 4, "line_content": "  const solution = getSolution(solutionNodes);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  if (!text) throw Error('text is missing from question');"}, {"line_number": 7, "line_content": "  if (!answers) throw Error('answers are missing from question');"}, {"line_number": 8, "line_content": "  if (!solution) throw Error('solution is missing from question');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  // console.log({ text, answers, solution });"}, {"line_number": 11, "line_content": "  return { text, answers, solution };"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getAnswers(answersNodes) {"}, {"line_number": 2, "line_content": "  const answerGroups = splitOnThematicBreak(answersNodes);"}, {"line_number": 3, "line_content": "  return answerGroups.map(answer => mdastToHtml(answer));"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "function validateEditableMarkers({ value, position }) {"}, {"line_number": 2, "line_content": "  const twoMarkersRE = RegExp("}, {"line_number": 3, "line_content": "    editableRegionMarker + '.*' + editableRegionMarker"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "  const formattedMarkerRE = /--fcc - editable - region--/;"}, {"line_number": 6, "line_content": "  const lines = value.split('\\n');"}, {"line_number": 7, "line_content": "  const baseLineNumber = position.start.line + 1;"}, {"line_number": 8, "line_content": "  lines.forEach((line, index) => {"}, {"line_number": 9, "line_content": "    if (line.match(twoMarkersRE)) {"}, {"line_number": 10, "line_content": "      throw Error("}, {"line_number": 11, "line_content": "        `Line ${"}, {"line_number": 12, "line_content": "          baseLineNumber + index"}, {"line_number": 13, "line_content": "        } has two markers. Each line should only have one.`"}, {"line_number": 14, "line_content": "      );"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "    if (line.match(formattedMarkerRE)) {"}, {"line_number": 17, "line_content": "      throw Error("}, {"line_number": 18, "line_content": "        `Line ${"}, {"line_number": 19, "line_content": "          baseLineNumber + index"}, {"line_number": 20, "line_content": "        } has a malformed marker. It should be --fcc-editable-region--`"}, {"line_number": 21, "line_content": "      );"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": "  });"}, {"line_number": 24, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function getSolution(solutionNodes) {"}, {"line_number": 2, "line_content": "  let solution;"}, {"line_number": 3, "line_content": "  try {"}, {"line_number": 4, "line_content": "    if (solutionNodes.length > 1) throw Error('Too many nodes');"}, {"line_number": 5, "line_content": "    if (solutionNodes[0].children.length > 1)"}, {"line_number": 6, "line_content": "      throw Error('Too many child nodes');"}, {"line_number": 7, "line_content": "    const solutionString = solutionNodes[0].children[0].value;"}, {"line_number": 8, "line_content": "    if (solutionString === '') throw Error('Non-empty string required');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    solution = Number(solutionString);"}, {"line_number": 11, "line_content": "    if (Number.isNaN(solution)) throw Error('Not a number');"}, {"line_number": 12, "line_content": "    if (solution < 1) throw Error('Not positive number');"}, {"line_number": 13, "line_content": "  } catch (e) {"}, {"line_number": 14, "line_content": "    console.log(e);"}, {"line_number": 15, "line_content": "    throw Error('A video solution should be a positive integer');"}, {"line_number": 16, "line_content": "  }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  return solution;"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    visit(tree, 'yaml', visitor);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    function visitor(node) {"}, {"line_number": 8, "line_content": "      const frontmatter = YAML.load(node.value);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      file.data = { ...file.data, ...frontmatter };"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "  }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    visit(tree, 'yaml', visitor);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    function visitor(node) {"}, {"line_number": 5, "line_content": "      const frontmatter = YAML.load(node.value);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "      file.data = { ...file.data, ...frontmatter };"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function visitor(node) {"}, {"line_number": 2, "line_content": "      const frontmatter = YAML.load(node.value);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "      file.data = { ...file.data, ...frontmatter };"}, {"line_number": 5, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function splitOnThematicBreak(nodes) {"}, {"line_number": 2, "line_content": "  return nodes.reduce("}, {"line_number": 3, "line_content": "    (prev, curr) => {"}, {"line_number": 4, "line_content": "      if (is(curr, 'thematicBreak')) {"}, {"line_number": 5, "line_content": "        return [...prev, []];"}, {"line_number": 6, "line_content": "      } else {"}, {"line_number": 7, "line_content": "        const first = prev.slice(0, -1);"}, {"line_number": 8, "line_content": "        const last = prev.slice(-1)[0];"}, {"line_number": 9, "line_content": "        return [...first, [...last, curr]];"}, {"line_number": 10, "line_content": "      }"}, {"line_number": 11, "line_content": "    },"}, {"line_number": 12, "line_content": "    [[]]"}, {"line_number": 13, "line_content": "  );"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getId(node) {"}, {"line_number": 2, "line_content": "  const { type, name, attributes } = node;"}, {"line_number": 3, "line_content": "  if (type !== 'leafDirective' || name !== 'id' || !attributes) return null;"}, {"line_number": 4, "line_content": "  return attributes.id;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "function getAllBetween(tree, marker) {"}, {"line_number": 2, "line_content": "  const start = find(tree, {"}, {"line_number": 3, "line_content": "    type: 'heading',"}, {"line_number": 4, "line_content": "    children: ["}, {"line_number": 5, "line_content": "      {"}, {"line_number": 6, "line_content": "        type: 'text',"}, {"line_number": 7, "line_content": "        value: marker"}, {"line_number": 8, "line_content": "      }"}, {"line_number": 9, "line_content": "    ]"}, {"line_number": 10, "line_content": "  });"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  if (!start) return [];"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  const isEnd = node => {"}, {"line_number": 15, "line_content": "    return ("}, {"line_number": 16, "line_content": "      node.type === 'heading' && node.depth <= start.depth && isMarker(node)"}, {"line_number": 17, "line_content": "    );"}, {"line_number": 18, "line_content": "  };"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  const isMarker = node => {"}, {"line_number": 21, "line_content": "    if (node.children && node.children[0]) {"}, {"line_number": 22, "line_content": "      const child = node.children[0];"}, {"line_number": 23, "line_content": "      return ("}, {"line_number": 24, "line_content": "        child.type === 'text' &&"}, {"line_number": 25, "line_content": "        child.value.startsWith('--') &&"}, {"line_number": 26, "line_content": "        child.value.endsWith('--')"}, {"line_number": 27, "line_content": "      );"}, {"line_number": 28, "line_content": "    } else {"}, {"line_number": 29, "line_content": "      return false;"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": "  };"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "  const end = findAfter(tree, start, isEnd);"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "  const targetNodes = end"}, {"line_number": 36, "line_content": "    ? between(tree, start, end)"}, {"line_number": 37, "line_content": "    : findAllAfter(tree, start);"}, {"line_number": 38, "line_content": "  return targetNodes;"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function defaultFile(lang, id) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    ext: lang,"}, {"line_number": 4, "line_content": "    name: getFilenames(lang),"}, {"line_number": 5, "line_content": "    contents: '',"}, {"line_number": 6, "line_content": "    head: '',"}, {"line_number": 7, "line_content": "    tail: '',"}, {"line_number": 8, "line_content": "    id"}, {"line_number": 9, "line_content": "  };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function getFilenames(lang) {"}, {"line_number": 2, "line_content": "  const langToFilename = {"}, {"line_number": 3, "line_content": "    js: 'script',"}, {"line_number": 4, "line_content": "    css: 'styles'"}, {"line_number": 5, "line_content": "  };"}, {"line_number": 6, "line_content": "  return langToFilename[lang] ?? 'index';"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function getFileVisitor(seeds, seedKey, validate) {"}, {"line_number": 2, "line_content": "  return (node, index, parent) => {"}, {"line_number": 3, "line_content": "    if (is(node, 'root')) return;"}, {"line_number": 4, "line_content": "    if (is(node, 'code')) {"}, {"line_number": 5, "line_content": "      codeToData(node, seeds, seedKey, validate);"}, {"line_number": 6, "line_content": "      return;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    idToData(node, index, parent, seeds);"}, {"line_number": 9, "line_content": "  };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function codeToData(node, seeds, seedKey, validate) {"}, {"line_number": 2, "line_content": "  if (validate) validate(node);"}, {"line_number": 3, "line_content": "  const lang = node.lang;"}, {"line_number": 4, "line_content": "  if (!supportedLanguages.includes(lang))"}, {"line_number": 5, "line_content": "    throw Error(`On line ${"}, {"line_number": 6, "line_content": "      position.start(node).line"}, {"line_number": 7, "line_content": "    } '${lang}' is not a supported language."}, {"line_number": 8, "line_content": " Please use one of js, css, html, jsx or py"}, {"line_number": 9, "line_content": "`);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const fileId = `index${lang}`;"}, {"line_number": 12, "line_content": "  const id = seeds[fileId] ? seeds[fileId].id : '';"}, {"line_number": 13, "line_content": "  // the contents will be missing if there is an id preceding this code"}, {"line_number": 14, "line_content": "  // block."}, {"line_number": 15, "line_content": "  if (!seeds[fileId]) {"}, {"line_number": 16, "line_content": "    seeds[fileId] = defaultFile(lang, id);"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": "  if (isEmpty(node.value) && seedKey !== 'contents') {"}, {"line_number": 19, "line_content": "    const section = keyToSection[seedKey];"}, {"line_number": 20, "line_content": "    throw Error(`Empty code block in --${section}-- section`);"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  seeds[fileId][seedKey] = isEmpty(seeds[fileId][seedKey])"}, {"line_number": 24, "line_content": "    ? node.value"}, {"line_number": 25, "line_content": "    : seeds[fileId][seedKey] + '\\n' + node.value;"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function idToData(node, index, parent, seeds) {"}, {"line_number": 2, "line_content": "  const id = getId(node);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  // If this is reached, the node type is neither root nor code. If it is not"}, {"line_number": 5, "line_content": "  // an id, there must be a syntax error."}, {"line_number": 6, "line_content": "  if (!id) {"}, {"line_number": 7, "line_content": "    throw Error("}, {"line_number": 8, "line_content": "      'Unexpected syntax in seed/solution. Must be ::id{#id} or a code ' +"}, {"line_number": 9, "line_content": "        'block (```) \\n'"}, {"line_number": 10, "line_content": "    );"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "  const codeNode = parent.children[index + 1];"}, {"line_number": 13, "line_content": "  if (codeNode && is(codeNode, 'code')) {"}, {"line_number": 14, "line_content": "    const fileKey = `index${codeNode.lang}`;"}, {"line_number": 15, "line_content": "    if (seeds[fileKey]) throw Error('::id{#id}s must come before code blocks');"}, {"line_number": 16, "line_content": "    seeds[fileKey] = defaultFile(codeNode.lang, id);"}, {"line_number": 17, "line_content": "  } else {"}, {"line_number": 18, "line_content": "    throw Error('::id{#id}s must come before code blocks');"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function mdastToHTML(nodes) {"}, {"line_number": 2, "line_content": "  if (!Array.isArray(nodes))"}, {"line_number": 3, "line_content": "    throw Error('mdastToHTML expects an array argument');"}, {"line_number": 4, "line_content": "  // - the 'nodes' are children, so first need embedding in a parent"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return hastToHTML(mdastToHast(root(nodes), { allowDangerousHtml: true }), {"}, {"line_number": 7, "line_content": "    allowDangerousHtml: true"}, {"line_number": 8, "line_content": "  });"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function transHTML(input, config) {"}, {"line_number": 2, "line_content": "  return translateGeneric(input, config, '(<!--\\\\s*)', '(\\\\s*-->)');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function translateGeneric("}, {"line_number": 2, "line_content": "  { text, commentCounts },"}, {"line_number": 3, "line_content": "  config,"}, {"line_number": 4, "line_content": "  regexBefore,"}, {"line_number": 5, "line_content": "  regexAfter"}, {"line_number": 6, "line_content": ") {"}, {"line_number": 7, "line_content": "  const { knownComments, dict, lang } = config;"}, {"line_number": 8, "line_content": "  const regex = new RegExp(regexBefore + '(.*?)' + regexAfter, 'gms');"}, {"line_number": 9, "line_content": "  const matches = text.matchAll(regex);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  for (const [match, before, comment, after] of matches) {"}, {"line_number": 12, "line_content": "    if (knownComments.includes(comment)) {"}, {"line_number": 13, "line_content": "      updateCounts(commentCounts, dict[comment][lang]);"}, {"line_number": 14, "line_content": "      text = text.replace(match, `${before}${dict[comment][lang]}${after}`);"}, {"line_number": 15, "line_content": "    } else if (comment.trim()) {"}, {"line_number": 16, "line_content": "      throw `${comment} does not appear in the comment dictionary`;"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  return { text, commentCounts };"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function transCSS({ text, commentCounts }, config) {"}, {"line_number": 2, "line_content": "  const regex = /<style>.*?<\\/style>/gms;"}, {"line_number": 3, "line_content": "  const matches = text.matchAll(regex);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  for (const [match] of matches) {"}, {"line_number": 6, "line_content": "    let { text: styleText } = transMultiline("}, {"line_number": 7, "line_content": "      { text: match, commentCounts },"}, {"line_number": 8, "line_content": "      config"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "    text = text.replace(match, styleText);"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "  return { text, commentCounts };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function parse(file) {"}, {"line_number": 2, "line_content": "  return await remark().use(tableAndStrikeThrough).parse(file);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function transScript({ text, commentCounts }, config) {"}, {"line_number": 2, "line_content": "  const regex = /<script>.*?<\\/script>/gms;"}, {"line_number": 3, "line_content": "  const matches = text.matchAll(regex);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  for (const [match] of matches) {"}, {"line_number": 6, "line_content": "    let { text: scriptText } = transMultiline("}, {"line_number": 7, "line_content": "      transInline({ text: match, commentCounts }, config),"}, {"line_number": 8, "line_content": "      config"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "    text = text.replace(match, scriptText);"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "  return { text, commentCounts };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 63, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file, next) {"}, {"line_number": 5, "line_content": "    const importedFiles = selectAll('leafDirective[name=import]', tree);"}, {"line_number": 6, "line_content": "    if (!file) {"}, {"line_number": 7, "line_content": "      next('replace-imports must be passed a file');"}, {"line_number": 8, "line_content": "      return;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    if (isEmpty(importedFiles)) {"}, {"line_number": 11, "line_content": "      next();"}, {"line_number": 12, "line_content": "      return;"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "    const importPromises = importedFiles.map(async ({ attributes }) => {"}, {"line_number": 15, "line_content": "      const { from, component } = attributes;"}, {"line_number": 16, "line_content": "      // if these are missing, bail, since it's not an import."}, {"line_number": 17, "line_content": "      if (!from || !component) {"}, {"line_number": 18, "line_content": "        return null;"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": "      const location = path.resolve(file.dirname, from);"}, {"line_number": 21, "line_content": "      return await read(location)"}, {"line_number": 22, "line_content": "        .then(parse)"}, {"line_number": 23, "line_content": "        .then(importedFile => {"}, {"line_number": 24, "line_content": "          function modifier(node, index, parent) {"}, {"line_number": 25, "line_content": "            const { type, name, attributes } = node;"}, {"line_number": 26, "line_content": "            const target = attributes ? attributes.component : null;"}, {"line_number": 27, "line_content": "            if ("}, {"line_number": 28, "line_content": "              type === 'leafDirective' &&"}, {"line_number": 29, "line_content": "              name === 'use' &&"}, {"line_number": 30, "line_content": "              target === component"}, {"line_number": 31, "line_content": "            ) {"}, {"line_number": 32, "line_content": "              if (!validateImports(importedFile))"}, {"line_number": 33, "line_content": "                throw Error("}, {"line_number": 34, "line_content": "                  'Importing files containing ' +"}, {"line_number": 35, "line_content": "                    editableRegionMarker +"}, {"line_number": 36, "line_content": "                    's is not supported.'"}, {"line_number": 37, "line_content": "                );"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "              parent.children.splice(index, 1, ...importedFile.children);"}, {"line_number": 40, "line_content": "            }"}, {"line_number": 41, "line_content": "          }"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "          const modify = modifyChildren(modifier);"}, {"line_number": 44, "line_content": "          modify(tree);"}, {"line_number": 45, "line_content": "        });"}, {"line_number": 46, "line_content": "    });"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "    // We're not interested in the results of importing, we just want to"}, {"line_number": 49, "line_content": "    // modify the tree and pass that new tree to follow plugins - as a result,"}, {"line_number": 50, "line_content": "    // we can't just use .then(next), as it would pass the array into next."}, {"line_number": 51, "line_content": "    // Also, we remove the import statements here."}, {"line_number": 52, "line_content": "    Promise.all(importPromises)"}, {"line_number": 53, "line_content": "      .then(() => {"}, {"line_number": 54, "line_content": "        remove(tree, isImportNode);"}, {"line_number": 55, "line_content": "        next();"}, {"line_number": 56, "line_content": "      })"}, {"line_number": 57, "line_content": "      .catch(err => {"}, {"line_number": 58, "line_content": "        console.error('error processing ::import');"}, {"line_number": 59, "line_content": "        console.error(err);"}, {"line_number": 60, "line_content": "        next(err);"}, {"line_number": 61, "line_content": "      });"}, {"line_number": 62, "line_content": "  }"}, {"line_number": 63, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 59, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file, next) {"}, {"line_number": 2, "line_content": "    const importedFiles = selectAll('leafDirective[name=import]', tree);"}, {"line_number": 3, "line_content": "    if (!file) {"}, {"line_number": 4, "line_content": "      next('replace-imports must be passed a file');"}, {"line_number": 5, "line_content": "      return;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    if (isEmpty(importedFiles)) {"}, {"line_number": 8, "line_content": "      next();"}, {"line_number": 9, "line_content": "      return;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    const importPromises = importedFiles.map(async ({ attributes }) => {"}, {"line_number": 12, "line_content": "      const { from, component } = attributes;"}, {"line_number": 13, "line_content": "      // if these are missing, bail, since it's not an import."}, {"line_number": 14, "line_content": "      if (!from || !component) {"}, {"line_number": 15, "line_content": "        return null;"}, {"line_number": 16, "line_content": "      }"}, {"line_number": 17, "line_content": "      const location = path.resolve(file.dirname, from);"}, {"line_number": 18, "line_content": "      return await read(location)"}, {"line_number": 19, "line_content": "        .then(parse)"}, {"line_number": 20, "line_content": "        .then(importedFile => {"}, {"line_number": 21, "line_content": "          function modifier(node, index, parent) {"}, {"line_number": 22, "line_content": "            const { type, name, attributes } = node;"}, {"line_number": 23, "line_content": "            const target = attributes ? attributes.component : null;"}, {"line_number": 24, "line_content": "            if ("}, {"line_number": 25, "line_content": "              type === 'leafDirective' &&"}, {"line_number": 26, "line_content": "              name === 'use' &&"}, {"line_number": 27, "line_content": "              target === component"}, {"line_number": 28, "line_content": "            ) {"}, {"line_number": 29, "line_content": "              if (!validateImports(importedFile))"}, {"line_number": 30, "line_content": "                throw Error("}, {"line_number": 31, "line_content": "                  'Importing files containing ' +"}, {"line_number": 32, "line_content": "                    editableRegionMarker +"}, {"line_number": 33, "line_content": "                    's is not supported.'"}, {"line_number": 34, "line_content": "                );"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "              parent.children.splice(index, 1, ...importedFile.children);"}, {"line_number": 37, "line_content": "            }"}, {"line_number": 38, "line_content": "          }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "          const modify = modifyChildren(modifier);"}, {"line_number": 41, "line_content": "          modify(tree);"}, {"line_number": 42, "line_content": "        });"}, {"line_number": 43, "line_content": "    });"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    // We're not interested in the results of importing, we just want to"}, {"line_number": 46, "line_content": "    // modify the tree and pass that new tree to follow plugins - as a result,"}, {"line_number": 47, "line_content": "    // we can't just use .then(next), as it would pass the array into next."}, {"line_number": 48, "line_content": "    // Also, we remove the import statements here."}, {"line_number": 49, "line_content": "    Promise.all(importPromises)"}, {"line_number": 50, "line_content": "      .then(() => {"}, {"line_number": 51, "line_content": "        remove(tree, isImportNode);"}, {"line_number": 52, "line_content": "        next();"}, {"line_number": 53, "line_content": "      })"}, {"line_number": 54, "line_content": "      .catch(err => {"}, {"line_number": 55, "line_content": "        console.error('error processing ::import');"}, {"line_number": 56, "line_content": "        console.error(err);"}, {"line_number": 57, "line_content": "        next(err);"}, {"line_number": 58, "line_content": "      });"}, {"line_number": 59, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function modifier(node, index, parent) {"}, {"line_number": 2, "line_content": "            const { type, name, attributes } = node;"}, {"line_number": 3, "line_content": "            const target = attributes ? attributes.component : null;"}, {"line_number": 4, "line_content": "            if ("}, {"line_number": 5, "line_content": "              type === 'leafDirective' &&"}, {"line_number": 6, "line_content": "              name === 'use' &&"}, {"line_number": 7, "line_content": "              target === component"}, {"line_number": 8, "line_content": "            ) {"}, {"line_number": 9, "line_content": "              if (!validateImports(importedFile))"}, {"line_number": 10, "line_content": "                throw Error("}, {"line_number": 11, "line_content": "                  'Importing files containing ' +"}, {"line_number": 12, "line_content": "                    editableRegionMarker +"}, {"line_number": 13, "line_content": "                    's is not supported.'"}, {"line_number": 14, "line_content": "                );"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "              parent.children.splice(index, 1, ...importedFile.children);"}, {"line_number": 17, "line_content": "            }"}, {"line_number": 18, "line_content": "          }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function isImportNode({ type, name, attributes }) {"}, {"line_number": 2, "line_content": "  if (!attributes) return false;"}, {"line_number": 3, "line_content": "  return ("}, {"line_number": 4, "line_content": "    type === 'leafDirective' &&"}, {"line_number": 5, "line_content": "    name === 'import' &&"}, {"line_number": 6, "line_content": "    attributes.component &&"}, {"line_number": 7, "line_content": "    attributes.from"}, {"line_number": 8, "line_content": "  );"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function validateImports(fileTree) {"}, {"line_number": 2, "line_content": "  let valid = true;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function visitor({ value }) {"}, {"line_number": 5, "line_content": "    if (value && value.includes(editableRegionMarker)) {"}, {"line_number": 6, "line_content": "      valid = false;"}, {"line_number": 7, "line_content": "      return visit.EXIT;"}, {"line_number": 8, "line_content": "    } else {"}, {"line_number": 9, "line_content": "      return visit.CONTINUE;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  visit(fileTree, visitor);"}, {"line_number": 14, "line_content": "  return valid;"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function transMultiline(input, config) {"}, {"line_number": 2, "line_content": "  return translateGeneric(input, config, '(/\\\\*\\\\s*)', '(\\\\s*\\\\*/)');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function updateCounts(map, key) {"}, {"line_number": 2, "line_content": "  if (map.has(key)) {"}, {"line_number": 3, "line_content": "    map.set(key, map.get(key) + 1);"}, {"line_number": 4, "line_content": "  } else {"}, {"line_number": 5, "line_content": "    map.set(key, 1);"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function visitor({ value }) {"}, {"line_number": 2, "line_content": "    if (value && value.includes(editableRegionMarker)) {"}, {"line_number": 3, "line_content": "      valid = false;"}, {"line_number": 4, "line_content": "      return visit.EXIT;"}, {"line_number": 5, "line_content": "    } else {"}, {"line_number": 6, "line_content": "      return visit.CONTINUE;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function validateMarkers({ value }) {"}, {"line_number": 2, "line_content": "  const lines = value.split('\\n');"}, {"line_number": 3, "line_content": "  if (lines.some(line => line.match(RegExp(editableRegionMarker))))"}, {"line_number": 4, "line_content": "    throw Error("}, {"line_number": 5, "line_content": "      '--fcc-editable-region-- should only appear in the --seed-contents--\\n' +"}, {"line_number": 6, "line_content": "        'section, not in --solutions--'"}, {"line_number": 7, "line_content": "    );"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "function createPlugin() {"}, {"line_number": 2, "line_content": "  return function transformer(tree, file) {"}, {"line_number": 3, "line_content": "    const solutionArrays = splitOnThematicBreak("}, {"line_number": 4, "line_content": "      getAllBetween(tree, `--solutions--`)"}, {"line_number": 5, "line_content": "    );"}, {"line_number": 6, "line_content": "    const solutions = [];"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    solutionArrays.forEach(nodes => {"}, {"line_number": 9, "line_content": "      const solution = {};"}, {"line_number": 10, "line_content": "      const solutionTree = root(nodes);"}, {"line_number": 11, "line_content": "      const visitForContents = visitChildren("}, {"line_number": 12, "line_content": "        getFileVisitor(solution, 'contents', validateMarkers)"}, {"line_number": 13, "line_content": "      );"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "      visitForContents(solutionTree);"}, {"line_number": 16, "line_content": "      if (!isEmpty(solution)) solutions.push(Object.values(solution));"}, {"line_number": 17, "line_content": "    });"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    file.data = {"}, {"line_number": 20, "line_content": "      ...file.data,"}, {"line_number": 21, "line_content": "      solutions: solutions"}, {"line_number": 22, "line_content": "    };"}, {"line_number": 23, "line_content": "  };"}, {"line_number": 24, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function linter(rules) {"}, {"line_number": 2, "line_content": "  const lint = (file, next) => {"}, {"line_number": 3, "line_content": "    const options = {"}, {"line_number": 4, "line_content": "      files: [file.path],"}, {"line_number": 5, "line_content": "      config: rules,"}, {"line_number": 6, "line_content": "      customRules: [lintYAML, lintPrism]"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": "    markdownlint(options, function callback(err, result) {"}, {"line_number": 9, "line_content": "      const resultString = (result || '').toString();"}, {"line_number": 10, "line_content": "      if (resultString) {"}, {"line_number": 11, "line_content": "        process.exitCode = 1;"}, {"line_number": 12, "line_content": "        console.log(resultString);"}, {"line_number": 13, "line_content": "      }"}, {"line_number": 14, "line_content": "      if (next) next(err, file);"}, {"line_number": 15, "line_content": "    });"}, {"line_number": 16, "line_content": "  };"}, {"line_number": 17, "line_content": "  return lint;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function callback() {"}, {"line_number": 2, "line_content": "      expect(process.exitCode).toBe(0);"}, {"line_number": 3, "line_content": "      done();"}, {"line_number": 4, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function callback() {"}, {"line_number": 2, "line_content": "      expect(process.exitCode).toBe(1);"}, {"line_number": 3, "line_content": "      done();"}, {"line_number": 4, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function callback() {"}, {"line_number": 2, "line_content": "      expect(process.exitCode).toBe(1);"}, {"line_number": 3, "line_content": "      done();"}, {"line_number": 4, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function callback() {"}, {"line_number": 2, "line_content": "      const expected ="}, {"line_number": 3, "line_content": "        // eslint-disable-next-line max-len"}, {"line_number": 4, "line_content": "        'badYML.md: 19: yaml-linter YAML code blocks should be valid [bad indentation of a mapping entry at line 3, column 17:\\n          testString: testString\\n                    ^] [Context: \"```yml\"]';"}, {"line_number": 5, "line_content": "      expect(console.log.mock.calls.length).toBe(1);"}, {"line_number": 6, "line_content": "      expect(console.log.mock.calls[0][0]).toEqual("}, {"line_number": 7, "line_content": "        expect.stringContaining(expected)"}, {"line_number": 8, "line_content": "      );"}, {"line_number": 9, "line_content": "      done();"}, {"line_number": 10, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function handleError(err, client) {"}, {"line_number": 2, "line_content": "  if (err) {"}, {"line_number": 3, "line_content": "    console.error('Oh noes!! Error seeding local auth user.');"}, {"line_number": 4, "line_content": "    console.error(err);"}, {"line_number": 5, "line_content": "    try {"}, {"line_number": 6, "line_content": "      client.close();"}, {"line_number": 7, "line_content": "    } catch (e) {"}, {"line_number": 8, "line_content": "      // no-op"}, {"line_number": 9, "line_content": "    } finally {"}, {"line_number": 10, "line_content": "      /* eslint-disable-next-line no-process-exit */"}, {"line_number": 11, "line_content": "      process.exit(1);"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function* acceptTermsSaga({ payload: quincyEmails }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUserAcceptsTerms, quincyEmails);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    yield put(acceptTermsComplete(quincyEmails));"}, {"line_number": 6, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 7, "line_content": "  } catch (e) {"}, {"line_number": 8, "line_content": "    yield put(acceptTermsError(e));"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* acceptCompleteSaga() {"}, {"line_number": 2, "line_content": "  yield call(navigate, '/learn');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createAcceptTermsSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.acceptTerms, acceptTermsSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.acceptTermsComplete, acceptCompleteSaga)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function* errorHandlerSaga({ payload: error }) {"}, {"line_number": 2, "line_content": "  if (isHandledError(error)) {"}, {"line_number": 3, "line_content": "    const { type, message, redirectTo } = unwrapHandledError(error);"}, {"line_number": 4, "line_content": "    if (redirectTo) {"}, {"line_number": 5, "line_content": "      navigate(redirectTo);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    yield put(createFlashMessage({ type, message }));"}, {"line_number": 8, "line_content": "    return;"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "  reportClientSideError('Unhandled Error caught in error-saga', error);"}, {"line_number": 11, "line_content": "  yield put(createFlashMessage(reportedErrorMessage));"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function hardGoToEpic(action$, _, { location }) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.hardGoTo),"}, {"line_number": 4, "line_content": "    tap(({ payload }) => {"}, {"line_number": 5, "line_content": "      location.href = payload;"}, {"line_number": 6, "line_content": "    }),"}, {"line_number": 7, "line_content": "    ignoreElements()"}, {"line_number": 8, "line_content": "  );"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function spreadThePayloadOnUser(state, payload) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    ...state,"}, {"line_number": 4, "line_content": "    user: {"}, {"line_number": 5, "line_content": "      ...state.user,"}, {"line_number": 6, "line_content": "      [state.appUsername]: {"}, {"line_number": 7, "line_content": "        ...state.user[state.appUsername],"}, {"line_number": 8, "line_content": "        ...payload"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "  };"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function* reportUserSaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(postReportUser, payload);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    yield put(reportUserComplete());"}, {"line_number": 6, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 7, "line_content": "  } catch (e) {"}, {"line_number": 8, "line_content": "    yield put(reportUserError(e));"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* acceptCompleteSaga() {"}, {"line_number": 2, "line_content": "  yield call(navigate, '/learn');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createReportUserSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.reportUser, reportUserSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.reportUserComplete, acceptCompleteSaga)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function* updateMyEmailSaga({ payload: email = '' }) {"}, {"line_number": 2, "line_content": "  if (!email || !isEmail(email)) {"}, {"line_number": 3, "line_content": "    yield put(createFlashMessage(reallyWeirdErrorMessage));"}, {"line_number": 4, "line_content": "    return;"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  try {"}, {"line_number": 7, "line_content": "    const { data } = yield call(putUserUpdateEmail, email);"}, {"line_number": 8, "line_content": "    yield put("}, {"line_number": 9, "line_content": "      updateMyEmailComplete({"}, {"line_number": 10, "line_content": "        ...data,"}, {"line_number": 11, "line_content": "        payload: { email, isEmailVerified: false }"}, {"line_number": 12, "line_content": "      })"}, {"line_number": 13, "line_content": "    );"}, {"line_number": 14, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 15, "line_content": "  } catch (e) {"}, {"line_number": 16, "line_content": "    yield put(updateMyEmailError(e));"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createUpdateMyEmailSaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.updateMyEmail, updateMyEmailSaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function* deleteAccountSaga() {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    yield call(postDeleteAccount);"}, {"line_number": 4, "line_content": "    yield put("}, {"line_number": 5, "line_content": "      createFlashMessage({"}, {"line_number": 6, "line_content": "        type: 'info',"}, {"line_number": 7, "line_content": "        message: FlashMessages.AccountDeleted"}, {"line_number": 8, "line_content": "      })"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "    // remove current user information from application state"}, {"line_number": 11, "line_content": "    yield put(resetUserData());"}, {"line_number": 12, "line_content": "    yield call(navigate, '/learn');"}, {"line_number": 13, "line_content": "  } catch (e) {"}, {"line_number": 14, "line_content": "    yield put(deleteAccountError(e));"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function* resetProgressSaga() {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    yield call(postResetProgress);"}, {"line_number": 4, "line_content": "    yield put("}, {"line_number": 5, "line_content": "      createFlashMessage({"}, {"line_number": 6, "line_content": "        type: 'info',"}, {"line_number": 7, "line_content": "        message: FlashMessages.ProgressReset"}, {"line_number": 8, "line_content": "      })"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "    // refresh current user data in application state"}, {"line_number": 11, "line_content": "    yield put(fetchUser());"}, {"line_number": 12, "line_content": "    // wait for the refresh to complete"}, {"line_number": 13, "line_content": "    yield take(appTypes.fetchUserComplete);"}, {"line_number": 14, "line_content": "    // the complete action has been called"}, {"line_number": 15, "line_content": "    yield call(navigate, '/');"}, {"line_number": 16, "line_content": "  } catch (e) {"}, {"line_number": 17, "line_content": "    yield put(resetProgressError(e));"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createDangerZoneSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.deleteAccount, deleteAccountSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.resetProgress, resetProgressSaga)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* submitNewAboutSaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyAbout, payload);"}, {"line_number": 4, "line_content": "    yield put(submitNewAboutComplete({ ...data, payload }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(submitNewAboutError(e));"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* submitNewUsernameSaga({ payload: username }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyUsername, username);"}, {"line_number": 4, "line_content": "    yield put(submitNewUsernameComplete({ ...data, username }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(submitNewUsernameError(e));"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* submitProfileUISaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyProfileUI, payload);"}, {"line_number": 4, "line_content": "    yield put(submitProfileUIComplete({ ...data, payload }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage(data));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(submitProfileUIError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function* updateUserFlagSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateUserFlag, update);"}, {"line_number": 4, "line_content": "    yield put(updateUserFlagComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put("}, {"line_number": 6, "line_content": "      createFlashMessage({ ...data, variables: { theme: update.theme } })"}, {"line_number": 7, "line_content": "    );"}, {"line_number": 8, "line_content": "  } catch (e) {"}, {"line_number": 9, "line_content": "    yield put(updateUserFlagError(e));"}, {"line_number": 10, "line_content": "  }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateMySocialsSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMySocials, update);"}, {"line_number": 4, "line_content": "    yield put(updateMySocialsComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(updateMySocialsError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function* updateMySoundSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    store.set('fcc-sound', !!update.sound);"}, {"line_number": 4, "line_content": "    const { data } = yield call(putUpdateMySound, update);"}, {"line_number": 5, "line_content": "    yield put(updateMySoundComplete({ ...data, payload: update }));"}, {"line_number": 6, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 7, "line_content": "  } catch (e) {"}, {"line_number": 8, "line_content": "    yield put(updateMySoundError);"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateMyThemeSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyTheme, update);"}, {"line_number": 4, "line_content": "    yield put(updateMyThemeComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(updateMyThemeError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateMyHonestySaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyHonesty, update);"}, {"line_number": 4, "line_content": "    yield put(updateMyHonestyComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(updateMyHonestyError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateMyQuincyEmailSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyQuincyEmail, update);"}, {"line_number": 4, "line_content": "    yield put(updateMyQuincyEmailComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(updateMyQuincyEmailError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateMyPortfolioSaga({ payload: update }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(putUpdateMyPortfolio, update);"}, {"line_number": 4, "line_content": "    yield put(updateMyPortfolioComplete({ ...data, payload: update }));"}, {"line_number": 5, "line_content": "    yield put(createFlashMessage({ ...data }));"}, {"line_number": 6, "line_content": "  } catch (e) {"}, {"line_number": 7, "line_content": "    yield put(updateMyPortfolioError);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function* validateUsernameSaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const {"}, {"line_number": 4, "line_content": "      data: { exists }"}, {"line_number": 5, "line_content": "    } = yield call(getUsernameExists, payload);"}, {"line_number": 6, "line_content": "    yield put(validateUsernameComplete(exists));"}, {"line_number": 7, "line_content": "  } catch (e) {"}, {"line_number": 8, "line_content": "    yield put(validateUsernameError(e));"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "function* verifyCertificationSaga({ payload }) {"}, {"line_number": 2, "line_content": "  // check redux if can claim cert before calling backend"}, {"line_number": 3, "line_content": "  const completedChallenges = yield select(completedChallengesSelector);"}, {"line_number": 4, "line_content": "  const currentCert = certMap.find(cert => cert.certSlug === payload);"}, {"line_number": 5, "line_content": "  const currentCertIds = currentCert?.projects.map(project => project.id);"}, {"line_number": 6, "line_content": "  const certTitle = currentCert?.title || payload;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  const flash = {"}, {"line_number": 9, "line_content": "    type: 'info',"}, {"line_number": 10, "line_content": "    message: 'flash.incomplete-steps',"}, {"line_number": 11, "line_content": "    variables: { name: certTitle }"}, {"line_number": 12, "line_content": "  };"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  const canClaimCert = currentCertIds.every(id =>"}, {"line_number": 15, "line_content": "    completedChallenges.find(challenge => challenge.id === id)"}, {"line_number": 16, "line_content": "  );"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  if (!canClaimCert) {"}, {"line_number": 19, "line_content": "    yield put(createFlashMessage(flash));"}, {"line_number": 20, "line_content": "    return;"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  // redux says challenges are complete, call back end"}, {"line_number": 24, "line_content": "  try {"}, {"line_number": 25, "line_content": "    const {"}, {"line_number": 26, "line_content": "      data: { response, isCertMap, completedChallenges }"}, {"line_number": 27, "line_content": "    } = yield call(putVerifyCert, payload);"}, {"line_number": 28, "line_content": "    yield put("}, {"line_number": 29, "line_content": "      verifyCertComplete({"}, {"line_number": 30, "line_content": "        ...response,"}, {"line_number": 31, "line_content": "        payload: {"}, {"line_number": 32, "line_content": "          ...isCertMap,"}, {"line_number": 33, "line_content": "          completedChallenges: completedChallenges.map(x => ({"}, {"line_number": 34, "line_content": "            ...omit(x, 'files'),"}, {"line_number": 35, "line_content": "            challengeFiles: x.files ?? null"}, {"line_number": 36, "line_content": "          }))"}, {"line_number": 37, "line_content": "        }"}, {"line_number": 38, "line_content": "      })"}, {"line_number": 39, "line_content": "    );"}, {"line_number": 40, "line_content": "    yield put(createFlashMessage(response));"}, {"line_number": 41, "line_content": "  } catch (e) {"}, {"line_number": 42, "line_content": "    yield put(verifyCertError(e));"}, {"line_number": 43, "line_content": "  }"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function createSettingsSagas(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.updateUserFlag, updateUserFlagSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.updateMySocials, updateMySocialsSaga),"}, {"line_number": 5, "line_content": "    takeEvery(types.updateMyHonesty, updateMyHonestySaga),"}, {"line_number": 6, "line_content": "    takeEvery(types.updateMySound, updateMySoundSaga),"}, {"line_number": 7, "line_content": "    takeEvery(types.updateMyTheme, updateMyThemeSaga),"}, {"line_number": 8, "line_content": "    takeEvery(types.updateMyQuincyEmail, updateMyQuincyEmailSaga),"}, {"line_number": 9, "line_content": "    takeEvery(types.updateMyPortfolio, updateMyPortfolioSaga),"}, {"line_number": 10, "line_content": "    takeLatest(types.submitNewAbout, submitNewAboutSaga),"}, {"line_number": 11, "line_content": "    takeLatest(types.submitNewUsername, submitNewUsernameSaga),"}, {"line_number": 12, "line_content": "    debounce(2000, types.validateUsername, validateUsernameSaga),"}, {"line_number": 13, "line_content": "    takeLatest(types.submitProfileUI, submitProfileUISaga),"}, {"line_number": 14, "line_content": "    takeEvery(types.verifyCert, verifyCertificationSaga)"}, {"line_number": 15, "line_content": "  ];"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function* tryToShowCodeAllySaga() {"}, {"line_number": 2, "line_content": "  const isSignedIn = yield select(isSignedInSelector);"}, {"line_number": 3, "line_content": "  const hasUserToken = !!(yield select(userTokenSelector));"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  if (!isSignedIn || hasUserToken) {"}, {"line_number": 6, "line_content": "    yield put(showCodeAlly());"}, {"line_number": 7, "line_content": "  } else {"}, {"line_number": 8, "line_content": "    try {"}, {"line_number": 9, "line_content": "      const { data } = yield call(postUserToken);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "      if (data?.userToken) {"}, {"line_number": 12, "line_content": "        yield put(updateUserToken(data.userToken));"}, {"line_number": 13, "line_content": "        yield put(showCodeAlly());"}, {"line_number": 14, "line_content": "      } else {"}, {"line_number": 15, "line_content": "        yield put(createFlashMessage(startProjectErrMessage));"}, {"line_number": 16, "line_content": "      }"}, {"line_number": 17, "line_content": "    } catch (e) {"}, {"line_number": 18, "line_content": "      yield put(createFlashMessage(startProjectErrMessage));"}, {"line_number": 19, "line_content": "    }"}, {"line_number": 20, "line_content": "  }"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createCodeAllySaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.tryToShowCodeAlly, tryToShowCodeAllySaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function* parseMessagesSaga() {"}, {"line_number": 2, "line_content": "  const search = window.location.search.slice();"}, {"line_number": 3, "line_content": "  // TODO(Bouncey): Find a way to clear the search with causing a re-render"}, {"line_number": 4, "line_content": "  if (search) {"}, {"line_number": 5, "line_content": "    const { messages } = qs.parse(search, { arrayFormat: 'index' });"}, {"line_number": 6, "line_content": "    if (messages) {"}, {"line_number": 7, "line_content": "      const flashMap = qs.parse(messages, { arrayFormat: 'index' });"}, {"line_number": 8, "line_content": "      const flash = Object.keys(flashMap).reduce("}, {"line_number": 9, "line_content": "        (acc, type) => ["}, {"line_number": 10, "line_content": "          ...acc,"}, {"line_number": 11, "line_content": "          ...flashMap[type].map(message => ({ type, message }))"}, {"line_number": 12, "line_content": "        ],"}, {"line_number": 13, "line_content": "        []"}, {"line_number": 14, "line_content": "      );"}, {"line_number": 15, "line_content": "      for (let i = 0; i < flash.length; i++) {"}, {"line_number": 16, "line_content": "        yield put(createFlashMessage(flash[i]));"}, {"line_number": 17, "line_content": "      }"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createAppMountSaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.appMount, parseMessagesSaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 59, "lines": [{"line_number": 1, "line_content": "function* saveChallengeSaga() {"}, {"line_number": 2, "line_content": "  const { id, challengeType } = yield select(challengeMetaSelector);"}, {"line_number": 3, "line_content": "  const { challengeFiles } = yield select(challengeDataSelector);"}, {"line_number": 4, "line_content": "  const savedChallenges = yield select(savedChallengesSelector);"}, {"line_number": 5, "line_content": "  const savedChallenge = savedChallenges.find(challenge => challenge.id === id);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  // don't let users save more than once every 5 seconds"}, {"line_number": 8, "line_content": "  if (Date.now() - savedChallenge?.lastSavedDate < 5000) {"}, {"line_number": 9, "line_content": "    return yield put("}, {"line_number": 10, "line_content": "      createFlashMessage({"}, {"line_number": 11, "line_content": "        type: 'danger',"}, {"line_number": 12, "line_content": "        message: FlashMessages.CodeSaveLess"}, {"line_number": 13, "line_content": "      })"}, {"line_number": 14, "line_content": "    );"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "  // only allow saving of multifileCertProject's"}, {"line_number": 18, "line_content": "  if (challengeType === challengeTypes.multifileCertProject) {"}, {"line_number": 19, "line_content": "    const body = standardizeRequestBody({ id, challengeFiles, challengeType });"}, {"line_number": 20, "line_content": "    const bodySizeInBytes = getStringSizeInBytes(body);"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    if (!bodySizeFits(bodySizeInBytes)) {"}, {"line_number": 23, "line_content": "      return yield put("}, {"line_number": 24, "line_content": "        createFlashMessage({"}, {"line_number": 25, "line_content": "          type: 'danger',"}, {"line_number": 26, "line_content": "          message: FlashMessages.ChallengeSaveTooBig,"}, {"line_number": 27, "line_content": "          variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes }"}, {"line_number": 28, "line_content": "        })"}, {"line_number": 29, "line_content": "      );"}, {"line_number": 30, "line_content": "    } else {"}, {"line_number": 31, "line_content": "      try {"}, {"line_number": 32, "line_content": "        const { data } = yield call(postSaveChallenge, body);"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "        if (data?.message) {"}, {"line_number": 35, "line_content": "          yield put(createFlashMessage(data));"}, {"line_number": 36, "line_content": "        } else if (data?.savedChallenges) {"}, {"line_number": 37, "line_content": "          yield put("}, {"line_number": 38, "line_content": "            saveChallengeComplete("}, {"line_number": 39, "line_content": "              mapFilesToChallengeFiles(data.savedChallenges)"}, {"line_number": 40, "line_content": "            )"}, {"line_number": 41, "line_content": "          );"}, {"line_number": 42, "line_content": "          yield put("}, {"line_number": 43, "line_content": "            createFlashMessage({"}, {"line_number": 44, "line_content": "              type: 'success',"}, {"line_number": 45, "line_content": "              message: FlashMessages.CodeSaved"}, {"line_number": 46, "line_content": "            })"}, {"line_number": 47, "line_content": "          );"}, {"line_number": 48, "line_content": "        }"}, {"line_number": 49, "line_content": "      } catch (e) {"}, {"line_number": 50, "line_content": "        yield put("}, {"line_number": 51, "line_content": "          createFlashMessage({"}, {"line_number": 52, "line_content": "            type: 'danger',"}, {"line_number": 53, "line_content": "            message: FlashMessages.CodeSaveError"}, {"line_number": 54, "line_content": "          })"}, {"line_number": 55, "line_content": "        );"}, {"line_number": 56, "line_content": "      }"}, {"line_number": 57, "line_content": "    }"}, {"line_number": 58, "line_content": "  }"}, {"line_number": 59, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createSaveChallengeSaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.saveChallenge, saveChallengeSaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function delay(time = 0, fn) {"}, {"line_number": 2, "line_content": "  return setTimeout(fn, time);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 70, "lines": [{"line_number": 1, "line_content": "function failedUpdateEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  const storeUpdates = action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.updateFailed),"}, {"line_number": 4, "line_content": "    tap(({ payload = {} }) => {"}, {"line_number": 5, "line_content": "      if ('endpoint' in payload && 'payload' in payload) {"}, {"line_number": 6, "line_content": "        const failures = store.get(key) || [];"}, {"line_number": 7, "line_content": "        payload.id = uuid();"}, {"line_number": 8, "line_content": "        store.set(key, [...failures, payload]);"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "    }),"}, {"line_number": 11, "line_content": "    map(() => serverStatusChange(false))"}, {"line_number": 12, "line_content": "  );"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  const flushUpdates = action$.pipe("}, {"line_number": 15, "line_content": "    ofType(actionTypes.fetchUserComplete, actionTypes.updateComplete),"}, {"line_number": 16, "line_content": "    filter(() => isSignedInSelector(state$.value)),"}, {"line_number": 17, "line_content": "    filter(() => store.get(key)),"}, {"line_number": 18, "line_content": "    filter(() => isServerOnlineSelector(state$.value)),"}, {"line_number": 19, "line_content": "    tap(() => {"}, {"line_number": 20, "line_content": "      let failures = store.get(key);"}, {"line_number": 21, "line_content": "      failures = Array.isArray(failures) ? failures : [];"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "      let submitableFailures = failures.filter(isSubmitable);"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "      // delete unsubmitable failed challenges"}, {"line_number": 26, "line_content": "      store.set(key, submitableFailures);"}, {"line_number": 27, "line_content": "      failures = submitableFailures;"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "      let delayTime = 100;"}, {"line_number": 30, "line_content": "      const batch = failures.map((update, i) => {"}, {"line_number": 31, "line_content": "        // we stagger the updates here so we don't hammer the server"}, {"line_number": 32, "line_content": "        // *********************************************************"}, {"line_number": 33, "line_content": "        // progressively increase additional delay by the amount of updates"}, {"line_number": 34, "line_content": "        // 1st: 100ms delay"}, {"line_number": 35, "line_content": "        // 2nd: 200ms delay"}, {"line_number": 36, "line_content": "        // 3rd: 400ms delay"}, {"line_number": 37, "line_content": "        // 4th: 700ms delay"}, {"line_number": 38, "line_content": "        // 5th: 1100ms delay"}, {"line_number": 39, "line_content": "        // 6th: 1600ms delay"}, {"line_number": 40, "line_content": "        // and so-on"}, {"line_number": 41, "line_content": "        delayTime += 100 * i;"}, {"line_number": 42, "line_content": "        return delay(delayTime, () =>"}, {"line_number": 43, "line_content": "          postUpdate$(update)"}, {"line_number": 44, "line_content": "            .pipe("}, {"line_number": 45, "line_content": "              switchMap(({ response, data }) => {"}, {"line_number": 46, "line_content": "                if (data?.message || isGoodXHRStatus(response?.status)) {"}, {"line_number": 47, "line_content": "                  console.info(`${update.id} succeeded`);"}, {"line_number": 48, "line_content": "                  // the request completed successfully"}, {"line_number": 49, "line_content": "                  const failures = store.get(key) || [];"}, {"line_number": 50, "line_content": "                  const newFailures = failures.filter(x => x.id !== update.id);"}, {"line_number": 51, "line_content": "                  store.set(key, newFailures);"}, {"line_number": 52, "line_content": "                }"}, {"line_number": 53, "line_content": "                return empty();"}, {"line_number": 54, "line_content": "              }),"}, {"line_number": 55, "line_content": "              catchError(() => empty())"}, {"line_number": 56, "line_content": "            )"}, {"line_number": 57, "line_content": "            .toPromise()"}, {"line_number": 58, "line_content": "        );"}, {"line_number": 59, "line_content": "      });"}, {"line_number": 60, "line_content": "      Promise.all(batch)"}, {"line_number": 61, "line_content": "        .then(() => console.info('progress updates processed where possible'))"}, {"line_number": 62, "line_content": "        .catch(err =>"}, {"line_number": 63, "line_content": "          console.warn('unable to process progress updates', err.message)"}, {"line_number": 64, "line_content": "        );"}, {"line_number": 65, "line_content": "    }),"}, {"line_number": 66, "line_content": "    ignoreElements()"}, {"line_number": 67, "line_content": "  );"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "  return merge(storeUpdates, flushUpdates);"}, {"line_number": 70, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function updateCompleteEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(types.updateComplete),"}, {"line_number": 4, "line_content": "    filter(() => !isServerOnlineSelector(state$.value)),"}, {"line_number": 5, "line_content": "    mapTo(serverStatusChange(true))"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function* addDonationSaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    yield call(addDonation, payload);"}, {"line_number": 4, "line_content": "    yield put(addDonationComplete());"}, {"line_number": 5, "line_content": "    yield call(setDonationCookie);"}, {"line_number": 6, "line_content": "  } catch (error) {"}, {"line_number": 7, "line_content": "    const data ="}, {"line_number": 8, "line_content": "      error.response && error.response.data"}, {"line_number": 9, "line_content": "        ? error.response.data"}, {"line_number": 10, "line_content": "        : {"}, {"line_number": 11, "line_content": "            message: defaultDonationErrorMessage"}, {"line_number": 12, "line_content": "          };"}, {"line_number": 13, "line_content": "    yield put(addDonationError(data.message));"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function* postChargeStripeSaga({ payload }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    yield call(postChargeStripe, payload);"}, {"line_number": 4, "line_content": "    yield put(postChargeStripeComplete());"}, {"line_number": 5, "line_content": "    yield call(setDonationCookie);"}, {"line_number": 6, "line_content": "  } catch (error) {"}, {"line_number": 7, "line_content": "    const err ="}, {"line_number": 8, "line_content": "      error.response && error.response.data"}, {"line_number": 9, "line_content": "        ? error.response.data.error"}, {"line_number": 10, "line_content": "        : defaultDonationErrorMessage;"}, {"line_number": 11, "line_content": "    yield put(postChargeStripeError(err));"}, {"line_number": 12, "line_content": "  }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function* showDonateModalSaga() {"}, {"line_number": 2, "line_content": "  let shouldRequestDonation = yield select(shouldRequestDonationSelector);"}, {"line_number": 3, "line_content": "  if (shouldRequestDonation) {"}, {"line_number": 4, "line_content": "    yield delay(200);"}, {"line_number": 5, "line_content": "    const recentlyClaimedBlock = yield select(recentlyClaimedBlockSelector);"}, {"line_number": 6, "line_content": "    yield put(openDonationModal());"}, {"line_number": 7, "line_content": "    yield take(appTypes.closeDonationModal);"}, {"line_number": 8, "line_content": "    if (recentlyClaimedBlock) {"}, {"line_number": 9, "line_content": "      yield put(preventBlockDonationRequests());"}, {"line_number": 10, "line_content": "    } else {"}, {"line_number": 11, "line_content": "      yield put(preventProgressDonationRequests());"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function* stripeCardErrorHandler("}, {"line_number": 2, "line_content": "  error,"}, {"line_number": 3, "line_content": "  handleAuthentication,"}, {"line_number": 4, "line_content": "  clientSecret,"}, {"line_number": 5, "line_content": "  paymentMethodId"}, {"line_number": 6, "line_content": ") {"}, {"line_number": 7, "line_content": "  if (error.type === 'UserActionRequired' && clientSecret) {"}, {"line_number": 8, "line_content": "    yield handleAuthentication(clientSecret, paymentMethodId)"}, {"line_number": 9, "line_content": "      .then(result => {"}, {"line_number": 10, "line_content": "        if (result?.paymentIntent?.status !== 'succeeded')"}, {"line_number": 11, "line_content": "          throw result.error || { type: 'StripeAuthorizationFailed' };"}, {"line_number": 12, "line_content": "      })"}, {"line_number": 13, "line_content": "      .catch(error => {"}, {"line_number": 14, "line_content": "        throw error;"}, {"line_number": 15, "line_content": "      });"}, {"line_number": 16, "line_content": "  } else {"}, {"line_number": 17, "line_content": "    throw error;"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function* postChargeStripeCardSaga({"}, {"line_number": 2, "line_content": "  payload: { paymentMethodId, amount, duration, handleAuthentication }"}, {"line_number": 3, "line_content": "}) {"}, {"line_number": 4, "line_content": "  try {"}, {"line_number": 5, "line_content": "    const optimizedPayload = { paymentMethodId, amount, duration };"}, {"line_number": 6, "line_content": "    const {"}, {"line_number": 7, "line_content": "      data: { error }"}, {"line_number": 8, "line_content": "    } = yield call(postChargeStripeCard, optimizedPayload);"}, {"line_number": 9, "line_content": "    if (error) {"}, {"line_number": 10, "line_content": "      yield stripeCardErrorHandler("}, {"line_number": 11, "line_content": "        error,"}, {"line_number": 12, "line_content": "        handleAuthentication,"}, {"line_number": 13, "line_content": "        error.client_secret,"}, {"line_number": 14, "line_content": "        paymentMethodId,"}, {"line_number": 15, "line_content": "        optimizedPayload"}, {"line_number": 16, "line_content": "      );"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "    yield call(addDonation, optimizedPayload);"}, {"line_number": 19, "line_content": "    yield put(postChargeStripeCardComplete());"}, {"line_number": 20, "line_content": "    yield call(setDonationCookie);"}, {"line_number": 21, "line_content": "  } catch (error) {"}, {"line_number": 22, "line_content": "    const errorMessage = error.message || defaultDonationErrorMessage;"}, {"line_number": 23, "line_content": "    yield put(postChargeStripeCardError(errorMessage));"}, {"line_number": 24, "line_content": "  }"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function* setDonationCookie() {"}, {"line_number": 2, "line_content": "  const isDonating = yield select(isDonatingSelector);"}, {"line_number": 3, "line_content": "  const isDonorCookieSet = document.cookie"}, {"line_number": 4, "line_content": "    .split(';')"}, {"line_number": 5, "line_content": "    .some(item => item.trim().startsWith('isDonor=true'));"}, {"line_number": 6, "line_content": "  if (isDonating) {"}, {"line_number": 7, "line_content": "    if (!isDonorCookieSet) {"}, {"line_number": 8, "line_content": "      document.cookie = 'isDonor=true';"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "  }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function createDonationSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.tryToShowDonationModal, showDonateModalSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.addDonation, addDonationSaga),"}, {"line_number": 5, "line_content": "    takeLeading(types.postChargeStripe, postChargeStripeSaga),"}, {"line_number": 6, "line_content": "    takeLeading(types.postChargeStripeCard, postChargeStripeCardSaga),"}, {"line_number": 7, "line_content": "    takeEvery(types.fetchUserComplete, setDonationCookie)"}, {"line_number": 8, "line_content": "  ];"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createUserTokenSaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.deleteUserToken, deleteUserTokenSaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function* deleteUserTokenSaga() {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(deleteUserToken);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (data && Object.prototype.hasOwnProperty.call(data, 'userToken')) {"}, {"line_number": 6, "line_content": "      yield put(deleteUserTokenComplete());"}, {"line_number": 7, "line_content": "      yield put(createFlashMessage(message.deleted));"}, {"line_number": 8, "line_content": "    } else {"}, {"line_number": 9, "line_content": "      yield put(createFlashMessage(message.deleteErr));"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "  } catch (e) {"}, {"line_number": 12, "line_content": "    yield put(createFlashMessage(message.deleteErr));"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function* fetchSessionUser() {"}, {"line_number": 2, "line_content": "  if (!jwt) {"}, {"line_number": 3, "line_content": "    yield put(fetchUserComplete({ user: {}, username: '' }));"}, {"line_number": 4, "line_content": "    return;"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  try {"}, {"line_number": 7, "line_content": "    const {"}, {"line_number": 8, "line_content": "      data: { user = {}, result = '', sessionMeta = {} }"}, {"line_number": 9, "line_content": "    } = yield call(getSessionUser);"}, {"line_number": 10, "line_content": "    const appUser = user[result] || {};"}, {"line_number": 11, "line_content": "    yield put("}, {"line_number": 12, "line_content": "      fetchUserComplete({ user: appUser, username: result, sessionMeta })"}, {"line_number": 13, "line_content": "    );"}, {"line_number": 14, "line_content": "  } catch (e) {"}, {"line_number": 15, "line_content": "    console.log('failed to fetch user', e);"}, {"line_number": 16, "line_content": "    yield put(fetchUserError(e));"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function* fetchOtherUser({ payload: maybeUser = '' }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const maybeUserLC = maybeUser.toLowerCase();"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const {"}, {"line_number": 6, "line_content": "      data: { entities: { user = {} } = {}, result = '' }"}, {"line_number": 7, "line_content": "    } = yield call(getUserProfile, maybeUserLC);"}, {"line_number": 8, "line_content": "    const otherUser = user[result] || {};"}, {"line_number": 9, "line_content": "    yield put("}, {"line_number": 10, "line_content": "      fetchProfileForUserComplete({ user: otherUser, username: result })"}, {"line_number": 11, "line_content": "    );"}, {"line_number": 12, "line_content": "  } catch (e) {"}, {"line_number": 13, "line_content": "    yield put(fetchProfileForUserError(e));"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createFetchUserSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.fetchUser, fetchSessionUser),"}, {"line_number": 4, "line_content": "    takeEvery(types.fetchProfileForUser, fetchOtherUser)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function* getShowCertSaga({ payload: { username, certSlug } }) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    const { data } = yield call(getShowCert, username, certSlug);"}, {"line_number": 4, "line_content": "    const { messages } = data;"}, {"line_number": 5, "line_content": "    if (messages && messages.length) {"}, {"line_number": 6, "line_content": "      for (let i = 0; i < messages.length; i++) {"}, {"line_number": 7, "line_content": "        yield put(createFlashMessage(messages[i]));"}, {"line_number": 8, "line_content": "      }"}, {"line_number": 9, "line_content": "      yield call(navigate, '/');"}, {"line_number": 10, "line_content": "      return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "    yield put(showCertComplete(data));"}, {"line_number": 13, "line_content": "  } catch (e) {"}, {"line_number": 14, "line_content": "    yield put(showCertError(e));"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createShowCertSaga(types) {"}, {"line_number": 2, "line_content": "  return [takeEvery(types.showCert, getShowCertSaga)];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 40, "lines": [{"line_number": 1, "line_content": "function* callGaType({ payload: { type, data } }) {"}, {"line_number": 2, "line_content": "  if ("}, {"line_number": 3, "line_content": "    type === 'event' &&"}, {"line_number": 4, "line_content": "    data.category.toLowerCase().includes('donation') &&"}, {"line_number": 5, "line_content": "    aBTestConfig.isTesting"}, {"line_number": 6, "line_content": "  ) {"}, {"line_number": 7, "line_content": "    const email = yield select(emailSelector);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // a b test results are only reported when user is signed in and has email"}, {"line_number": 10, "line_content": "    if (email) {"}, {"line_number": 11, "line_content": "      const completedChallengeTotal = yield select(completedChallengesSelector);"}, {"line_number": 12, "line_content": "      const completedChallengeSession = yield select(completionCountSelector);"}, {"line_number": 13, "line_content": "      let viewType = null;"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "      // set the modal type"}, {"line_number": 16, "line_content": "      if (data.action.toLowerCase().includes('modal')) {"}, {"line_number": 17, "line_content": "        const recentlyClaimedBlock = yield select(recentlyClaimedBlockSelector);"}, {"line_number": 18, "line_content": "        viewType = recentlyClaimedBlock ? 'block' : 'progress';"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "      const customDimensions = {"}, {"line_number": 22, "line_content": "        // URL;"}, {"line_number": 23, "line_content": "        dimension1: window.location.href,"}, {"line_number": 24, "line_content": "        // Challenges_Completed_Session"}, {"line_number": 25, "line_content": "        dimension2: completedChallengeSession,"}, {"line_number": 26, "line_content": "        // Challenges_Completed_Total"}, {"line_number": 27, "line_content": "        dimension3: completedChallengeTotal.length,"}, {"line_number": 28, "line_content": "        // Test_Type"}, {"line_number": 29, "line_content": "        dimension4: aBTestConfig.type,"}, {"line_number": 30, "line_content": "        // Test_Variation"}, {"line_number": 31, "line_content": "        dimension5: emailToABVariant(email).isVariantA ? 'A' : 'B',"}, {"line_number": 32, "line_content": "        // View_Type"}, {"line_number": 33, "line_content": "        dimension6: viewType"}, {"line_number": 34, "line_content": "      };"}, {"line_number": 35, "line_content": "      ga.set(customDimensions);"}, {"line_number": 36, "line_content": "    }"}, {"line_number": 37, "line_content": "  }"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "  yield call(GaTypes[type], data);"}, {"line_number": 40, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* createGaSaga(types) {"}, {"line_number": 2, "line_content": "  yield all([takeEvery(types.executeGA, callGaType)]);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* rootSaga() {"}, {"line_number": 2, "line_content": "  yield all([...errorSagas, ...appSagas, ...challengeSagas, ...settingsSagas]);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function setKeyboardShortcuts(setting) {"}, {"line_number": 2, "line_content": "  store.set(shortcutsKey, setting);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function* updateLocalKeyboardShortcutsSaga({ payload }) {"}, {"line_number": 2, "line_content": "  const { user, keyboardShortcuts } = payload ?? {};"}, {"line_number": 3, "line_content": "  if (user) {"}, {"line_number": 4, "line_content": "    const { keyboardShortcuts = false } = user;"}, {"line_number": 5, "line_content": "    setKeyboardShortcuts(keyboardShortcuts);"}, {"line_number": 6, "line_content": "  } else if (typeof keyboardShortcuts !== 'undefined') {"}, {"line_number": 7, "line_content": "    setKeyboardShortcuts(keyboardShortcuts);"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createKeyboardShortcuts(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.fetchUserComplete, updateLocalKeyboardShortcutsSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.updateUserFlagComplete, updateLocalKeyboardShortcutsSaga)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function format(x) {"}, {"line_number": 2, "line_content": "  // we're trying to mimic console.log, so we avoid wrapping strings in quotes:"}, {"line_number": 3, "line_content": "  if (typeof x === 'string') return x;"}, {"line_number": 4, "line_content": "  else if (x instanceof Set) {"}, {"line_number": 5, "line_content": "    return `Set(${x.size}) {${Array.from(x).join(', ')}}`;"}, {"line_number": 6, "line_content": "  } else if (x instanceof Map) {"}, {"line_number": 7, "line_content": "    return `Map(${x.size}) {${Array.from("}, {"line_number": 8, "line_content": "      x.entries(),"}, {"line_number": 9, "line_content": "      ([k, v]) => `${k} => ${v}`"}, {"line_number": 10, "line_content": "    ).join(', ')}})`;"}, {"line_number": 11, "line_content": "  } else if (typeof x === 'bigint') {"}, {"line_number": 12, "line_content": "    return x.toString() + 'n';"}, {"line_number": 13, "line_content": "  } else if (typeof x === 'symbol') {"}, {"line_number": 14, "line_content": "    return x.toString();"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "  return inspect(x);"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function concatHtml({ required = [], template, contents } = {}) {"}, {"line_number": 2, "line_content": "  const embedSource = template ? _template(template) : ({ source }) => source;"}, {"line_number": 3, "line_content": "  const head = required"}, {"line_number": 4, "line_content": "    .map(({ link, src }) => {"}, {"line_number": 5, "line_content": "      if (link && src) {"}, {"line_number": 6, "line_content": "        throw new Error(`"}, {"line_number": 7, "line_content": "A required file can not have both a src and a link: src = ${src}, link = ${link}"}, {"line_number": 8, "line_content": "`);"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "      if (src) {"}, {"line_number": 11, "line_content": "        return `<script src='${src}' type='text/javascript'></script>`;"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": "      if (link) {"}, {"line_number": 14, "line_content": "        return `<link href='${link}' rel='stylesheet' />`;"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "      return '';"}, {"line_number": 17, "line_content": "    })"}, {"line_number": 18, "line_content": "    .join('\\n');"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  return `<head>${head}</head>${embedSource({ source: contents })}`;"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function loopProtectCB(line) {"}, {"line_number": 2, "line_content": "  console.log("}, {"line_number": 3, "line_content": "    `Potential infinite loop detected on line ${line}. Tests may fail if this is not changed.`"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function testLoopProtectCB(line) {"}, {"line_number": 2, "line_content": "  console.log("}, {"line_number": 3, "line_content": "    `Potential infinite loop detected on line ${line}. Tests may be failing because of this.`"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function loadBabel() {"}, {"line_number": 2, "line_content": "  if (Babel) return;"}, {"line_number": 3, "line_content": "  /* eslint-disable no-inline-comments */"}, {"line_number": 4, "line_content": "  Babel = await import("}, {"line_number": 5, "line_content": "    /* webpackChunkName: \"@babel/standalone\" */ '@babel/standalone'"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": "  /* eslint-enable no-inline-comments */"}, {"line_number": 8, "line_content": "  Babel.registerPlugin("}, {"line_number": 9, "line_content": "    'loopProtection',"}, {"line_number": 10, "line_content": "    protect(protectTimeout, loopProtectCB)"}, {"line_number": 11, "line_content": "  );"}, {"line_number": 12, "line_content": "  Babel.registerPlugin("}, {"line_number": 13, "line_content": "    'testLoopProtection',"}, {"line_number": 14, "line_content": "    protect(testProtectTimeout, testLoopProtectCB, loopsPerTimeoutCheck)"}, {"line_number": 15, "line_content": "  );"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "async function loadPresetEnv() {"}, {"line_number": 2, "line_content": "  /* eslint-disable no-inline-comments */"}, {"line_number": 3, "line_content": "  if (!presetEnv)"}, {"line_number": 4, "line_content": "    presetEnv = await import("}, {"line_number": 5, "line_content": "      /* webpackChunkName: \"@babel/preset-env\" */ '@babel/preset-env'"}, {"line_number": 6, "line_content": "    );"}, {"line_number": 7, "line_content": "  /* eslint-enable no-inline-comments */"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  babelOptionsJSBase = {"}, {"line_number": 10, "line_content": "    presets: [presetEnv]"}, {"line_number": 11, "line_content": "  };"}, {"line_number": 12, "line_content": "  babelOptionsJS = {"}, {"line_number": 13, "line_content": "    ...babelOptionsJSBase,"}, {"line_number": 14, "line_content": "    plugins: ['testLoopProtection']"}, {"line_number": 15, "line_content": "  };"}, {"line_number": 16, "line_content": "  babelOptionsJSPreview = {"}, {"line_number": 17, "line_content": "    ...babelOptionsJSBase,"}, {"line_number": 18, "line_content": "    plugins: ['loopProtection']"}, {"line_number": 19, "line_content": "  };"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function loadPresetReact() {"}, {"line_number": 2, "line_content": "  /* eslint-disable no-inline-comments */"}, {"line_number": 3, "line_content": "  if (!presetReact)"}, {"line_number": 4, "line_content": "    presetReact = await import("}, {"line_number": 5, "line_content": "      /* webpackChunkName: \"@babel/preset-react\" */ '@babel/preset-react'"}, {"line_number": 6, "line_content": "    );"}, {"line_number": 7, "line_content": "  if (!presetEnv)"}, {"line_number": 8, "line_content": "    presetEnv = await import("}, {"line_number": 9, "line_content": "      /* webpackChunkName: \"@babel/preset-env\" */ '@babel/preset-env'"}, {"line_number": 10, "line_content": "    );"}, {"line_number": 11, "line_content": "  /* eslint-enable no-inline-comments */"}, {"line_number": 12, "line_content": "  babelOptionsJSX = {"}, {"line_number": 13, "line_content": "    plugins: ['loopProtection'],"}, {"line_number": 14, "line_content": "    presets: [presetEnv, presetReact]"}, {"line_number": 15, "line_content": "  };"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function tryTransform(wrap = identity) {"}, {"line_number": 2, "line_content": "  return function transformWrappedPoly(source) {"}, {"line_number": 3, "line_content": "    const result = attempt(wrap, source);"}, {"line_number": 4, "line_content": "    if (isError(result)) {"}, {"line_number": 5, "line_content": "      // note(Bouncey): Error thrown here to collapse the build pipeline"}, {"line_number": 6, "line_content": "      // At the minute, it will not bubble up"}, {"line_number": 7, "line_content": "      // We collapse the pipeline so the app doesn't fall over trying"}, {"line_number": 8, "line_content": "      // parse bad code (syntax/type errors etc...)"}, {"line_number": 9, "line_content": "      throw result;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    return result;"}, {"line_number": 12, "line_content": "  };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getBabelOptions({ preview = false, protect = true }) {"}, {"line_number": 2, "line_content": "  let options = babelOptionsJSBase;"}, {"line_number": 3, "line_content": "  // we always protect the preview, since it evaluates as the user types and"}, {"line_number": 4, "line_content": "  // they may briefly have infinite looping code accidentally"}, {"line_number": 5, "line_content": "  if (protect) {"}, {"line_number": 6, "line_content": "    options = preview ? babelOptionsJSPreview : babelOptionsJS;"}, {"line_number": 7, "line_content": "  } else {"}, {"line_number": 8, "line_content": "    options = preview ? babelOptionsJSPreview : options;"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "  return options;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "async function transformSASS(documentElement) {"}, {"line_number": 2, "line_content": "  // we only teach scss syntax, not sass. Also the compiler does not seem to be"}, {"line_number": 3, "line_content": "  // able to deal with sass."}, {"line_number": 4, "line_content": "  const styleTags = documentElement.querySelectorAll("}, {"line_number": 5, "line_content": "    'style[type~=\"text/scss\"]'"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  await Promise.all("}, {"line_number": 9, "line_content": "    [].map.call(styleTags, async style => {"}, {"line_number": 10, "line_content": "      style.type = 'text/css';"}, {"line_number": 11, "line_content": "      style.innerHTML = await sassWorker.execute(style.innerHTML, 5000).done;"}, {"line_number": 12, "line_content": "    })"}, {"line_number": 13, "line_content": "  );"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function transformScript(documentElement) {"}, {"line_number": 2, "line_content": "  await loadBabel();"}, {"line_number": 3, "line_content": "  await loadPresetEnv();"}, {"line_number": 4, "line_content": "  const scriptTags = documentElement.querySelectorAll('script');"}, {"line_number": 5, "line_content": "  scriptTags.forEach(script => {"}, {"line_number": 6, "line_content": "    script.innerHTML = tryTransform(babelTransformCode(babelOptionsJS))("}, {"line_number": 7, "line_content": "      script.innerHTML"}, {"line_number": 8, "line_content": "    );"}, {"line_number": 9, "line_content": "  });"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function challengeFilesToObject(challengeFiles) {"}, {"line_number": 2, "line_content": "  const indexHtml = challengeFiles.find(file => file.fileKey === 'indexhtml');"}, {"line_number": 3, "line_content": "  const indexJsx = challengeFiles.find("}, {"line_number": 4, "line_content": "    file => file.fileKey === 'indexjs' && file.history[0] === 'index.jsx'"}, {"line_number": 5, "line_content": "  );"}, {"line_number": 6, "line_content": "  const stylesCss = challengeFiles.find(file => file.fileKey === 'stylescss');"}, {"line_number": 7, "line_content": "  const scriptJs = challengeFiles.find(file => file.fileKey === 'scriptjs');"}, {"line_number": 8, "line_content": "  return { indexHtml, indexJsx, stylesCss, scriptJs };"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function* currentChallengeSaga({ payload: id }) {"}, {"line_number": 2, "line_content": "  yield store.set(CURRENT_CHALLENGE_KEY, id);"}, {"line_number": 3, "line_content": "  //     // Temporarily removed to reduce calls to database"}, {"line_number": 4, "line_content": "  //     // will need to re-import things at the top"}, {"line_number": 5, "line_content": "  //     // yield call(post, update.endpoint, update.payload);"}, {"line_number": 6, "line_content": "  // const isSignedIn = yield select(isSignedInSelector);"}, {"line_number": 7, "line_content": "  // if (isSignedIn) {"}, {"line_number": 8, "line_content": "  //   const update = {"}, {"line_number": 9, "line_content": "  //     endpoint: '/update-my-current-challenge',"}, {"line_number": 10, "line_content": "  //     payload: {"}, {"line_number": 11, "line_content": "  //       currentChallengeId: id"}, {"line_number": 12, "line_content": "  //     }"}, {"line_number": 13, "line_content": "  //   };"}, {"line_number": 14, "line_content": "  //   try {"}, {"line_number": 15, "line_content": "  //     yield put(updateComplete());"}, {"line_number": 16, "line_content": "  //   } catch {"}, {"line_number": 17, "line_content": "  //     yield put(updateFailed(update));"}, {"line_number": 18, "line_content": "  //   }"}, {"line_number": 19, "line_content": "  // }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createCurrentChallengeSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeEvery(types.challengeMounted, currentChallengeSaga),"}, {"line_number": 4, "line_content": "    takeEvery(types.challengeMounted, updateSuccessMessageSaga)"}, {"line_number": 5, "line_content": "  ];"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* updateSuccessMessageSaga() {"}, {"line_number": 2, "line_content": "  yield put(updateSuccessMessage(randomCompliment()));"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function codeLockEpic(action$) {"}, {"line_number": 2, "line_content": "  return action$.pipe(ofType(actionTypes.updateFile), map(unlockCode));"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "function* executeCancellableChallengeSaga(payload) {"}, {"line_number": 2, "line_content": "  const { challengeType, id } = yield select(challengeMetaSelector);"}, {"line_number": 3, "line_content": "  const { challengeFiles } = yield select(challengeDataSelector);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  // if multifileCertProject, see if body/code size is submittable"}, {"line_number": 6, "line_content": "  if (challengeType === challengeTypes.multifileCertProject) {"}, {"line_number": 7, "line_content": "    const body = standardizeRequestBody({ id, challengeFiles, challengeType });"}, {"line_number": 8, "line_content": "    const bodySizeInBytes = getStringSizeInBytes(body);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (!bodySizeFits(bodySizeInBytes)) {"}, {"line_number": 11, "line_content": "      return yield put("}, {"line_number": 12, "line_content": "        createFlashMessage({"}, {"line_number": 13, "line_content": "          type: 'danger',"}, {"line_number": 14, "line_content": "          message: FlashMessages.ChallengeSubmitTooBig,"}, {"line_number": 15, "line_content": "          variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes }"}, {"line_number": 16, "line_content": "        })"}, {"line_number": 17, "line_content": "      );"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  if (previewTask) {"}, {"line_number": 22, "line_content": "    yield cancel(previewTask);"}, {"line_number": 23, "line_content": "  }"}, {"line_number": 24, "line_content": "  // executeChallenge with payload containing {showCompletionModal}"}, {"line_number": 25, "line_content": "  const task = yield fork(executeChallengeSaga, payload);"}, {"line_number": 26, "line_content": "  previewTask = yield fork(previewChallengeSaga, { flushLogs: false });"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "  yield take(actionTypes.cancelTests);"}, {"line_number": 29, "line_content": "  yield cancel(task);"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function* executeCancellablePreviewSaga() {"}, {"line_number": 2, "line_content": "  previewTask = yield fork(previewChallengeSaga);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 55, "lines": [{"line_number": 1, "line_content": "function* executeChallengeSaga({ payload }) {"}, {"line_number": 2, "line_content": "  const isBuildEnabled = yield select(isBuildEnabledSelector);"}, {"line_number": 3, "line_content": "  if (!isBuildEnabled) {"}, {"line_number": 4, "line_content": "    return;"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const consoleProxy = yield channel();"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  try {"}, {"line_number": 10, "line_content": "    yield put(initLogs());"}, {"line_number": 11, "line_content": "    yield put(initConsole(i18next.t('learn.running-tests')));"}, {"line_number": 12, "line_content": "    // reset tests to initial state"}, {"line_number": 13, "line_content": "    const tests = (yield select(challengeTestsSelector)).map("}, {"line_number": 14, "line_content": "      ({ text, testString }) => ({ text, testString })"}, {"line_number": 15, "line_content": "    );"}, {"line_number": 16, "line_content": "    yield put(updateTests(tests));"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    yield fork(takeEveryLog, consoleProxy);"}, {"line_number": 19, "line_content": "    const proxyLogger = args => consoleProxy.put(args);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    const challengeData = yield select(challengeDataSelector);"}, {"line_number": 22, "line_content": "    const challengeMeta = yield select(challengeMetaSelector);"}, {"line_number": 23, "line_content": "    const protect = isLoopProtected(challengeMeta);"}, {"line_number": 24, "line_content": "    const buildData = yield buildChallengeData(challengeData, {"}, {"line_number": 25, "line_content": "      preview: false,"}, {"line_number": 26, "line_content": "      protect,"}, {"line_number": 27, "line_content": "      usesTestRunner: true"}, {"line_number": 28, "line_content": "    });"}, {"line_number": 29, "line_content": "    const document = yield getContext('document');"}, {"line_number": 30, "line_content": "    const testRunner = yield call("}, {"line_number": 31, "line_content": "      getTestRunner,"}, {"line_number": 32, "line_content": "      buildData,"}, {"line_number": 33, "line_content": "      { proxyLogger, removeComments: challengeMeta.removeComments },"}, {"line_number": 34, "line_content": "      document"}, {"line_number": 35, "line_content": "    );"}, {"line_number": 36, "line_content": "    const testResults = yield executeTests(testRunner, tests);"}, {"line_number": 37, "line_content": "    yield put(updateTests(testResults));"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    const challengeComplete = testResults.every(test => test.pass && !test.err);"}, {"line_number": 40, "line_content": "    if (challengeComplete) {"}, {"line_number": 41, "line_content": "      playTone('tests-completed');"}, {"line_number": 42, "line_content": "    } else {"}, {"line_number": 43, "line_content": "      playTone('tests-failed');"}, {"line_number": 44, "line_content": "    }"}, {"line_number": 45, "line_content": "    if (challengeComplete && payload?.showCompletionModal) {"}, {"line_number": 46, "line_content": "      yield put(openModal('completion'));"}, {"line_number": 47, "line_content": "    }"}, {"line_number": 48, "line_content": "    yield put(updateConsole(i18next.t('learn.tests-completed')));"}, {"line_number": 49, "line_content": "    yield put(logsToConsole(i18next.t('learn.console-output')));"}, {"line_number": 50, "line_content": "  } catch (e) {"}, {"line_number": 51, "line_content": "    yield put(updateConsole(e));"}, {"line_number": 52, "line_content": "  } finally {"}, {"line_number": 53, "line_content": "    consoleProxy.close();"}, {"line_number": 54, "line_content": "  }"}, {"line_number": 55, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function* takeEveryLog(channel) {"}, {"line_number": 2, "line_content": "  // TODO: move all stringifying and escaping into the reducer so there is a"}, {"line_number": 3, "line_content": "  // single place responsible for formatting the logs."}, {"line_number": 4, "line_content": "  yield takeEvery(channel, function* (args) {"}, {"line_number": 5, "line_content": "    yield put(updateLogs(escape(args)));"}, {"line_number": 6, "line_content": "  });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function* takeEveryConsole(channel) {"}, {"line_number": 2, "line_content": "  // TODO: move all stringifying and escaping into the reducer so there is a"}, {"line_number": 3, "line_content": "  // single place responsible for formatting the console output."}, {"line_number": 4, "line_content": "  yield takeEvery(channel, function* (args) {"}, {"line_number": 5, "line_content": "    yield put(updateConsole(escape(args)));"}, {"line_number": 6, "line_content": "  });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function* buildChallengeData(challengeData, options) {"}, {"line_number": 2, "line_content": "  try {"}, {"line_number": 3, "line_content": "    return yield call(buildChallenge, challengeData, options);"}, {"line_number": 4, "line_content": "  } catch (e) {"}, {"line_number": 5, "line_content": "    yield put(disableBuildOnError());"}, {"line_number": 6, "line_content": "    throw e;"}, {"line_number": 7, "line_content": "  }"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 40, "lines": [{"line_number": 1, "line_content": "function* executeTests(testRunner, tests, testTimeout = 5000) {"}, {"line_number": 2, "line_content": "  const testResults = [];"}, {"line_number": 3, "line_content": "  for (let i = 0; i < tests.length; i++) {"}, {"line_number": 4, "line_content": "    const { text, testString } = tests[i];"}, {"line_number": 5, "line_content": "    const newTest = { text, testString };"}, {"line_number": 6, "line_content": "    // only the last test outputs console.logs to avoid log duplication."}, {"line_number": 7, "line_content": "    const firstTest = i === 1;"}, {"line_number": 8, "line_content": "    try {"}, {"line_number": 9, "line_content": "      const { pass, err } = yield call("}, {"line_number": 10, "line_content": "        testRunner,"}, {"line_number": 11, "line_content": "        testString,"}, {"line_number": 12, "line_content": "        testTimeout,"}, {"line_number": 13, "line_content": "        firstTest"}, {"line_number": 14, "line_content": "      );"}, {"line_number": 15, "line_content": "      if (pass) {"}, {"line_number": 16, "line_content": "        newTest.pass = true;"}, {"line_number": 17, "line_content": "      } else {"}, {"line_number": 18, "line_content": "        throw err;"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": "    } catch (err) {"}, {"line_number": 21, "line_content": "      const { actual, expected } = err;"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "      newTest.message = text"}, {"line_number": 24, "line_content": "        .replace('--fcc-expected--', expected)"}, {"line_number": 25, "line_content": "        .replace('--fcc-actual--', actual);"}, {"line_number": 26, "line_content": "      if (err === 'timeout') {"}, {"line_number": 27, "line_content": "        newTest.err = 'Test timed out';"}, {"line_number": 28, "line_content": "        newTest.message = `${newTest.message} (${newTest.err})`;"}, {"line_number": 29, "line_content": "      } else {"}, {"line_number": 30, "line_content": "        const { message, stack } = err;"}, {"line_number": 31, "line_content": "        newTest.err = message + '\\n' + stack;"}, {"line_number": 32, "line_content": "        newTest.stack = stack;"}, {"line_number": 33, "line_content": "      }"}, {"line_number": 34, "line_content": "      yield put(updateConsole(newTest.message));"}, {"line_number": 35, "line_content": "    } finally {"}, {"line_number": 36, "line_content": "      testResults.push(newTest);"}, {"line_number": 37, "line_content": "    }"}, {"line_number": 38, "line_content": "  }"}, {"line_number": 39, "line_content": "  return testResults;"}, {"line_number": 40, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "function* previewChallengeSaga({ flushLogs = true } = {}) {"}, {"line_number": 2, "line_content": "  yield delay(700);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const isBuildEnabled = yield select(isBuildEnabledSelector);"}, {"line_number": 5, "line_content": "  if (!isBuildEnabled) {"}, {"line_number": 6, "line_content": "    return;"}, {"line_number": 7, "line_content": "  }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  const logProxy = yield channel();"}, {"line_number": 10, "line_content": "  const proxyLogger = args => logProxy.put(args);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  try {"}, {"line_number": 13, "line_content": "    if (flushLogs) {"}, {"line_number": 14, "line_content": "      yield put(initLogs());"}, {"line_number": 15, "line_content": "      yield put(initConsole(''));"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    yield fork(takeEveryConsole, logProxy);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const challengeData = yield select(challengeDataSelector);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    if (canBuildChallenge(challengeData)) {"}, {"line_number": 22, "line_content": "      const challengeMeta = yield select(challengeMetaSelector);"}, {"line_number": 23, "line_content": "      const protect = isLoopProtected(challengeMeta);"}, {"line_number": 24, "line_content": "      const buildData = yield buildChallengeData(challengeData, {"}, {"line_number": 25, "line_content": "        preview: true,"}, {"line_number": 26, "line_content": "        protect"}, {"line_number": 27, "line_content": "      });"}, {"line_number": 28, "line_content": "      // evaluate the user code in the preview frame or in the worker"}, {"line_number": 29, "line_content": "      if (challengeHasPreview(challengeData)) {"}, {"line_number": 30, "line_content": "        const document = yield getContext('document');"}, {"line_number": 31, "line_content": "        yield call(updatePreview, buildData, document, proxyLogger);"}, {"line_number": 32, "line_content": "      } else if (isJavaScriptChallenge(challengeData)) {"}, {"line_number": 33, "line_content": "        const runUserCode = getTestRunner(buildData, {"}, {"line_number": 34, "line_content": "          proxyLogger,"}, {"line_number": 35, "line_content": "          removeComments: challengeMeta.removeComments"}, {"line_number": 36, "line_content": "        });"}, {"line_number": 37, "line_content": "        // without a testString the testRunner just evaluates the user's code"}, {"line_number": 38, "line_content": "        yield call(runUserCode, null, previewTimeout);"}, {"line_number": 39, "line_content": "      }"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": "  } catch (err) {"}, {"line_number": 42, "line_content": "    if (err[0] === 'timeout') {"}, {"line_number": 43, "line_content": "      // TODO: translate the error"}, {"line_number": 44, "line_content": "      // eslint-disable-next-line no-ex-assign"}, {"line_number": 45, "line_content": "      err[0] = `The code you have written is taking longer than the ${previewTimeout}ms our challenges allow. You may have created an infinite loop or need to write a more efficient algorithm`;"}, {"line_number": 46, "line_content": "    }"}, {"line_number": 47, "line_content": "    console.log(err);"}, {"line_number": 48, "line_content": "    yield put(updateConsole(escape(err)));"}, {"line_number": 49, "line_content": "  }"}, {"line_number": 50, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function* previewProjectSolutionSaga({ payload }) {"}, {"line_number": 2, "line_content": "  if (!payload) return;"}, {"line_number": 3, "line_content": "  const { showProjectPreview, challengeData } = payload;"}, {"line_number": 4, "line_content": "  if (!showProjectPreview) return;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  try {"}, {"line_number": 7, "line_content": "    if (canBuildChallenge(challengeData)) {"}, {"line_number": 8, "line_content": "      const buildData = yield buildChallengeData(challengeData);"}, {"line_number": 9, "line_content": "      if (challengeHasPreview(challengeData)) {"}, {"line_number": 10, "line_content": "        const document = yield getContext('document');"}, {"line_number": 11, "line_content": "        yield call(updateProjectPreview, buildData, document);"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "  } catch (err) {"}, {"line_number": 15, "line_content": "    console.log(err);"}, {"line_number": 16, "line_content": "  }"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function createExecuteChallengeSaga(types) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    takeLatest(types.executeChallenge, executeCancellableChallengeSaga),"}, {"line_number": 4, "line_content": "    takeLatest("}, {"line_number": 5, "line_content": "      ["}, {"line_number": 6, "line_content": "        types.updateFile,"}, {"line_number": 7, "line_content": "        types.previewMounted,"}, {"line_number": 8, "line_content": "        types.challengeMounted,"}, {"line_number": 9, "line_content": "        types.resetChallenge"}, {"line_number": 10, "line_content": "      ],"}, {"line_number": 11, "line_content": "      executeCancellablePreviewSaga"}, {"line_number": 12, "line_content": "    ),"}, {"line_number": 13, "line_content": "    takeLatest(types.projectPreviewMounted, previewProjectSolutionSaga)"}, {"line_number": 14, "line_content": "  ];"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getCode(id) {"}, {"line_number": 2, "line_content": "  const code = store.get(id);"}, {"line_number": 3, "line_content": "  return code ? code : null;"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function getLegacyCode(legacy) {"}, {"line_number": 2, "line_content": "  const key = legacy + legacyPostfix;"}, {"line_number": 3, "line_content": "  let code = null;"}, {"line_number": 4, "line_content": "  const maybeCode = store.get(key);"}, {"line_number": 5, "line_content": "  if (maybeCode) {"}, {"line_number": 6, "line_content": "    code = '' + maybeCode;"}, {"line_number": 7, "line_content": "    store.remove(key);"}, {"line_number": 8, "line_content": "    return code;"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "  return legacyPrefixes.reduce((code, prefix) => {"}, {"line_number": 11, "line_content": "    if (code) {"}, {"line_number": 12, "line_content": "      return code;"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "    return store.get(prefix + key);"}, {"line_number": 15, "line_content": "  }, null);"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function legacyToFile(code, challengeFiles, fileKey) {"}, {"line_number": 2, "line_content": "  if (isFilesAllPoly(challengeFiles)) {"}, {"line_number": 3, "line_content": "    return {"}, {"line_number": 4, "line_content": "      ...setContent("}, {"line_number": 5, "line_content": "        code,"}, {"line_number": 6, "line_content": "        challengeFiles.find(x => x.fileKey === fileKey)"}, {"line_number": 7, "line_content": "      )"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": "  return false;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function isFilesAllPoly(challengeFiles) {"}, {"line_number": 2, "line_content": "  if (Array.isArray(challengeFiles)) {"}, {"line_number": 3, "line_content": "    return challengeFiles?.every(file => isPoly(file));"}, {"line_number": 4, "line_content": "  } else {"}, {"line_number": 5, "line_content": "    // TODO: After sufficient time, remove parsing of old code-storage format"}, {"line_number": 6, "line_content": "    // This was pushed to production with https://github.com/freeCodeCamp/freeCodeCamp/pull/43023"}, {"line_number": 7, "line_content": "    return Object.keys(challengeFiles)"}, {"line_number": 8, "line_content": "      .map(key => challengeFiles[key])"}, {"line_number": 9, "line_content": "      .every(file => isPoly(file));"}, {"line_number": 10, "line_content": "  }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function clearCodeEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(appTypes.submitComplete, actionTypes.resetChallenge),"}, {"line_number": 4, "line_content": "    tap(() => {"}, {"line_number": 5, "line_content": "      const { id } = challengeMetaSelector(state$.value);"}, {"line_number": 6, "line_content": "      store.remove(id);"}, {"line_number": 7, "line_content": "    }),"}, {"line_number": 8, "line_content": "    ignoreElements()"}, {"line_number": 9, "line_content": "  );"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "function saveCodeEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.executeChallenge, actionTypes.saveEditorContent),"}, {"line_number": 4, "line_content": "    // do not save challenge if code is locked"}, {"line_number": 5, "line_content": "    filter(() => !isCodeLockedSelector(state$.value)),"}, {"line_number": 6, "line_content": "    map(action => {"}, {"line_number": 7, "line_content": "      const state = state$.value;"}, {"line_number": 8, "line_content": "      const { id } = challengeMetaSelector(state);"}, {"line_number": 9, "line_content": "      const challengeFiles = challengeFilesSelector(state);"}, {"line_number": 10, "line_content": "      try {"}, {"line_number": 11, "line_content": "        store.set(id, challengeFiles);"}, {"line_number": 12, "line_content": "        const fileKey = challengeFiles[0].fileKey;"}, {"line_number": 13, "line_content": "        if ("}, {"line_number": 14, "line_content": "          store.get(id).find(challengeFile => challengeFile.fileKey === fileKey)"}, {"line_number": 15, "line_content": "            .contents !=="}, {"line_number": 16, "line_content": "          challengeFiles.find(challengeFile => challengeFile.fileKey).contents"}, {"line_number": 17, "line_content": "        ) {"}, {"line_number": 18, "line_content": "          throw Error('Failed to save to localStorage');"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "        return action;"}, {"line_number": 21, "line_content": "      } catch (e) {"}, {"line_number": 22, "line_content": "        return { ...action, error: true };"}, {"line_number": 23, "line_content": "      }"}, {"line_number": 24, "line_content": "    }),"}, {"line_number": 25, "line_content": "    ofType(actionTypes.saveEditorContent),"}, {"line_number": 26, "line_content": "    switchMap(({ error }) =>"}, {"line_number": 27, "line_content": "      of("}, {"line_number": 28, "line_content": "        createFlashMessage({"}, {"line_number": 29, "line_content": "          type: error ? 'warning' : 'success',"}, {"line_number": 30, "line_content": "          message: error"}, {"line_number": 31, "line_content": "            ? FlashMessages.LocalCodeSaveError"}, {"line_number": 32, "line_content": "            : FlashMessages.LocalCodeSaved"}, {"line_number": 33, "line_content": "        })"}, {"line_number": 34, "line_content": "      )"}, {"line_number": 35, "line_content": "    )"}, {"line_number": 36, "line_content": "  );"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 91, "lines": [{"line_number": 1, "line_content": "function loadCodeEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.challengeMounted),"}, {"line_number": 4, "line_content": "    filter(() => {"}, {"line_number": 5, "line_content": "      const challengeFiles = challengeFilesSelector(state$.value);"}, {"line_number": 6, "line_content": "      return challengeFiles?.length > 0;"}, {"line_number": 7, "line_content": "    }),"}, {"line_number": 8, "line_content": "    switchMap(({ payload: id }) => {"}, {"line_number": 9, "line_content": "      let finalFiles;"}, {"line_number": 10, "line_content": "      const state = state$.value;"}, {"line_number": 11, "line_content": "      const challenge = challengeMetaSelector(state);"}, {"line_number": 12, "line_content": "      const challengeFiles = challengeFilesSelector(state);"}, {"line_number": 13, "line_content": "      const fileKeys = challengeFiles.map(x => x.fileKey);"}, {"line_number": 14, "line_content": "      const invalidForLegacy = fileKeys.length > 1;"}, {"line_number": 15, "line_content": "      const { title: legacyKey } = challenge;"}, {"line_number": 16, "line_content": "      const codeFound = getCode(id);"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "      // first check if the store (which is syncronized with the db) has saved"}, {"line_number": 19, "line_content": "      // code"}, {"line_number": 20, "line_content": "      const savedChallenges = savedChallengesSelector(state);"}, {"line_number": 21, "line_content": "      const savedChallenge = savedChallenges?.find(saved => {"}, {"line_number": 22, "line_content": "        return saved.id === challenge.id;"}, {"line_number": 23, "line_content": "      });"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "      // if the store is already populated with the saved files, we should not"}, {"line_number": 26, "line_content": "      // overwrite them with the local storage data"}, {"line_number": 27, "line_content": "      if (savedChallenge) {"}, {"line_number": 28, "line_content": "        return of(noStoredCodeFound());"}, {"line_number": 29, "line_content": "      } else if (codeFound && isFilesAllPoly(codeFound)) {"}, {"line_number": 30, "line_content": "        finalFiles = challengeFiles.reduce((challengeFiles, challengeFile) => {"}, {"line_number": 31, "line_content": "          let foundChallengeFile = {};"}, {"line_number": 32, "line_content": "          // TODO: after sufficient time, say 6 months from this commit, we can"}, {"line_number": 33, "line_content": "          // assume that the majority of users have revisited any pages with old"}, {"line_number": 34, "line_content": "          // stored code. At this point we can remove everything related to"}, {"line_number": 35, "line_content": "          // indexjsCode."}, {"line_number": 36, "line_content": "          let indexjsCode = null;"}, {"line_number": 37, "line_content": "          if (Array.isArray(codeFound)) {"}, {"line_number": 38, "line_content": "            foundChallengeFile = codeFound.find("}, {"line_number": 39, "line_content": "              x => x.fileKey === challengeFile.fileKey"}, {"line_number": 40, "line_content": "            );"}, {"line_number": 41, "line_content": "            indexjsCode = codeFound.find(x => x.fileKey === 'indexjs');"}, {"line_number": 42, "line_content": "          } else {"}, {"line_number": 43, "line_content": "            // TODO: After sufficient time, remove parsing of old code-storage format"}, {"line_number": 44, "line_content": "            // This was pushed to production with https://github.com/freeCodeCamp/freeCodeCamp/pull/43023"}, {"line_number": 45, "line_content": "            foundChallengeFile = codeFound[challengeFile.fileKey];"}, {"line_number": 46, "line_content": "            indexjsCode = codeFound['indexjs'];"}, {"line_number": 47, "line_content": "          }"}, {"line_number": 48, "line_content": "          let isCodeFound;"}, {"line_number": 49, "line_content": "          // Fix the format of the old file"}, {"line_number": 50, "line_content": "          if (indexjsCode) {"}, {"line_number": 51, "line_content": "            indexjsCode.fileKey = 'scriptjs';"}, {"line_number": 52, "line_content": "            delete indexjsCode.key;"}, {"line_number": 53, "line_content": "            indexjsCode.history = ['script.js'];"}, {"line_number": 54, "line_content": "            indexjsCode.name = 'script';"}, {"line_number": 55, "line_content": "            indexjsCode.path = 'script.js';"}, {"line_number": 56, "line_content": "          }"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "          if (foundChallengeFile) {"}, {"line_number": 59, "line_content": "            isCodeFound = Object.keys(foundChallengeFile).length > 0;"}, {"line_number": 60, "line_content": "          } else if (indexjsCode) {"}, {"line_number": 61, "line_content": "            isCodeFound = Object.keys(indexjsCode).length > 0;"}, {"line_number": 62, "line_content": "            foundChallengeFile = indexjsCode;"}, {"line_number": 63, "line_content": "            // Repair the store, by replacing old style code with the repaired"}, {"line_number": 64, "line_content": "            // file"}, {"line_number": 65, "line_content": "            store.set(id, [indexjsCode]);"}, {"line_number": 66, "line_content": "          } else {"}, {"line_number": 67, "line_content": "            // The stored code is neither old code nor new, so we do not know"}, {"line_number": 68, "line_content": "            // how to handle it.  The safest option is to delete it."}, {"line_number": 69, "line_content": "            store.remove(id);"}, {"line_number": 70, "line_content": "          }"}, {"line_number": 71, "line_content": "          return ["}, {"line_number": 72, "line_content": "            ...challengeFiles,"}, {"line_number": 73, "line_content": "            {"}, {"line_number": 74, "line_content": "              ...challengeFile,"}, {"line_number": 75, "line_content": "              ...(isCodeFound ? foundChallengeFile : {})"}, {"line_number": 76, "line_content": "            }"}, {"line_number": 77, "line_content": "          ];"}, {"line_number": 78, "line_content": "        }, []);"}, {"line_number": 79, "line_content": "      } else {"}, {"line_number": 80, "line_content": "        const legacyCode = getLegacyCode(legacyKey);"}, {"line_number": 81, "line_content": "        if (legacyCode && !invalidForLegacy) {"}, {"line_number": 82, "line_content": "          finalFiles = legacyToFile(legacyCode, challengeFiles, fileKeys[0]);"}, {"line_number": 83, "line_content": "        }"}, {"line_number": 84, "line_content": "      }"}, {"line_number": 85, "line_content": "      if (finalFiles) {"}, {"line_number": 86, "line_content": "        return of(storedCodeFound(finalFiles));"}, {"line_number": 87, "line_content": "      }"}, {"line_number": 88, "line_content": "      return of(noStoredCodeFound());"}, {"line_number": 89, "line_content": "    })"}, {"line_number": 90, "line_content": "  );"}, {"line_number": 91, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "function postChallenge(update, username) {"}, {"line_number": 2, "line_content": "  const saveChallenge = postUpdate$(update).pipe("}, {"line_number": 3, "line_content": "    retry(3),"}, {"line_number": 4, "line_content": "    switchMap(({ points, savedChallenges }) => {"}, {"line_number": 5, "line_content": "      // TODO: do this all in ajax.ts"}, {"line_number": 6, "line_content": "      const payloadWithClientProperties = {"}, {"line_number": 7, "line_content": "        ...omit(update.payload, ['files'])"}, {"line_number": 8, "line_content": "      };"}, {"line_number": 9, "line_content": "      if (update.payload.files) {"}, {"line_number": 10, "line_content": "        payloadWithClientProperties.challengeFiles = update.payload.files.map("}, {"line_number": 11, "line_content": "          ({ key, ...rest }) => ({"}, {"line_number": 12, "line_content": "            ...rest,"}, {"line_number": 13, "line_content": "            fileKey: key"}, {"line_number": 14, "line_content": "          })"}, {"line_number": 15, "line_content": "        );"}, {"line_number": 16, "line_content": "      }"}, {"line_number": 17, "line_content": "      return of("}, {"line_number": 18, "line_content": "        submitComplete({"}, {"line_number": 19, "line_content": "          submittedChallenge: {"}, {"line_number": 20, "line_content": "            username,"}, {"line_number": 21, "line_content": "            points,"}, {"line_number": 22, "line_content": "            ...payloadWithClientProperties"}, {"line_number": 23, "line_content": "          },"}, {"line_number": 24, "line_content": "          savedChallenges: mapFilesToChallengeFiles(savedChallenges)"}, {"line_number": 25, "line_content": "        }),"}, {"line_number": 26, "line_content": "        updateComplete()"}, {"line_number": 27, "line_content": "      );"}, {"line_number": 28, "line_content": "    }),"}, {"line_number": 29, "line_content": "    catchError(() => of(updateFailed(update)))"}, {"line_number": 30, "line_content": "  );"}, {"line_number": 31, "line_content": "  return saveChallenge;"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 38, "lines": [{"line_number": 1, "line_content": "function submitModern(type, state) {"}, {"line_number": 2, "line_content": "  const challengeType = state.challenge.challengeMeta.challengeType;"}, {"line_number": 3, "line_content": "  const tests = challengeTestsSelector(state);"}, {"line_number": 4, "line_content": "  if ("}, {"line_number": 5, "line_content": "    challengeType === 11 ||"}, {"line_number": 6, "line_content": "    (tests.length > 0 && tests.every(test => test.pass && !test.err))"}, {"line_number": 7, "line_content": "  ) {"}, {"line_number": 8, "line_content": "    if (type === actionTypes.checkChallenge) {"}, {"line_number": 9, "line_content": "      return of({ type: 'this was a check challenge' });"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (type === actionTypes.submitChallenge) {"}, {"line_number": 13, "line_content": "      const { id, block } = challengeMetaSelector(state);"}, {"line_number": 14, "line_content": "      const challengeFiles = challengeFilesSelector(state);"}, {"line_number": 15, "line_content": "      const { username } = userSelector(state);"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "      let body;"}, {"line_number": 18, "line_content": "      if ("}, {"line_number": 19, "line_content": "        block === 'javascript-algorithms-and-data-structures-projects' ||"}, {"line_number": 20, "line_content": "        challengeType === challengeTypes.multifileCertProject"}, {"line_number": 21, "line_content": "      ) {"}, {"line_number": 22, "line_content": "        body = standardizeRequestBody({ id, challengeType, challengeFiles });"}, {"line_number": 23, "line_content": "      } else {"}, {"line_number": 24, "line_content": "        body = {"}, {"line_number": 25, "line_content": "          id,"}, {"line_number": 26, "line_content": "          challengeType"}, {"line_number": 27, "line_content": "        };"}, {"line_number": 28, "line_content": "      }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "      const update = {"}, {"line_number": 31, "line_content": "        endpoint: '/modern-challenge-completed',"}, {"line_number": 32, "line_content": "        payload: body"}, {"line_number": 33, "line_content": "      };"}, {"line_number": 34, "line_content": "      return postChallenge(update, username);"}, {"line_number": 35, "line_content": "    }"}, {"line_number": 36, "line_content": "  }"}, {"line_number": 37, "line_content": "  return empty();"}, {"line_number": 38, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function submitProject(type, state) {"}, {"line_number": 2, "line_content": "  if (type === actionTypes.checkChallenge) {"}, {"line_number": 3, "line_content": "    return empty();"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  const { solution, githubLink } = projectFormValuesSelector(state);"}, {"line_number": 7, "line_content": "  const { id, challengeType } = challengeMetaSelector(state);"}, {"line_number": 8, "line_content": "  const { username } = userSelector(state);"}, {"line_number": 9, "line_content": "  const challengeInfo = { id, challengeType, solution };"}, {"line_number": 10, "line_content": "  if (challengeType === challengeTypes.backEndProject) {"}, {"line_number": 11, "line_content": "    challengeInfo.githubLink = githubLink;"}, {"line_number": 12, "line_content": "  }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  const update = {"}, {"line_number": 15, "line_content": "    endpoint: '/project-completed',"}, {"line_number": 16, "line_content": "    payload: challengeInfo"}, {"line_number": 17, "line_content": "  };"}, {"line_number": 18, "line_content": "  return postChallenge(update, username).pipe("}, {"line_number": 19, "line_content": "    concat(of(updateSolutionFormValues({})))"}, {"line_number": 20, "line_content": "  );"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function submitBackendChallenge(type, state) {"}, {"line_number": 2, "line_content": "  const tests = challengeTestsSelector(state);"}, {"line_number": 3, "line_content": "  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {"}, {"line_number": 4, "line_content": "    if (type === actionTypes.submitChallenge) {"}, {"line_number": 5, "line_content": "      const { id } = challengeMetaSelector(state);"}, {"line_number": 6, "line_content": "      const { username } = userSelector(state);"}, {"line_number": 7, "line_content": "      const {"}, {"line_number": 8, "line_content": "        solution: { value: solution }"}, {"line_number": 9, "line_content": "      } = projectFormValuesSelector(state);"}, {"line_number": 10, "line_content": "      const challengeInfo = { id, solution };"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      const update = {"}, {"line_number": 13, "line_content": "        endpoint: '/backend-challenge-completed',"}, {"line_number": 14, "line_content": "        payload: challengeInfo"}, {"line_number": 15, "line_content": "      };"}, {"line_number": 16, "line_content": "      return postChallenge(update, username);"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": "  return empty();"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "function completionEpic(action$, state$) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.submitChallenge),"}, {"line_number": 4, "line_content": "    switchMap(({ type }) => {"}, {"line_number": 5, "line_content": "      const state = state$.value;"}, {"line_number": 6, "line_content": "      const meta = challengeMetaSelector(state);"}, {"line_number": 7, "line_content": "      const { nextChallengePath, challengeType, superBlock } = meta;"}, {"line_number": 8, "line_content": "      const closeChallengeModal = of(closeModal('completion'));"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      let submitter = () => of({ type: 'no-user-signed-in' });"}, {"line_number": 11, "line_content": "      if ("}, {"line_number": 12, "line_content": "        !(challengeType in submitTypes) ||"}, {"line_number": 13, "line_content": "        !(submitTypes[challengeType] in submitters)"}, {"line_number": 14, "line_content": "      ) {"}, {"line_number": 15, "line_content": "        throw new Error("}, {"line_number": 16, "line_content": "          'Unable to find the correct submit function for challengeType ' +"}, {"line_number": 17, "line_content": "            challengeType"}, {"line_number": 18, "line_content": "        );"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": "      if (isSignedInSelector(state)) {"}, {"line_number": 21, "line_content": "        submitter = submitters[submitTypes[challengeType]];"}, {"line_number": 22, "line_content": "      }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "      const pathToNavigateTo = async () => {"}, {"line_number": 25, "line_content": "        return await findPathToNavigateTo(nextChallengePath, superBlock);"}, {"line_number": 26, "line_content": "      };"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "      return submitter(type, state).pipe("}, {"line_number": 29, "line_content": "        concat(closeChallengeModal),"}, {"line_number": 30, "line_content": "        filter(Boolean),"}, {"line_number": 31, "line_content": "        finalize(async () => navigate(await pathToNavigateTo()))"}, {"line_number": 32, "line_content": "      );"}, {"line_number": 33, "line_content": "    })"}, {"line_number": 34, "line_content": "  );"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function findPathToNavigateTo(nextChallengePath, superBlock) {"}, {"line_number": 2, "line_content": "  if (nextChallengePath.includes(superBlock)) {"}, {"line_number": 3, "line_content": "    return nextChallengePath;"}, {"line_number": 4, "line_content": "  } else {"}, {"line_number": 5, "line_content": "    return `/learn/${superBlock}/#${superBlock}-projects`;"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function filesToMarkdown(challengeFiles = {}) {"}, {"line_number": 2, "line_content": "  const moreThanOneFile = challengeFiles?.length > 1;"}, {"line_number": 3, "line_content": "  return challengeFiles.reduce((fileString, challengeFile) => {"}, {"line_number": 4, "line_content": "    if (!challengeFile) {"}, {"line_number": 5, "line_content": "      return fileString;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    const fileName = moreThanOneFile"}, {"line_number": 8, "line_content": "      ? `/* file: ${challengeFile.name}.${challengeFile.ext} */\\n`"}, {"line_number": 9, "line_content": "      : '';"}, {"line_number": 10, "line_content": "    const fileType = challengeFile.ext;"}, {"line_number": 11, "line_content": "    return `${fileString}\\`\\`\\`${fileType}\\n${fileName}${challengeFile.contents}\\n\\`\\`\\`\\n\\n`;"}, {"line_number": 12, "line_content": "  }, '\\n');"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 71, "lines": [{"line_number": 1, "line_content": "function createQuestionEpic(action$, state$, { window }) {"}, {"line_number": 2, "line_content": "  return action$.pipe("}, {"line_number": 3, "line_content": "    ofType(actionTypes.createQuestion),"}, {"line_number": 4, "line_content": "    tap(() => {"}, {"line_number": 5, "line_content": "      const state = state$.value;"}, {"line_number": 6, "line_content": "      const challengeFiles = challengeFilesSelector(state);"}, {"line_number": 7, "line_content": "      const { title: challengeTitle, helpCategory } ="}, {"line_number": 8, "line_content": "        challengeMetaSelector(state);"}, {"line_number": 9, "line_content": "      const {"}, {"line_number": 10, "line_content": "        navigator: { userAgent },"}, {"line_number": 11, "line_content": "        location: { pathname, origin }"}, {"line_number": 12, "line_content": "      } = window;"}, {"line_number": 13, "line_content": "      // Removes query params"}, {"line_number": 14, "line_content": "      const challengeUrl = new URL(pathname, origin).href;"}, {"line_number": 15, "line_content": "      const projectFormValues = Object.entries("}, {"line_number": 16, "line_content": "        projectFormValuesSelector(state)"}, {"line_number": 17, "line_content": "      );"}, {"line_number": 18, "line_content": "      const endingText = dedent("}, {"line_number": 19, "line_content": "        `${i18next.t('forum-help.browser-info')}\\n\\n${i18next.t("}, {"line_number": 20, "line_content": "          'forum-help.user-agent',"}, {"line_number": 21, "line_content": "          { userAgent }"}, {"line_number": 22, "line_content": "        )}\\n\\n${i18next.t("}, {"line_number": 23, "line_content": "          'forum-help.challenge'"}, {"line_number": 24, "line_content": "        )} ${challengeTitle}\\n\\n${i18next.t("}, {"line_number": 25, "line_content": "          'forum-help.challenge-link'"}, {"line_number": 26, "line_content": "        )}\\n${challengeUrl}`"}, {"line_number": 27, "line_content": "      );"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "      let textMessage = dedent(`${i18next.t("}, {"line_number": 30, "line_content": "        'forum-help.whats-happening'"}, {"line_number": 31, "line_content": "      )}\\n${i18next.t('forum-help.describe')}\\n\\n"}, {"line_number": 32, "line_content": "        ${"}, {"line_number": 33, "line_content": "          projectFormValues.length"}, {"line_number": 34, "line_content": "            ? `${i18next.t('forum-help.camper-project')}\\n`"}, {"line_number": 35, "line_content": "            : i18next.t('forum-help.camper-code')"}, {"line_number": 36, "line_content": "        }"}, {"line_number": 37, "line_content": "        ${"}, {"line_number": 38, "line_content": "          projectFormValues"}, {"line_number": 39, "line_content": "            ?.map(([key, val]) => `${key}: ${transformEditorLink(val)}\\n`)"}, {"line_number": 40, "line_content": "            ?.join('') || filesToMarkdown(challengeFiles)"}, {"line_number": 41, "line_content": "        }\\n\\n"}, {"line_number": 42, "line_content": "        ${endingText}`);"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "      const altTextMessage = dedent("}, {"line_number": 45, "line_content": "        `${i18next.t('forum-help.whats-happening')}\\n\\n\\n\\n${i18next.t("}, {"line_number": 46, "line_content": "          'forum-help.camper-code'"}, {"line_number": 47, "line_content": "        )}\\n\\n${i18next.t('forum-help.warning')}\\n\\n${i18next.t("}, {"line_number": 48, "line_content": "          'forum-help.too-long-one'"}, {"line_number": 49, "line_content": "        )}\\n\\n${i18next.t('forum-help.too-long-two')}\\n\\n${i18next.t("}, {"line_number": 50, "line_content": "          'forum-help.too-long-three'"}, {"line_number": 51, "line_content": "        )}\\n\\n\\`\\`\\`\\n${i18next.t('forum-help.add-code-one')}\\n${i18next.t("}, {"line_number": 52, "line_content": "          'forum-help.add-code-two'"}, {"line_number": 53, "line_content": "        )}\\n${i18next.t('forum-help.add-code-three')}\\n\\n\\`\\`\\`\\n${endingText}`"}, {"line_number": 54, "line_content": "      );"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "      const category = window.encodeURIComponent("}, {"line_number": 57, "line_content": "        i18next.t('links:help.' + helpCategory || 'Help')"}, {"line_number": 58, "line_content": "      );"}, {"line_number": 59, "line_content": ""}, {"line_number": 60, "line_content": "      const studentCode = window.encodeURIComponent(textMessage);"}, {"line_number": 61, "line_content": "      const altStudentCode = window.encodeURIComponent(altTextMessage);"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "      const baseURI = `${forumLocation}/new-topic?category=${category}&title=&body=`;"}, {"line_number": 64, "line_content": "      const defaultURI = `${baseURI}${studentCode}`;"}, {"line_number": 65, "line_content": "      const altURI = `${baseURI}${altStudentCode}`;"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "      window.open(defaultURI.length < 8000 ? defaultURI : altURI, '_blank');"}, {"line_number": 68, "line_content": "    }),"}, {"line_number": 69, "line_content": "    mapTo(closeModal('help'))"}, {"line_number": 70, "line_content": "  );"}, {"line_number": 71, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createWorkerExecutor(workerName, options) {"}, {"line_number": 2, "line_content": "  return new WorkerExecutor(workerName, options);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function buildSourceMap(challengeFiles) {"}, {"line_number": 2, "line_content": "  // TODO: rename sources.index to sources.contents."}, {"line_number": 3, "line_content": "  const source = challengeFiles.reduce("}, {"line_number": 4, "line_content": "    (sources, challengeFile) => {"}, {"line_number": 5, "line_content": "      sources.index += challengeFile.source || challengeFile.contents;"}, {"line_number": 6, "line_content": "      sources.contents = sources.index;"}, {"line_number": 7, "line_content": "      sources.original[challengeFile.history[0]] = challengeFile.source;"}, {"line_number": 8, "line_content": "      sources.editableContents += challengeFile.editableContents || '';"}, {"line_number": 9, "line_content": "      return sources;"}, {"line_number": 10, "line_content": "    },"}, {"line_number": 11, "line_content": "    { index: '', editableContents: '', original: {} }"}, {"line_number": 12, "line_content": "  );"}, {"line_number": 13, "line_content": "  return source;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function checkFilesErrors(challengeFiles) {"}, {"line_number": 2, "line_content": "  const errors = challengeFiles"}, {"line_number": 3, "line_content": "    .filter(({ error }) => error)"}, {"line_number": 4, "line_content": "    .map(({ error }) => error);"}, {"line_number": 5, "line_content": "  if (errors.length) {"}, {"line_number": 6, "line_content": "    throw errors;"}, {"line_number": 7, "line_content": "  }"}, {"line_number": 8, "line_content": "  return challengeFiles;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function canBuildChallenge(challengeData) {"}, {"line_number": 2, "line_content": "  const { challengeType } = challengeData;"}, {"line_number": 3, "line_content": "  return Object.prototype.hasOwnProperty.call(buildFunctions, challengeType);"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function buildChallenge(challengeData, options) {"}, {"line_number": 2, "line_content": "  const { challengeType } = challengeData;"}, {"line_number": 3, "line_content": "  let build = buildFunctions[challengeType];"}, {"line_number": 4, "line_content": "  if (build) {"}, {"line_number": 5, "line_content": "    return build(challengeData, options);"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "  throw new Error(`Cannot build challenge of type ${challengeType}`);"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getTestRunner(buildData, runnerConfig, document) {"}, {"line_number": 2, "line_content": "  const { challengeType } = buildData;"}, {"line_number": 3, "line_content": "  const testRunner = testRunners[challengeType];"}, {"line_number": 4, "line_content": "  if (testRunner) {"}, {"line_number": 5, "line_content": "    return testRunner(buildData, runnerConfig, document);"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "  throw new Error(`Cannot get test runner for challenge type ${challengeType}`);"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function getJSTestRunner({ build, sources }, { proxyLogger, removeComments }) {"}, {"line_number": 2, "line_content": "  const code = {"}, {"line_number": 3, "line_content": "    contents: sources.index,"}, {"line_number": 4, "line_content": "    editableContents: sources.editableContents"}, {"line_number": 5, "line_content": "  };"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const testWorker = createWorker(testEvaluator, { terminateWorker: true });"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  return (testString, testTimeout, firstTest = true) => {"}, {"line_number": 10, "line_content": "    return testWorker"}, {"line_number": 11, "line_content": "      .execute("}, {"line_number": 12, "line_content": "        { build, testString, code, sources, firstTest, removeComments },"}, {"line_number": 13, "line_content": "        testTimeout"}, {"line_number": 14, "line_content": "      )"}, {"line_number": 15, "line_content": "      .on('LOG', proxyLogger).done;"}, {"line_number": 16, "line_content": "  };"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function getDOMTestRunner(buildData, { proxyLogger }, document) {"}, {"line_number": 2, "line_content": "  await new Promise(resolve =>"}, {"line_number": 3, "line_content": "    createTestFramer(document, proxyLogger, resolve)(buildData)"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "  return (testString, testTimeout) =>"}, {"line_number": 6, "line_content": "    runTestInTestFrame(document, testString, testTimeout);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "function buildDOMChallenge("}, {"line_number": 2, "line_content": "  { challengeFiles, required = [], template = '' },"}, {"line_number": 3, "line_content": "  { usesTestRunner } = { usesTestRunner: false }"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  const finalRequires = [...required];"}, {"line_number": 6, "line_content": "  if (usesTestRunner) finalRequires.push(...frameRunner);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  const loadEnzyme = challengeFiles.some("}, {"line_number": 9, "line_content": "    challengeFile => challengeFile.ext === 'jsx'"}, {"line_number": 10, "line_content": "  );"}, {"line_number": 11, "line_content": "  const pipeLine = composeFunctions(...getTransformers());"}, {"line_number": 12, "line_content": "  const finalFiles = challengeFiles.map(pipeLine);"}, {"line_number": 13, "line_content": "  return Promise.all(finalFiles)"}, {"line_number": 14, "line_content": "    .then(checkFilesErrors)"}, {"line_number": 15, "line_content": "    .then(embedFilesInHtml)"}, {"line_number": 16, "line_content": "    .then(([challengeFiles, contents]) => {"}, {"line_number": 17, "line_content": "      return {"}, {"line_number": 18, "line_content": "        challengeType:"}, {"line_number": 19, "line_content": "          challengeTypes.html || challengeTypes.multifileCertProject,"}, {"line_number": 20, "line_content": "        build: concatHtml({"}, {"line_number": 21, "line_content": "          required: finalRequires,"}, {"line_number": 22, "line_content": "          template,"}, {"line_number": 23, "line_content": "          contents"}, {"line_number": 24, "line_content": "        }),"}, {"line_number": 25, "line_content": "        sources: buildSourceMap(challengeFiles),"}, {"line_number": 26, "line_content": "        loadEnzyme"}, {"line_number": 27, "line_content": "      };"}, {"line_number": 28, "line_content": "    });"}, {"line_number": 29, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function buildJSChallenge({ challengeFiles }, options) {"}, {"line_number": 2, "line_content": "  const pipeLine = composeFunctions(...getTransformers(options));"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const finalFiles = challengeFiles.map(pipeLine);"}, {"line_number": 5, "line_content": "  return Promise.all(finalFiles)"}, {"line_number": 6, "line_content": "    .then(checkFilesErrors)"}, {"line_number": 7, "line_content": "    .then(challengeFiles => ({"}, {"line_number": 8, "line_content": "      challengeType: challengeTypes.js,"}, {"line_number": 9, "line_content": "      build: challengeFiles"}, {"line_number": 10, "line_content": "        .reduce("}, {"line_number": 11, "line_content": "          (body, challengeFile) => ["}, {"line_number": 12, "line_content": "            ...body,"}, {"line_number": 13, "line_content": "            challengeFile.head,"}, {"line_number": 14, "line_content": "            challengeFile.contents,"}, {"line_number": 15, "line_content": "            challengeFile.tail"}, {"line_number": 16, "line_content": "          ],"}, {"line_number": 17, "line_content": "          []"}, {"line_number": 18, "line_content": "        )"}, {"line_number": 19, "line_content": "        .join('\\n'),"}, {"line_number": 20, "line_content": "      sources: buildSourceMap(challengeFiles)"}, {"line_number": 21, "line_content": "    }));"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function buildBackendChallenge({ url }) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    challengeType: challengeTypes.backend,"}, {"line_number": 4, "line_content": "    build: concatHtml({ required: frameRunner }),"}, {"line_number": 5, "line_content": "    sources: { url }"}, {"line_number": 6, "line_content": "  };"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function updatePreview(buildData, document, proxyLogger) {"}, {"line_number": 2, "line_content": "  if ("}, {"line_number": 3, "line_content": "    buildData.challengeType === challengeTypes.html ||"}, {"line_number": 4, "line_content": "    buildData.challengeType === challengeTypes.multifileCertProject"}, {"line_number": 5, "line_content": "  ) {"}, {"line_number": 6, "line_content": "    createMainPreviewFramer(document, proxyLogger)(buildData);"}, {"line_number": 7, "line_content": "  } else {"}, {"line_number": 8, "line_content": "    throw new Error("}, {"line_number": 9, "line_content": "      `Cannot show preview for challenge type ${buildData.challengeType}`"}, {"line_number": 10, "line_content": "    );"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function updateProjectPreview(buildData, document) {"}, {"line_number": 2, "line_content": "  if ("}, {"line_number": 3, "line_content": "    buildData.challengeType === challengeTypes.html ||"}, {"line_number": 4, "line_content": "    buildData.challengeType === challengeTypes.multifileCertProject"}, {"line_number": 5, "line_content": "  ) {"}, {"line_number": 6, "line_content": "    // Give iframe a title attribute for accessibility using the preview"}, {"line_number": 7, "line_content": "    // document's <title>."}, {"line_number": 8, "line_content": "    const titleMatch = buildData?.sources?.index?.match("}, {"line_number": 9, "line_content": "      /<title>(.*?)<\\/title>/"}, {"line_number": 10, "line_content": "    );"}, {"line_number": 11, "line_content": "    const frameTitle = titleMatch"}, {"line_number": 12, "line_content": "      ? titleMatch[1].trim() + ' preview'"}, {"line_number": 13, "line_content": "      : 'preview';"}, {"line_number": 14, "line_content": "    createProjectPreviewFramer(document, frameTitle)(buildData);"}, {"line_number": 15, "line_content": "  } else {"}, {"line_number": 16, "line_content": "    throw new Error("}, {"line_number": 17, "line_content": "      `Cannot show preview for challenge type ${buildData.challengeType}`"}, {"line_number": 18, "line_content": "    );"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function challengeHasPreview({ challengeType }) {"}, {"line_number": 2, "line_content": "  return ("}, {"line_number": 3, "line_content": "    challengeType === challengeTypes.html ||"}, {"line_number": 4, "line_content": "    challengeType === challengeTypes.modern ||"}, {"line_number": 5, "line_content": "    challengeType === challengeTypes.multifileCertProject"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function isJavaScriptChallenge({ challengeType }) {"}, {"line_number": 2, "line_content": "  return ("}, {"line_number": 3, "line_content": "    challengeType === challengeTypes.js ||"}, {"line_number": 4, "line_content": "    challengeType === challengeTypes.bonfire"}, {"line_number": 5, "line_content": "  );"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function mockWorker({ init, postMessage, terminate } = {}) {"}, {"line_number": 2, "line_content": "  global.Worker = jest.fn(function () {"}, {"line_number": 3, "line_content": "    setImmediate("}, {"line_number": 4, "line_content": "      (init && init(this)) ||"}, {"line_number": 5, "line_content": "        (() =>"}, {"line_number": 6, "line_content": "          this.onmessage && this.onmessage({ data: { type: 'contentLoaded' } }))"}, {"line_number": 7, "line_content": "    );"}, {"line_number": 8, "line_content": "    this.onmessage = null;"}, {"line_number": 9, "line_content": "    this.postMessage ="}, {"line_number": 10, "line_content": "      postMessage ||"}, {"line_number": 11, "line_content": "      function (data) {"}, {"line_number": 12, "line_content": "        setImmediate("}, {"line_number": 13, "line_content": "          () => this.onmessage && this.onmessage({ data: `${data} processed` })"}, {"line_number": 14, "line_content": "        );"}, {"line_number": 15, "line_content": "      };"}, {"line_number": 16, "line_content": "    this.terminate = terminate || (() => {});"}, {"line_number": 17, "line_content": "    return this;"}, {"line_number": 18, "line_content": "  });"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isLoopProtected(challengeMeta) {"}, {"line_number": 2, "line_content": "  return challengeMeta.superBlock !== 'Coding Interview Prep';"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getNextChallengePath(_node, index, nodeArray) {"}, {"line_number": 2, "line_content": "  const next = nodeArray[index + 1];"}, {"line_number": 3, "line_content": "  return next ? next.node.challenge.fields.slug : '/learn';"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getPrevChallengePath(_node, index, nodeArray) {"}, {"line_number": 2, "line_content": "  const prev = nodeArray[index - 1];"}, {"line_number": 3, "line_content": "  return prev ? prev.node.challenge.fields.slug : '/learn';"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getTemplateComponent(challengeType) {"}, {"line_number": 2, "line_content": "  return views[viewTypes[challengeType]];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "function getProjectPreviewConfig(challenge, allChallengeEdges) {"}, {"line_number": 2, "line_content": "  const { block, challengeOrder, challengeType, usesMultifileEditor } ="}, {"line_number": 3, "line_content": "    challenge;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  const challengesInBlock = allChallengeEdges"}, {"line_number": 6, "line_content": "    .filter(({ node: { challenge } }) => challenge.block === block)"}, {"line_number": 7, "line_content": "    .map(({ node: { challenge } }) => challenge);"}, {"line_number": 8, "line_content": "  const lastChallenge = challengesInBlock[challengesInBlock.length - 1];"}, {"line_number": 9, "line_content": "  const solutionToLastChallenge = sortChallengeFiles("}, {"line_number": 10, "line_content": "    lastChallenge.solutions[0] ?? []"}, {"line_number": 11, "line_content": "  );"}, {"line_number": 12, "line_content": "  const lastChallengeFiles = sortChallengeFiles("}, {"line_number": 13, "line_content": "    lastChallenge.challengeFiles ?? []"}, {"line_number": 14, "line_content": "  );"}, {"line_number": 15, "line_content": "  const projectPreviewChallengeFiles = lastChallengeFiles.map((file, id) => ({"}, {"line_number": 16, "line_content": "    ...file,"}, {"line_number": 17, "line_content": "    contents: solutionToLastChallenge[id]?.contents ?? file.contents"}, {"line_number": 18, "line_content": "  }));"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  return {"}, {"line_number": 21, "line_content": "    showProjectPreview:"}, {"line_number": 22, "line_content": "      challengeOrder === 0 &&"}, {"line_number": 23, "line_content": "      usesMultifileEditor &&"}, {"line_number": 24, "line_content": "      challengeType !== challengeTypes.multifileCertProject,"}, {"line_number": 25, "line_content": "    challengeData: {"}, {"line_number": 26, "line_content": "      challengeType: lastChallenge.challengeType,"}, {"line_number": 27, "line_content": "      challengeFiles: projectPreviewChallengeFiles"}, {"line_number": 28, "line_content": "    }"}, {"line_number": 29, "line_content": "  };"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function sourceAndCreateNodes() {"}, {"line_number": 2, "line_content": "    return source()"}, {"line_number": 3, "line_content": "      .then(challenges => Promise.all(challenges))"}, {"line_number": 4, "line_content": "      .then(challenges =>"}, {"line_number": 5, "line_content": "        challenges.map(challenge => createVisibleChallenge(challenge))"}, {"line_number": 6, "line_content": "      )"}, {"line_number": 7, "line_content": "      .catch(e => {"}, {"line_number": 8, "line_content": "        console.log(e);"}, {"line_number": 9, "line_content": "        reporter.panic(`fcc-source-challenges"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  ${e.message}"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  `);"}, {"line_number": 14, "line_content": "      });"}, {"line_number": 15, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createVisibleChallenge(challenge, options) {"}, {"line_number": 2, "line_content": "    createNode(createChallengeNode(challenge, reporter, options));"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 76, "lines": [{"line_number": 1, "line_content": "function createChallengeNode("}, {"line_number": 2, "line_content": "  challenge,"}, {"line_number": 3, "line_content": "  reporter,"}, {"line_number": 4, "line_content": "  { isReloading } = { isReloading: false }"}, {"line_number": 5, "line_content": ") {"}, {"line_number": 6, "line_content": "  // challengeType 11 is for video challenges (they only have instructions)"}, {"line_number": 7, "line_content": "  // challengeType 7 is for certificates (they only have tests)"}, {"line_number": 8, "line_content": "  // challengeType 12 is for CodeAlly/CodeRoad challenge"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  // TODO: either handle empty descriptions inside Gatsby OR ensure that"}, {"line_number": 11, "line_content": "  // description defaults to '' when creating challenges."}, {"line_number": 12, "line_content": "  // ditto for seeds and instructions."}, {"line_number": 13, "line_content": "  // create-md should, then, not create empty seed, description or instruction"}, {"line_number": 14, "line_content": "  // sections."}, {"line_number": 15, "line_content": "  if ("}, {"line_number": 16, "line_content": "    typeof challenge.description !== 'string' &&"}, {"line_number": 17, "line_content": "    challenge.challengeType !== 11 &&"}, {"line_number": 18, "line_content": "    challenge.challengeType !== 7 &&"}, {"line_number": 19, "line_content": "    challenge.challengeType !== 12"}, {"line_number": 20, "line_content": "  ) {"}, {"line_number": 21, "line_content": "    reporter.warn(`"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    ${challenge.title} has a description that will break things!"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    `);"}, {"line_number": 26, "line_content": "  }"}, {"line_number": 27, "line_content": "  const contentDigest = crypto"}, {"line_number": 28, "line_content": "    .createHash('md5')"}, {"line_number": 29, "line_content": "    .update(JSON.stringify(challenge))"}, {"line_number": 30, "line_content": "    .digest('hex');"}, {"line_number": 31, "line_content": "  const internal = {"}, {"line_number": 32, "line_content": "    contentDigest,"}, {"line_number": 33, "line_content": "    type: challenge.challengeType === 7 ? 'CertificateNode' : 'ChallengeNode'"}, {"line_number": 34, "line_content": "  };"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "  if (internal.type === 'ChallengeNode') {"}, {"line_number": 37, "line_content": "    const { tests = [], block, dashedName, superBlock } = challenge;"}, {"line_number": 38, "line_content": "    const slug = `/learn/${superBlock}/${block}/${dashedName}`;"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "    challenge.fields = {"}, {"line_number": 41, "line_content": "      slug,"}, {"line_number": 42, "line_content": "      blockName: blockNameify(block),"}, {"line_number": 43, "line_content": "      tests"}, {"line_number": 44, "line_content": "    };"}, {"line_number": 45, "line_content": "  }"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "  // Challenge id should be unique for CertificateNodes, but not for"}, {"line_number": 48, "line_content": "  // ChallengeNodes"}, {"line_number": 49, "line_content": "  const id ="}, {"line_number": 50, "line_content": "    internal.type === 'ChallengeNode' ? challenge.fields.slug : challenge.id;"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "  if (createdIds.has(id) && !isReloading) {"}, {"line_number": 53, "line_content": "    throw Error(`"}, {"line_number": 54, "line_content": "    Challenge slugs must be unique, but ${id} already exists."}, {"line_number": 55, "line_content": "    `);"}, {"line_number": 56, "line_content": "  }"}, {"line_number": 57, "line_content": "  createdIds.add(id);"}, {"line_number": 58, "line_content": ""}, {"line_number": 59, "line_content": "  return JSON.parse("}, {"line_number": 60, "line_content": "    JSON.stringify("}, {"line_number": 61, "line_content": "      Object.assign("}, {"line_number": 62, "line_content": "        {},"}, {"line_number": 63, "line_content": "        {"}, {"line_number": 64, "line_content": "          children: [],"}, {"line_number": 65, "line_content": "          parent: null,"}, {"line_number": 66, "line_content": "          internal,"}, {"line_number": 67, "line_content": "          sourceInstanceName: 'challenge'"}, {"line_number": 68, "line_content": "        },"}, {"line_number": 69, "line_content": "        { challenge },"}, {"line_number": 70, "line_content": "        {"}, {"line_number": 71, "line_content": "          id"}, {"line_number": 72, "line_content": "        }"}, {"line_number": 73, "line_content": "      )"}, {"line_number": 74, "line_content": "    )"}, {"line_number": 75, "line_content": "  );"}, {"line_number": 76, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function fourOhFour(app) {"}, {"line_number": 2, "line_content": "  app.all('*', function (req, res) {"}, {"line_number": 3, "line_content": "    const accept = accepts(req);"}, {"line_number": 4, "line_content": "    // prioritise returning json"}, {"line_number": 5, "line_content": "    const type = accept.type('json', 'html', 'text');"}, {"line_number": 6, "line_content": "    const { path } = req;"}, {"line_number": 7, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (type === 'json') {"}, {"line_number": 10, "line_content": "      return res.status('404').json({ error: 'path not found' });"}, {"line_number": 11, "line_content": "    } else {"}, {"line_number": 12, "line_content": "      req.flash('danger', `We couldn't find path ${path}`);"}, {"line_number": 13, "line_content": "      return res.redirectWithFlash(`${origin}/404`);"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": "  });"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 51, "lines": [{"line_number": 1, "line_content": "async function bootChallenge(app, done) {"}, {"line_number": 2, "line_content": "  const send200toNonUser = ifNoUserSend(true);"}, {"line_number": 3, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 4, "line_content": "  const router = app.loopback.Router();"}, {"line_number": 5, "line_content": "  const challengeUrlResolver = await createChallengeUrlResolver("}, {"line_number": 6, "line_content": "    getChallenges()"}, {"line_number": 7, "line_content": "  );"}, {"line_number": 8, "line_content": "  const redirectToCurrentChallenge = createRedirectToCurrentChallenge("}, {"line_number": 9, "line_content": "    challengeUrlResolver,"}, {"line_number": 10, "line_content": "    normalizeParams,"}, {"line_number": 11, "line_content": "    getRedirectParams"}, {"line_number": 12, "line_content": "  );"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  api.post("}, {"line_number": 15, "line_content": "    '/modern-challenge-completed',"}, {"line_number": 16, "line_content": "    send200toNonUser,"}, {"line_number": 17, "line_content": "    isValidChallengeCompletion,"}, {"line_number": 18, "line_content": "    modernChallengeCompleted"}, {"line_number": 19, "line_content": "  );"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  api.post("}, {"line_number": 22, "line_content": "    '/project-completed',"}, {"line_number": 23, "line_content": "    send200toNonUser,"}, {"line_number": 24, "line_content": "    isValidChallengeCompletion,"}, {"line_number": 25, "line_content": "    projectCompleted"}, {"line_number": 26, "line_content": "  );"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "  api.post("}, {"line_number": 29, "line_content": "    '/backend-challenge-completed',"}, {"line_number": 30, "line_content": "    send200toNonUser,"}, {"line_number": 31, "line_content": "    isValidChallengeCompletion,"}, {"line_number": 32, "line_content": "    backendChallengeCompleted"}, {"line_number": 33, "line_content": "  );"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "  api.post("}, {"line_number": 36, "line_content": "    '/save-challenge',"}, {"line_number": 37, "line_content": "    send200toNonUser,"}, {"line_number": 38, "line_content": "    isValidChallengeCompletion,"}, {"line_number": 39, "line_content": "    saveChallenge"}, {"line_number": 40, "line_content": "  );"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "  router.get('/challenges/current-challenge', redirectToCurrentChallenge);"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "  const coderoadChallengeCompleted = createCoderoadChallengeCompleted(app);"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "  api.post('/coderoad-challenge-completed', coderoadChallengeCompleted);"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "  app.use(api);"}, {"line_number": 49, "line_content": "  app.use(router);"}, {"line_number": 50, "line_content": "  done();"}, {"line_number": 51, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 100, "lines": [{"line_number": 1, "line_content": "function buildUserUpdate("}, {"line_number": 2, "line_content": "  user,"}, {"line_number": 3, "line_content": "  challengeId,"}, {"line_number": 4, "line_content": "  _completedChallenge,"}, {"line_number": 5, "line_content": "  timezone"}, {"line_number": 6, "line_content": ") {"}, {"line_number": 7, "line_content": "  const { files, completedDate = Date.now() } = _completedChallenge;"}, {"line_number": 8, "line_content": "  let completedChallenge = {};"}, {"line_number": 9, "line_content": "  if ("}, {"line_number": 10, "line_content": "    jsCertProjectIds.includes(challengeId) ||"}, {"line_number": 11, "line_content": "    multifileCertProjectIds.includes(challengeId)"}, {"line_number": 12, "line_content": "  ) {"}, {"line_number": 13, "line_content": "    completedChallenge = {"}, {"line_number": 14, "line_content": "      ..._completedChallenge,"}, {"line_number": 15, "line_content": "      files: files?.map(file =>"}, {"line_number": 16, "line_content": "        pick(file, ['contents', 'key', 'index', 'name', 'path', 'ext'])"}, {"line_number": 17, "line_content": "      )"}, {"line_number": 18, "line_content": "    };"}, {"line_number": 19, "line_content": "  } else {"}, {"line_number": 20, "line_content": "    completedChallenge = omit(_completedChallenge, ['files']);"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": "  let finalChallenge;"}, {"line_number": 23, "line_content": "  const $push = {},"}, {"line_number": 24, "line_content": "    $set = {},"}, {"line_number": 25, "line_content": "    $pull = {};"}, {"line_number": 26, "line_content": "  const {"}, {"line_number": 27, "line_content": "    timezone: userTimezone,"}, {"line_number": 28, "line_content": "    completedChallenges = [],"}, {"line_number": 29, "line_content": "    needsModeration = false,"}, {"line_number": 30, "line_content": "    savedChallenges = []"}, {"line_number": 31, "line_content": "  } = user;"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "  const oldIndex = completedChallenges.findIndex("}, {"line_number": 34, "line_content": "    ({ id }) => challengeId === id"}, {"line_number": 35, "line_content": "  );"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "  const alreadyCompleted = oldIndex !== -1;"}, {"line_number": 38, "line_content": "  const oldChallenge = alreadyCompleted ? completedChallenges[oldIndex] : null;"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "  if (alreadyCompleted) {"}, {"line_number": 41, "line_content": "    finalChallenge = {"}, {"line_number": 42, "line_content": "      ...completedChallenge,"}, {"line_number": 43, "line_content": "      completedDate: oldChallenge.completedDate"}, {"line_number": 44, "line_content": "    };"}, {"line_number": 45, "line_content": "    $set[`completedChallenges.${oldIndex}`] = finalChallenge;"}, {"line_number": 46, "line_content": "  } else {"}, {"line_number": 47, "line_content": "    finalChallenge = {"}, {"line_number": 48, "line_content": "      ...completedChallenge"}, {"line_number": 49, "line_content": "    };"}, {"line_number": 50, "line_content": "    $push.progressTimestamps = completedDate;"}, {"line_number": 51, "line_content": "    $push.completedChallenges = finalChallenge;"}, {"line_number": 52, "line_content": "  }"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "  if (savableChallenges.includes(challengeId)) {"}, {"line_number": 55, "line_content": "    const challengeToSave = {"}, {"line_number": 56, "line_content": "      id: challengeId,"}, {"line_number": 57, "line_content": "      lastSavedDate: completedDate,"}, {"line_number": 58, "line_content": "      files: files?.map(file =>"}, {"line_number": 59, "line_content": "        pick(file, ['contents', 'key', 'name', 'ext', 'history'])"}, {"line_number": 60, "line_content": "      )"}, {"line_number": 61, "line_content": "    };"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "    const savedIndex = savedChallenges.findIndex("}, {"line_number": 64, "line_content": "      ({ id }) => challengeId === id"}, {"line_number": 65, "line_content": "    );"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "    if (savedIndex >= 0) {"}, {"line_number": 68, "line_content": "      $set[`savedChallenges.${savedIndex}`] = challengeToSave;"}, {"line_number": 69, "line_content": "      savedChallenges[savedIndex] = challengeToSave;"}, {"line_number": 70, "line_content": "    } else {"}, {"line_number": 71, "line_content": "      $push.savedChallenges = challengeToSave;"}, {"line_number": 72, "line_content": "      savedChallenges.push(challengeToSave);"}, {"line_number": 73, "line_content": "    }"}, {"line_number": 74, "line_content": "  }"}, {"line_number": 75, "line_content": ""}, {"line_number": 76, "line_content": "  // remove from partiallyCompleted on submit"}, {"line_number": 77, "line_content": "  $pull.partiallyCompletedChallenges = { id: challengeId };"}, {"line_number": 78, "line_content": ""}, {"line_number": 79, "line_content": "  if ("}, {"line_number": 80, "line_content": "    timezone &&"}, {"line_number": 81, "line_content": "    timezone !== 'UTC' &&"}, {"line_number": 82, "line_content": "    (!userTimezone || userTimezone === 'UTC')"}, {"line_number": 83, "line_content": "  ) {"}, {"line_number": 84, "line_content": "    $set.timezone = userTimezone;"}, {"line_number": 85, "line_content": "  }"}, {"line_number": 86, "line_content": ""}, {"line_number": 87, "line_content": "  if (needsModeration) $set.needsModeration = true;"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "  const updateData = {};"}, {"line_number": 90, "line_content": "  if (!isEmpty($set)) updateData.$set = $set;"}, {"line_number": 91, "line_content": "  if (!isEmpty($push)) updateData.$push = $push;"}, {"line_number": 92, "line_content": "  if (!isEmpty($pull)) updateData.$pull = $pull;"}, {"line_number": 93, "line_content": ""}, {"line_number": 94, "line_content": "  return {"}, {"line_number": 95, "line_content": "    alreadyCompleted,"}, {"line_number": 96, "line_content": "    updateData,"}, {"line_number": 97, "line_content": "    completedDate: finalChallenge.completedDate,"}, {"line_number": 98, "line_content": "    savedChallenges"}, {"line_number": 99, "line_content": "  };"}, {"line_number": 100, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function buildChallengeUrl(challenge) {"}, {"line_number": 2, "line_content": "  const { superBlock, block, dashedName } = challenge;"}, {"line_number": 3, "line_content": "  return `/learn/${superBlock}/${block}/${dashedName}`;"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getFirstChallenge(allChallenges) {"}, {"line_number": 2, "line_content": "  const first = allChallenges.find("}, {"line_number": 3, "line_content": "    ({ challengeOrder, superOrder, order }) =>"}, {"line_number": 4, "line_content": "      challengeOrder === 0 && superOrder === 0 && order === 0"}, {"line_number": 5, "line_content": "  );"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  return first ? buildChallengeUrl(first) : '/learn';"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getChallengeById(allChallenges, targetId) {"}, {"line_number": 2, "line_content": "  return allChallenges.find(({ id }) => id === targetId);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "async function createChallengeUrlResolver("}, {"line_number": 2, "line_content": "  allChallenges,"}, {"line_number": 3, "line_content": "  { _getFirstChallenge = getFirstChallenge } = {}"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  const cache = new Map();"}, {"line_number": 6, "line_content": "  const firstChallenge = _getFirstChallenge(allChallenges);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  return function resolveChallengeUrl(id) {"}, {"line_number": 9, "line_content": "    if (isEmpty(id)) {"}, {"line_number": 10, "line_content": "      return Promise.resolve(firstChallenge);"}, {"line_number": 11, "line_content": "    } else {"}, {"line_number": 12, "line_content": "      return new Promise(resolve => {"}, {"line_number": 13, "line_content": "        if (cache.has(id)) {"}, {"line_number": 14, "line_content": "          resolve(cache.get(id));"}, {"line_number": 15, "line_content": "        }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "        const challenge = getChallengeById(allChallenges, id);"}, {"line_number": 18, "line_content": "        if (isEmpty(challenge)) {"}, {"line_number": 19, "line_content": "          resolve(firstChallenge);"}, {"line_number": 20, "line_content": "        } else {"}, {"line_number": 21, "line_content": "          const challengeUrl = buildChallengeUrl(challenge);"}, {"line_number": 22, "line_content": "          cache.set(id, challengeUrl);"}, {"line_number": 23, "line_content": "          resolve(challengeUrl);"}, {"line_number": 24, "line_content": "        }"}, {"line_number": 25, "line_content": "      });"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": "  };"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function isValidChallengeCompletion(req, res, next) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    body: { id, challengeType, solution }"}, {"line_number": 4, "line_content": "  } = req;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  // ToDO: Validate other things (challengeFiles, etc)"}, {"line_number": 7, "line_content": "  const isValidChallengeCompletionErrorMsg = {"}, {"line_number": 8, "line_content": "    type: 'error',"}, {"line_number": 9, "line_content": "    message: 'That does not appear to be a valid challenge submission.'"}, {"line_number": 10, "line_content": "  };"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  if (!ObjectID.isValid(id)) {"}, {"line_number": 13, "line_content": "    log('isObjectId', id, ObjectID.isValid(id));"}, {"line_number": 14, "line_content": "    return res.status(403).json(isValidChallengeCompletionErrorMsg);"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "  if ('challengeType' in req.body && !isNumeric(String(challengeType))) {"}, {"line_number": 17, "line_content": "    log('challengeType', challengeType, isNumeric(challengeType));"}, {"line_number": 18, "line_content": "    return res.status(403).json(isValidChallengeCompletionErrorMsg);"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "  if ('solution' in req.body && !isURL(solution)) {"}, {"line_number": 21, "line_content": "    log('isObjectId', id, ObjectID.isValid(id));"}, {"line_number": 22, "line_content": "    return res.status(403).json(isValidChallengeCompletionErrorMsg);"}, {"line_number": 23, "line_content": "  }"}, {"line_number": 24, "line_content": "  return next();"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 55, "lines": [{"line_number": 1, "line_content": "function modernChallengeCompleted(req, res, next) {"}, {"line_number": 2, "line_content": "  const user = req.user;"}, {"line_number": 3, "line_content": "  return user"}, {"line_number": 4, "line_content": "    .getCompletedChallenges$()"}, {"line_number": 5, "line_content": "    .flatMap(() => {"}, {"line_number": 6, "line_content": "      const completedDate = Date.now();"}, {"line_number": 7, "line_content": "      const { id, files, challengeType } = req.body;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "      const completedChallenge = {"}, {"line_number": 10, "line_content": "        id,"}, {"line_number": 11, "line_content": "        files,"}, {"line_number": 12, "line_content": "        completedDate"}, {"line_number": 13, "line_content": "      };"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "      // if multifile cert project"}, {"line_number": 16, "line_content": "      if (challengeType === 14) {"}, {"line_number": 17, "line_content": "        completedChallenge.isManuallyApproved = false;"}, {"line_number": 18, "line_content": "        user.needsModeration = true;"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "      // We only need to know the challenge type if it's a project. If it's a"}, {"line_number": 22, "line_content": "      // step or normal challenge we can avoid storing in the database."}, {"line_number": 23, "line_content": "      if ("}, {"line_number": 24, "line_content": "        jsCertProjectIds.includes(id) ||"}, {"line_number": 25, "line_content": "        multifileCertProjectIds.includes(id)"}, {"line_number": 26, "line_content": "      ) {"}, {"line_number": 27, "line_content": "        completedChallenge.challengeType = challengeType;"}, {"line_number": 28, "line_content": "      }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "      const { alreadyCompleted, savedChallenges, updateData } = buildUserUpdate("}, {"line_number": 31, "line_content": "        user,"}, {"line_number": 32, "line_content": "        id,"}, {"line_number": 33, "line_content": "        completedChallenge"}, {"line_number": 34, "line_content": "      );"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "      const points = alreadyCompleted ? user.points : user.points + 1;"}, {"line_number": 37, "line_content": "      const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 38, "line_content": "        user.updateAttributes(updateData, err => {"}, {"line_number": 39, "line_content": "          if (err) {"}, {"line_number": 40, "line_content": "            return reject(err);"}, {"line_number": 41, "line_content": "          }"}, {"line_number": 42, "line_content": "          return resolve();"}, {"line_number": 43, "line_content": "        })"}, {"line_number": 44, "line_content": "      );"}, {"line_number": 45, "line_content": "      return Observable.fromPromise(updatePromise).map(() => {"}, {"line_number": 46, "line_content": "        return res.json({"}, {"line_number": 47, "line_content": "          points,"}, {"line_number": 48, "line_content": "          alreadyCompleted,"}, {"line_number": 49, "line_content": "          completedDate,"}, {"line_number": 50, "line_content": "          savedChallenges"}, {"line_number": 51, "line_content": "        });"}, {"line_number": 52, "line_content": "      });"}, {"line_number": 53, "line_content": "    })"}, {"line_number": 54, "line_content": "    .subscribe(() => {}, next);"}, {"line_number": 55, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 68, "lines": [{"line_number": 1, "line_content": "function projectCompleted(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user, body = {} } = req;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const completedChallenge = pick(body, ["}, {"line_number": 5, "line_content": "    'id',"}, {"line_number": 6, "line_content": "    'solution',"}, {"line_number": 7, "line_content": "    'githubLink',"}, {"line_number": 8, "line_content": "    'challengeType',"}, {"line_number": 9, "line_content": "    'files'"}, {"line_number": 10, "line_content": "  ]);"}, {"line_number": 11, "line_content": "  completedChallenge.completedDate = Date.now();"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  if (!completedChallenge.solution) {"}, {"line_number": 14, "line_content": "    return res.status(403).json({"}, {"line_number": 15, "line_content": "      type: 'error',"}, {"line_number": 16, "line_content": "      message:"}, {"line_number": 17, "line_content": "        'You have not provided the valid links for us to inspect your work.'"}, {"line_number": 18, "line_content": "    });"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  // CodeRoad cert project"}, {"line_number": 22, "line_content": "  if (completedChallenge.challengeType === 13) {"}, {"line_number": 23, "line_content": "    const { partiallyCompletedChallenges = [], completedChallenges = [] } ="}, {"line_number": 24, "line_content": "      user;"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    const isPartiallyCompleted = partiallyCompletedChallenges.some("}, {"line_number": 27, "line_content": "      challenge => challenge.id === completedChallenge.id"}, {"line_number": 28, "line_content": "    );"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    const isCompleted = completedChallenges.some("}, {"line_number": 31, "line_content": "      challenge => challenge.id === completedChallenge.id"}, {"line_number": 32, "line_content": "    );"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    if (!isPartiallyCompleted && !isCompleted) {"}, {"line_number": 35, "line_content": "      return res.status(403).json({"}, {"line_number": 36, "line_content": "        type: 'error',"}, {"line_number": 37, "line_content": "        message: 'You have to complete the project before you can submit a URL.'"}, {"line_number": 38, "line_content": "      });"}, {"line_number": 39, "line_content": "    }"}, {"line_number": 40, "line_content": "  }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "  return user"}, {"line_number": 43, "line_content": "    .getCompletedChallenges$()"}, {"line_number": 44, "line_content": "    .flatMap(() => {"}, {"line_number": 45, "line_content": "      const { alreadyCompleted, updateData } = buildUserUpdate("}, {"line_number": 46, "line_content": "        user,"}, {"line_number": 47, "line_content": "        completedChallenge.id,"}, {"line_number": 48, "line_content": "        completedChallenge"}, {"line_number": 49, "line_content": "      );"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "      const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 52, "line_content": "        user.updateAttributes(updateData, err => {"}, {"line_number": 53, "line_content": "          if (err) {"}, {"line_number": 54, "line_content": "            return reject(err);"}, {"line_number": 55, "line_content": "          }"}, {"line_number": 56, "line_content": "          return resolve();"}, {"line_number": 57, "line_content": "        })"}, {"line_number": 58, "line_content": "      );"}, {"line_number": 59, "line_content": "      return Observable.fromPromise(updatePromise).doOnNext(() => {"}, {"line_number": 60, "line_content": "        return res.json({"}, {"line_number": 61, "line_content": "          alreadyCompleted,"}, {"line_number": 62, "line_content": "          points: alreadyCompleted ? user.points : user.points + 1,"}, {"line_number": 63, "line_content": "          completedDate: completedChallenge.completedDate"}, {"line_number": 64, "line_content": "        });"}, {"line_number": 65, "line_content": "      });"}, {"line_number": 66, "line_content": "    })"}, {"line_number": 67, "line_content": "    .subscribe(() => {}, next);"}, {"line_number": 68, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "function backendChallengeCompleted(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user, body = {} } = req;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const completedChallenge = pick(body, ['id', 'solution']);"}, {"line_number": 5, "line_content": "  completedChallenge.completedDate = Date.now();"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  return user"}, {"line_number": 8, "line_content": "    .getCompletedChallenges$()"}, {"line_number": 9, "line_content": "    .flatMap(() => {"}, {"line_number": 10, "line_content": "      const { alreadyCompleted, updateData } = buildUserUpdate("}, {"line_number": 11, "line_content": "        user,"}, {"line_number": 12, "line_content": "        completedChallenge.id,"}, {"line_number": 13, "line_content": "        completedChallenge"}, {"line_number": 14, "line_content": "      );"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "      const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 17, "line_content": "        user.updateAttributes(updateData, err => {"}, {"line_number": 18, "line_content": "          if (err) {"}, {"line_number": 19, "line_content": "            return reject(err);"}, {"line_number": 20, "line_content": "          }"}, {"line_number": 21, "line_content": "          return resolve();"}, {"line_number": 22, "line_content": "        })"}, {"line_number": 23, "line_content": "      );"}, {"line_number": 24, "line_content": "      return Observable.fromPromise(updatePromise).doOnNext(() => {"}, {"line_number": 25, "line_content": "        return res.json({"}, {"line_number": 26, "line_content": "          alreadyCompleted,"}, {"line_number": 27, "line_content": "          points: alreadyCompleted ? user.points : user.points + 1,"}, {"line_number": 28, "line_content": "          completedDate: completedChallenge.completedDate"}, {"line_number": 29, "line_content": "        });"}, {"line_number": 30, "line_content": "      });"}, {"line_number": 31, "line_content": "    })"}, {"line_number": 32, "line_content": "    .subscribe(() => {}, next);"}, {"line_number": 33, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 54, "lines": [{"line_number": 1, "line_content": "function saveChallenge(req, res, next) {"}, {"line_number": 2, "line_content": "  const user = req.user;"}, {"line_number": 3, "line_content": "  const { savedChallenges = [] } = user;"}, {"line_number": 4, "line_content": "  const { id: challengeId, files = [] } = req.body;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  if (!savableChallenges.includes(challengeId)) {"}, {"line_number": 7, "line_content": "    return res.status(403).send('That challenge type is not savable');"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  const challengeToSave = {"}, {"line_number": 11, "line_content": "    id: challengeId,"}, {"line_number": 12, "line_content": "    lastSavedDate: Date.now(),"}, {"line_number": 13, "line_content": "    files: files?.map(file =>"}, {"line_number": 14, "line_content": "      pick(file, ['contents', 'key', 'name', 'ext', 'history'])"}, {"line_number": 15, "line_content": "    )"}, {"line_number": 16, "line_content": "  };"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  return user"}, {"line_number": 19, "line_content": "    .getSavedChallenges$()"}, {"line_number": 20, "line_content": "    .flatMap(() => {"}, {"line_number": 21, "line_content": "      const savedIndex = savedChallenges.findIndex("}, {"line_number": 22, "line_content": "        ({ id }) => challengeId === id"}, {"line_number": 23, "line_content": "      );"}, {"line_number": 24, "line_content": "      const $push = {},"}, {"line_number": 25, "line_content": "        $set = {};"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "      if (savedIndex >= 0) {"}, {"line_number": 28, "line_content": "        $set[`savedChallenges.${savedIndex}`] = challengeToSave;"}, {"line_number": 29, "line_content": "        savedChallenges[savedIndex] = challengeToSave;"}, {"line_number": 30, "line_content": "      } else {"}, {"line_number": 31, "line_content": "        $push.savedChallenges = challengeToSave;"}, {"line_number": 32, "line_content": "        savedChallenges.push(challengeToSave);"}, {"line_number": 33, "line_content": "      }"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "      const updateData = {};"}, {"line_number": 36, "line_content": "      if (!isEmpty($set)) updateData.$set = $set;"}, {"line_number": 37, "line_content": "      if (!isEmpty($push)) updateData.$push = $push;"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "      const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 40, "line_content": "        user.updateAttributes(updateData, err => {"}, {"line_number": 41, "line_content": "          if (err) {"}, {"line_number": 42, "line_content": "            return reject(err);"}, {"line_number": 43, "line_content": "          }"}, {"line_number": 44, "line_content": "          return resolve();"}, {"line_number": 45, "line_content": "        })"}, {"line_number": 46, "line_content": "      );"}, {"line_number": 47, "line_content": "      return Observable.fromPromise(updatePromise).doOnNext(() => {"}, {"line_number": 48, "line_content": "        return res.json({"}, {"line_number": 49, "line_content": "          savedChallenges"}, {"line_number": 50, "line_content": "        });"}, {"line_number": 51, "line_content": "      });"}, {"line_number": 52, "line_content": "    })"}, {"line_number": 53, "line_content": "    .subscribe(() => {}, next);"}, {"line_number": 54, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 113, "lines": [{"line_number": 1, "line_content": "function createCoderoadChallengeCompleted(app) {"}, {"line_number": 2, "line_content": "  /* Example request coming from CodeRoad:"}, {"line_number": 3, "line_content": "   * req.body: { tutorialId: 'freeCodeCamp/learn-bash-by-building-a-boilerplate:v1.0.0' }"}, {"line_number": 4, "line_content": "   * req.headers: { coderoad-user-token: '8kFIlZiwMioY6hqqt...' }"}, {"line_number": 5, "line_content": "   */"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const { UserToken, User } = app.models;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  return async function coderoadChallengeCompleted(req, res) {"}, {"line_number": 10, "line_content": "    const { 'coderoad-user-token': encodedUserToken } = req.headers;"}, {"line_number": 11, "line_content": "    const { tutorialId } = req.body;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    if (!tutorialId) return res.send(`'tutorialId' not found in request body`);"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    if (!encodedUserToken)"}, {"line_number": 16, "line_content": "      return res.send(`'coderoad-user-token' not found in request headers`);"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    let userToken;"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    try {"}, {"line_number": 21, "line_content": "      userToken = jwt.verify(encodedUserToken, jwtSecret)?.userToken;"}, {"line_number": 22, "line_content": "    } catch {"}, {"line_number": 23, "line_content": "      return res.send(`invalid user token`);"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    const tutorialRepo = tutorialId?.split(':')[0];"}, {"line_number": 27, "line_content": "    const tutorialOrg = tutorialRepo?.split('/')?.[0];"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    // this allows any GH account to host the repo in development or staging"}, {"line_number": 30, "line_content": "    // .org submissions should always be from repos hosted on the fCC GH org"}, {"line_number": 31, "line_content": "    if (deploymentEnv !== 'staging' && environment !== 'development') {"}, {"line_number": 32, "line_content": "      if (tutorialOrg !== 'freeCodeCamp')"}, {"line_number": 33, "line_content": "        return res.send('Tutorial not hosted on freeCodeCamp GitHub account');"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    // validate tutorial name is in codeRoadChallenges object"}, {"line_number": 37, "line_content": "    const challenge = codeRoadChallenges.find(challenge =>"}, {"line_number": 38, "line_content": "      challenge.url?.endsWith(tutorialRepo)"}, {"line_number": 39, "line_content": "    );"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "    if (!challenge) return res.send('Tutorial name is not valid');"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "    const { id: challengeId, challengeType } = challenge;"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    try {"}, {"line_number": 46, "line_content": "      // check if user token is in database"}, {"line_number": 47, "line_content": "      const tokenInfo = await UserToken.findOne({"}, {"line_number": 48, "line_content": "        where: { id: userToken }"}, {"line_number": 49, "line_content": "      });"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "      if (!tokenInfo) return res.send('User token not found');"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "      const { userId } = tokenInfo;"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "      // check if user exists for user token"}, {"line_number": 56, "line_content": "      const user = await User.findOne({"}, {"line_number": 57, "line_content": "        where: { id: userId }"}, {"line_number": 58, "line_content": "      });"}, {"line_number": 59, "line_content": ""}, {"line_number": 60, "line_content": "      if (!user) return res.send('User for user token not found');"}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "      // submit challenge"}, {"line_number": 63, "line_content": "      const completedDate = Date.now();"}, {"line_number": 64, "line_content": "      const { completedChallenges = [], partiallyCompletedChallenges = [] } ="}, {"line_number": 65, "line_content": "        user;"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "      let userUpdateInfo = {};"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "      const isCompleted = completedChallenges.some("}, {"line_number": 70, "line_content": "        challenge => challenge.id === challengeId"}, {"line_number": 71, "line_content": "      );"}, {"line_number": 72, "line_content": ""}, {"line_number": 73, "line_content": "      // if CodeRoad cert project and not in completedChallenges,"}, {"line_number": 74, "line_content": "      // add to partiallyCompletedChallenges"}, {"line_number": 75, "line_content": "      if (challengeType === 13 && !isCompleted) {"}, {"line_number": 76, "line_content": "        const finalChallenge = {"}, {"line_number": 77, "line_content": "          id: challengeId,"}, {"line_number": 78, "line_content": "          completedDate"}, {"line_number": 79, "line_content": "        };"}, {"line_number": 80, "line_content": ""}, {"line_number": 81, "line_content": "        userUpdateInfo.updateData = {};"}, {"line_number": 82, "line_content": "        userUpdateInfo.updateData.$set = {"}, {"line_number": 83, "line_content": "          partiallyCompletedChallenges: uniqBy("}, {"line_number": 84, "line_content": "            ["}, {"line_number": 85, "line_content": "              finalChallenge,"}, {"line_number": 86, "line_content": "              ...partiallyCompletedChallenges.map("}, {"line_number": 87, "line_content": "                fixPartiallyCompletedChallengeItem"}, {"line_number": 88, "line_content": "              )"}, {"line_number": 89, "line_content": "            ],"}, {"line_number": 90, "line_content": "            'id'"}, {"line_number": 91, "line_content": "          )"}, {"line_number": 92, "line_content": "        };"}, {"line_number": 93, "line_content": ""}, {"line_number": 94, "line_content": "        // else, add to or update completedChallenges"}, {"line_number": 95, "line_content": "      } else {"}, {"line_number": 96, "line_content": "        userUpdateInfo = buildUserUpdate(user, challengeId, {"}, {"line_number": 97, "line_content": "          id: challengeId,"}, {"line_number": 98, "line_content": "          completedDate"}, {"line_number": 99, "line_content": "        });"}, {"line_number": 100, "line_content": "      }"}, {"line_number": 101, "line_content": "      const updatedUser = await user.updateAttributes("}, {"line_number": 102, "line_content": "        userUpdateInfo?.updateData"}, {"line_number": 103, "line_content": "      );"}, {"line_number": 104, "line_content": ""}, {"line_number": 105, "line_content": "      if (!updatedUser)"}, {"line_number": 106, "line_content": "        return res.send('An error occurred trying to submit the challenge');"}, {"line_number": 107, "line_content": "    } catch (e) {"}, {"line_number": 108, "line_content": "      return res.send('An error occurred trying to submit the challenge');"}, {"line_number": 109, "line_content": "    }"}, {"line_number": 110, "line_content": ""}, {"line_number": 111, "line_content": "    return res.send('Successfully submitted challenge');"}, {"line_number": 112, "line_content": "  };"}, {"line_number": 113, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function createRedirectToCurrentChallenge("}, {"line_number": 2, "line_content": "  challengeUrlResolver,"}, {"line_number": 3, "line_content": "  normalizeParams,"}, {"line_number": 4, "line_content": "  getRedirectParams"}, {"line_number": 5, "line_content": ") {"}, {"line_number": 6, "line_content": "  return async function redirectToCurrentChallenge(req, res, next) {"}, {"line_number": 7, "line_content": "    const { user } = req;"}, {"line_number": 8, "line_content": "    const { origin, pathPrefix } = getRedirectParams(req, normalizeParams);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const redirectBase = getPrefixedLandingPath(origin, pathPrefix);"}, {"line_number": 11, "line_content": "    if (!user) {"}, {"line_number": 12, "line_content": "      return res.redirect(redirectBase + '/learn');"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    const challengeId = user && user.currentChallengeId;"}, {"line_number": 16, "line_content": "    const challengeUrl = await challengeUrlResolver(challengeId).catch(next);"}, {"line_number": 17, "line_content": "    if (challengeUrl === '/learn') {"}, {"line_number": 18, "line_content": "      // this should normally not be hit if database is properly seeded"}, {"line_number": 19, "line_content": "      throw new Error(dedent`"}, {"line_number": 20, "line_content": "        Attempted to find the url for ${challengeId || 'Unknown ID'}'"}, {"line_number": 21, "line_content": "        but came up empty."}, {"line_number": 22, "line_content": "        db may not be properly seeded."}, {"line_number": 23, "line_content": "      `);"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": "    return res.redirect(`${redirectBase}${challengeUrl}`);"}, {"line_number": 26, "line_content": "  };"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function showForum(req, res) {"}, {"line_number": 2, "line_content": "    res.redirect('http://forum.freecodecamp.org/');"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 215, "lines": [{"line_number": 1, "line_content": "function donateBoot(app, done) {"}, {"line_number": 2, "line_content": "  let stripe = false;"}, {"line_number": 3, "line_content": "  const { User } = app.models;"}, {"line_number": 4, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 5, "line_content": "  const hooks = app.loopback.Router();"}, {"line_number": 6, "line_content": "  const donateRouter = app.loopback.Router();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  function connectToStripe() {"}, {"line_number": 9, "line_content": "    return new Promise(function () {"}, {"line_number": 10, "line_content": "      // connect to stripe API"}, {"line_number": 11, "line_content": "      stripe = Stripe(keys.stripe.secret);"}, {"line_number": 12, "line_content": "    });"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  async function handleStripeCardDonation(req, res) {"}, {"line_number": 16, "line_content": "    return createStripeCardDonation(req, res, stripe, app).catch(err => {"}, {"line_number": 17, "line_content": "      if ("}, {"line_number": 18, "line_content": "        err.type === 'AlreadyDonatingError' ||"}, {"line_number": 19, "line_content": "        err.type === 'UserActionRequired' ||"}, {"line_number": 20, "line_content": "        err.type === 'PaymentMethodRequired'"}, {"line_number": 21, "line_content": "      ) {"}, {"line_number": 22, "line_content": "        return res.status(402).send({ error: err });"}, {"line_number": 23, "line_content": "      }"}, {"line_number": 24, "line_content": "      if (err.type === 'InvalidRequest')"}, {"line_number": 25, "line_content": "        return res.status(400).send({ error: err });"}, {"line_number": 26, "line_content": "      return res.status(500).send({"}, {"line_number": 27, "line_content": "        error: 'Donation failed due to a server error.'"}, {"line_number": 28, "line_content": "      });"}, {"line_number": 29, "line_content": "    });"}, {"line_number": 30, "line_content": "  }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "  function createStripeDonation(req, res) {"}, {"line_number": 33, "line_content": "    const { user, body } = req;"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    const {"}, {"line_number": 36, "line_content": "      amount,"}, {"line_number": 37, "line_content": "      duration,"}, {"line_number": 38, "line_content": "      token: { id },"}, {"line_number": 39, "line_content": "      email,"}, {"line_number": 40, "line_content": "      name"}, {"line_number": 41, "line_content": "    } = body;"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "    if (!validStripeForm(amount, duration, email)) {"}, {"line_number": 44, "line_content": "      return res.status(500).send({"}, {"line_number": 45, "line_content": "        error: 'The donation form had invalid values for this submission.'"}, {"line_number": 46, "line_content": "      });"}, {"line_number": 47, "line_content": "    }"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "    const fccUser = user"}, {"line_number": 50, "line_content": "      ? Promise.resolve(user)"}, {"line_number": 51, "line_content": "      : new Promise((resolve, reject) =>"}, {"line_number": 52, "line_content": "          User.findOrCreate("}, {"line_number": 53, "line_content": "            { where: { email } },"}, {"line_number": 54, "line_content": "            { email },"}, {"line_number": 55, "line_content": "            (err, instance) => {"}, {"line_number": 56, "line_content": "              if (err) {"}, {"line_number": 57, "line_content": "                return reject(err);"}, {"line_number": 58, "line_content": "              }"}, {"line_number": 59, "line_content": "              return resolve(instance);"}, {"line_number": 60, "line_content": "            }"}, {"line_number": 61, "line_content": "          )"}, {"line_number": 62, "line_content": "        );"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "    let donatingUser = {};"}, {"line_number": 65, "line_content": "    let donation = {"}, {"line_number": 66, "line_content": "      email,"}, {"line_number": 67, "line_content": "      amount,"}, {"line_number": 68, "line_content": "      duration,"}, {"line_number": 69, "line_content": "      provider: 'stripe',"}, {"line_number": 70, "line_content": "      startDate: new Date(Date.now()).toISOString()"}, {"line_number": 71, "line_content": "    };"}, {"line_number": 72, "line_content": ""}, {"line_number": 73, "line_content": "    const createCustomer = async user => {"}, {"line_number": 74, "line_content": "      let customer;"}, {"line_number": 75, "line_content": "      donatingUser = user;"}, {"line_number": 76, "line_content": "      try {"}, {"line_number": 77, "line_content": "        customer = await stripe.customers.create({"}, {"line_number": 78, "line_content": "          email,"}, {"line_number": 79, "line_content": "          card: id,"}, {"line_number": 80, "line_content": "          name"}, {"line_number": 81, "line_content": "        });"}, {"line_number": 82, "line_content": "      } catch (err) {"}, {"line_number": 83, "line_content": "        throw new Error('Error creating stripe customer');"}, {"line_number": 84, "line_content": "      }"}, {"line_number": 85, "line_content": "      log(`Stripe customer with id ${customer.id} created`);"}, {"line_number": 86, "line_content": "      return customer;"}, {"line_number": 87, "line_content": "    };"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "    const createSubscription = async customer => {"}, {"line_number": 90, "line_content": "      donation.customerId = customer.id;"}, {"line_number": 91, "line_content": "      let sub;"}, {"line_number": 92, "line_content": "      try {"}, {"line_number": 93, "line_content": "        sub = await stripe.subscriptions.create({"}, {"line_number": 94, "line_content": "          customer: customer.id,"}, {"line_number": 95, "line_content": "          items: ["}, {"line_number": 96, "line_content": "            {"}, {"line_number": 97, "line_content": "              plan: `${donationSubscriptionConfig.duration["}, {"line_number": 98, "line_content": "                duration"}, {"line_number": 99, "line_content": "              ].toLowerCase()}-donation-${amount}`"}, {"line_number": 100, "line_content": "            }"}, {"line_number": 101, "line_content": "          ]"}, {"line_number": 102, "line_content": "        });"}, {"line_number": 103, "line_content": "      } catch (err) {"}, {"line_number": 104, "line_content": "        throw new Error('Error creating stripe subscription');"}, {"line_number": 105, "line_content": "      }"}, {"line_number": 106, "line_content": "      return sub;"}, {"line_number": 107, "line_content": "    };"}, {"line_number": 108, "line_content": ""}, {"line_number": 109, "line_content": "    const createAsyncUserDonation = () => {"}, {"line_number": 110, "line_content": "      donatingUser"}, {"line_number": 111, "line_content": "        .createDonation(donation)"}, {"line_number": 112, "line_content": "        .toPromise()"}, {"line_number": 113, "line_content": "        .catch(err => {"}, {"line_number": 114, "line_content": "          throw new Error(err);"}, {"line_number": 115, "line_content": "        });"}, {"line_number": 116, "line_content": "    };"}, {"line_number": 117, "line_content": ""}, {"line_number": 118, "line_content": "    return Promise.resolve(fccUser)"}, {"line_number": 119, "line_content": "      .then(nonDonatingUser => {"}, {"line_number": 120, "line_content": "        // the logic is removed since users can donate without an account"}, {"line_number": 121, "line_content": "        return nonDonatingUser;"}, {"line_number": 122, "line_content": "      })"}, {"line_number": 123, "line_content": "      .then(createCustomer)"}, {"line_number": 124, "line_content": "      .then(customer => {"}, {"line_number": 125, "line_content": "        return createSubscription(customer).then(subscription => {"}, {"line_number": 126, "line_content": "          log(`Stripe subscription with id ${subscription.id} created`);"}, {"line_number": 127, "line_content": "          donation.subscriptionId = subscription.id;"}, {"line_number": 128, "line_content": "          return res.send(subscription);"}, {"line_number": 129, "line_content": "        });"}, {"line_number": 130, "line_content": "      })"}, {"line_number": 131, "line_content": "      .then(createAsyncUserDonation)"}, {"line_number": 132, "line_content": "      .catch(err => {"}, {"line_number": 133, "line_content": "        if ("}, {"line_number": 134, "line_content": "          err.type === 'StripeCardError' ||"}, {"line_number": 135, "line_content": "          err.type === 'AlreadyDonatingError'"}, {"line_number": 136, "line_content": "        ) {"}, {"line_number": 137, "line_content": "          return res.status(402).send({ error: err.message });"}, {"line_number": 138, "line_content": "        }"}, {"line_number": 139, "line_content": "        return res"}, {"line_number": 140, "line_content": "          .status(500)"}, {"line_number": 141, "line_content": "          .send({ error: 'Donation failed due to a server error.' });"}, {"line_number": 142, "line_content": "      });"}, {"line_number": 143, "line_content": "  }"}, {"line_number": 144, "line_content": ""}, {"line_number": 145, "line_content": "  function addDonation(req, res) {"}, {"line_number": 146, "line_content": "    const { user, body } = req;"}, {"line_number": 147, "line_content": "    if (!user || !body) {"}, {"line_number": 148, "line_content": "      return res"}, {"line_number": 149, "line_content": "        .status(500)"}, {"line_number": 150, "line_content": "        .json({ error: 'User must be signed in for this request.' });"}, {"line_number": 151, "line_content": "    }"}, {"line_number": 152, "line_content": "    return Promise.resolve(req)"}, {"line_number": 153, "line_content": "      .then("}, {"line_number": 154, "line_content": "        user.updateAttributes({"}, {"line_number": 155, "line_content": "          isDonating: true"}, {"line_number": 156, "line_content": "        })"}, {"line_number": 157, "line_content": "      )"}, {"line_number": 158, "line_content": "      .then(() => res.status(200).json({ isDonating: true }))"}, {"line_number": 159, "line_content": "      .catch(err => {"}, {"line_number": 160, "line_content": "        log(err.message);"}, {"line_number": 161, "line_content": "        return res.status(500).json({"}, {"line_number": 162, "line_content": "          type: 'danger',"}, {"line_number": 163, "line_content": "          message: 'Something went wrong.'"}, {"line_number": 164, "line_content": "        });"}, {"line_number": 165, "line_content": "      });"}, {"line_number": 166, "line_content": "  }"}, {"line_number": 167, "line_content": ""}, {"line_number": 168, "line_content": "  function updatePaypal(req, res) {"}, {"line_number": 169, "line_content": "    const { headers, body } = req;"}, {"line_number": 170, "line_content": "    return Promise.resolve(req)"}, {"line_number": 171, "line_content": "      .then(verifyWebHookType)"}, {"line_number": 172, "line_content": "      .then(getAsyncPaypalToken)"}, {"line_number": 173, "line_content": "      .then(token => verifyWebHook(headers, body, token, keys.paypal.webhookId))"}, {"line_number": 174, "line_content": "      .then(hookBody => updateUser(hookBody, app))"}, {"line_number": 175, "line_content": "      .catch(err => {"}, {"line_number": 176, "line_content": "        // Todo: This probably need to be thrown and caught in error handler"}, {"line_number": 177, "line_content": "        log(err.message);"}, {"line_number": 178, "line_content": "      })"}, {"line_number": 179, "line_content": "      .finally(() => res.status(200).json({ message: 'received paypal hook' }));"}, {"line_number": 180, "line_content": "  }"}, {"line_number": 181, "line_content": ""}, {"line_number": 182, "line_content": "  const stripeKey = keys.stripe.public;"}, {"line_number": 183, "line_content": "  const secKey = keys.stripe.secret;"}, {"line_number": 184, "line_content": "  const paypalKey = keys.paypal.client;"}, {"line_number": 185, "line_content": "  const paypalSec = keys.paypal.secret;"}, {"line_number": 186, "line_content": ""}, {"line_number": 187, "line_content": "  const stripeSecretInvalid = !secKey || secKey === 'sk_from_stripe_dashboard';"}, {"line_number": 188, "line_content": "  const stripPublicInvalid ="}, {"line_number": 189, "line_content": "    !stripeKey || stripeKey === 'pk_from_stripe_dashboard';"}, {"line_number": 190, "line_content": "  const paypalSecretInvalid ="}, {"line_number": 191, "line_content": "    !paypalKey || paypalKey === 'id_from_paypal_dashboard';"}, {"line_number": 192, "line_content": "  const paypalPublicInvalid ="}, {"line_number": 193, "line_content": "    !paypalSec || paypalSec === 'secret_from_paypal_dashboard';"}, {"line_number": 194, "line_content": ""}, {"line_number": 195, "line_content": "  const stripeInvalid = stripeSecretInvalid || stripPublicInvalid;"}, {"line_number": 196, "line_content": "  const paypalInvalid = paypalPublicInvalid || paypalSecretInvalid;"}, {"line_number": 197, "line_content": ""}, {"line_number": 198, "line_content": "  if (stripeInvalid || paypalInvalid) {"}, {"line_number": 199, "line_content": "    if (process.env.FREECODECAMP_NODE_ENV === 'production') {"}, {"line_number": 200, "line_content": "      throw new Error('Donation API keys are required to boot the server!');"}, {"line_number": 201, "line_content": "    }"}, {"line_number": 202, "line_content": "    log('Donation disabled in development unless ALL test keys are provided');"}, {"line_number": 203, "line_content": "    done();"}, {"line_number": 204, "line_content": "  } else {"}, {"line_number": 205, "line_content": "    api.post('/charge-stripe', createStripeDonation);"}, {"line_number": 206, "line_content": "    api.post('/charge-stripe-card', handleStripeCardDonation);"}, {"line_number": 207, "line_content": "    api.post('/add-donation', addDonation);"}, {"line_number": 208, "line_content": "    hooks.post('/update-paypal', updatePaypal);"}, {"line_number": 209, "line_content": "    donateRouter.use('/donate', api);"}, {"line_number": 210, "line_content": "    donateRouter.use('/hooks', hooks);"}, {"line_number": 211, "line_content": "    app.use(donateRouter);"}, {"line_number": 212, "line_content": "    connectToStripe(stripe).then(done);"}, {"line_number": 213, "line_content": "    done();"}, {"line_number": 214, "line_content": "  }"}, {"line_number": 215, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function connectToStripe() {"}, {"line_number": 2, "line_content": "    return new Promise(function () {"}, {"line_number": 3, "line_content": "      // connect to stripe API"}, {"line_number": 4, "line_content": "      stripe = Stripe(keys.stripe.secret);"}, {"line_number": 5, "line_content": "    });"}, {"line_number": 6, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function handleStripeCardDonation(req, res) {"}, {"line_number": 2, "line_content": "    return createStripeCardDonation(req, res, stripe, app).catch(err => {"}, {"line_number": 3, "line_content": "      if ("}, {"line_number": 4, "line_content": "        err.type === 'AlreadyDonatingError' ||"}, {"line_number": 5, "line_content": "        err.type === 'UserActionRequired' ||"}, {"line_number": 6, "line_content": "        err.type === 'PaymentMethodRequired'"}, {"line_number": 7, "line_content": "      ) {"}, {"line_number": 8, "line_content": "        return res.status(402).send({ error: err });"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "      if (err.type === 'InvalidRequest')"}, {"line_number": 11, "line_content": "        return res.status(400).send({ error: err });"}, {"line_number": 12, "line_content": "      return res.status(500).send({"}, {"line_number": 13, "line_content": "        error: 'Donation failed due to a server error.'"}, {"line_number": 14, "line_content": "      });"}, {"line_number": 15, "line_content": "    });"}, {"line_number": 16, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 112, "lines": [{"line_number": 1, "line_content": "function createStripeDonation(req, res) {"}, {"line_number": 2, "line_content": "    const { user, body } = req;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const {"}, {"line_number": 5, "line_content": "      amount,"}, {"line_number": 6, "line_content": "      duration,"}, {"line_number": 7, "line_content": "      token: { id },"}, {"line_number": 8, "line_content": "      email,"}, {"line_number": 9, "line_content": "      name"}, {"line_number": 10, "line_content": "    } = body;"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (!validStripeForm(amount, duration, email)) {"}, {"line_number": 13, "line_content": "      return res.status(500).send({"}, {"line_number": 14, "line_content": "        error: 'The donation form had invalid values for this submission.'"}, {"line_number": 15, "line_content": "      });"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    const fccUser = user"}, {"line_number": 19, "line_content": "      ? Promise.resolve(user)"}, {"line_number": 20, "line_content": "      : new Promise((resolve, reject) =>"}, {"line_number": 21, "line_content": "          User.findOrCreate("}, {"line_number": 22, "line_content": "            { where: { email } },"}, {"line_number": 23, "line_content": "            { email },"}, {"line_number": 24, "line_content": "            (err, instance) => {"}, {"line_number": 25, "line_content": "              if (err) {"}, {"line_number": 26, "line_content": "                return reject(err);"}, {"line_number": 27, "line_content": "              }"}, {"line_number": 28, "line_content": "              return resolve(instance);"}, {"line_number": 29, "line_content": "            }"}, {"line_number": 30, "line_content": "          )"}, {"line_number": 31, "line_content": "        );"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    let donatingUser = {};"}, {"line_number": 34, "line_content": "    let donation = {"}, {"line_number": 35, "line_content": "      email,"}, {"line_number": 36, "line_content": "      amount,"}, {"line_number": 37, "line_content": "      duration,"}, {"line_number": 38, "line_content": "      provider: 'stripe',"}, {"line_number": 39, "line_content": "      startDate: new Date(Date.now()).toISOString()"}, {"line_number": 40, "line_content": "    };"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    const createCustomer = async user => {"}, {"line_number": 43, "line_content": "      let customer;"}, {"line_number": 44, "line_content": "      donatingUser = user;"}, {"line_number": 45, "line_content": "      try {"}, {"line_number": 46, "line_content": "        customer = await stripe.customers.create({"}, {"line_number": 47, "line_content": "          email,"}, {"line_number": 48, "line_content": "          card: id,"}, {"line_number": 49, "line_content": "          name"}, {"line_number": 50, "line_content": "        });"}, {"line_number": 51, "line_content": "      } catch (err) {"}, {"line_number": 52, "line_content": "        throw new Error('Error creating stripe customer');"}, {"line_number": 53, "line_content": "      }"}, {"line_number": 54, "line_content": "      log(`Stripe customer with id ${customer.id} created`);"}, {"line_number": 55, "line_content": "      return customer;"}, {"line_number": 56, "line_content": "    };"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "    const createSubscription = async customer => {"}, {"line_number": 59, "line_content": "      donation.customerId = customer.id;"}, {"line_number": 60, "line_content": "      let sub;"}, {"line_number": 61, "line_content": "      try {"}, {"line_number": 62, "line_content": "        sub = await stripe.subscriptions.create({"}, {"line_number": 63, "line_content": "          customer: customer.id,"}, {"line_number": 64, "line_content": "          items: ["}, {"line_number": 65, "line_content": "            {"}, {"line_number": 66, "line_content": "              plan: `${donationSubscriptionConfig.duration["}, {"line_number": 67, "line_content": "                duration"}, {"line_number": 68, "line_content": "              ].toLowerCase()}-donation-${amount}`"}, {"line_number": 69, "line_content": "            }"}, {"line_number": 70, "line_content": "          ]"}, {"line_number": 71, "line_content": "        });"}, {"line_number": 72, "line_content": "      } catch (err) {"}, {"line_number": 73, "line_content": "        throw new Error('Error creating stripe subscription');"}, {"line_number": 74, "line_content": "      }"}, {"line_number": 75, "line_content": "      return sub;"}, {"line_number": 76, "line_content": "    };"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "    const createAsyncUserDonation = () => {"}, {"line_number": 79, "line_content": "      donatingUser"}, {"line_number": 80, "line_content": "        .createDonation(donation)"}, {"line_number": 81, "line_content": "        .toPromise()"}, {"line_number": 82, "line_content": "        .catch(err => {"}, {"line_number": 83, "line_content": "          throw new Error(err);"}, {"line_number": 84, "line_content": "        });"}, {"line_number": 85, "line_content": "    };"}, {"line_number": 86, "line_content": ""}, {"line_number": 87, "line_content": "    return Promise.resolve(fccUser)"}, {"line_number": 88, "line_content": "      .then(nonDonatingUser => {"}, {"line_number": 89, "line_content": "        // the logic is removed since users can donate without an account"}, {"line_number": 90, "line_content": "        return nonDonatingUser;"}, {"line_number": 91, "line_content": "      })"}, {"line_number": 92, "line_content": "      .then(createCustomer)"}, {"line_number": 93, "line_content": "      .then(customer => {"}, {"line_number": 94, "line_content": "        return createSubscription(customer).then(subscription => {"}, {"line_number": 95, "line_content": "          log(`Stripe subscription with id ${subscription.id} created`);"}, {"line_number": 96, "line_content": "          donation.subscriptionId = subscription.id;"}, {"line_number": 97, "line_content": "          return res.send(subscription);"}, {"line_number": 98, "line_content": "        });"}, {"line_number": 99, "line_content": "      })"}, {"line_number": 100, "line_content": "      .then(createAsyncUserDonation)"}, {"line_number": 101, "line_content": "      .catch(err => {"}, {"line_number": 102, "line_content": "        if ("}, {"line_number": 103, "line_content": "          err.type === 'StripeCardError' ||"}, {"line_number": 104, "line_content": "          err.type === 'AlreadyDonatingError'"}, {"line_number": 105, "line_content": "        ) {"}, {"line_number": 106, "line_content": "          return res.status(402).send({ error: err.message });"}, {"line_number": 107, "line_content": "        }"}, {"line_number": 108, "line_content": "        return res"}, {"line_number": 109, "line_content": "          .status(500)"}, {"line_number": 110, "line_content": "          .send({ error: 'Donation failed due to a server error.' });"}, {"line_number": 111, "line_content": "      });"}, {"line_number": 112, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function addDonation(req, res) {"}, {"line_number": 2, "line_content": "    const { user, body } = req;"}, {"line_number": 3, "line_content": "    if (!user || !body) {"}, {"line_number": 4, "line_content": "      return res"}, {"line_number": 5, "line_content": "        .status(500)"}, {"line_number": 6, "line_content": "        .json({ error: 'User must be signed in for this request.' });"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return Promise.resolve(req)"}, {"line_number": 9, "line_content": "      .then("}, {"line_number": 10, "line_content": "        user.updateAttributes({"}, {"line_number": 11, "line_content": "          isDonating: true"}, {"line_number": 12, "line_content": "        })"}, {"line_number": 13, "line_content": "      )"}, {"line_number": 14, "line_content": "      .then(() => res.status(200).json({ isDonating: true }))"}, {"line_number": 15, "line_content": "      .catch(err => {"}, {"line_number": 16, "line_content": "        log(err.message);"}, {"line_number": 17, "line_content": "        return res.status(500).json({"}, {"line_number": 18, "line_content": "          type: 'danger',"}, {"line_number": 19, "line_content": "          message: 'Something went wrong.'"}, {"line_number": 20, "line_content": "        });"}, {"line_number": 21, "line_content": "      });"}, {"line_number": 22, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function updatePaypal(req, res) {"}, {"line_number": 2, "line_content": "    const { headers, body } = req;"}, {"line_number": 3, "line_content": "    return Promise.resolve(req)"}, {"line_number": 4, "line_content": "      .then(verifyWebHookType)"}, {"line_number": 5, "line_content": "      .then(getAsyncPaypalToken)"}, {"line_number": 6, "line_content": "      .then(token => verifyWebHook(headers, body, token, keys.paypal.webhookId))"}, {"line_number": 7, "line_content": "      .then(hookBody => updateUser(hookBody, app))"}, {"line_number": 8, "line_content": "      .catch(err => {"}, {"line_number": 9, "line_content": "        // Todo: This probably need to be thrown and caught in error handler"}, {"line_number": 10, "line_content": "        log(err.message);"}, {"line_number": 11, "line_content": "      })"}, {"line_number": 12, "line_content": "      .finally(() => res.status(200).json({ message: 'received paypal hook' }));"}, {"line_number": 13, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function newsBoot(app) {"}, {"line_number": 2, "line_content": "  const router = app.loopback.Router();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  router.get('/n', (req, res) => res.redirect('/news'));"}, {"line_number": 5, "line_content": "  router.get('/n/:shortId', createShortLinkHandler(app));"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "function createShortLinkHandler(app) {"}, {"line_number": 2, "line_content": "  const { Article } = app.models;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  return function shortLinkHandler(req, res, next) {"}, {"line_number": 5, "line_content": "    const { shortId } = req.params;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (!shortId) {"}, {"line_number": 8, "line_content": "      return res.redirect('/news');"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    log('shortId', shortId);"}, {"line_number": 11, "line_content": "    return Article.findOne("}, {"line_number": 12, "line_content": "      {"}, {"line_number": 13, "line_content": "        where: {"}, {"line_number": 14, "line_content": "          or: [{ shortId }, { slugPart: shortId }]"}, {"line_number": 15, "line_content": "        }"}, {"line_number": 16, "line_content": "      },"}, {"line_number": 17, "line_content": "      (err, article) => {"}, {"line_number": 18, "line_content": "        if (err) {"}, {"line_number": 19, "line_content": "          next(err);"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "        if (!article) {"}, {"line_number": 22, "line_content": "          return res.redirect('/news');"}, {"line_number": 23, "line_content": "        }"}, {"line_number": 24, "line_content": "        const { slugPart } = article;"}, {"line_number": 25, "line_content": "        const slug = `/news/${slugPart}`;"}, {"line_number": 26, "line_content": "        return res.redirect(slug);"}, {"line_number": 27, "line_content": "      }"}, {"line_number": 28, "line_content": "    );"}, {"line_number": 29, "line_content": "  };"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function unsubscribeDeprecated(req, res) {"}, {"line_number": 2, "line_content": "    req.flash("}, {"line_number": 3, "line_content": "      'info',"}, {"line_number": 4, "line_content": "      'We are no longer able to process this unsubscription request. ' +"}, {"line_number": 5, "line_content": "        'Please go to your settings to update your email preferences'"}, {"line_number": 6, "line_content": "    );"}, {"line_number": 7, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 8, "line_content": "    res.redirectWithFlash(origin);"}, {"line_number": 9, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 41, "lines": [{"line_number": 1, "line_content": "function unsubscribeById(req, res, next) {"}, {"line_number": 2, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 3, "line_content": "    const { unsubscribeId } = req.params;"}, {"line_number": 4, "line_content": "    if (!unsubscribeId) {"}, {"line_number": 5, "line_content": "      req.flash('info', 'We could not find an account to unsubscribe');"}, {"line_number": 6, "line_content": "      return res.redirectWithFlash(origin);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return User.find({ where: { unsubscribeId } }, (err, users) => {"}, {"line_number": 9, "line_content": "      if (err || !users.length) {"}, {"line_number": 10, "line_content": "        req.flash('info', 'We could not find an account to unsubscribe');"}, {"line_number": 11, "line_content": "        return res.redirectWithFlash(origin);"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": "      const updates = users.map(user => {"}, {"line_number": 14, "line_content": "        return new Promise((resolve, reject) =>"}, {"line_number": 15, "line_content": "          user.updateAttributes("}, {"line_number": 16, "line_content": "            {"}, {"line_number": 17, "line_content": "              sendQuincyEmail: false"}, {"line_number": 18, "line_content": "            },"}, {"line_number": 19, "line_content": "            err => {"}, {"line_number": 20, "line_content": "              if (err) {"}, {"line_number": 21, "line_content": "                reject(err);"}, {"line_number": 22, "line_content": "              } else {"}, {"line_number": 23, "line_content": "                resolve();"}, {"line_number": 24, "line_content": "              }"}, {"line_number": 25, "line_content": "            }"}, {"line_number": 26, "line_content": "          )"}, {"line_number": 27, "line_content": "        );"}, {"line_number": 28, "line_content": "      });"}, {"line_number": 29, "line_content": "      return Promise.all(updates)"}, {"line_number": 30, "line_content": "        .then(() => {"}, {"line_number": 31, "line_content": "          req.flash("}, {"line_number": 32, "line_content": "            'success',"}, {"line_number": 33, "line_content": "            \"We've successfully updated your email preferences.\""}, {"line_number": 34, "line_content": "          );"}, {"line_number": 35, "line_content": "          return res.redirectWithFlash("}, {"line_number": 36, "line_content": "            `${origin}/unsubscribed/${unsubscribeId}`"}, {"line_number": 37, "line_content": "          );"}, {"line_number": 38, "line_content": "        })"}, {"line_number": 39, "line_content": "        .catch(next);"}, {"line_number": 40, "line_content": "    });"}, {"line_number": 41, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 41, "lines": [{"line_number": 1, "line_content": "function resubscribe(req, res, next) {"}, {"line_number": 2, "line_content": "    const { unsubscribeId } = req.params;"}, {"line_number": 3, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 4, "line_content": "    if (!unsubscribeId) {"}, {"line_number": 5, "line_content": "      req.flash("}, {"line_number": 6, "line_content": "        'info',"}, {"line_number": 7, "line_content": "        'We we unable to process this request, please check and try again\u00cd'"}, {"line_number": 8, "line_content": "      );"}, {"line_number": 9, "line_content": "      res.redirect(origin);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    return User.find({ where: { unsubscribeId } }, (err, users) => {"}, {"line_number": 12, "line_content": "      if (err || !users.length) {"}, {"line_number": 13, "line_content": "        req.flash('info', 'We could not find an account to resubscribe');"}, {"line_number": 14, "line_content": "        return res.redirectWithFlash(origin);"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "      const [user] = users;"}, {"line_number": 17, "line_content": "      return new Promise((resolve, reject) =>"}, {"line_number": 18, "line_content": "        user.updateAttributes("}, {"line_number": 19, "line_content": "          {"}, {"line_number": 20, "line_content": "            sendQuincyEmail: true"}, {"line_number": 21, "line_content": "          },"}, {"line_number": 22, "line_content": "          err => {"}, {"line_number": 23, "line_content": "            if (err) {"}, {"line_number": 24, "line_content": "              reject(err);"}, {"line_number": 25, "line_content": "            } else {"}, {"line_number": 26, "line_content": "              resolve();"}, {"line_number": 27, "line_content": "            }"}, {"line_number": 28, "line_content": "          }"}, {"line_number": 29, "line_content": "        )"}, {"line_number": 30, "line_content": "      )"}, {"line_number": 31, "line_content": "        .then(() => {"}, {"line_number": 32, "line_content": "          req.flash("}, {"line_number": 33, "line_content": "            'success',"}, {"line_number": 34, "line_content": "            \"We've successfully updated your email preferences. Thank you \" +"}, {"line_number": 35, "line_content": "              'for resubscribing.'"}, {"line_number": 36, "line_content": "          );"}, {"line_number": 37, "line_content": "          return res.redirectWithFlash(origin);"}, {"line_number": 38, "line_content": "        })"}, {"line_number": 39, "line_content": "        .catch(next);"}, {"line_number": 40, "line_content": "    });"}, {"line_number": 41, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function bootCertificate(app) {"}, {"line_number": 2, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 3, "line_content": "  // TODO: rather than getting all the challenges, then grabbing the certs,"}, {"line_number": 4, "line_content": "  // consider just getting the certs."}, {"line_number": 5, "line_content": "  const certTypeIds = createCertTypeIds(getChallenges());"}, {"line_number": 6, "line_content": "  const showCert = createShowCert(app);"}, {"line_number": 7, "line_content": "  const verifyCert = createVerifyCert(certTypeIds, app);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  api.put('/certificate/verify', ifNoUser401, ifNoSuperBlock404, verifyCert);"}, {"line_number": 10, "line_content": "  api.get('/certificate/showCert/:username/:certSlug', showCert);"}, {"line_number": 11, "line_content": "  api.get('/certificate/verify-can-claim-cert', deprecatedEndpoint);"}, {"line_number": 12, "line_content": "  app.use(api);"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function getFallbackFullStackDate(completedChallenges, completedDate) {"}, {"line_number": 2, "line_content": "  var chalIds = ["}, {"line_number": 3, "line_content": "    certTypeIdMap[certTypes.respWebDesign],"}, {"line_number": 4, "line_content": "    certTypeIdMap[certTypes.jsAlgoDataStruct],"}, {"line_number": 5, "line_content": "    certTypeIdMap[certTypes.frontEndDevLibsId],"}, {"line_number": 6, "line_content": "    certTypeIdMap[certTypes.dataVis2018],"}, {"line_number": 7, "line_content": "    certTypeIdMap[certTypes.apisMicroservicesId],"}, {"line_number": 8, "line_content": "    certTypeIdMap[certTypes.legacyInfosecQaId]"}, {"line_number": 9, "line_content": "  ];"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const latestCertDate = completedChallenges"}, {"line_number": 12, "line_content": "    .filter(chal => chalIds.includes(chal.id))"}, {"line_number": 13, "line_content": "    .sort((a, b) => b.completedDate - a.completedDate)[0]?.completedDate;"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  return latestCertDate ? latestCertDate : completedDate;"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function ifNoSuperBlock404(req, res, next) {"}, {"line_number": 2, "line_content": "  const { certSlug } = req.body;"}, {"line_number": 3, "line_content": "  if (certSlug && certSlugs.includes(certSlug)) {"}, {"line_number": 4, "line_content": "    return next();"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  return res.status(404).end();"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 38, "lines": [{"line_number": 1, "line_content": "function createCertTypeIds(allChallenges) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    // legacy"}, {"line_number": 4, "line_content": "    [certTypes.frontEnd]: getCertById(legacyFrontEndChallengeId, allChallenges),"}, {"line_number": 5, "line_content": "    [certTypes.backEnd]: getCertById(legacyBackEndChallengeId, allChallenges),"}, {"line_number": 6, "line_content": "    [certTypes.dataVis]: getCertById(legacyDataVisId, allChallenges),"}, {"line_number": 7, "line_content": "    [certTypes.infosecQa]: getCertById(legacyInfosecQaId, allChallenges),"}, {"line_number": 8, "line_content": "    [certTypes.fullStack]: getCertById(legacyFullStackId, allChallenges),"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    // modern"}, {"line_number": 11, "line_content": "    [certTypes.respWebDesign]: getCertById(respWebDesignId, allChallenges),"}, {"line_number": 12, "line_content": "    [certTypes.frontEndDevLibs]: getCertById(frontEndDevLibsId, allChallenges),"}, {"line_number": 13, "line_content": "    [certTypes.dataVis2018]: getCertById(dataVis2018Id, allChallenges),"}, {"line_number": 14, "line_content": "    [certTypes.jsAlgoDataStruct]: getCertById("}, {"line_number": 15, "line_content": "      jsAlgoDataStructId,"}, {"line_number": 16, "line_content": "      allChallenges"}, {"line_number": 17, "line_content": "    ),"}, {"line_number": 18, "line_content": "    [certTypes.apisMicroservices]: getCertById("}, {"line_number": 19, "line_content": "      apisMicroservicesId,"}, {"line_number": 20, "line_content": "      allChallenges"}, {"line_number": 21, "line_content": "    ),"}, {"line_number": 22, "line_content": "    [certTypes.qaV7]: getCertById(qaV7Id, allChallenges),"}, {"line_number": 23, "line_content": "    [certTypes.infosecV7]: getCertById(infosecV7Id, allChallenges),"}, {"line_number": 24, "line_content": "    [certTypes.sciCompPyV7]: getCertById(sciCompPyV7Id, allChallenges),"}, {"line_number": 25, "line_content": "    [certTypes.dataAnalysisPyV7]: getCertById("}, {"line_number": 26, "line_content": "      dataAnalysisPyV7Id,"}, {"line_number": 27, "line_content": "      allChallenges"}, {"line_number": 28, "line_content": "    ),"}, {"line_number": 29, "line_content": "    [certTypes.machineLearningPyV7]: getCertById("}, {"line_number": 30, "line_content": "      machineLearningPyV7Id,"}, {"line_number": 31, "line_content": "      allChallenges"}, {"line_number": 32, "line_content": "    ),"}, {"line_number": 33, "line_content": "    [certTypes.relationalDatabaseV8]: getCertById("}, {"line_number": 34, "line_content": "      relationalDatabaseV8Id,"}, {"line_number": 35, "line_content": "      allChallenges"}, {"line_number": 36, "line_content": "    )"}, {"line_number": 37, "line_content": "  };"}, {"line_number": 38, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function canClaim(ids, completedChallenges = []) {"}, {"line_number": 2, "line_content": "  return _.every(ids, ({ id }) =>"}, {"line_number": 3, "line_content": "    _.find(completedChallenges, ({ id: completedId }) => completedId === id)"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function getCertById(anId, allChallenges) {"}, {"line_number": 2, "line_content": "  return allChallenges"}, {"line_number": 3, "line_content": "    .filter(({ id }) => id === anId)"}, {"line_number": 4, "line_content": "    .map(({ id, tests, name, challengeType }) => ({"}, {"line_number": 5, "line_content": "      id,"}, {"line_number": 6, "line_content": "      tests,"}, {"line_number": 7, "line_content": "      name,"}, {"line_number": 8, "line_content": "      challengeType"}, {"line_number": 9, "line_content": "    }))[0];"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "function sendCertifiedEmail("}, {"line_number": 2, "line_content": "  {"}, {"line_number": 3, "line_content": "    email = '',"}, {"line_number": 4, "line_content": "    name,"}, {"line_number": 5, "line_content": "    username,"}, {"line_number": 6, "line_content": "    isRespWebDesignCert,"}, {"line_number": 7, "line_content": "    isFrontEndLibsCert,"}, {"line_number": 8, "line_content": "    isJsAlgoDataStructCert,"}, {"line_number": 9, "line_content": "    isDataVisCert,"}, {"line_number": 10, "line_content": "    isApisMicroservicesCert,"}, {"line_number": 11, "line_content": "    isQaCertV7,"}, {"line_number": 12, "line_content": "    isInfosecCertV7,"}, {"line_number": 13, "line_content": "    isSciCompPyCertV7,"}, {"line_number": 14, "line_content": "    isDataAnalysisPyCertV7,"}, {"line_number": 15, "line_content": "    isMachineLearningPyCertV7,"}, {"line_number": 16, "line_content": "    isRelationalDatabaseCertV8"}, {"line_number": 17, "line_content": "  },"}, {"line_number": 18, "line_content": "  send$"}, {"line_number": 19, "line_content": ") {"}, {"line_number": 20, "line_content": "  if ("}, {"line_number": 21, "line_content": "    !isEmail(email) ||"}, {"line_number": 22, "line_content": "    !isRespWebDesignCert ||"}, {"line_number": 23, "line_content": "    !isFrontEndLibsCert ||"}, {"line_number": 24, "line_content": "    !isJsAlgoDataStructCert ||"}, {"line_number": 25, "line_content": "    !isDataVisCert ||"}, {"line_number": 26, "line_content": "    !isApisMicroservicesCert ||"}, {"line_number": 27, "line_content": "    !isQaCertV7 ||"}, {"line_number": 28, "line_content": "    !isInfosecCertV7 ||"}, {"line_number": 29, "line_content": "    !isSciCompPyCertV7 ||"}, {"line_number": 30, "line_content": "    !isDataAnalysisPyCertV7 ||"}, {"line_number": 31, "line_content": "    !isMachineLearningPyCertV7 ||"}, {"line_number": 32, "line_content": "    !isRelationalDatabaseCertV8"}, {"line_number": 33, "line_content": "  ) {"}, {"line_number": 34, "line_content": "    return Observable.just(false);"}, {"line_number": 35, "line_content": "  }"}, {"line_number": 36, "line_content": "  const notifyUser = {"}, {"line_number": 37, "line_content": "    type: 'email',"}, {"line_number": 38, "line_content": "    to: email,"}, {"line_number": 39, "line_content": "    from: 'quincy@freecodecamp.org',"}, {"line_number": 40, "line_content": "    subject: dedent`"}, {"line_number": 41, "line_content": "      Congratulations on completing all of the"}, {"line_number": 42, "line_content": "      freeCodeCamp certifications!"}, {"line_number": 43, "line_content": "    `,"}, {"line_number": 44, "line_content": "    text: renderCertifiedEmail({"}, {"line_number": 45, "line_content": "      username,"}, {"line_number": 46, "line_content": "      name"}, {"line_number": 47, "line_content": "    })"}, {"line_number": 48, "line_content": "  };"}, {"line_number": 49, "line_content": "  return send$(notifyUser).map(() => true);"}, {"line_number": 50, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "function getUserIsCertMap(user) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    isRespWebDesignCert = false,"}, {"line_number": 4, "line_content": "    isJsAlgoDataStructCert = false,"}, {"line_number": 5, "line_content": "    isFrontEndLibsCert = false,"}, {"line_number": 6, "line_content": "    is2018DataVisCert = false,"}, {"line_number": 7, "line_content": "    isApisMicroservicesCert = false,"}, {"line_number": 8, "line_content": "    isInfosecQaCert = false,"}, {"line_number": 9, "line_content": "    isQaCertV7 = false,"}, {"line_number": 10, "line_content": "    isInfosecCertV7 = false,"}, {"line_number": 11, "line_content": "    isFrontEndCert = false,"}, {"line_number": 12, "line_content": "    isBackEndCert = false,"}, {"line_number": 13, "line_content": "    isDataVisCert = false,"}, {"line_number": 14, "line_content": "    isFullStackCert = false,"}, {"line_number": 15, "line_content": "    isSciCompPyCertV7 = false,"}, {"line_number": 16, "line_content": "    isDataAnalysisPyCertV7 = false,"}, {"line_number": 17, "line_content": "    isMachineLearningPyCertV7 = false,"}, {"line_number": 18, "line_content": "    isRelationalDatabaseCertV8 = false"}, {"line_number": 19, "line_content": "  } = user;"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  return {"}, {"line_number": 22, "line_content": "    isRespWebDesignCert,"}, {"line_number": 23, "line_content": "    isJsAlgoDataStructCert,"}, {"line_number": 24, "line_content": "    isFrontEndLibsCert,"}, {"line_number": 25, "line_content": "    is2018DataVisCert,"}, {"line_number": 26, "line_content": "    isApisMicroservicesCert,"}, {"line_number": 27, "line_content": "    isInfosecQaCert,"}, {"line_number": 28, "line_content": "    isQaCertV7,"}, {"line_number": 29, "line_content": "    isInfosecCertV7,"}, {"line_number": 30, "line_content": "    isFrontEndCert,"}, {"line_number": 31, "line_content": "    isBackEndCert,"}, {"line_number": 32, "line_content": "    isDataVisCert,"}, {"line_number": 33, "line_content": "    isFullStackCert,"}, {"line_number": 34, "line_content": "    isSciCompPyCertV7,"}, {"line_number": 35, "line_content": "    isDataAnalysisPyCertV7,"}, {"line_number": 36, "line_content": "    isMachineLearningPyCertV7,"}, {"line_number": 37, "line_content": "    isRelationalDatabaseCertV8"}, {"line_number": 38, "line_content": "  };"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 104, "lines": [{"line_number": 1, "line_content": "function createVerifyCert(certTypeIds, app) {"}, {"line_number": 2, "line_content": "  const { Email } = app.models;"}, {"line_number": 3, "line_content": "  return function verifyCert(req, res, next) {"}, {"line_number": 4, "line_content": "    const {"}, {"line_number": 5, "line_content": "      body: { certSlug },"}, {"line_number": 6, "line_content": "      user"}, {"line_number": 7, "line_content": "    } = req;"}, {"line_number": 8, "line_content": "    log(certSlug);"}, {"line_number": 9, "line_content": "    let certType = certSlugTypeMap[certSlug];"}, {"line_number": 10, "line_content": "    log(certType);"}, {"line_number": 11, "line_content": "    return Observable.of(certTypeIds[certType])"}, {"line_number": 12, "line_content": "      .flatMap(challenge => {"}, {"line_number": 13, "line_content": "        const certName = certTypeTitleMap[certType];"}, {"line_number": 14, "line_content": "        if (user[certType]) {"}, {"line_number": 15, "line_content": "          return Observable.just({"}, {"line_number": 16, "line_content": "            type: 'info',"}, {"line_number": 17, "line_content": "            message: 'flash.already-claimed',"}, {"line_number": 18, "line_content": "            variables: { name: certName }"}, {"line_number": 19, "line_content": "          });"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        // certificate doesn't exist or"}, {"line_number": 23, "line_content": "        // connection error"}, {"line_number": 24, "line_content": "        if (!challenge) {"}, {"line_number": 25, "line_content": "          reportError(`Error claiming ${certName}`);"}, {"line_number": 26, "line_content": "          return Observable.just({"}, {"line_number": 27, "line_content": "            type: 'danger',"}, {"line_number": 28, "line_content": "            message: 'flash.wrong-name',"}, {"line_number": 29, "line_content": "            variables: { name: certName }"}, {"line_number": 30, "line_content": "          });"}, {"line_number": 31, "line_content": "        }"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "        const { id, tests, challengeType } = challenge;"}, {"line_number": 34, "line_content": "        if (!canClaim(tests, user.completedChallenges)) {"}, {"line_number": 35, "line_content": "          return Observable.just({"}, {"line_number": 36, "line_content": "            type: 'info',"}, {"line_number": 37, "line_content": "            message: 'flash.incomplete-steps',"}, {"line_number": 38, "line_content": "            variables: { name: certName }"}, {"line_number": 39, "line_content": "          });"}, {"line_number": 40, "line_content": "        }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "        const updateData = {"}, {"line_number": 43, "line_content": "          [certType]: true,"}, {"line_number": 44, "line_content": "          completedChallenges: ["}, {"line_number": 45, "line_content": "            ...user.completedChallenges,"}, {"line_number": 46, "line_content": "            {"}, {"line_number": 47, "line_content": "              id,"}, {"line_number": 48, "line_content": "              completedDate: new Date(),"}, {"line_number": 49, "line_content": "              challengeType"}, {"line_number": 50, "line_content": "            }"}, {"line_number": 51, "line_content": "          ]"}, {"line_number": 52, "line_content": "        };"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "        if (!user.name) {"}, {"line_number": 55, "line_content": "          return Observable.just({"}, {"line_number": 56, "line_content": "            type: 'info',"}, {"line_number": 57, "line_content": "            message: 'flash.name-needed'"}, {"line_number": 58, "line_content": "          });"}, {"line_number": 59, "line_content": "        }"}, {"line_number": 60, "line_content": "        // set here so sendCertifiedEmail works properly"}, {"line_number": 61, "line_content": "        // not used otherwise"}, {"line_number": 62, "line_content": "        user[certType] = true;"}, {"line_number": 63, "line_content": "        const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 64, "line_content": "          user.updateAttributes(updateData, err => {"}, {"line_number": 65, "line_content": "            if (err) {"}, {"line_number": 66, "line_content": "              return reject(err);"}, {"line_number": 67, "line_content": "            }"}, {"line_number": 68, "line_content": "            return resolve();"}, {"line_number": 69, "line_content": "          })"}, {"line_number": 70, "line_content": "        );"}, {"line_number": 71, "line_content": "        return Observable.combineLatest("}, {"line_number": 72, "line_content": "          // update user data"}, {"line_number": 73, "line_content": "          Observable.fromPromise(updatePromise),"}, {"line_number": 74, "line_content": "          // sends notification email is user has all 6 certs"}, {"line_number": 75, "line_content": "          // if not it noop"}, {"line_number": 76, "line_content": "          sendCertifiedEmail(user, Email.send$),"}, {"line_number": 77, "line_content": "          (_, pledgeOrMessage) => ({ pledgeOrMessage })"}, {"line_number": 78, "line_content": "        ).map(({ pledgeOrMessage }) => {"}, {"line_number": 79, "line_content": "          if (typeof pledgeOrMessage === 'string') {"}, {"line_number": 80, "line_content": "            log(pledgeOrMessage);"}, {"line_number": 81, "line_content": "          }"}, {"line_number": 82, "line_content": "          log('Certificates updated');"}, {"line_number": 83, "line_content": "          return {"}, {"line_number": 84, "line_content": "            type: 'success',"}, {"line_number": 85, "line_content": "            message: 'flash.cert-claim-success',"}, {"line_number": 86, "line_content": "            variables: {"}, {"line_number": 87, "line_content": "              username: user.username,"}, {"line_number": 88, "line_content": "              name: certName"}, {"line_number": 89, "line_content": "            }"}, {"line_number": 90, "line_content": "          };"}, {"line_number": 91, "line_content": "        });"}, {"line_number": 92, "line_content": "      })"}, {"line_number": 93, "line_content": "      .subscribe(message => {"}, {"line_number": 94, "line_content": "        return res.status(200).json({"}, {"line_number": 95, "line_content": "          response: message,"}, {"line_number": 96, "line_content": "          isCertMap: getUserIsCertMap(user),"}, {"line_number": 97, "line_content": "          // send back the completed challenges"}, {"line_number": 98, "line_content": "          // NOTE: we could just send back the latest challenge, but this"}, {"line_number": 99, "line_content": "          // ensures the challenges are synced."}, {"line_number": 100, "line_content": "          completedChallenges: user.completedChallenges"}, {"line_number": 101, "line_content": "        });"}, {"line_number": 102, "line_content": "      }, next);"}, {"line_number": 103, "line_content": "  };"}, {"line_number": 104, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 171, "lines": [{"line_number": 1, "line_content": "function createShowCert(app) {"}, {"line_number": 2, "line_content": "  const { User } = app.models;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function findUserByUsername$(username, fields) {"}, {"line_number": 5, "line_content": "    return observeQuery(User, 'findOne', {"}, {"line_number": 6, "line_content": "      where: { username },"}, {"line_number": 7, "line_content": "      fields"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  return function showCert(req, res, next) {"}, {"line_number": 12, "line_content": "    let { username, certSlug } = req.params;"}, {"line_number": 13, "line_content": "    username = username.toLowerCase();"}, {"line_number": 14, "line_content": "    const certType = certSlugTypeMap[certSlug];"}, {"line_number": 15, "line_content": "    const certId = certTypeIdMap[certType];"}, {"line_number": 16, "line_content": "    const certTitle = certTypeTitleMap[certType];"}, {"line_number": 17, "line_content": "    const completionTime = completionHours[certType] || 300;"}, {"line_number": 18, "line_content": "    return findUserByUsername$(username, {"}, {"line_number": 19, "line_content": "      isCheater: true,"}, {"line_number": 20, "line_content": "      isFrontEndCert: true,"}, {"line_number": 21, "line_content": "      isBackEndCert: true,"}, {"line_number": 22, "line_content": "      isFullStackCert: true,"}, {"line_number": 23, "line_content": "      isRespWebDesignCert: true,"}, {"line_number": 24, "line_content": "      isFrontEndLibsCert: true,"}, {"line_number": 25, "line_content": "      isJsAlgoDataStructCert: true,"}, {"line_number": 26, "line_content": "      isDataVisCert: true,"}, {"line_number": 27, "line_content": "      is2018DataVisCert: true,"}, {"line_number": 28, "line_content": "      isApisMicroservicesCert: true,"}, {"line_number": 29, "line_content": "      isInfosecQaCert: true,"}, {"line_number": 30, "line_content": "      isQaCertV7: true,"}, {"line_number": 31, "line_content": "      isInfosecCertV7: true,"}, {"line_number": 32, "line_content": "      isSciCompPyCertV7: true,"}, {"line_number": 33, "line_content": "      isDataAnalysisPyCertV7: true,"}, {"line_number": 34, "line_content": "      isMachineLearningPyCertV7: true,"}, {"line_number": 35, "line_content": "      isRelationalDatabaseCertV8: true,"}, {"line_number": 36, "line_content": "      isHonest: true,"}, {"line_number": 37, "line_content": "      username: true,"}, {"line_number": 38, "line_content": "      name: true,"}, {"line_number": 39, "line_content": "      completedChallenges: true,"}, {"line_number": 40, "line_content": "      profileUI: true"}, {"line_number": 41, "line_content": "    }).subscribe(user => {"}, {"line_number": 42, "line_content": "      if (!user) {"}, {"line_number": 43, "line_content": "        return res.json({"}, {"line_number": 44, "line_content": "          messages: ["}, {"line_number": 45, "line_content": "            {"}, {"line_number": 46, "line_content": "              type: 'info',"}, {"line_number": 47, "line_content": "              message: 'flash.username-not-found',"}, {"line_number": 48, "line_content": "              variables: { username: username }"}, {"line_number": 49, "line_content": "            }"}, {"line_number": 50, "line_content": "          ]"}, {"line_number": 51, "line_content": "        });"}, {"line_number": 52, "line_content": "      }"}, {"line_number": 53, "line_content": "      const { isLocked, showCerts, showName } = user.profileUI;"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "      if (!user.name) {"}, {"line_number": 56, "line_content": "        return res.json({"}, {"line_number": 57, "line_content": "          messages: ["}, {"line_number": 58, "line_content": "            {"}, {"line_number": 59, "line_content": "              type: 'info',"}, {"line_number": 60, "line_content": "              message: 'flash.add-name'"}, {"line_number": 61, "line_content": "            }"}, {"line_number": 62, "line_content": "          ]"}, {"line_number": 63, "line_content": "        });"}, {"line_number": 64, "line_content": "      }"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "      if (user.isCheater) {"}, {"line_number": 67, "line_content": "        return res.json({"}, {"line_number": 68, "line_content": "          messages: ["}, {"line_number": 69, "line_content": "            {"}, {"line_number": 70, "line_content": "              type: 'info',"}, {"line_number": 71, "line_content": "              message: 'flash.not-eligible'"}, {"line_number": 72, "line_content": "            }"}, {"line_number": 73, "line_content": "          ]"}, {"line_number": 74, "line_content": "        });"}, {"line_number": 75, "line_content": "      }"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "      if (isLocked) {"}, {"line_number": 78, "line_content": "        return res.json({"}, {"line_number": 79, "line_content": "          messages: ["}, {"line_number": 80, "line_content": "            {"}, {"line_number": 81, "line_content": "              type: 'info',"}, {"line_number": 82, "line_content": "              message: 'flash.profile-private',"}, {"line_number": 83, "line_content": "              variables: { username: username }"}, {"line_number": 84, "line_content": "            }"}, {"line_number": 85, "line_content": "          ]"}, {"line_number": 86, "line_content": "        });"}, {"line_number": 87, "line_content": "      }"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "      if (!showCerts) {"}, {"line_number": 90, "line_content": "        return res.json({"}, {"line_number": 91, "line_content": "          messages: ["}, {"line_number": 92, "line_content": "            {"}, {"line_number": 93, "line_content": "              type: 'info',"}, {"line_number": 94, "line_content": "              message: 'flash.certs-private',"}, {"line_number": 95, "line_content": "              variables: { username: username }"}, {"line_number": 96, "line_content": "            }"}, {"line_number": 97, "line_content": "          ]"}, {"line_number": 98, "line_content": "        });"}, {"line_number": 99, "line_content": "      }"}, {"line_number": 100, "line_content": ""}, {"line_number": 101, "line_content": "      if (!user.isHonest) {"}, {"line_number": 102, "line_content": "        return res.json({"}, {"line_number": 103, "line_content": "          messages: ["}, {"line_number": 104, "line_content": "            {"}, {"line_number": 105, "line_content": "              type: 'info',"}, {"line_number": 106, "line_content": "              message: 'flash.not-honest',"}, {"line_number": 107, "line_content": "              variables: { username: username }"}, {"line_number": 108, "line_content": "            }"}, {"line_number": 109, "line_content": "          ]"}, {"line_number": 110, "line_content": "        });"}, {"line_number": 111, "line_content": "      }"}, {"line_number": 112, "line_content": ""}, {"line_number": 113, "line_content": "      if (user[certType]) {"}, {"line_number": 114, "line_content": "        const { completedChallenges = [] } = user;"}, {"line_number": 115, "line_content": "        const certChallenge = _.find("}, {"line_number": 116, "line_content": "          completedChallenges,"}, {"line_number": 117, "line_content": "          ({ id }) => certId === id"}, {"line_number": 118, "line_content": "        );"}, {"line_number": 119, "line_content": "        let { completedDate = new Date() } = certChallenge || {};"}, {"line_number": 120, "line_content": ""}, {"line_number": 121, "line_content": "        // the challenge id has been rotated for isDataVisCert"}, {"line_number": 122, "line_content": "        if (certType === 'isDataVisCert' && !certChallenge) {"}, {"line_number": 123, "line_content": "          let oldDataVisIdChall = _.find("}, {"line_number": 124, "line_content": "            completedChallenges,"}, {"line_number": 125, "line_content": "            ({ id }) => oldDataVizId === id"}, {"line_number": 126, "line_content": "          );"}, {"line_number": 127, "line_content": ""}, {"line_number": 128, "line_content": "          if (oldDataVisIdChall) {"}, {"line_number": 129, "line_content": "            completedDate = oldDataVisIdChall.completedDate || completedDate;"}, {"line_number": 130, "line_content": "          }"}, {"line_number": 131, "line_content": "        }"}, {"line_number": 132, "line_content": ""}, {"line_number": 133, "line_content": "        // if fullcert is not found, return the latest completedDate"}, {"line_number": 134, "line_content": "        if (certType === 'isFullStackCert' && !certChallenge) {"}, {"line_number": 135, "line_content": "          completedDate = getFallbackFullStackDate("}, {"line_number": 136, "line_content": "            completedChallenges,"}, {"line_number": 137, "line_content": "            completedDate"}, {"line_number": 138, "line_content": "          );"}, {"line_number": 139, "line_content": "        }"}, {"line_number": 140, "line_content": ""}, {"line_number": 141, "line_content": "        const { username, name } = user;"}, {"line_number": 142, "line_content": ""}, {"line_number": 143, "line_content": "        if (!showName) {"}, {"line_number": 144, "line_content": "          return res.json({"}, {"line_number": 145, "line_content": "            certTitle,"}, {"line_number": 146, "line_content": "            username,"}, {"line_number": 147, "line_content": "            date: completedDate,"}, {"line_number": 148, "line_content": "            completionTime"}, {"line_number": 149, "line_content": "          });"}, {"line_number": 150, "line_content": "        }"}, {"line_number": 151, "line_content": ""}, {"line_number": 152, "line_content": "        return res.json({"}, {"line_number": 153, "line_content": "          certTitle,"}, {"line_number": 154, "line_content": "          username,"}, {"line_number": 155, "line_content": "          name,"}, {"line_number": 156, "line_content": "          date: completedDate,"}, {"line_number": 157, "line_content": "          completionTime"}, {"line_number": 158, "line_content": "        });"}, {"line_number": 159, "line_content": "      }"}, {"line_number": 160, "line_content": "      return res.json({"}, {"line_number": 161, "line_content": "        messages: ["}, {"line_number": 162, "line_content": "          {"}, {"line_number": 163, "line_content": "            type: 'info',"}, {"line_number": 164, "line_content": "            message: 'flash.user-not-certified',"}, {"line_number": 165, "line_content": "            variables: { username: username, cert: certTypeTitleMap[certType] }"}, {"line_number": 166, "line_content": "          }"}, {"line_number": 167, "line_content": "        ]"}, {"line_number": 168, "line_content": "      });"}, {"line_number": 169, "line_content": "    }, next);"}, {"line_number": 170, "line_content": "  };"}, {"line_number": 171, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function findUserByUsername$(username, fields) {"}, {"line_number": 2, "line_content": "    return observeQuery(User, 'findOne', {"}, {"line_number": 3, "line_content": "      where: { username },"}, {"line_number": 4, "line_content": "      fields"}, {"line_number": 5, "line_content": "    });"}, {"line_number": 6, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function extendEmail(app) {"}, {"line_number": 2, "line_content": "  const { AccessToken, Email } = app.models;"}, {"line_number": 3, "line_content": "  Email.send$ = Observable.fromNodeCallback(Email.send, Email);"}, {"line_number": 4, "line_content": "  AccessToken.findOne$ = Observable.fromNodeCallback("}, {"line_number": 5, "line_content": "    AccessToken.findOne.bind(AccessToken)"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": "  AccessToken.prototype.validate$ = Observable.fromNodeCallback("}, {"line_number": 8, "line_content": "    AccessToken.prototype.validate"}, {"line_number": 9, "line_content": "  );"}, {"line_number": 10, "line_content": "  AccessToken.prototype.destroy$ = Observable.fromNodeCallback("}, {"line_number": 11, "line_content": "    AccessToken.prototype.destroy"}, {"line_number": 12, "line_content": "  );"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 42, "lines": [{"line_number": 1, "line_content": "function settingsController(app) {"}, {"line_number": 2, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const updateMyUsername = createUpdateMyUsername(app);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  api.put('/update-privacy-terms', ifNoUser401, updatePrivacyTerms);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  api.post('/refetch-user-completed-challenges', deprecatedEndpoint);"}, {"line_number": 9, "line_content": "  // Re-enable once we can handle the traffic"}, {"line_number": 10, "line_content": "  // api.post("}, {"line_number": 11, "line_content": "  //   '/update-my-current-challenge',"}, {"line_number": 12, "line_content": "  //   ifNoUser401,"}, {"line_number": 13, "line_content": "  //   updateMyCurrentChallengeValidators,"}, {"line_number": 14, "line_content": "  //   createValidatorErrorHandler(alertTypes.danger),"}, {"line_number": 15, "line_content": "  //   updateMyCurrentChallenge"}, {"line_number": 16, "line_content": "  // );"}, {"line_number": 17, "line_content": "  api.post('/update-my-current-challenge', temporarilyDisabledEndpoint);"}, {"line_number": 18, "line_content": "  api.put('/update-my-portfolio', ifNoUser401, updateMyPortfolio);"}, {"line_number": 19, "line_content": "  api.put('/update-my-theme', ifNoUser401, updateMyTheme);"}, {"line_number": 20, "line_content": "  api.put('/update-my-about', ifNoUser401, updateMyAbout);"}, {"line_number": 21, "line_content": "  api.put("}, {"line_number": 22, "line_content": "    '/update-my-email',"}, {"line_number": 23, "line_content": "    ifNoUser401,"}, {"line_number": 24, "line_content": "    updateMyEmailValidators,"}, {"line_number": 25, "line_content": "    createValidatorErrorHandler(alertTypes.danger),"}, {"line_number": 26, "line_content": "    updateMyEmail"}, {"line_number": 27, "line_content": "  );"}, {"line_number": 28, "line_content": "  api.put('/update-my-profileui', ifNoUser401, updateMyProfileUI);"}, {"line_number": 29, "line_content": "  api.put('/update-my-username', ifNoUser401, updateMyUsername);"}, {"line_number": 30, "line_content": "  api.put('/update-user-flag', ifNoUser401, updateUserFlag);"}, {"line_number": 31, "line_content": "  api.put('/update-my-socials', ifNoUser401, updateMySocials);"}, {"line_number": 32, "line_content": "  api.put('/update-my-sound', ifNoUser401, updateMySound);"}, {"line_number": 33, "line_content": "  api.put("}, {"line_number": 34, "line_content": "    '/update-my-keyboard-shortcuts',"}, {"line_number": 35, "line_content": "    ifNoUser401,"}, {"line_number": 36, "line_content": "    updateMyKeyboardShortcuts"}, {"line_number": 37, "line_content": "  );"}, {"line_number": 38, "line_content": "  api.put('/update-my-honesty', ifNoUser401, updateMyHonesty);"}, {"line_number": 39, "line_content": "  api.put('/update-my-quincy-email', ifNoUser401, updateMyQuincyEmail);"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "  app.use(api);"}, {"line_number": 42, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function updateMyPortfolio(...args) {"}, {"line_number": 2, "line_content": "  const portfolioKeys = ['id', 'title', 'description', 'url', 'image'];"}, {"line_number": 3, "line_content": "  const buildUpdate = body => {"}, {"line_number": 4, "line_content": "    const portfolio = body?.portfolio?.map(elem => _.pick(elem, portfolioKeys));"}, {"line_number": 5, "line_content": "    return { portfolio };"}, {"line_number": 6, "line_content": "  };"}, {"line_number": 7, "line_content": "  const validate = ({ portfolio }) => portfolio?.every(isPortfolioElement);"}, {"line_number": 8, "line_content": "  const isPortfolioElement = elem =>"}, {"line_number": 9, "line_content": "    Object.values(elem).every(val => typeof val == 'string');"}, {"line_number": 10, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function updateMyProfileUI(req, res, next) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    user,"}, {"line_number": 4, "line_content": "    body: { profileUI }"}, {"line_number": 5, "line_content": "  } = req;"}, {"line_number": 6, "line_content": "  user.updateAttribute("}, {"line_number": 7, "line_content": "    'profileUI',"}, {"line_number": 8, "line_content": "    profileUI,"}, {"line_number": 9, "line_content": "    createStandardHandler(req, res, next)"}, {"line_number": 10, "line_content": "  );"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function updateMyEmail(req, res, next) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    user,"}, {"line_number": 4, "line_content": "    body: { email }"}, {"line_number": 5, "line_content": "  } = req;"}, {"line_number": 6, "line_content": "  return user"}, {"line_number": 7, "line_content": "    .requestUpdateEmail(email)"}, {"line_number": 8, "line_content": "    .subscribe(message => res.json({ message }), next);"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function updateMyAbout(req, res, next) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    user,"}, {"line_number": 4, "line_content": "    body: { name, location, about, picture }"}, {"line_number": 5, "line_content": "  } = req;"}, {"line_number": 6, "line_content": "  log(name, location, picture, about);"}, {"line_number": 7, "line_content": "  // prevent dataurls from being stored"}, {"line_number": 8, "line_content": "  const update = isURL(picture, { require_protocol: true })"}, {"line_number": 9, "line_content": "    ? { name, location, about, picture }"}, {"line_number": 10, "line_content": "    : { name, location, about };"}, {"line_number": 11, "line_content": "  return user.updateAttributes(update, createStandardHandler(req, res, next));"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 49, "lines": [{"line_number": 1, "line_content": "function createUpdateMyUsername(app) {"}, {"line_number": 2, "line_content": "  const { User } = app.models;"}, {"line_number": 3, "line_content": "  return async function updateMyUsername(req, res, next) {"}, {"line_number": 4, "line_content": "    const { user, body } = req;"}, {"line_number": 5, "line_content": "    const usernameDisplay = body.username.trim();"}, {"line_number": 6, "line_content": "    const username = usernameDisplay.toLowerCase();"}, {"line_number": 7, "line_content": "    if ("}, {"line_number": 8, "line_content": "      username === user.username &&"}, {"line_number": 9, "line_content": "      user.usernameDisplay &&"}, {"line_number": 10, "line_content": "      usernameDisplay === user.usernameDisplay"}, {"line_number": 11, "line_content": "    ) {"}, {"line_number": 12, "line_content": "      return res.json({"}, {"line_number": 13, "line_content": "        type: 'info',"}, {"line_number": 14, "line_content": "        message: 'flash.username-used'"}, {"line_number": 15, "line_content": "      });"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    const validation = isValidUsername(username);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    if (!validation.valid) {"}, {"line_number": 20, "line_content": "      return res.json({"}, {"line_number": 21, "line_content": "        type: 'info',"}, {"line_number": 22, "line_content": "        message: `Username ${username} ${validation.error}`"}, {"line_number": 23, "line_content": "      });"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    const exists ="}, {"line_number": 27, "line_content": "      username === user.username ? false : await User.doesExist(username);"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    if (exists) {"}, {"line_number": 30, "line_content": "      return res.json({"}, {"line_number": 31, "line_content": "        type: 'info',"}, {"line_number": 32, "line_content": "        message: 'flash.username-taken'"}, {"line_number": 33, "line_content": "      });"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    return user.updateAttributes({ username, usernameDisplay }, err => {"}, {"line_number": 37, "line_content": "      if (err) {"}, {"line_number": 38, "line_content": "        res.status(500).json(standardErrorMessage);"}, {"line_number": 39, "line_content": "        return next(err);"}, {"line_number": 40, "line_content": "      }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "      return res.status(200).json({"}, {"line_number": 43, "line_content": "        type: 'success',"}, {"line_number": 44, "line_content": "        message: `flash.username-updated`,"}, {"line_number": 45, "line_content": "        variables: { username: usernameDisplay }"}, {"line_number": 46, "line_content": "      });"}, {"line_number": 47, "line_content": "    });"}, {"line_number": 48, "line_content": "  };"}, {"line_number": 49, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function updateMySocials(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body =>"}, {"line_number": 3, "line_content": "    _.pick(body, ['githubProfile', 'linkedin', 'twitter', 'website']);"}, {"line_number": 4, "line_content": "  const validate = update =>"}, {"line_number": 5, "line_content": "    Object.values(update).every(x => typeof x === 'string');"}, {"line_number": 6, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function updateMyTheme(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body => _.pick(body, 'theme');"}, {"line_number": 3, "line_content": "  const validate = ({ theme }) => theme == 'default' || theme == 'night';"}, {"line_number": 4, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function updateMySound(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body => _.pick(body, 'sound');"}, {"line_number": 3, "line_content": "  const validate = ({ sound }) => typeof sound === 'boolean';"}, {"line_number": 4, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function updateMyKeyboardShortcuts(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body => _.pick(body, 'keyboardShortcuts');"}, {"line_number": 3, "line_content": "  const validate = ({ keyboardShortcuts }) =>"}, {"line_number": 4, "line_content": "    typeof keyboardShortcuts === 'boolean';"}, {"line_number": 5, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function updateMyHonesty(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body => _.pick(body, 'isHonest');"}, {"line_number": 3, "line_content": "  const validate = ({ isHonest }) => isHonest === true;"}, {"line_number": 4, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function updateMyQuincyEmail(...args) {"}, {"line_number": 2, "line_content": "  const buildUpdate = body => _.pick(body, 'sendQuincyEmail');"}, {"line_number": 3, "line_content": "  const validate = ({ sendQuincyEmail }) =>"}, {"line_number": 4, "line_content": "    typeof sendQuincyEmail === 'boolean';"}, {"line_number": 5, "line_content": "  createUpdateUserProperties(buildUpdate, validate)(...args);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function createUpdateUserProperties(buildUpdate, validate) {"}, {"line_number": 2, "line_content": "  return (req, res, next) => {"}, {"line_number": 3, "line_content": "    const { user, body } = req;"}, {"line_number": 4, "line_content": "    const update = buildUpdate(body);"}, {"line_number": 5, "line_content": "    if (validate(update)) {"}, {"line_number": 6, "line_content": "      user.updateAttributes(update, createStandardHandler(req, res, next));"}, {"line_number": 7, "line_content": "    } else {"}, {"line_number": 8, "line_content": "      handleInvalidUpdate(res);"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "  };"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function handleInvalidUpdate(res) {"}, {"line_number": 2, "line_content": "  res.status(403).json({"}, {"line_number": 3, "line_content": "    type: 'danger',"}, {"line_number": 4, "line_content": "    message: 'flash.wrong-updating'"}, {"line_number": 5, "line_content": "  });"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function updateUserFlag(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user, body: update } = req;"}, {"line_number": 3, "line_content": "  const allowedKeys = ["}, {"line_number": 4, "line_content": "    'theme',"}, {"line_number": 5, "line_content": "    'sound',"}, {"line_number": 6, "line_content": "    'keyboardShortcuts',"}, {"line_number": 7, "line_content": "    'isHonest',"}, {"line_number": 8, "line_content": "    'portfolio',"}, {"line_number": 9, "line_content": "    'sendQuincyEmail',"}, {"line_number": 10, "line_content": "    'isGithub',"}, {"line_number": 11, "line_content": "    'isLinkedIn',"}, {"line_number": 12, "line_content": "    'isTwitter',"}, {"line_number": 13, "line_content": "    'isWebsite',"}, {"line_number": 14, "line_content": "    'githubProfile',"}, {"line_number": 15, "line_content": "    'linkedin',"}, {"line_number": 16, "line_content": "    'twitter',"}, {"line_number": 17, "line_content": "    'website'"}, {"line_number": 18, "line_content": "  ];"}, {"line_number": 19, "line_content": "  if (Object.keys(update).every(key => allowedKeys.includes(key))) {"}, {"line_number": 20, "line_content": "    return user.updateAttributes(update, createStandardHandler(req, res, next));"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": "  return res.status(403).json({"}, {"line_number": 23, "line_content": "    type: 'danger',"}, {"line_number": 24, "line_content": "    message: 'flash.invalid-update-flag'"}, {"line_number": 25, "line_content": "  });"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function bootStatus(app) {"}, {"line_number": 2, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  api.get('/status/ping', (req, res) => res.json({ msg: 'pong' }));"}, {"line_number": 5, "line_content": "  app.use(api);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function bootStatus(app) {"}, {"line_number": 2, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  // DEBUG ROUTE"}, {"line_number": 5, "line_content": "  api.get('/sentry/error', () => {"}, {"line_number": 6, "line_content": "    throw Error('debugging sentry');"}, {"line_number": 7, "line_content": "  });"}, {"line_number": 8, "line_content": "  api.get('/sentry/wrapped', () => {"}, {"line_number": 9, "line_content": "    throw wrapHandledError(Error('debugging sentry, wrapped'), {"}, {"line_number": 10, "line_content": "      type: 'info',"}, {"line_number": 11, "line_content": "      message: 'debugmessage',"}, {"line_number": 12, "line_content": "      redirectTo: `a/page`"}, {"line_number": 13, "line_content": "    });"}, {"line_number": 14, "line_content": "  });"}, {"line_number": 15, "line_content": "  app.use(api);"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "function bootUser(app) {"}, {"line_number": 2, "line_content": "  const api = app.loopback.Router();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const getSessionUser = createReadSessionUser(app);"}, {"line_number": 5, "line_content": "  const postReportUserProfile = createPostReportUserProfile(app);"}, {"line_number": 6, "line_content": "  const postDeleteAccount = createPostDeleteAccount(app);"}, {"line_number": 7, "line_content": "  const postUserToken = createPostUserToken(app);"}, {"line_number": 8, "line_content": "  const deleteUserToken = createDeleteUserToken(app);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  api.get('/account', sendNonUserToHome, getAccount);"}, {"line_number": 11, "line_content": "  api.get('/account/unlink/:social', sendNonUserToHome, getUnlinkSocial);"}, {"line_number": 12, "line_content": "  api.get('/user/get-session-user', getSessionUser);"}, {"line_number": 13, "line_content": "  api.post('/account/delete', ifNoUser401, deleteUserToken, postDeleteAccount);"}, {"line_number": 14, "line_content": "  api.post("}, {"line_number": 15, "line_content": "    '/account/reset-progress',"}, {"line_number": 16, "line_content": "    ifNoUser401,"}, {"line_number": 17, "line_content": "    deleteUserToken,"}, {"line_number": 18, "line_content": "    postResetProgress"}, {"line_number": 19, "line_content": "  );"}, {"line_number": 20, "line_content": "  api.post("}, {"line_number": 21, "line_content": "    '/user/report-user/',"}, {"line_number": 22, "line_content": "    ifNoUser401,"}, {"line_number": 23, "line_content": "    body('reportDescription').customSanitizer(trimTags),"}, {"line_number": 24, "line_content": "    postReportUserProfile"}, {"line_number": 25, "line_content": "  );"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "  api.post('/user/user-token', ifNoUser401, postUserToken);"}, {"line_number": 28, "line_content": "  api.delete("}, {"line_number": 29, "line_content": "    '/user/user-token',"}, {"line_number": 30, "line_content": "    ifNoUser401,"}, {"line_number": 31, "line_content": "    deleteUserToken,"}, {"line_number": 32, "line_content": "    deleteUserTokenResponse"}, {"line_number": 33, "line_content": "  );"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "  app.use(api);"}, {"line_number": 36, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function createPostUserToken(app) {"}, {"line_number": 2, "line_content": "  const { UserToken } = app.models;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  return async function postUserToken(req, res) {"}, {"line_number": 5, "line_content": "    const ttl = 900 * 24 * 60 * 60 * 1000;"}, {"line_number": 6, "line_content": "    let encodedUserToken;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    try {"}, {"line_number": 9, "line_content": "      await UserToken.destroyAll({ userId: req.user.id });"}, {"line_number": 10, "line_content": "      const newUserToken = await UserToken.create({ ttl, userId: req.user.id });"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      if (!newUserToken?.id) throw new Error();"}, {"line_number": 13, "line_content": "      encodedUserToken = encodeUserToken(newUserToken.id);"}, {"line_number": 14, "line_content": "    } catch (e) {"}, {"line_number": 15, "line_content": "      return res.status(500).send('Error starting project');"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    return res.json({ userToken: encodedUserToken });"}, {"line_number": 19, "line_content": "  };"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function deleteUserTokenResponse(req, res) {"}, {"line_number": 2, "line_content": "  if (!req.userTokenDeleted) {"}, {"line_number": 3, "line_content": "    return res.status(500).send('Error deleting user token');"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return res.send({ userToken: null });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 87, "lines": [{"line_number": 1, "line_content": "function createReadSessionUser(app) {"}, {"line_number": 2, "line_content": "  const { Donation } = app.models;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  return async function getSessionUser(req, res, next) {"}, {"line_number": 5, "line_content": "    const queryUser = req.user;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    const userTokenArr = await queryUser.userTokens({"}, {"line_number": 8, "line_content": "      userId: queryUser.id"}, {"line_number": 9, "line_content": "    });"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    const userToken = userTokenArr[0]?.id;"}, {"line_number": 12, "line_content": "    let encodedUserToken;"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    // only encode if a userToken was found"}, {"line_number": 15, "line_content": "    if (userToken) {"}, {"line_number": 16, "line_content": "      encodedUserToken = encodeUserToken(userToken);"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const source ="}, {"line_number": 20, "line_content": "      queryUser &&"}, {"line_number": 21, "line_content": "      Observable.forkJoin("}, {"line_number": 22, "line_content": "        queryUser.getCompletedChallenges$(),"}, {"line_number": 23, "line_content": "        queryUser.getPartiallyCompletedChallenges$(),"}, {"line_number": 24, "line_content": "        queryUser.getSavedChallenges$(),"}, {"line_number": 25, "line_content": "        queryUser.getPoints$(),"}, {"line_number": 26, "line_content": "        Donation.getCurrentActiveDonationCount$(),"}, {"line_number": 27, "line_content": "        ("}, {"line_number": 28, "line_content": "          completedChallenges,"}, {"line_number": 29, "line_content": "          partiallyCompletedChallenges,"}, {"line_number": 30, "line_content": "          savedChallenges,"}, {"line_number": 31, "line_content": "          progressTimestamps,"}, {"line_number": 32, "line_content": "          activeDonations"}, {"line_number": 33, "line_content": "        ) => ({"}, {"line_number": 34, "line_content": "          activeDonations,"}, {"line_number": 35, "line_content": "          completedChallenges,"}, {"line_number": 36, "line_content": "          partiallyCompletedChallenges,"}, {"line_number": 37, "line_content": "          progress: getProgress(progressTimestamps, queryUser.timezone),"}, {"line_number": 38, "line_content": "          savedChallenges"}, {"line_number": 39, "line_content": "        })"}, {"line_number": 40, "line_content": "      );"}, {"line_number": 41, "line_content": "    Observable.if("}, {"line_number": 42, "line_content": "      () => !queryUser,"}, {"line_number": 43, "line_content": "      Observable.of({ user: {}, result: '' }),"}, {"line_number": 44, "line_content": "      Observable.defer(() => source)"}, {"line_number": 45, "line_content": "        .map("}, {"line_number": 46, "line_content": "          ({"}, {"line_number": 47, "line_content": "            activeDonations,"}, {"line_number": 48, "line_content": "            completedChallenges,"}, {"line_number": 49, "line_content": "            partiallyCompletedChallenges,"}, {"line_number": 50, "line_content": "            progress,"}, {"line_number": 51, "line_content": "            savedChallenges"}, {"line_number": 52, "line_content": "          }) => ({"}, {"line_number": 53, "line_content": "            user: {"}, {"line_number": 54, "line_content": "              ...queryUser.toJSON(),"}, {"line_number": 55, "line_content": "              ...progress,"}, {"line_number": 56, "line_content": "              completedChallenges: completedChallenges.map("}, {"line_number": 57, "line_content": "                fixCompletedChallengeItem"}, {"line_number": 58, "line_content": "              ),"}, {"line_number": 59, "line_content": "              partiallyCompletedChallenges: partiallyCompletedChallenges.map("}, {"line_number": 60, "line_content": "                fixPartiallyCompletedChallengeItem"}, {"line_number": 61, "line_content": "              ),"}, {"line_number": 62, "line_content": "              savedChallenges: savedChallenges.map(fixSavedChallengeItem)"}, {"line_number": 63, "line_content": "            },"}, {"line_number": 64, "line_content": "            sessionMeta: { activeDonations }"}, {"line_number": 65, "line_content": "          })"}, {"line_number": 66, "line_content": "        )"}, {"line_number": 67, "line_content": "        .map(({ user, sessionMeta }) => ({"}, {"line_number": 68, "line_content": "          user: {"}, {"line_number": 69, "line_content": "            [user.username]: {"}, {"line_number": 70, "line_content": "              ...pick(user, userPropsForSession),"}, {"line_number": 71, "line_content": "              username: user.usernameDisplay || user.username,"}, {"line_number": 72, "line_content": "              isEmailVerified: !!user.emailVerified,"}, {"line_number": 73, "line_content": "              isGithub: !!user.githubProfile,"}, {"line_number": 74, "line_content": "              isLinkedIn: !!user.linkedin,"}, {"line_number": 75, "line_content": "              isTwitter: !!user.twitter,"}, {"line_number": 76, "line_content": "              isWebsite: !!user.website,"}, {"line_number": 77, "line_content": "              ...normaliseUserFields(user),"}, {"line_number": 78, "line_content": "              joinDate: user.id.getTimestamp(),"}, {"line_number": 79, "line_content": "              userToken: encodedUserToken"}, {"line_number": 80, "line_content": "            }"}, {"line_number": 81, "line_content": "          },"}, {"line_number": 82, "line_content": "          sessionMeta,"}, {"line_number": 83, "line_content": "          result: user.username"}, {"line_number": 84, "line_content": "        }))"}, {"line_number": 85, "line_content": "    ).subscribe(user => res.json(user), next);"}, {"line_number": 86, "line_content": "  };"}, {"line_number": 87, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getAccount(req, res) {"}, {"line_number": 2, "line_content": "  const { username } = req.user;"}, {"line_number": 3, "line_content": "  return res.redirect('/' + username);"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 59, "lines": [{"line_number": 1, "line_content": "function getUnlinkSocial(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user } = req;"}, {"line_number": 3, "line_content": "  const { username } = user;"}, {"line_number": 4, "line_content": "  const { origin } = getRedirectParams(req);"}, {"line_number": 5, "line_content": "  let social = req.params.social;"}, {"line_number": 6, "line_content": "  if (!social) {"}, {"line_number": 7, "line_content": "    req.flash('danger', 'No social account found');"}, {"line_number": 8, "line_content": "    return res.redirect('/' + username);"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  social = social.toLowerCase();"}, {"line_number": 12, "line_content": "  const validSocialAccounts = ['twitter', 'linkedin'];"}, {"line_number": 13, "line_content": "  if (validSocialAccounts.indexOf(social) === -1) {"}, {"line_number": 14, "line_content": "    req.flash('danger', 'Invalid social account');"}, {"line_number": 15, "line_content": "    return res.redirect('/' + username);"}, {"line_number": 16, "line_content": "  }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  if (!user[social]) {"}, {"line_number": 19, "line_content": "    req.flash('danger', `No ${social} account associated`);"}, {"line_number": 20, "line_content": "    return res.redirect('/' + username);"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  const query = {"}, {"line_number": 24, "line_content": "    where: {"}, {"line_number": 25, "line_content": "      provider: social"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": "  };"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "  return user.identities(query, function (err, identities) {"}, {"line_number": 30, "line_content": "    if (err) {"}, {"line_number": 31, "line_content": "      return next(err);"}, {"line_number": 32, "line_content": "    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    // assumed user identity is unique by provider"}, {"line_number": 35, "line_content": "    let identity = identities.shift();"}, {"line_number": 36, "line_content": "    if (!identity) {"}, {"line_number": 37, "line_content": "      req.flash('danger', 'No social account found');"}, {"line_number": 38, "line_content": "      return res.redirect('/' + username);"}, {"line_number": 39, "line_content": "    }"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "    return identity.destroy(function (err) {"}, {"line_number": 42, "line_content": "      if (err) {"}, {"line_number": 43, "line_content": "        return next(err);"}, {"line_number": 44, "line_content": "      }"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "      const updateData = { [social]: null };"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "      return user.updateAttributes(updateData, err => {"}, {"line_number": 49, "line_content": "        if (err) {"}, {"line_number": 50, "line_content": "          return next(err);"}, {"line_number": 51, "line_content": "        }"}, {"line_number": 52, "line_content": "        log(`${social} has been unlinked successfully`);"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "        req.flash('info', `You've successfully unlinked your ${social}.`);"}, {"line_number": 55, "line_content": "        return res.redirectWithFlash(`${origin}/${username}`);"}, {"line_number": 56, "line_content": "      });"}, {"line_number": 57, "line_content": "    });"}, {"line_number": 58, "line_content": "  });"}, {"line_number": 59, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "function postResetProgress(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user } = req;"}, {"line_number": 3, "line_content": "  return user.updateAttributes("}, {"line_number": 4, "line_content": "    {"}, {"line_number": 5, "line_content": "      progressTimestamps: [Date.now()],"}, {"line_number": 6, "line_content": "      currentChallengeId: '',"}, {"line_number": 7, "line_content": "      isRespWebDesignCert: false,"}, {"line_number": 8, "line_content": "      is2018DataVisCert: false,"}, {"line_number": 9, "line_content": "      isFrontEndLibsCert: false,"}, {"line_number": 10, "line_content": "      isJsAlgoDataStructCert: false,"}, {"line_number": 11, "line_content": "      isApisMicroservicesCert: false,"}, {"line_number": 12, "line_content": "      isInfosecQaCert: false,"}, {"line_number": 13, "line_content": "      isQaCertV7: false,"}, {"line_number": 14, "line_content": "      isInfosecCertV7: false,"}, {"line_number": 15, "line_content": "      is2018FullStackCert: false,"}, {"line_number": 16, "line_content": "      isFrontEndCert: false,"}, {"line_number": 17, "line_content": "      isBackEndCert: false,"}, {"line_number": 18, "line_content": "      isDataVisCert: false,"}, {"line_number": 19, "line_content": "      isFullStackCert: false,"}, {"line_number": 20, "line_content": "      isSciCompPyCertV7: false,"}, {"line_number": 21, "line_content": "      isDataAnalysisPyCertV7: false,"}, {"line_number": 22, "line_content": "      isMachineLearningPyCertV7: false,"}, {"line_number": 23, "line_content": "      isRelationalDatabaseCertV8: false,"}, {"line_number": 24, "line_content": "      completedChallenges: [],"}, {"line_number": 25, "line_content": "      savedChallenges: [],"}, {"line_number": 26, "line_content": "      partiallyCompletedChallenges: [],"}, {"line_number": 27, "line_content": "      needsModeration: false"}, {"line_number": 28, "line_content": "    },"}, {"line_number": 29, "line_content": "    function (err) {"}, {"line_number": 30, "line_content": "      if (err) {"}, {"line_number": 31, "line_content": "        return next(err);"}, {"line_number": 32, "line_content": "      }"}, {"line_number": 33, "line_content": "      return res.status(200).json({});"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": "  );"}, {"line_number": 36, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createPostDeleteAccount(app) {"}, {"line_number": 2, "line_content": "  const { User } = app.models;"}, {"line_number": 3, "line_content": "  return async function postDeleteAccount(req, res, next) {"}, {"line_number": 4, "line_content": "    return User.destroyById(req.user.id, function (err) {"}, {"line_number": 5, "line_content": "      if (err) {"}, {"line_number": 6, "line_content": "        return next(err);"}, {"line_number": 7, "line_content": "      }"}, {"line_number": 8, "line_content": "      req.logout();"}, {"line_number": 9, "line_content": "      removeCookies(req, res);"}, {"line_number": 10, "line_content": "      return res.status(200).json({});"}, {"line_number": 11, "line_content": "    });"}, {"line_number": 12, "line_content": "  };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "function createPostReportUserProfile(app) {"}, {"line_number": 2, "line_content": "  const { Email } = app.models;"}, {"line_number": 3, "line_content": "  return function postReportUserProfile(req, res, next) {"}, {"line_number": 4, "line_content": "    const { user } = req;"}, {"line_number": 5, "line_content": "    const { username, reportDescription: report } = req.body;"}, {"line_number": 6, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 7, "line_content": "    log(username);"}, {"line_number": 8, "line_content": "    log(report);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (!username || !report || report === '') {"}, {"line_number": 11, "line_content": "      return res.json({"}, {"line_number": 12, "line_content": "        type: 'danger',"}, {"line_number": 13, "line_content": "        message: 'flash.provide-username'"}, {"line_number": 14, "line_content": "      });"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "    return Email.send$("}, {"line_number": 17, "line_content": "      {"}, {"line_number": 18, "line_content": "        type: 'email',"}, {"line_number": 19, "line_content": "        to: 'support@freecodecamp.org',"}, {"line_number": 20, "line_content": "        cc: user.email,"}, {"line_number": 21, "line_content": "        from: 'team@freecodecamp.org',"}, {"line_number": 22, "line_content": "        subject: `Abuse Report : Reporting ${username}'s profile.`,"}, {"line_number": 23, "line_content": "        text: dedent(`"}, {"line_number": 24, "line_content": "        Hello Team,\\n"}, {"line_number": 25, "line_content": "        This is to report the profile of ${username}.\\n"}, {"line_number": 26, "line_content": "        Report Details:\\n"}, {"line_number": 27, "line_content": "        ${report}\\n\\n"}, {"line_number": 28, "line_content": "        Reported by:"}, {"line_number": 29, "line_content": "        Username: ${user.username}"}, {"line_number": 30, "line_content": "        Name: ${user.name}"}, {"line_number": 31, "line_content": "        Email: ${user.email}\\n"}, {"line_number": 32, "line_content": "        Thanks and regards,"}, {"line_number": 33, "line_content": "        ${user.name}"}, {"line_number": 34, "line_content": "      `)"}, {"line_number": 35, "line_content": "      },"}, {"line_number": 36, "line_content": "      err => {"}, {"line_number": 37, "line_content": "        if (err) {"}, {"line_number": 38, "line_content": "          err.redirectTo = `${origin}/${username}`;"}, {"line_number": 39, "line_content": "          return next(err);"}, {"line_number": 40, "line_content": "        }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "        return res.json({"}, {"line_number": 43, "line_content": "          type: 'info',"}, {"line_number": 44, "line_content": "          message: 'flash.report-sent',"}, {"line_number": 45, "line_content": "          variables: { email: user.email }"}, {"line_number": 46, "line_content": "        });"}, {"line_number": 47, "line_content": "      }"}, {"line_number": 48, "line_content": "    );"}, {"line_number": 49, "line_content": "  };"}, {"line_number": 50, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 93, "lines": [{"line_number": 1, "line_content": "function createGetPasswordlessAuth(app) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    models: { AuthToken, User }"}, {"line_number": 4, "line_content": "  } = app;"}, {"line_number": 5, "line_content": "  return function getPasswordlessAuth(req, res, next) {"}, {"line_number": 6, "line_content": "    const {"}, {"line_number": 7, "line_content": "      query: { email: encodedEmail, token: authTokenId, emailChange } = {}"}, {"line_number": 8, "line_content": "    } = req;"}, {"line_number": 9, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 10, "line_content": "    const email = decodeEmail(encodedEmail);"}, {"line_number": 11, "line_content": "    if (!isEmail(email)) {"}, {"line_number": 12, "line_content": "      return next("}, {"line_number": 13, "line_content": "        wrapHandledError(new TypeError('decoded email is invalid'), {"}, {"line_number": 14, "line_content": "          type: 'info',"}, {"line_number": 15, "line_content": "          message: 'The email encoded in the link is incorrectly formatted',"}, {"line_number": 16, "line_content": "          redirectTo: `${origin}/signin`"}, {"line_number": 17, "line_content": "        })"}, {"line_number": 18, "line_content": "      );"}, {"line_number": 19, "line_content": "    }"}, {"line_number": 20, "line_content": "    // first find"}, {"line_number": 21, "line_content": "    return ("}, {"line_number": 22, "line_content": "      AuthToken.findOne$({ where: { id: authTokenId } })"}, {"line_number": 23, "line_content": "        .flatMap(authToken => {"}, {"line_number": 24, "line_content": "          if (!authToken) {"}, {"line_number": 25, "line_content": "            throw wrapHandledError("}, {"line_number": 26, "line_content": "              new Error(`no token found for id: ${authTokenId}`),"}, {"line_number": 27, "line_content": "              {"}, {"line_number": 28, "line_content": "                type: 'info',"}, {"line_number": 29, "line_content": "                message: defaultErrorMsg,"}, {"line_number": 30, "line_content": "                redirectTo: `${origin}/signin`"}, {"line_number": 31, "line_content": "              }"}, {"line_number": 32, "line_content": "            );"}, {"line_number": 33, "line_content": "          }"}, {"line_number": 34, "line_content": "          // find user then validate and destroy email validation token"}, {"line_number": 35, "line_content": "          // finally retun user instance"}, {"line_number": 36, "line_content": "          return User.findOne$({ where: { id: authToken.userId } }).flatMap("}, {"line_number": 37, "line_content": "            user => {"}, {"line_number": 38, "line_content": "              if (!user) {"}, {"line_number": 39, "line_content": "                throw wrapHandledError("}, {"line_number": 40, "line_content": "                  new Error(`no user found for token: ${authTokenId}`),"}, {"line_number": 41, "line_content": "                  {"}, {"line_number": 42, "line_content": "                    type: 'info',"}, {"line_number": 43, "line_content": "                    message: defaultErrorMsg,"}, {"line_number": 44, "line_content": "                    redirectTo: `${origin}/signin`"}, {"line_number": 45, "line_content": "                  }"}, {"line_number": 46, "line_content": "                );"}, {"line_number": 47, "line_content": "              }"}, {"line_number": 48, "line_content": "              if (user.email !== email) {"}, {"line_number": 49, "line_content": "                if (!emailChange || (emailChange && user.newEmail !== email)) {"}, {"line_number": 50, "line_content": "                  throw wrapHandledError("}, {"line_number": 51, "line_content": "                    new Error('user email does not match'),"}, {"line_number": 52, "line_content": "                    {"}, {"line_number": 53, "line_content": "                      type: 'info',"}, {"line_number": 54, "line_content": "                      message: defaultErrorMsg,"}, {"line_number": 55, "line_content": "                      redirectTo: `${origin}/signin`"}, {"line_number": 56, "line_content": "                    }"}, {"line_number": 57, "line_content": "                  );"}, {"line_number": 58, "line_content": "                }"}, {"line_number": 59, "line_content": "              }"}, {"line_number": 60, "line_content": "              return authToken"}, {"line_number": 61, "line_content": "                .validate$()"}, {"line_number": 62, "line_content": "                .map(isValid => {"}, {"line_number": 63, "line_content": "                  if (!isValid) {"}, {"line_number": 64, "line_content": "                    throw wrapHandledError(new Error('token is invalid'), {"}, {"line_number": 65, "line_content": "                      type: 'info',"}, {"line_number": 66, "line_content": "                      message: `"}, {"line_number": 67, "line_content": "                        Looks like the link you clicked has expired,"}, {"line_number": 68, "line_content": "                        please request a fresh link, to sign in."}, {"line_number": 69, "line_content": "                      `,"}, {"line_number": 70, "line_content": "                      redirectTo: `${origin}/signin`"}, {"line_number": 71, "line_content": "                    });"}, {"line_number": 72, "line_content": "                  }"}, {"line_number": 73, "line_content": "                  return authToken.destroy$();"}, {"line_number": 74, "line_content": "                })"}, {"line_number": 75, "line_content": "                .map(() => user);"}, {"line_number": 76, "line_content": "            }"}, {"line_number": 77, "line_content": "          );"}, {"line_number": 78, "line_content": "        })"}, {"line_number": 79, "line_content": "        // at this point token has been validated and destroyed"}, {"line_number": 80, "line_content": "        // update user and log them in"}, {"line_number": 81, "line_content": "        .map(user => user.loginByRequest(req, res))"}, {"line_number": 82, "line_content": "        .do(() => {"}, {"line_number": 83, "line_content": "          if (emailChange) {"}, {"line_number": 84, "line_content": "            req.flash('success', 'flash.email-valid');"}, {"line_number": 85, "line_content": "          } else {"}, {"line_number": 86, "line_content": "            req.flash('success', 'flash.signin-success');"}, {"line_number": 87, "line_content": "          }"}, {"line_number": 88, "line_content": "          return res.redirectWithFlash(`${origin}/learn`);"}, {"line_number": 89, "line_content": "        })"}, {"line_number": 90, "line_content": "        .subscribe(() => {}, next)"}, {"line_number": 91, "line_content": "    );"}, {"line_number": 92, "line_content": "  };"}, {"line_number": 93, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function setupPassport(app) {"}, {"line_number": 2, "line_content": "  const configurator = new PassportConfigurator(app);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  configurator.setupModels({"}, {"line_number": 5, "line_content": "    userModel: app.models.user,"}, {"line_number": 6, "line_content": "    userIdentityModel: app.models.userIdentity,"}, {"line_number": 7, "line_content": "    userCredentialModel: app.models.userCredential"}, {"line_number": 8, "line_content": "  });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  configurator.init();"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  Object.keys(passportProviders).map(function (strategy) {"}, {"line_number": 13, "line_content": "    let config = passportProviders[strategy];"}, {"line_number": 14, "line_content": "    config.session = config.session !== false;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    config.customCallback = !config.useCustomCallback"}, {"line_number": 17, "line_content": "      ? null"}, {"line_number": 18, "line_content": "      : createPassportCallbackAuthenticator(strategy, config);"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    configurator.configureProvider(strategy, {"}, {"line_number": 21, "line_content": "      ...config,"}, {"line_number": 22, "line_content": "      ...passportOptions"}, {"line_number": 23, "line_content": "    });"}, {"line_number": 24, "line_content": "  });"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isHandledError(err) {"}, {"line_number": 2, "line_content": "  return !!err[_handledError];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function unwrapHandledError(err) {"}, {"line_number": 2, "line_content": "  return err[_handledError] || {};"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function wrapHandledError("}, {"line_number": 2, "line_content": "  err,"}, {"line_number": 3, "line_content": "  { type, message, redirectTo, status = 200 }"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  err[_handledError] = { type, message, redirectTo, status };"}, {"line_number": 6, "line_content": "  return err;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function dayCount([head, tail], timezone = 'UTC') {"}, {"line_number": 2, "line_content": "  return Math.ceil("}, {"line_number": 3, "line_content": "    moment(moment(head).tz(timezone).endOf('day')).diff("}, {"line_number": 4, "line_content": "      moment(tail).tz(timezone).startOf('day'),"}, {"line_number": 5, "line_content": "      'days',"}, {"line_number": 6, "line_content": "      true"}, {"line_number": 7, "line_content": "    )"}, {"line_number": 8, "line_content": "  );"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function normaliseUserFields(user) {"}, {"line_number": 2, "line_content": "  const about = user.bio && !user.about ? user.bio : user.about;"}, {"line_number": 3, "line_content": "  const picture = user.picture || '';"}, {"line_number": 4, "line_content": "  const twitter ="}, {"line_number": 5, "line_content": "    user.twitter && isURL(user.twitter)"}, {"line_number": 6, "line_content": "      ? user.twitter"}, {"line_number": 7, "line_content": "      : user.twitter &&"}, {"line_number": 8, "line_content": "        `https://www.twitter.com/${user.twitter.replace(/^@/, '')}`;"}, {"line_number": 9, "line_content": "  return { about, picture, twitter };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getProgress(progressTimestamps, timezone = 'EST') {"}, {"line_number": 2, "line_content": "  const calendar = progressTimestamps"}, {"line_number": 3, "line_content": "    .filter(Boolean)"}, {"line_number": 4, "line_content": "    .reduce((data, timestamp) => {"}, {"line_number": 5, "line_content": "      data[Math.floor(timestamp / 1000)] = 1;"}, {"line_number": 6, "line_content": "      return data;"}, {"line_number": 7, "line_content": "    }, {});"}, {"line_number": 8, "line_content": "  const uniqueHours = prepUniqueDaysByHours(progressTimestamps, timezone);"}, {"line_number": 9, "line_content": "  const streak = {"}, {"line_number": 10, "line_content": "    longest: calcLongestStreak(uniqueHours, timezone),"}, {"line_number": 11, "line_content": "    current: calcCurrentStreak(uniqueHours, timezone)"}, {"line_number": 12, "line_content": "  };"}, {"line_number": 13, "line_content": "  return { calendar, streak };"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createCookieConfig(req) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    signed: !!req.signedCookies,"}, {"line_number": 4, "line_content": "    domain: process.env.COOKIE_DOMAIN || 'localhost'"}, {"line_number": 5, "line_content": "  };"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "async function getAsyncPaypalToken() {"}, {"line_number": 2, "line_content": "  const res = await axios.post(paypalTokenURL, null, {"}, {"line_number": 3, "line_content": "    headers: {"}, {"line_number": 4, "line_content": "      'Content-Type': 'application/x-www-form-urlencoded'"}, {"line_number": 5, "line_content": "    },"}, {"line_number": 6, "line_content": "    auth: {"}, {"line_number": 7, "line_content": "      username: keys.paypal.client,"}, {"line_number": 8, "line_content": "      password: keys.paypal.secret"}, {"line_number": 9, "line_content": "    },"}, {"line_number": 10, "line_content": "    params: {"}, {"line_number": 11, "line_content": "      grant_type: 'client_credentials'"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "  });"}, {"line_number": 14, "line_content": "  return res.data.access_token;"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function capitalizeKeys(object) {"}, {"line_number": 2, "line_content": "  Object.keys(object).forEach(function (key) {"}, {"line_number": 3, "line_content": "    object[key.toUpperCase()] = object[key];"}, {"line_number": 4, "line_content": "  });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "async function verifyWebHook(headers, body, token, webhookId) {"}, {"line_number": 2, "line_content": "  var webhookEventBody = typeof body === 'string' ? JSON.parse(body) : body;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  capitalizeKeys(headers);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  const payload = {"}, {"line_number": 7, "line_content": "    auth_algo: headers['PAYPAL-AUTH-ALGO'],"}, {"line_number": 8, "line_content": "    cert_url: headers['PAYPAL-CERT-URL'],"}, {"line_number": 9, "line_content": "    transmission_id: headers['PAYPAL-TRANSMISSION-ID'],"}, {"line_number": 10, "line_content": "    transmission_sig: headers['PAYPAL-TRANSMISSION-SIG'],"}, {"line_number": 11, "line_content": "    transmission_time: headers['PAYPAL-TRANSMISSION-TIME'],"}, {"line_number": 12, "line_content": "    webhook_id: webhookId,"}, {"line_number": 13, "line_content": "    webhook_event: webhookEventBody"}, {"line_number": 14, "line_content": "  };"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  const response = await axios.post(paypalVerifyWebhookURL, payload, {"}, {"line_number": 17, "line_content": "    headers: {"}, {"line_number": 18, "line_content": "      'Content-Type': 'application/json',"}, {"line_number": 19, "line_content": "      Authorization: `Bearer ${token}`"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": "  });"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  if (response.data.verification_status === 'SUCCESS') {"}, {"line_number": 24, "line_content": "    return body;"}, {"line_number": 25, "line_content": "  } else {"}, {"line_number": 26, "line_content": "    throw {"}, {"line_number": 27, "line_content": "      // if verification fails, throw token verification error"}, {"line_number": 28, "line_content": "      message: `Failed token verification.`,"}, {"line_number": 29, "line_content": "      type: 'FailedPaypalTokenVerificationError'"}, {"line_number": 30, "line_content": "    };"}, {"line_number": 31, "line_content": "  }"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function verifyWebHookType(req) {"}, {"line_number": 2, "line_content": "  // check if webhook type for creation"}, {"line_number": 3, "line_content": "  const {"}, {"line_number": 4, "line_content": "    body: { event_type }"}, {"line_number": 5, "line_content": "  } = req;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  if ("}, {"line_number": 8, "line_content": "    event_type === 'BILLING.SUBSCRIPTION.ACTIVATED' ||"}, {"line_number": 9, "line_content": "    event_type === 'BILLING.SUBSCRIPTION.CANCELLED'"}, {"line_number": 10, "line_content": "  )"}, {"line_number": 11, "line_content": "    return req;"}, {"line_number": 12, "line_content": "  else"}, {"line_number": 13, "line_content": "    throw {"}, {"line_number": 14, "line_content": "      message: 'Webhook type is not supported',"}, {"line_number": 15, "line_content": "      type: 'UnsupportedWebhookType'"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function createDonationObj(body) {"}, {"line_number": 2, "line_content": "  // creates donation object"}, {"line_number": 3, "line_content": "  const {"}, {"line_number": 4, "line_content": "    resource: {"}, {"line_number": 5, "line_content": "      id,"}, {"line_number": 6, "line_content": "      status_update_time,"}, {"line_number": 7, "line_content": "      subscriber: { email_address } = {"}, {"line_number": 8, "line_content": "        email_address: null"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "  } = body;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  let donation = {"}, {"line_number": 14, "line_content": "    email: email_address,"}, {"line_number": 15, "line_content": "    amount: 500,"}, {"line_number": 16, "line_content": "    duration: 'month',"}, {"line_number": 17, "line_content": "    provider: 'paypal',"}, {"line_number": 18, "line_content": "    subscriptionId: id,"}, {"line_number": 19, "line_content": "    customerId: email_address,"}, {"line_number": 20, "line_content": "    startDate: new Date(status_update_time).toISOString()"}, {"line_number": 21, "line_content": "  };"}, {"line_number": 22, "line_content": "  return donation;"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "function createDonation(body, app) {"}, {"line_number": 2, "line_content": "  const { User } = app.models;"}, {"line_number": 3, "line_content": "  const {"}, {"line_number": 4, "line_content": "    resource: {"}, {"line_number": 5, "line_content": "      subscriber: { email_address } = {"}, {"line_number": 6, "line_content": "        email_address: null"}, {"line_number": 7, "line_content": "      }"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "  } = body;"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  let donation = createDonationObj(body);"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  let email = email_address;"}, {"line_number": 14, "line_content": "  if (!email || !isEmail(email)) {"}, {"line_number": 15, "line_content": "    throw {"}, {"line_number": 16, "line_content": "      message: 'Paypal webhook email is not valid',"}, {"line_number": 17, "line_content": "      type: 'InvalidPaypalWebhookEmail'"}, {"line_number": 18, "line_content": "    };"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  return User.findOne({ where: { email } }, (err, user) => {"}, {"line_number": 22, "line_content": "    if (err) throw new Error(err);"}, {"line_number": 23, "line_content": "    if (!user) {"}, {"line_number": 24, "line_content": "      log(`Creating new user:${email}`);"}, {"line_number": 25, "line_content": "      return User.create({ email })"}, {"line_number": 26, "line_content": "        .then(user => {"}, {"line_number": 27, "line_content": "          createAsyncUserDonation(user, donation);"}, {"line_number": 28, "line_content": "        })"}, {"line_number": 29, "line_content": "        .catch(err => {"}, {"line_number": 30, "line_content": "          throw {"}, {"line_number": 31, "line_content": "            message:"}, {"line_number": 32, "line_content": "              err.message || 'findOne Donation records with email failed',"}, {"line_number": 33, "line_content": "            type: err.name || 'FailedFindingOneDonationEmail'"}, {"line_number": 34, "line_content": "          };"}, {"line_number": 35, "line_content": "        });"}, {"line_number": 36, "line_content": "    }"}, {"line_number": 37, "line_content": "    return createAsyncUserDonation(user, donation);"}, {"line_number": 38, "line_content": "  });"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function cancelDonation(body, app) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    resource: { id, status_update_time = new Date(Date.now()).toISOString() }"}, {"line_number": 4, "line_content": "  } = body;"}, {"line_number": 5, "line_content": "  const { Donation } = app.models;"}, {"line_number": 6, "line_content": "  Donation.findOne({ where: { subscriptionId: id } }, (err, donation) => {"}, {"line_number": 7, "line_content": "    if (err)"}, {"line_number": 8, "line_content": "      throw {"}, {"line_number": 9, "line_content": "        message:"}, {"line_number": 10, "line_content": "          err.message || 'findOne Donation records with subscriptionId failed',"}, {"line_number": 11, "line_content": "        type: err.name || 'FailedFindingOneSubscriptionId'"}, {"line_number": 12, "line_content": "      };"}, {"line_number": 13, "line_content": "    if (!donation)"}, {"line_number": 14, "line_content": "      throw {"}, {"line_number": 15, "line_content": "        message: 'Donation record with provided subscription id is not found',"}, {"line_number": 16, "line_content": "        type: 'SubscriptionIdNotFound'"}, {"line_number": 17, "line_content": "      };"}, {"line_number": 18, "line_content": "    log(`Updating donation record: ${donation.subscriptionId}`);"}, {"line_number": 19, "line_content": "    donation.updateAttributes({"}, {"line_number": 20, "line_content": "      endDate: new Date(status_update_time).toISOString()"}, {"line_number": 21, "line_content": "    });"}, {"line_number": 22, "line_content": "  });"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function updateUser(body, app) {"}, {"line_number": 2, "line_content": "  const { event_type } = body;"}, {"line_number": 3, "line_content": "  if (event_type === 'BILLING.SUBSCRIPTION.ACTIVATED') {"}, {"line_number": 4, "line_content": "    // update user status based on new billing subscription events"}, {"line_number": 5, "line_content": "    createDonation(body, app);"}, {"line_number": 6, "line_content": "  } else if (event_type === 'BILLING.SUBSCRIPTION.CANCELLED') {"}, {"line_number": 7, "line_content": "    cancelDonation(body, app);"}, {"line_number": 8, "line_content": "  } else"}, {"line_number": 9, "line_content": "    throw {"}, {"line_number": 10, "line_content": "      message: 'Webhook type is not supported',"}, {"line_number": 11, "line_content": "      type: 'UnsupportedWebhookType'"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 102, "lines": [{"line_number": 1, "line_content": "async function createStripeCardDonation(req, res, stripe) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    body: { paymentMethodId, amount, duration },"}, {"line_number": 4, "line_content": "    user: { name, id: userId, email },"}, {"line_number": 5, "line_content": "    user"}, {"line_number": 6, "line_content": "  } = req;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  if (!paymentMethodId || !amount || !duration || !userId || !email) {"}, {"line_number": 9, "line_content": "    throw {"}, {"line_number": 10, "line_content": "      message: 'Request is not valid',"}, {"line_number": 11, "line_content": "      type: 'InvalidRequest'"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  /*"}, {"line_number": 16, "line_content": "   * if user is already donating and the donation isn't one time only,"}, {"line_number": 17, "line_content": "   * throw error"}, {"line_number": 18, "line_content": "   */"}, {"line_number": 19, "line_content": "  if (user.isDonating && duration !== 'onetime') {"}, {"line_number": 20, "line_content": "    throw {"}, {"line_number": 21, "line_content": "      message: `User already has active recurring donation(s).`,"}, {"line_number": 22, "line_content": "      type: 'AlreadyDonatingError'"}, {"line_number": 23, "line_content": "    };"}, {"line_number": 24, "line_content": "  }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "  let customerId;"}, {"line_number": 27, "line_content": "  try {"}, {"line_number": 28, "line_content": "    const customer = await stripe.customers.create({"}, {"line_number": 29, "line_content": "      email,"}, {"line_number": 30, "line_content": "      payment_method: paymentMethodId,"}, {"line_number": 31, "line_content": "      invoice_settings: { default_payment_method: paymentMethodId },"}, {"line_number": 32, "line_content": "      ...(name && { name })"}, {"line_number": 33, "line_content": "    });"}, {"line_number": 34, "line_content": "    customerId = customer?.id;"}, {"line_number": 35, "line_content": "  } catch {"}, {"line_number": 36, "line_content": "    throw {"}, {"line_number": 37, "line_content": "      type: 'customerCreationFailed',"}, {"line_number": 38, "line_content": "      message: 'Failed to create stripe customer'"}, {"line_number": 39, "line_content": "    };"}, {"line_number": 40, "line_content": "  }"}, {"line_number": 41, "line_content": "  log(`Stripe customer with id ${customerId} created`);"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "  let subscriptionId;"}, {"line_number": 44, "line_content": "  try {"}, {"line_number": 45, "line_content": "    const {"}, {"line_number": 46, "line_content": "      id: subscription_id,"}, {"line_number": 47, "line_content": "      latest_invoice: {"}, {"line_number": 48, "line_content": "        payment_intent: { client_secret, status: intent_status }"}, {"line_number": 49, "line_content": "      }"}, {"line_number": 50, "line_content": "    } = await stripe.subscriptions.create({"}, {"line_number": 51, "line_content": "      // create Stripe subscription"}, {"line_number": 52, "line_content": "      customer: customerId,"}, {"line_number": 53, "line_content": "      payment_behavior: 'allow_incomplete',"}, {"line_number": 54, "line_content": "      items: ["}, {"line_number": 55, "line_content": "        {"}, {"line_number": 56, "line_content": "          plan: `${donationSubscriptionConfig.duration["}, {"line_number": 57, "line_content": "            duration"}, {"line_number": 58, "line_content": "          ].toLowerCase()}-donation-${amount}`"}, {"line_number": 59, "line_content": "        }"}, {"line_number": 60, "line_content": "      ],"}, {"line_number": 61, "line_content": "      expand: ['latest_invoice.payment_intent']"}, {"line_number": 62, "line_content": "    });"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "    if (intent_status === 'requires_source_action')"}, {"line_number": 65, "line_content": "      throw {"}, {"line_number": 66, "line_content": "        type: 'UserActionRequired',"}, {"line_number": 67, "line_content": "        message: 'Payment requires user action',"}, {"line_number": 68, "line_content": "        client_secret"}, {"line_number": 69, "line_content": "      };"}, {"line_number": 70, "line_content": "    else if (intent_status === 'requires_source')"}, {"line_number": 71, "line_content": "      throw {"}, {"line_number": 72, "line_content": "        type: 'PaymentMethodRequired',"}, {"line_number": 73, "line_content": "        message: 'Card has been declined'"}, {"line_number": 74, "line_content": "      };"}, {"line_number": 75, "line_content": "    subscriptionId = subscription_id;"}, {"line_number": 76, "line_content": "  } catch (err) {"}, {"line_number": 77, "line_content": "    if ("}, {"line_number": 78, "line_content": "      err.type === 'UserActionRequired' ||"}, {"line_number": 79, "line_content": "      err.type === 'PaymentMethodRequired'"}, {"line_number": 80, "line_content": "    )"}, {"line_number": 81, "line_content": "      throw err;"}, {"line_number": 82, "line_content": "    else"}, {"line_number": 83, "line_content": "      throw {"}, {"line_number": 84, "line_content": "        type: 'SubscriptionCreationFailed',"}, {"line_number": 85, "line_content": "        message: 'Failed to create stripe subscription'"}, {"line_number": 86, "line_content": "      };"}, {"line_number": 87, "line_content": "  }"}, {"line_number": 88, "line_content": "  log(`Stripe subscription with id ${subscriptionId} created`);"}, {"line_number": 89, "line_content": ""}, {"line_number": 90, "line_content": "  // save Donation"}, {"line_number": 91, "line_content": "  let donation = {"}, {"line_number": 92, "line_content": "    email,"}, {"line_number": 93, "line_content": "    amount,"}, {"line_number": 94, "line_content": "    duration,"}, {"line_number": 95, "line_content": "    provider: 'stripe',"}, {"line_number": 96, "line_content": "    subscriptionId,"}, {"line_number": 97, "line_content": "    customerId,"}, {"line_number": 98, "line_content": "    startDate: new Date().toISOString()"}, {"line_number": 99, "line_content": "  };"}, {"line_number": 100, "line_content": "  await createAsyncUserDonation(user, donation);"}, {"line_number": 101, "line_content": "  return res.status(200).json({ isDonating: true });"}, {"line_number": 102, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function saveInstance(instance) {"}, {"line_number": 2, "line_content": "  return new Rx.Observable.create(function (observer) {"}, {"line_number": 3, "line_content": "    if (!instance || typeof instance.save !== 'function') {"}, {"line_number": 4, "line_content": "      debug('no instance or save method');"}, {"line_number": 5, "line_content": "      observer.onNext();"}, {"line_number": 6, "line_content": "      return observer.onCompleted();"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return instance.save(function (err, savedInstance) {"}, {"line_number": 9, "line_content": "      if (err) {"}, {"line_number": 10, "line_content": "        return observer.onError(err);"}, {"line_number": 11, "line_content": "      }"}, {"line_number": 12, "line_content": "      debug('instance saved');"}, {"line_number": 13, "line_content": "      observer.onNext(savedInstance);"}, {"line_number": 14, "line_content": "      return observer.onCompleted();"}, {"line_number": 15, "line_content": "    });"}, {"line_number": 16, "line_content": "  });"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function observeQuery(Model, methodName, query) {"}, {"line_number": 2, "line_content": "  return Rx.Observable.fromNodeCallback(Model[methodName], Model)(query);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function timeCache(time, unit) {"}, {"line_number": 2, "line_content": "  const source = this;"}, {"line_number": 3, "line_content": "  let cache;"}, {"line_number": 4, "line_content": "  let expireCacheAt;"}, {"line_number": 5, "line_content": "  return Observable.create(observable => {"}, {"line_number": 6, "line_content": "    // if there is no expire time set"}, {"line_number": 7, "line_content": "    // or if expireCacheAt is smaller than now,"}, {"line_number": 8, "line_content": "    // set new expire time in MS and create new subscription to source"}, {"line_number": 9, "line_content": "    if (!expireCacheAt || expireCacheAt < Date.now()) {"}, {"line_number": 10, "line_content": "      // set expire in ms;"}, {"line_number": 11, "line_content": "      expireCacheAt = moment().add(time, unit).valueOf();"}, {"line_number": 12, "line_content": "      cache = new AsyncSubject();"}, {"line_number": 13, "line_content": "      source.subscribe(cache);"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": "    return cache.subscribe(observable);"}, {"line_number": 16, "line_content": "  });"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function observeMethod(context, methodName) {"}, {"line_number": 2, "line_content": "  return Rx.Observable.fromNodeCallback(context[methodName], context);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function prepUniqueDaysByHours(cals, tz = 'UTC') {"}, {"line_number": 2, "line_content": "  let prev = null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  // compose goes bottom to top (map > sortBy > transform)"}, {"line_number": 5, "line_content": "  return compose("}, {"line_number": 6, "line_content": "    transform((data, cur, i) => {"}, {"line_number": 7, "line_content": "      if (i < 1) {"}, {"line_number": 8, "line_content": "        data.push(cur);"}, {"line_number": 9, "line_content": "        prev = cur;"}, {"line_number": 10, "line_content": "      } else if ("}, {"line_number": 11, "line_content": "        moment(cur).tz(tz).diff(moment(prev).tz(tz).startOf('day'), 'hours') >="}, {"line_number": 12, "line_content": "        hoursDay"}, {"line_number": 13, "line_content": "      ) {"}, {"line_number": 14, "line_content": "        data.push(cur);"}, {"line_number": 15, "line_content": "        prev = cur;"}, {"line_number": 16, "line_content": "      }"}, {"line_number": 17, "line_content": "    }, []),"}, {"line_number": 18, "line_content": "    sortBy(e => e),"}, {"line_number": 19, "line_content": "    map(ts => moment(ts).tz(tz).startOf('hours').valueOf())"}, {"line_number": 20, "line_content": "  )(cals);"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function calcCurrentStreak(cals, tz = 'UTC') {"}, {"line_number": 2, "line_content": "  let prev = last(cals);"}, {"line_number": 3, "line_content": "  if ("}, {"line_number": 4, "line_content": "    moment().tz(tz).startOf('day').diff(moment(prev).tz(tz), 'hours') >"}, {"line_number": 5, "line_content": "    hoursBetween"}, {"line_number": 6, "line_content": "  ) {"}, {"line_number": 7, "line_content": "    return 0;"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "  let currentStreak = 0;"}, {"line_number": 10, "line_content": "  let streakContinues = true;"}, {"line_number": 11, "line_content": "  forEachRight(cur => {"}, {"line_number": 12, "line_content": "    if ("}, {"line_number": 13, "line_content": "      moment(prev).tz(tz).startOf('day').diff(moment(cur).tz(tz), 'hours') <="}, {"line_number": 14, "line_content": "      hoursBetween"}, {"line_number": 15, "line_content": "    ) {"}, {"line_number": 16, "line_content": "      prev = cur;"}, {"line_number": 17, "line_content": "      currentStreak++;"}, {"line_number": 18, "line_content": "    } else {"}, {"line_number": 19, "line_content": "      // current streak found"}, {"line_number": 20, "line_content": "      streakContinues = false;"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": "    return streakContinues;"}, {"line_number": 23, "line_content": "  })(cals);"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "  return currentStreak;"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function calcLongestStreak(cals, tz = 'UTC') {"}, {"line_number": 2, "line_content": "  let tail = cals[0];"}, {"line_number": 3, "line_content": "  const longest = cals.reduce("}, {"line_number": 4, "line_content": "    (longest, head, index) => {"}, {"line_number": 5, "line_content": "      const last = cals[index === 0 ? 0 : index - 1];"}, {"line_number": 6, "line_content": "      // is streak broken"}, {"line_number": 7, "line_content": "      if ("}, {"line_number": 8, "line_content": "        moment(head).tz(tz).startOf('day').diff(moment(last).tz(tz), 'hours') >"}, {"line_number": 9, "line_content": "        hoursBetween"}, {"line_number": 10, "line_content": "      ) {"}, {"line_number": 11, "line_content": "        tail = head;"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": "      if (dayCount(longest, tz) < dayCount([head, tail], tz)) {"}, {"line_number": 14, "line_content": "        return [head, tail];"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "      return longest;"}, {"line_number": 17, "line_content": "    },"}, {"line_number": 18, "line_content": "    [cals[0], cals[0]]"}, {"line_number": 19, "line_content": "  );"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  return dayCount(longest, tz);"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "function getUserById(id, User = loopback.getModelByType('User')) {"}, {"line_number": 2, "line_content": "  return new Promise((resolve, reject) =>"}, {"line_number": 3, "line_content": "    User.findById(id, (err, instance) => {"}, {"line_number": 4, "line_content": "      if (err || isEmpty(instance)) {"}, {"line_number": 5, "line_content": "        return reject(err || 'No user instance found');"}, {"line_number": 6, "line_content": "      }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "      let completedChallengeCount = 0;"}, {"line_number": 9, "line_content": "      let completedProjectCount = 0;"}, {"line_number": 10, "line_content": "      if ('completedChallenges' in instance) {"}, {"line_number": 11, "line_content": "        completedChallengeCount = instance.completedChallenges.length;"}, {"line_number": 12, "line_content": "        instance.completedChallenges.forEach(item => {"}, {"line_number": 13, "line_content": "          if ("}, {"line_number": 14, "line_content": "            'challengeType' in item &&"}, {"line_number": 15, "line_content": "            (item.challengeType === 3 || item.challengeType === 4)"}, {"line_number": 16, "line_content": "          ) {"}, {"line_number": 17, "line_content": "            completedProjectCount++;"}, {"line_number": 18, "line_content": "          }"}, {"line_number": 19, "line_content": "        });"}, {"line_number": 20, "line_content": "      }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "      instance.completedChallengeCount = completedChallengeCount;"}, {"line_number": 23, "line_content": "      instance.completedProjectCount = completedProjectCount;"}, {"line_number": 24, "line_content": "      instance.completedCertCount = getCompletedCertCount(instance);"}, {"line_number": 25, "line_content": "      instance.completedLegacyCertCount = getLegacyCertCount(instance);"}, {"line_number": 26, "line_content": "      instance.points ="}, {"line_number": 27, "line_content": "        (instance.progressTimestamps && instance.progressTimestamps.length) ||"}, {"line_number": 28, "line_content": "        1;"}, {"line_number": 29, "line_content": "      return resolve(instance);"}, {"line_number": 30, "line_content": "    })"}, {"line_number": 31, "line_content": "  );"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getCompletedCertCount(user) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    'isApisMicroservicesCert',"}, {"line_number": 4, "line_content": "    'is2018DataVisCert',"}, {"line_number": 5, "line_content": "    'isFrontEndLibsCert',"}, {"line_number": 6, "line_content": "    'isQaCertV7',"}, {"line_number": 7, "line_content": "    'isInfosecCertV7',"}, {"line_number": 8, "line_content": "    'isJsAlgoDataStructCert',"}, {"line_number": 9, "line_content": "    'isRespWebDesignCert',"}, {"line_number": 10, "line_content": "    'isSciCompPyCertV7',"}, {"line_number": 11, "line_content": "    'isDataAnalysisPyCertV7',"}, {"line_number": 12, "line_content": "    'isMachineLearningPyCertV7',"}, {"line_number": 13, "line_content": "    'isRelationalDatabaseCertV8'"}, {"line_number": 14, "line_content": "  ].reduce((sum, key) => (user[key] ? sum + 1 : sum), 0);"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getLegacyCertCount(user) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    'isFrontEndCert',"}, {"line_number": 4, "line_content": "    'isBackEndCert',"}, {"line_number": 5, "line_content": "    'isDataVisCert',"}, {"line_number": 6, "line_content": "    'isInfosecQaCert'"}, {"line_number": 7, "line_content": "  ].reduce((sum, key) => (user[key] ? sum + 1 : sum), 0);"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function getReturnTo(encryptedParams, secret, _homeLocation = homeLocation) {"}, {"line_number": 2, "line_content": "  let params;"}, {"line_number": 3, "line_content": "  try {"}, {"line_number": 4, "line_content": "    params = jwt.verify(encryptedParams, secret);"}, {"line_number": 5, "line_content": "  } catch (e) {"}, {"line_number": 6, "line_content": "    // TODO: report to Sentry? Probably not. Remove entirely?"}, {"line_number": 7, "line_content": "    console.log(e);"}, {"line_number": 8, "line_content": "    // something went wrong, use default params"}, {"line_number": 9, "line_content": "    params = {"}, {"line_number": 10, "line_content": "      returnTo: `${_homeLocation}/learn`,"}, {"line_number": 11, "line_content": "      origin: _homeLocation,"}, {"line_number": 12, "line_content": "      pathPrefix: ''"}, {"line_number": 13, "line_content": "    };"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  return normalizeParams(params, _homeLocation);"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function normalizeParams("}, {"line_number": 2, "line_content": "  { returnTo, origin, pathPrefix },"}, {"line_number": 3, "line_content": "  _homeLocation = homeLocation"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  // coerce to strings, just in case something weird and nefarious is happening"}, {"line_number": 6, "line_content": "  returnTo = '' + returnTo;"}, {"line_number": 7, "line_content": "  origin = '' + origin;"}, {"line_number": 8, "line_content": "  pathPrefix = '' + pathPrefix;"}, {"line_number": 9, "line_content": "  // we add the '/' to prevent returns to"}, {"line_number": 10, "line_content": "  // www.freecodecamp.org.somewhere.else.com"}, {"line_number": 11, "line_content": "  if ("}, {"line_number": 12, "line_content": "    !returnTo ||"}, {"line_number": 13, "line_content": "    !allowedOrigins.some(allowed => returnTo.startsWith(allowed + '/'))"}, {"line_number": 14, "line_content": "  ) {"}, {"line_number": 15, "line_content": "    returnTo = `${_homeLocation}/learn`;"}, {"line_number": 16, "line_content": "    origin = _homeLocation;"}, {"line_number": 17, "line_content": "    pathPrefix = '';"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": "  if (!origin || !allowedOrigins.includes(origin)) {"}, {"line_number": 20, "line_content": "    returnTo = `${_homeLocation}/learn`;"}, {"line_number": 21, "line_content": "    origin = _homeLocation;"}, {"line_number": 22, "line_content": "    pathPrefix = '';"}, {"line_number": 23, "line_content": "  }"}, {"line_number": 24, "line_content": "  pathPrefix = availableLangs.client.includes(pathPrefix) ? pathPrefix : '';"}, {"line_number": 25, "line_content": "  return { returnTo, origin, pathPrefix };"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getPrefixedLandingPath(origin, pathPrefix) {"}, {"line_number": 2, "line_content": "  const redirectPathSegment = pathPrefix ? `/${pathPrefix}` : '';"}, {"line_number": 3, "line_content": "  return `${origin}${redirectPathSegment}`;"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getRedirectParams(req, _normalizeParams = normalizeParams) {"}, {"line_number": 2, "line_content": "  const url = req.header('Referer');"}, {"line_number": 3, "line_content": "  // since we do not always redirect the user back to the page they were on"}, {"line_number": 4, "line_content": "  // we need client locale and origin to construct the redirect url."}, {"line_number": 5, "line_content": "  const returnUrl = new URL(url ? url : homeLocation);"}, {"line_number": 6, "line_content": "  const origin = returnUrl.origin;"}, {"line_number": 7, "line_content": "  // if this is not one of the client languages, validation will convert"}, {"line_number": 8, "line_content": "  // this to '' before it is used."}, {"line_number": 9, "line_content": "  const pathPrefix = returnUrl.pathname.split('/')[1];"}, {"line_number": 10, "line_content": "  return _normalizeParams({ returnTo: returnUrl.href, origin, pathPrefix });"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function haveSamePath(redirectBase, returnUrl) {"}, {"line_number": 2, "line_content": "  const base = new URL(redirectBase);"}, {"line_number": 3, "line_content": "  const url = new URL(returnUrl);"}, {"line_number": 4, "line_content": "  return base.pathname === url.pathname;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getUsernameFromProvider(provider, profile) {"}, {"line_number": 2, "line_content": "  return typeof providerHash[provider] === 'function'"}, {"line_number": 3, "line_content": "    ? providerHash[provider](profile)"}, {"line_number": 4, "line_content": "    : null;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function createUserUpdatesFromProfile(provider, profile) {"}, {"line_number": 2, "line_content": "  if (githubRegex.test(provider)) {"}, {"line_number": 3, "line_content": "    return createProfileAttributesFromGithub(profile);"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  return {"}, {"line_number": 6, "line_content": "    [getSocialProvider(provider)]: getUsernameFromProvider("}, {"line_number": 7, "line_content": "      getSocialProvider(provider),"}, {"line_number": 8, "line_content": "      profile"}, {"line_number": 9, "line_content": "    )"}, {"line_number": 10, "line_content": "  };"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function createProfileAttributesFromGithub(profile) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    profileUrl: githubProfile,"}, {"line_number": 4, "line_content": "    username,"}, {"line_number": 5, "line_content": "    _json: { avatar_url: picture, blog: website, location, bio, name } = {}"}, {"line_number": 6, "line_content": "  } = profile;"}, {"line_number": 7, "line_content": "  return {"}, {"line_number": 8, "line_content": "    name,"}, {"line_number": 9, "line_content": "    username: username.toLowerCase(),"}, {"line_number": 10, "line_content": "    location,"}, {"line_number": 11, "line_content": "    bio,"}, {"line_number": 12, "line_content": "    website,"}, {"line_number": 13, "line_content": "    picture,"}, {"line_number": 14, "line_content": "    githubProfile"}, {"line_number": 15, "line_content": "  };"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getSocialProvider(provider) {"}, {"line_number": 2, "line_content": "  return provider.split('-')[0];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function trimTags(value) {"}, {"line_number": 2, "line_content": "  const tagBody = '(?:[^\"\\'>]|\"[^\"]*\"|\\'[^\\']*\\')*';"}, {"line_number": 3, "line_content": "  const tagOrComment = new RegExp("}, {"line_number": 4, "line_content": "    '<(?:' +"}, {"line_number": 5, "line_content": "      // Comment body."}, {"line_number": 6, "line_content": "      '!--(?:(?:-*[^->])*--+|-?)' +"}, {"line_number": 7, "line_content": "      // Special \"raw text\" elements whose content should be elided."}, {"line_number": 8, "line_content": "      '|script\\\\b' +"}, {"line_number": 9, "line_content": "      tagBody +"}, {"line_number": 10, "line_content": "      '>[\\\\s\\\\S]*?</script\\\\s*' +"}, {"line_number": 11, "line_content": "      '|style\\\\b' +"}, {"line_number": 12, "line_content": "      tagBody +"}, {"line_number": 13, "line_content": "      '>[\\\\s\\\\S]*?</style\\\\s*' +"}, {"line_number": 14, "line_content": "      // Regular name"}, {"line_number": 15, "line_content": "      '|/?[a-z]' +"}, {"line_number": 16, "line_content": "      tagBody +"}, {"line_number": 17, "line_content": "      ')>',"}, {"line_number": 18, "line_content": "    'gi'"}, {"line_number": 19, "line_content": "  );"}, {"line_number": 20, "line_content": "  let rawValue;"}, {"line_number": 21, "line_content": "  do {"}, {"line_number": 22, "line_content": "    rawValue = value;"}, {"line_number": 23, "line_content": "    value = value.replace(tagOrComment, '');"}, {"line_number": 24, "line_content": "  } while (value !== rawValue);"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "  return value.replace(/</g, '&lt;');"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function ifNoUserRedirectHome(message, type = 'errors') {"}, {"line_number": 2, "line_content": "  return function (req, res, next) {"}, {"line_number": 3, "line_content": "    const { path } = req;"}, {"line_number": 4, "line_content": "    if (req.user) {"}, {"line_number": 5, "line_content": "      return next();"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 9, "line_content": "    req.flash(type, message || `You must be signed in to access ${path}`);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    return res.redirect(origin);"}, {"line_number": 12, "line_content": "  };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function ifNoUserSend(sendThis) {"}, {"line_number": 2, "line_content": "  return function (req, res, next) {"}, {"line_number": 3, "line_content": "    if (req.user) {"}, {"line_number": 4, "line_content": "      return next();"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": "    return res.status(200).send(sendThis);"}, {"line_number": 7, "line_content": "  };"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function ifNoUser401(req, res, next) {"}, {"line_number": 2, "line_content": "  if (req.user) {"}, {"line_number": 3, "line_content": "    return next();"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  return res.status(401).end();"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function ifNotVerifiedRedirectToUpdateEmail(req, res, next) {"}, {"line_number": 2, "line_content": "  const { user } = req;"}, {"line_number": 3, "line_content": "  if (!user) {"}, {"line_number": 4, "line_content": "    return next();"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  if (!user.emailVerified) {"}, {"line_number": 7, "line_content": "    req.flash("}, {"line_number": 8, "line_content": "      'danger',"}, {"line_number": 9, "line_content": "      dedent`"}, {"line_number": 10, "line_content": "        We do not have your verified email address on record,"}, {"line_number": 11, "line_content": "        please add it in the settings to continue with your request."}, {"line_number": 12, "line_content": "      `"}, {"line_number": 13, "line_content": "    );"}, {"line_number": 14, "line_content": "    return res.redirect('/settings');"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "  return next();"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function ifUserRedirectTo(status) {"}, {"line_number": 2, "line_content": "  status = status === 301 ? 301 : 302;"}, {"line_number": 3, "line_content": "  return (req, res, next) => {"}, {"line_number": 4, "line_content": "    const { accessToken } = getAccessTokenFromRequest(req);"}, {"line_number": 5, "line_content": "    const { returnTo } = getRedirectParams(req);"}, {"line_number": 6, "line_content": "    if (req.user && accessToken) {"}, {"line_number": 7, "line_content": "      return res.status(status).redirect(returnTo);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    if (req.user && !accessToken) {"}, {"line_number": 10, "line_content": "      // This request has an active auth session"}, {"line_number": 11, "line_content": "      // but there is no accessToken attached to the request"}, {"line_number": 12, "line_content": "      // perhaps the user cleared cookies?"}, {"line_number": 13, "line_content": "      // we need to remove the zombie auth session"}, {"line_number": 14, "line_content": "      removeCookies(req, res);"}, {"line_number": 15, "line_content": "      delete req.session.passport;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    return next();"}, {"line_number": 18, "line_content": "  };"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function getChallenges() {"}, {"line_number": 2, "line_content": "  return Object.keys(curriculum)"}, {"line_number": 3, "line_content": "    .map(key => curriculum[key].blocks)"}, {"line_number": 4, "line_content": "    .reduce((challengeArray, superBlock) => {"}, {"line_number": 5, "line_content": "      const challengesForBlock = Object.keys(superBlock).map("}, {"line_number": 6, "line_content": "        key => superBlock[key].challenges"}, {"line_number": 7, "line_content": "      );"}, {"line_number": 8, "line_content": "      return [...challengeArray, ...flatten(challengesForBlock)];"}, {"line_number": 9, "line_content": "    }, []);"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getCompletedCertCount(user) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    'isApisMicroservicesCert',"}, {"line_number": 4, "line_content": "    'is2018DataVisCert',"}, {"line_number": 5, "line_content": "    'isFrontEndLibsCert',"}, {"line_number": 6, "line_content": "    'isQaCertV7',"}, {"line_number": 7, "line_content": "    'isInfosecCertV7',"}, {"line_number": 8, "line_content": "    'isJsAlgoDataStructCert',"}, {"line_number": 9, "line_content": "    'isRespWebDesignCert',"}, {"line_number": 10, "line_content": "    'isSciCompPyCertV7',"}, {"line_number": 11, "line_content": "    'isDataAnalysisPyCertV7',"}, {"line_number": 12, "line_content": "    'isMachineLearningPyCertV7',"}, {"line_number": 13, "line_content": "    'isRelationalDatabaseCertV8'"}, {"line_number": 14, "line_content": "  ].reduce((sum, key) => (user[key] ? sum + 1 : sum), 0);"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getLegacyCertCount(user) {"}, {"line_number": 2, "line_content": "  return ["}, {"line_number": 3, "line_content": "    'isFrontEndCert',"}, {"line_number": 4, "line_content": "    'isBackEndCert',"}, {"line_number": 5, "line_content": "    'isDataVisCert',"}, {"line_number": 6, "line_content": "    'isInfosecQaCert'"}, {"line_number": 7, "line_content": "  ].reduce((sum, key) => (user[key] ? sum + 1 : sum), 0);"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "function populateUser(db, user) {"}, {"line_number": 2, "line_content": "  return new Promise((resolve, reject) => {"}, {"line_number": 3, "line_content": "    let populatedUser = { ...user };"}, {"line_number": 4, "line_content": "    db.collection('user')"}, {"line_number": 5, "line_content": "      .aggregate(["}, {"line_number": 6, "line_content": "        { $match: { _id: user.id } },"}, {"line_number": 7, "line_content": "        { $project: { points: { $size: '$progressTimestamps' } } }"}, {"line_number": 8, "line_content": "      ])"}, {"line_number": 9, "line_content": "      .get(function (err, [{ points = 1 } = {}]) {"}, {"line_number": 10, "line_content": "        if (err) {"}, {"line_number": 11, "line_content": "          return reject(err);"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "        user.points = points;"}, {"line_number": 14, "line_content": "        let completedChallengeCount = 0;"}, {"line_number": 15, "line_content": "        let completedProjectCount = 0;"}, {"line_number": 16, "line_content": "        if ('completedChallenges' in user) {"}, {"line_number": 17, "line_content": "          completedChallengeCount = user.completedChallenges.length;"}, {"line_number": 18, "line_content": "          user.completedChallenges.forEach(item => {"}, {"line_number": 19, "line_content": "            if ("}, {"line_number": 20, "line_content": "              'challengeType' in item &&"}, {"line_number": 21, "line_content": "              (item.challengeType === 3 || item.challengeType === 4)"}, {"line_number": 22, "line_content": "            ) {"}, {"line_number": 23, "line_content": "              completedProjectCount++;"}, {"line_number": 24, "line_content": "            }"}, {"line_number": 25, "line_content": "          });"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "        populatedUser.completedChallengeCount = completedChallengeCount;"}, {"line_number": 28, "line_content": "        populatedUser.completedProjectCount = completedProjectCount;"}, {"line_number": 29, "line_content": "        populatedUser.completedCertCount = getCompletedCertCount(user);"}, {"line_number": 30, "line_content": "        populatedUser.completedLegacyCertCount = getLegacyCertCount(user);"}, {"line_number": 31, "line_content": "        populatedUser.completedChallenges = [];"}, {"line_number": 32, "line_content": "        return resolve(populatedUser);"}, {"line_number": 33, "line_content": "      });"}, {"line_number": 34, "line_content": "  });"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function deprecatedEndpoint(_, res) {"}, {"line_number": 2, "line_content": "  return res.status(410).json({"}, {"line_number": 3, "line_content": "    message: {"}, {"line_number": 4, "line_content": "      type: 'info',"}, {"line_number": 5, "line_content": "      message: 'Please reload the app, this feature is no longer available.'"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "  });"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function temporarilyDisabledEndpoint(_, res) {"}, {"line_number": 2, "line_content": "  return res.status(404).json({"}, {"line_number": 3, "line_content": "    message: {"}, {"line_number": 4, "line_content": "      type: 'info',"}, {"line_number": 5, "line_content": "      message: 'Please reload the app, this feature is no longer available.'"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "  });"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createCookieConfig(req) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    signed: !!req.signedCookies,"}, {"line_number": 4, "line_content": "    domain: process.env.COOKIE_DOMAIN || 'localhost'"}, {"line_number": 5, "line_content": "  };"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function setAccessTokenToResponse("}, {"line_number": 2, "line_content": "  { accessToken },"}, {"line_number": 3, "line_content": "  req,"}, {"line_number": 4, "line_content": "  res,"}, {"line_number": 5, "line_content": "  jwtSecret = _jwtSecret"}, {"line_number": 6, "line_content": ") {"}, {"line_number": 7, "line_content": "  const cookieConfig = {"}, {"line_number": 8, "line_content": "    ...createCookieConfig(req),"}, {"line_number": 9, "line_content": "    maxAge: accessToken.ttl || 77760000000"}, {"line_number": 10, "line_content": "  };"}, {"line_number": 11, "line_content": "  const jwtAccess = jwt.sign({ accessToken }, jwtSecret);"}, {"line_number": 12, "line_content": "  res.cookie(jwtCookieNS, jwtAccess, cookieConfig);"}, {"line_number": 13, "line_content": "  return;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "function getAccessTokenFromRequest(req, jwtSecret = _jwtSecret) {"}, {"line_number": 2, "line_content": "  const maybeToken ="}, {"line_number": 3, "line_content": "    (req.headers && req.headers[authHeaderNS]) ||"}, {"line_number": 4, "line_content": "    (req.signedCookies && req.signedCookies[jwtCookieNS]) ||"}, {"line_number": 5, "line_content": "    (req.cookie && req.cookie[jwtCookieNS]);"}, {"line_number": 6, "line_content": "  if (!maybeToken) {"}, {"line_number": 7, "line_content": "    return {"}, {"line_number": 8, "line_content": "      accessToken: null,"}, {"line_number": 9, "line_content": "      error: errorTypes.noTokenFound"}, {"line_number": 10, "line_content": "    };"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "  let token;"}, {"line_number": 13, "line_content": "  try {"}, {"line_number": 14, "line_content": "    token = jwt.verify(maybeToken, jwtSecret);"}, {"line_number": 15, "line_content": "  } catch (err) {"}, {"line_number": 16, "line_content": "    return { accessToken: null, error: errorTypes.invalidToken };"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  const { accessToken } = token;"}, {"line_number": 20, "line_content": "  const { created, ttl } = accessToken;"}, {"line_number": 21, "line_content": "  const valid = isBefore(Date.now(), Date.parse(created) + ttl);"}, {"line_number": 22, "line_content": "  if (!valid) {"}, {"line_number": 23, "line_content": "    return {"}, {"line_number": 24, "line_content": "      accessToken: null,"}, {"line_number": 25, "line_content": "      error: errorTypes.expiredToken"}, {"line_number": 26, "line_content": "    };"}, {"line_number": 27, "line_content": "  }"}, {"line_number": 28, "line_content": "  return { accessToken, error: '', jwt: maybeToken };"}, {"line_number": 29, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function removeCookies(req, res) {"}, {"line_number": 2, "line_content": "  const config = createCookieConfig(req);"}, {"line_number": 3, "line_content": "  res.clearCookie(jwtCookieNS, config);"}, {"line_number": 4, "line_content": "  res.clearCookie('access_token', config);"}, {"line_number": 5, "line_content": "  res.clearCookie('userId', config);"}, {"line_number": 6, "line_content": "  res.clearCookie('_csrf', config);"}, {"line_number": 7, "line_content": "  res.clearCookie('csrf_token', config);"}, {"line_number": 8, "line_content": "  return;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getEmailSender() {"}, {"line_number": 2, "line_content": "  return process.env.SES_MAIL_FROM || 'team@freecodecamp.org';"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function validStripeForm(amount, duration, email) {"}, {"line_number": 2, "line_content": "  return isEmail('' + email) &&"}, {"line_number": 3, "line_content": "    isNumeric('' + amount) &&"}, {"line_number": 4, "line_content": "    durationKeysConfig.includes(duration) &&"}, {"line_number": 5, "line_content": "    duration === 'onetime'"}, {"line_number": 6, "line_content": "    ? donationOneTimeConfig.includes(amount)"}, {"line_number": 7, "line_content": "    : donationSubscriptionConfig.plans[duration];"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isPromiseLike(thing) {"}, {"line_number": 2, "line_content": "  return !!thing && typeof thing.then === 'function';"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "function InMemoryCache(initialValue, reportError) {"}, {"line_number": 2, "line_content": "  if (typeof reportError !== 'function') {"}, {"line_number": 3, "line_content": "    throw new Error("}, {"line_number": 4, "line_content": "      'No reportError function specified for this in-memory-cache'"}, {"line_number": 5, "line_content": "    );"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "  const cacheKey = Symbol('cacheKey');"}, {"line_number": 8, "line_content": "  const cache = new Map();"}, {"line_number": 9, "line_content": "  cache.set(cacheKey, initialValue);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  return {"}, {"line_number": 12, "line_content": "    get() {"}, {"line_number": 13, "line_content": "      const value = cache.get(cacheKey);"}, {"line_number": 14, "line_content": "      return typeof value !== 'undefined' ? value : null;"}, {"line_number": 15, "line_content": "    },"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    update(fn) {"}, {"line_number": 18, "line_content": "      try {"}, {"line_number": 19, "line_content": "        const value = fn();"}, {"line_number": 20, "line_content": "        if (isPromiseLike(value)) {"}, {"line_number": 21, "line_content": "          return value.then(value => cache.set(cacheKey, value));"}, {"line_number": 22, "line_content": "        } else {"}, {"line_number": 23, "line_content": "          cache.set(cacheKey, value);"}, {"line_number": 24, "line_content": "        }"}, {"line_number": 25, "line_content": "      } catch (e) {"}, {"line_number": 26, "line_content": "        const errMsg = `InMemoryCache > update > caught: ${e.message}`;"}, {"line_number": 27, "line_content": "        e.message = errMsg;"}, {"line_number": 28, "line_content": "        reportError(e);"}, {"line_number": 29, "line_content": "      }"}, {"line_number": 30, "line_content": "      return null;"}, {"line_number": 31, "line_content": "    },"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    clear() {"}, {"line_number": 34, "line_content": "      return cache.delete(cacheKey);"}, {"line_number": 35, "line_content": "    }"}, {"line_number": 36, "line_content": "  };"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function castToObservable(maybe) {"}, {"line_number": 2, "line_content": "  if (Observable.isObservable(maybe)) {"}, {"line_number": 3, "line_content": "    return maybe;"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  if (helpers.isPromise(maybe)) {"}, {"line_number": 6, "line_content": "    return Observable.fromPromise(maybe);"}, {"line_number": 7, "line_content": "  }"}, {"line_number": 8, "line_content": "  return Observable.of(maybe);"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isAllowedPath(path, pathsAllowedREs = _pathsAllowedREs) {"}, {"line_number": 2, "line_content": "  return pathsAllowedREs.some(re => re.test(path));"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 58, "lines": [{"line_number": 1, "line_content": "function getRequestAuthorisation({"}, {"line_number": 2, "line_content": "  jwtSecret = _jwtSecret,"}, {"line_number": 3, "line_content": "  getUserById = _getUserById"}, {"line_number": 4, "line_content": "} = {}) {"}, {"line_number": 5, "line_content": "  return function requestAuthorisation(req, res, next) {"}, {"line_number": 6, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 7, "line_content": "    const { path } = req;"}, {"line_number": 8, "line_content": "    if (!isAllowedPath(path)) {"}, {"line_number": 9, "line_content": "      const { accessToken, error, jwt } = getAccessTokenFromRequest("}, {"line_number": 10, "line_content": "        req,"}, {"line_number": 11, "line_content": "        jwtSecret"}, {"line_number": 12, "line_content": "      );"}, {"line_number": 13, "line_content": "      if (!accessToken && error === errorTypes.noTokenFound) {"}, {"line_number": 14, "line_content": "        throw wrapHandledError("}, {"line_number": 15, "line_content": "          new Error('Access token is required for this request'),"}, {"line_number": 16, "line_content": "          {"}, {"line_number": 17, "line_content": "            type: 'info',"}, {"line_number": 18, "line_content": "            redirect: `${origin}/signin`,"}, {"line_number": 19, "line_content": "            message: 'Access token is required for this request',"}, {"line_number": 20, "line_content": "            status: 403"}, {"line_number": 21, "line_content": "          }"}, {"line_number": 22, "line_content": "        );"}, {"line_number": 23, "line_content": "      }"}, {"line_number": 24, "line_content": "      if (!accessToken && error === errorTypes.invalidToken) {"}, {"line_number": 25, "line_content": "        throw wrapHandledError(new Error('Access token is invalid'), {"}, {"line_number": 26, "line_content": "          type: 'info',"}, {"line_number": 27, "line_content": "          redirect: `${origin}/signin`,"}, {"line_number": 28, "line_content": "          message: 'Your access token is invalid',"}, {"line_number": 29, "line_content": "          status: 403"}, {"line_number": 30, "line_content": "        });"}, {"line_number": 31, "line_content": "      }"}, {"line_number": 32, "line_content": "      if (!accessToken && error === errorTypes.expiredToken) {"}, {"line_number": 33, "line_content": "        throw wrapHandledError(new Error('Access token is no longer valid'), {"}, {"line_number": 34, "line_content": "          type: 'info',"}, {"line_number": 35, "line_content": "          redirect: `${origin}/signin`,"}, {"line_number": 36, "line_content": "          message: 'Access token is no longer valid',"}, {"line_number": 37, "line_content": "          status: 403"}, {"line_number": 38, "line_content": "        });"}, {"line_number": 39, "line_content": "      }"}, {"line_number": 40, "line_content": "      res.set(authHeaderNS, jwt);"}, {"line_number": 41, "line_content": "      if (isEmpty(req.user)) {"}, {"line_number": 42, "line_content": "        const { userId } = accessToken;"}, {"line_number": 43, "line_content": "        return getUserById(userId)"}, {"line_number": 44, "line_content": "          .then(user => {"}, {"line_number": 45, "line_content": "            if (user) {"}, {"line_number": 46, "line_content": "              req.user = user;"}, {"line_number": 47, "line_content": "            }"}, {"line_number": 48, "line_content": "            return;"}, {"line_number": 49, "line_content": "          })"}, {"line_number": 50, "line_content": "          .then(next)"}, {"line_number": 51, "line_content": "          .catch(next);"}, {"line_number": 52, "line_content": "      } else {"}, {"line_number": 53, "line_content": "        return Promise.resolve(next());"}, {"line_number": 54, "line_content": "      }"}, {"line_number": 55, "line_content": "    }"}, {"line_number": 56, "line_content": "    return Promise.resolve(next());"}, {"line_number": 57, "line_content": "  };"}, {"line_number": 58, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function flashCheaters() {"}, {"line_number": 2, "line_content": "  return function (req, res, next) {"}, {"line_number": 3, "line_content": "    if ("}, {"line_number": 4, "line_content": "      ALLOWED_METHODS.indexOf(req.method) !== -1 &&"}, {"line_number": 5, "line_content": "      EXCLUDED_PATHS.indexOf(req.path) === -1 &&"}, {"line_number": 6, "line_content": "      req.user &&"}, {"line_number": 7, "line_content": "      req.url !== '/' &&"}, {"line_number": 8, "line_content": "      req.user.isCheater"}, {"line_number": 9, "line_content": "    ) {"}, {"line_number": 10, "line_content": "      req.flash("}, {"line_number": 11, "line_content": "        'danger',"}, {"line_number": 12, "line_content": "        dedent`"}, {"line_number": 13, "line_content": "          Upon review, this account has been flagged for academic"}, {"line_number": 14, "line_content": "          dishonesty. If you\u2019re the owner of this account contact"}, {"line_number": 15, "line_content": "          team@freecodecamp.org for details."}, {"line_number": 16, "line_content": "        `"}, {"line_number": 17, "line_content": "      );"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "    return next();"}, {"line_number": 20, "line_content": "  };"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function createDeleteUserToken(app) {"}, {"line_number": 2, "line_content": "  const { UserToken } = app.models;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  return async function deleteUserToken(req, res, next) {"}, {"line_number": 5, "line_content": "    try {"}, {"line_number": 6, "line_content": "      await UserToken.destroyAll({ userId: req.user.id });"}, {"line_number": 7, "line_content": "      req.userTokenDeleted = true;"}, {"line_number": 8, "line_content": "    } catch (e) {"}, {"line_number": 9, "line_content": "      req.userTokenDeleted = false;"}, {"line_number": 10, "line_content": "      log("}, {"line_number": 11, "line_content": "        `An error occurred deleting user token for user with id ${req.user.id}`"}, {"line_number": 12, "line_content": "      );"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    next();"}, {"line_number": 16, "line_content": "  };"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function encodeUserToken(userToken) {"}, {"line_number": 2, "line_content": "  return jwt.sign({ userToken }, jwtSecret);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function sentryRequestHandler() {"}, {"line_number": 2, "line_content": "  return sentry.dsn === 'dsn_from_sentry_dashboard'"}, {"line_number": 3, "line_content": "    ? (req, res, next) => next()"}, {"line_number": 4, "line_content": "    : Handlers.requestHandler();"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function reportError(err) {"}, {"line_number": 2, "line_content": "  return sentry.dsn === 'dsn_from_sentry_dashboard'"}, {"line_number": 3, "line_content": "    ? console.error(err)"}, {"line_number": 4, "line_content": "    : captureException(err);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function sentryErrorHandler() {"}, {"line_number": 2, "line_content": "  return sentry.dsn === 'dsn_from_sentry_dashboard'"}, {"line_number": 3, "line_content": "    ? (req, res, next) => next()"}, {"line_number": 4, "line_content": "    : Handlers.errorHandler({"}, {"line_number": 5, "line_content": "        shouldHandleError(err) {"}, {"line_number": 6, "line_content": "          // CSRF errors have status 403, consider ignoring them once csurf is"}, {"line_number": 7, "line_content": "          // no longer rejecting people incorrectly."}, {"line_number": 8, "line_content": "          return !isHandledError(err) && (!err.status || err.status >= 500);"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": "      });"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function getCsurf() {"}, {"line_number": 2, "line_content": "  const protection = csurf({"}, {"line_number": 3, "line_content": "    cookie: { ...csrfOptions, httpOnly: true }"}, {"line_number": 4, "line_content": "  });"}, {"line_number": 5, "line_content": "  return function csrf(req, res, next) {"}, {"line_number": 6, "line_content": "    const { path } = req;"}, {"line_number": 7, "line_content": "    if ("}, {"line_number": 8, "line_content": "      // eslint-disable-next-line max-len"}, {"line_number": 9, "line_content": "      /^\\/hooks\\/update-paypal$|^\\/donate\\/charge-stripe$|^\\/coderoad-challenge-completed$/.test("}, {"line_number": 10, "line_content": "        path"}, {"line_number": 11, "line_content": "      )"}, {"line_number": 12, "line_content": "    ) {"}, {"line_number": 13, "line_content": "      next();"}, {"line_number": 14, "line_content": "    } else {"}, {"line_number": 15, "line_content": "      // add the middleware"}, {"line_number": 16, "line_content": "      protection(req, res, next);"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "  };"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 77, "lines": [{"line_number": 1, "line_content": "function csp() {"}, {"line_number": 2, "line_content": "  return helmet.contentSecurityPolicy({"}, {"line_number": 3, "line_content": "    directives: {"}, {"line_number": 4, "line_content": "      defaultSrc: trusted.concat(["}, {"line_number": 5, "line_content": "        'https://*.cloudflare.com',"}, {"line_number": 6, "line_content": "        '*.cloudflare.com'"}, {"line_number": 7, "line_content": "      ]),"}, {"line_number": 8, "line_content": "      connectSrc: trusted.concat(["}, {"line_number": 9, "line_content": "        'https://glitch.com',"}, {"line_number": 10, "line_content": "        'https://*.glitch.com',"}, {"line_number": 11, "line_content": "        'https://*.glitch.me',"}, {"line_number": 12, "line_content": "        'https://*.cloudflare.com',"}, {"line_number": 13, "line_content": "        'https://*.algolia.net'"}, {"line_number": 14, "line_content": "      ]),"}, {"line_number": 15, "line_content": "      scriptSrc: ["}, {"line_number": 16, "line_content": "        \"'unsafe-eval'\","}, {"line_number": 17, "line_content": "        \"'unsafe-inline'\","}, {"line_number": 18, "line_content": "        '*.google-analytics.com',"}, {"line_number": 19, "line_content": "        '*.gstatic.com',"}, {"line_number": 20, "line_content": "        'https://*.cloudflare.com',"}, {"line_number": 21, "line_content": "        '*.cloudflare.com',"}, {"line_number": 22, "line_content": "        'https://*.gitter.im',"}, {"line_number": 23, "line_content": "        'https://*.cdnjs.com',"}, {"line_number": 24, "line_content": "        '*.cdnjs.com',"}, {"line_number": 25, "line_content": "        'https://*.jsdelivr.com',"}, {"line_number": 26, "line_content": "        '*.jsdelivr.com',"}, {"line_number": 27, "line_content": "        '*.twimg.com',"}, {"line_number": 28, "line_content": "        'https://*.twimg.com',"}, {"line_number": 29, "line_content": "        '*.youtube.com',"}, {"line_number": 30, "line_content": "        '*.ytimg.com'"}, {"line_number": 31, "line_content": "      ].concat(trusted),"}, {"line_number": 32, "line_content": "      styleSrc: ["}, {"line_number": 33, "line_content": "        \"'unsafe-inline'\","}, {"line_number": 34, "line_content": "        '*.gstatic.com',"}, {"line_number": 35, "line_content": "        '*.googleapis.com',"}, {"line_number": 36, "line_content": "        '*.bootstrapcdn.com',"}, {"line_number": 37, "line_content": "        'https://*.bootstrapcdn.com',"}, {"line_number": 38, "line_content": "        '*.cloudflare.com',"}, {"line_number": 39, "line_content": "        'https://*.cloudflare.com',"}, {"line_number": 40, "line_content": "        'https://use.fontawesome.com'"}, {"line_number": 41, "line_content": "      ].concat(trusted),"}, {"line_number": 42, "line_content": "      fontSrc: ["}, {"line_number": 43, "line_content": "        '*.cloudflare.com',"}, {"line_number": 44, "line_content": "        'https://*.cloudflare.com',"}, {"line_number": 45, "line_content": "        '*.bootstrapcdn.com',"}, {"line_number": 46, "line_content": "        '*.googleapis.com',"}, {"line_number": 47, "line_content": "        '*.gstatic.com',"}, {"line_number": 48, "line_content": "        'https://*.bootstrapcdn.com',"}, {"line_number": 49, "line_content": "        'https://use.fontawesome.com'"}, {"line_number": 50, "line_content": "      ].concat(trusted),"}, {"line_number": 51, "line_content": "      imgSrc: ["}, {"line_number": 52, "line_content": "        // allow all input since we have user submitted images for"}, {"line_number": 53, "line_content": "        // public profile"}, {"line_number": 54, "line_content": "        '*',"}, {"line_number": 55, "line_content": "        'data:'"}, {"line_number": 56, "line_content": "      ],"}, {"line_number": 57, "line_content": "      mediaSrc: ['*.bitly.com', '*.amazonaws.com', '*.twitter.com'].concat("}, {"line_number": 58, "line_content": "        trusted"}, {"line_number": 59, "line_content": "      ),"}, {"line_number": 60, "line_content": "      frameSrc: ["}, {"line_number": 61, "line_content": "        '*.gitter.im',"}, {"line_number": 62, "line_content": "        '*.gitter.im https:',"}, {"line_number": 63, "line_content": "        '*.youtube.com',"}, {"line_number": 64, "line_content": "        '*.twitter.com',"}, {"line_number": 65, "line_content": "        '*.ghbtns.com',"}, {"line_number": 66, "line_content": "        '*.freecatphotoapp.com',"}, {"line_number": 67, "line_content": "        'freecodecamp.github.io'"}, {"line_number": 68, "line_content": "      ].concat(trusted)"}, {"line_number": 69, "line_content": "    },"}, {"line_number": 70, "line_content": "    // set to true if you only want to report errors"}, {"line_number": 71, "line_content": "    reportOnly: false,"}, {"line_number": 72, "line_content": "    // set to true if you want to set all headers"}, {"line_number": 73, "line_content": "    setAllHeaders: false,"}, {"line_number": 74, "line_content": "    // set to true if you want to force buggy CSP in Safari 5"}, {"line_number": 75, "line_content": "    safari5: false"}, {"line_number": 76, "line_content": "  });"}, {"line_number": 77, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function getExpressExtensions() {"}, {"line_number": 2, "line_content": "  return function expressExtensions(req, res, next) {"}, {"line_number": 3, "line_content": "    res.redirectWithFlash = uri => {"}, {"line_number": 4, "line_content": "      const flash = req.flash();"}, {"line_number": 5, "line_content": "      res.redirect("}, {"line_number": 6, "line_content": "        `${uri}?${qs.stringify("}, {"line_number": 7, "line_content": "          { messages: qs.stringify(flash, { arrayFormat: 'index' }) },"}, {"line_number": 8, "line_content": "          { arrayFormat: 'index' }"}, {"line_number": 9, "line_content": "        )}`"}, {"line_number": 10, "line_content": "      );"}, {"line_number": 11, "line_content": "    };"}, {"line_number": 12, "line_content": "    res.sendFlash = (type, message) => {"}, {"line_number": 13, "line_content": "      if (type && message) {"}, {"line_number": 14, "line_content": "        req.flash(type, message);"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "      return res.json(req.flash());"}, {"line_number": 17, "line_content": "    };"}, {"line_number": 18, "line_content": "    next();"}, {"line_number": 19, "line_content": "  };"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function csrfErrorHandler() {"}, {"line_number": 2, "line_content": "  return function (err, req, res, next) {"}, {"line_number": 3, "line_content": "    if (err.code === 'EBADCSRFTOKEN' && req.csrfToken) {"}, {"line_number": 4, "line_content": "      // use the middleware to generate a token. The client sends this back via"}, {"line_number": 5, "line_content": "      // a header"}, {"line_number": 6, "line_content": "      res.cookie('csrf_token', req.csrfToken(), csrfOptions);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    next(err);"}, {"line_number": 9, "line_content": "  };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function constantHeaders() {"}, {"line_number": 2, "line_content": "  return function (req, res, next) {"}, {"line_number": 3, "line_content": "    if ("}, {"line_number": 4, "line_content": "      req.headers &&"}, {"line_number": 5, "line_content": "      req.headers.origin &&"}, {"line_number": 6, "line_content": "      allowedOrigins.includes(req.headers.origin)"}, {"line_number": 7, "line_content": "    ) {"}, {"line_number": 8, "line_content": "      res.header('Access-Control-Allow-Origin', req.headers.origin);"}, {"line_number": 9, "line_content": "    } else {"}, {"line_number": 10, "line_content": "      res.header('Access-Control-Allow-Origin', homeLocation);"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "    res.header('Access-Control-Allow-Credentials', true);"}, {"line_number": 13, "line_content": "    res.header("}, {"line_number": 14, "line_content": "      'Access-Control-Allow-Headers',"}, {"line_number": 15, "line_content": "      'Origin, X-Requested-With, Content-Type, Accept'"}, {"line_number": 16, "line_content": "    );"}, {"line_number": 17, "line_content": "    next();"}, {"line_number": 18, "line_content": "  };"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 45, "lines": [{"line_number": 1, "line_content": "function prodErrorHandler() {"}, {"line_number": 2, "line_content": "  // error handling in production."}, {"line_number": 3, "line_content": "  // eslint-disable-next-line no-unused-vars"}, {"line_number": 4, "line_content": "  return function (err, req, res, next) {"}, {"line_number": 5, "line_content": "    // response for when req.body is bigger than body-parser's size limit"}, {"line_number": 6, "line_content": "    if (err?.type === 'entity.too.large') {"}, {"line_number": 7, "line_content": "      return res.status('413').send('Request payload is too large');"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const { origin } = getRedirectParams(req);"}, {"line_number": 11, "line_content": "    const handled = unwrapHandledError(err);"}, {"line_number": 12, "line_content": "    // respect handled error status"}, {"line_number": 13, "line_content": "    let status = handled.status || err.status || res.statusCode;"}, {"line_number": 14, "line_content": "    if (!handled.status && status < 400) {"}, {"line_number": 15, "line_content": "      status = 500;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    res.status(status);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    // parse res type"}, {"line_number": 20, "line_content": "    const accept = accepts(req);"}, {"line_number": 21, "line_content": "    // prioritise returning json"}, {"line_number": 22, "line_content": "    const type = accept.type('json', 'html', 'text');"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    const redirectTo = handled.redirectTo || `${origin}/`;"}, {"line_number": 25, "line_content": "    const message ="}, {"line_number": 26, "line_content": "      handled.message ||"}, {"line_number": 27, "line_content": "      'Oops! Something went wrong. Please try again in a moment.';"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    if (isDev) {"}, {"line_number": 30, "line_content": "      console.error(errTemplate(err, req));"}, {"line_number": 31, "line_content": "    }"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    if (type === 'json') {"}, {"line_number": 34, "line_content": "      return res.json({"}, {"line_number": 35, "line_content": "        type: handled.type || 'errors',"}, {"line_number": 36, "line_content": "        message"}, {"line_number": 37, "line_content": "      });"}, {"line_number": 38, "line_content": "    } else {"}, {"line_number": 39, "line_content": "      if (typeof req.flash === 'function') {"}, {"line_number": 40, "line_content": "        req.flash(handled.type || 'danger', message);"}, {"line_number": 41, "line_content": "      }"}, {"line_number": 42, "line_content": "      return res.redirectWithFlash(redirectTo);"}, {"line_number": 43, "line_content": "    }"}, {"line_number": 44, "line_content": "  };"}, {"line_number": 45, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function login$(...args) {"}, {"line_number": 2, "line_content": "  if (_.isFunction(_.last(args))) {"}, {"line_number": 3, "line_content": "    return login.apply(this, args);"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  return Observable.fromNodeCallback(login).apply(this, args);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function passportLogin() {"}, {"line_number": 2, "line_content": "  return (req, res, next) => {"}, {"line_number": 3, "line_content": "    req.login = req.logIn = login$;"}, {"line_number": 4, "line_content": "    next();"}, {"line_number": 5, "line_content": "  };"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function setCSRFCookie() {"}, {"line_number": 2, "line_content": "  return function (req, res, next) {"}, {"line_number": 3, "line_content": "    // not all paths require a CSRF token, so the function may not be available."}, {"line_number": 4, "line_content": "    if (req.csrfToken && !req.cookies.csrf_token) {"}, {"line_number": 5, "line_content": "      // use the middleware to generate a token. The client sends this back via"}, {"line_number": 6, "line_content": "      // a header"}, {"line_number": 7, "line_content": "      res.cookie('csrf_token', req.csrfToken(), csrfOptions);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    next();"}, {"line_number": 10, "line_content": "  };"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function sessionsMiddleware() {"}, {"line_number": 2, "line_content": "  return session({"}, {"line_number": 3, "line_content": "    // 900 day session cookie"}, {"line_number": 4, "line_content": "    cookie: { maxAge: 900 * 24 * 60 * 60 * 1000 },"}, {"line_number": 5, "line_content": "    // resave forces session to be resaved"}, {"line_number": 6, "line_content": "    // regardless of whether it was modified"}, {"line_number": 7, "line_content": "    // this causes race conditions during parallel req"}, {"line_number": 8, "line_content": "    resave: false,"}, {"line_number": 9, "line_content": "    saveUninitialized: true,"}, {"line_number": 10, "line_content": "    secret: sessionSecret,"}, {"line_number": 11, "line_content": "    store: new MongoStore({ url })"}, {"line_number": 12, "line_content": "  });"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createNewUserFromEmail(email) {"}, {"line_number": 2, "line_content": "  const newMockUser = mockUser;"}, {"line_number": 3, "line_content": "  newMockUser.email = email;"}, {"line_number": 4, "line_content": "  newMockUser.username = 'camberbot2';"}, {"line_number": 5, "line_content": "  newMockUser.ID = '5c7d892aff9888c8b1c1a95e';"}, {"line_number": 6, "line_content": "  return newMockUser;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function getLybsynFeed() {"}, {"line_number": 2, "line_content": "  return new Promise((resolve, reject) => {"}, {"line_number": 3, "line_content": "    http.get(lybsynFeed, res => {"}, {"line_number": 4, "line_content": "      let raw = '';"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "      res.on('data', chunk => {"}, {"line_number": 7, "line_content": "        raw += chunk;"}, {"line_number": 8, "line_content": "      });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      res.on('error', err => reject(err));"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      res.on('end', () => {"}, {"line_number": 13, "line_content": "        let feed = [];"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "        try {"}, {"line_number": 16, "line_content": "          feed = JSON.parse(raw);"}, {"line_number": 17, "line_content": "        } catch (err) {"}, {"line_number": 18, "line_content": "          return reject(err);"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "        const items = feed"}, {"line_number": 21, "line_content": "          .map(item =>"}, {"line_number": 22, "line_content": "            _.pick(item, ["}, {"line_number": 23, "line_content": "              'full_item_url',"}, {"line_number": 24, "line_content": "              'item_title',"}, {"line_number": 25, "line_content": "              'release_date',"}, {"line_number": 26, "line_content": "              'item_body_short'"}, {"line_number": 27, "line_content": "            ])"}, {"line_number": 28, "line_content": "          )"}, {"line_number": 29, "line_content": "          /* eslint-disable camelcase */"}, {"line_number": 30, "line_content": "          .map("}, {"line_number": 31, "line_content": "            ({ full_item_url, item_title, release_date, item_body_short }) => ({"}, {"line_number": 32, "line_content": "              title: item_title,"}, {"line_number": 33, "line_content": "              extract: item_body_short,"}, {"line_number": 34, "line_content": "              isoDate: new Date(release_date).toISOString(),"}, {"line_number": 35, "line_content": "              link: full_item_url"}, {"line_number": 36, "line_content": "            })"}, {"line_number": 37, "line_content": "          );"}, {"line_number": 38, "line_content": "        /* eslint-enable camelcase */"}, {"line_number": 39, "line_content": "        return resolve(items);"}, {"line_number": 40, "line_content": "      });"}, {"line_number": 41, "line_content": "    });"}, {"line_number": 42, "line_content": "  });"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function waitForReady() {"}, {"line_number": 2, "line_content": "        log('notReadyCount', notReadyCount);"}, {"line_number": 3, "line_content": "        notReadyCount++;"}, {"line_number": 4, "line_content": "        return this.state.readyState || notReadyCount === 5"}, {"line_number": 5, "line_content": "          ? resolve(this.state.combinedFeed)"}, {"line_number": 6, "line_content": "          : setTimeout(waitForReady, 100);"}, {"line_number": 7, "line_content": "      }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function cleanUp() {"}, {"line_number": 2, "line_content": "    if (activeDonationUpdateInterval) {"}, {"line_number": 3, "line_content": "      clearInterval(activeDonationUpdateInterval);"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    return;"}, {"line_number": 6, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function seedTheCache() {"}, {"line_number": 2, "line_content": "    return new Promise((resolve, reject) =>"}, {"line_number": 3, "line_content": "      Observable.defer(activeDonationsQuery$).subscribe(count => {"}, {"line_number": 4, "line_content": "        log('activeDonor count: %d', count);"}, {"line_number": 5, "line_content": "        activeDonationCountCache.update(() => count);"}, {"line_number": 6, "line_content": "        return resolve();"}, {"line_number": 7, "line_content": "      }, reject)"}, {"line_number": 8, "line_content": "    );"}, {"line_number": 9, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 68, "lines": [{"line_number": 1, "line_content": "function initializeDonation(Donation) {"}, {"line_number": 2, "line_content": "  let activeDonationUpdateInterval = null;"}, {"line_number": 3, "line_content": "  const activeDonationCountCacheTTL = fiveMinutes;"}, {"line_number": 4, "line_content": "  const activeDonationCountCache = InMemoryCache(0, reportError);"}, {"line_number": 5, "line_content": "  const activeDonationsQuery$ = () =>"}, {"line_number": 6, "line_content": "    Donation.find$({"}, {"line_number": 7, "line_content": "      // eslint-disable-next-line no-undefined"}, {"line_number": 8, "line_content": "      where: { endDate: undefined }"}, {"line_number": 9, "line_content": "    }).map(instances => instances.length);"}, {"line_number": 10, "line_content": "  function cleanUp() {"}, {"line_number": 11, "line_content": "    if (activeDonationUpdateInterval) {"}, {"line_number": 12, "line_content": "      clearInterval(activeDonationUpdateInterval);"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "    return;"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "  process.on('exit', cleanUp);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  Donation.on('dataSourceAttached', () => {"}, {"line_number": 20, "line_content": "    Donation.find$ = Observable.fromNodeCallback(Donation.find.bind(Donation));"}, {"line_number": 21, "line_content": "    Donation.findOne$ = Observable.fromNodeCallback("}, {"line_number": 22, "line_content": "      Donation.findOne.bind(Donation)"}, {"line_number": 23, "line_content": "    );"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    seedTheCache()"}, {"line_number": 26, "line_content": "      .then(setupCacheUpdateInterval)"}, {"line_number": 27, "line_content": "      .catch(err => {"}, {"line_number": 28, "line_content": "        const errMsg = `Error caught seeding the cache: ${err.message}`;"}, {"line_number": 29, "line_content": "        err.message = errMsg;"}, {"line_number": 30, "line_content": "        reportError(err);"}, {"line_number": 31, "line_content": "      });"}, {"line_number": 32, "line_content": "  });"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "  function seedTheCache() {"}, {"line_number": 35, "line_content": "    return new Promise((resolve, reject) =>"}, {"line_number": 36, "line_content": "      Observable.defer(activeDonationsQuery$).subscribe(count => {"}, {"line_number": 37, "line_content": "        log('activeDonor count: %d', count);"}, {"line_number": 38, "line_content": "        activeDonationCountCache.update(() => count);"}, {"line_number": 39, "line_content": "        return resolve();"}, {"line_number": 40, "line_content": "      }, reject)"}, {"line_number": 41, "line_content": "    );"}, {"line_number": 42, "line_content": "  }"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "  function setupCacheUpdateInterval() {"}, {"line_number": 45, "line_content": "    activeDonationUpdateInterval = setInterval("}, {"line_number": 46, "line_content": "      () =>"}, {"line_number": 47, "line_content": "        Observable.defer(activeDonationsQuery$).subscribe("}, {"line_number": 48, "line_content": "          count => {"}, {"line_number": 49, "line_content": "            log('activeDonor count: %d', count);"}, {"line_number": 50, "line_content": "            return activeDonationCountCache.update(() => count);"}, {"line_number": 51, "line_content": "          },"}, {"line_number": 52, "line_content": "          err => {"}, {"line_number": 53, "line_content": "            const errMsg = `Error caught updating the cache: ${err.message}`;"}, {"line_number": 54, "line_content": "            err.message = errMsg;"}, {"line_number": 55, "line_content": "            reportError(err);"}, {"line_number": 56, "line_content": "          }"}, {"line_number": 57, "line_content": "        ),"}, {"line_number": 58, "line_content": "      activeDonationCountCacheTTL"}, {"line_number": 59, "line_content": "    );"}, {"line_number": 60, "line_content": "    return null;"}, {"line_number": 61, "line_content": "  }"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "  function getCurrentActiveDonationCount$() {"}, {"line_number": 64, "line_content": "    return Observable.of(activeDonationCountCache.get());"}, {"line_number": 65, "line_content": "  }"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "  Donation.getCurrentActiveDonationCount$ = getCurrentActiveDonationCount$;"}, {"line_number": 68, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function setupCacheUpdateInterval() {"}, {"line_number": 2, "line_content": "    activeDonationUpdateInterval = setInterval("}, {"line_number": 3, "line_content": "      () =>"}, {"line_number": 4, "line_content": "        Observable.defer(activeDonationsQuery$).subscribe("}, {"line_number": 5, "line_content": "          count => {"}, {"line_number": 6, "line_content": "            log('activeDonor count: %d', count);"}, {"line_number": 7, "line_content": "            return activeDonationCountCache.update(() => count);"}, {"line_number": 8, "line_content": "          },"}, {"line_number": 9, "line_content": "          err => {"}, {"line_number": 10, "line_content": "            const errMsg = `Error caught updating the cache: ${err.message}`;"}, {"line_number": 11, "line_content": "            err.message = errMsg;"}, {"line_number": 12, "line_content": "            reportError(err);"}, {"line_number": 13, "line_content": "          }"}, {"line_number": 14, "line_content": "        ),"}, {"line_number": 15, "line_content": "      activeDonationCountCacheTTL"}, {"line_number": 16, "line_content": "    );"}, {"line_number": 17, "line_content": "    return null;"}, {"line_number": 18, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getCurrentActiveDonationCount$() {"}, {"line_number": 2, "line_content": "    return Observable.of(activeDonationCountCache.get());"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function initializeAuthToken(AuthToken) {"}, {"line_number": 2, "line_content": "  AuthToken.on('dataSourceAttached', () => {"}, {"line_number": 3, "line_content": "    AuthToken.findOne$ = Observable.fromNodeCallback("}, {"line_number": 4, "line_content": "      AuthToken.findOne.bind(AuthToken)"}, {"line_number": 5, "line_content": "    );"}, {"line_number": 6, "line_content": "    AuthToken.prototype.validate$ = Observable.fromNodeCallback("}, {"line_number": 7, "line_content": "      AuthToken.prototype.validate"}, {"line_number": 8, "line_content": "    );"}, {"line_number": 9, "line_content": "    AuthToken.prototype.destroy$ = Observable.fromNodeCallback("}, {"line_number": 10, "line_content": "      AuthToken.prototype.destroy"}, {"line_number": 11, "line_content": "    );"}, {"line_number": 12, "line_content": "  });"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function protect(block) {"}, {"line_number": 2, "line_content": "  // if no block or block has no challenges or blocks"}, {"line_number": 3, "line_content": "  if (!block || !(block.challenges || block.blocks)) {"}, {"line_number": 4, "line_content": "    return emptyProtector;"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  return block;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getWaitPeriod(ttl) {"}, {"line_number": 2, "line_content": "  const fiveMinutesAgo = moment().subtract(5, 'minutes');"}, {"line_number": 3, "line_content": "  const lastEmailSentAt = moment(new Date(ttl || null));"}, {"line_number": 4, "line_content": "  const isWaitPeriodOver = ttl"}, {"line_number": 5, "line_content": "    ? lastEmailSentAt.isBefore(fiveMinutesAgo)"}, {"line_number": 6, "line_content": "    : true;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  if (!isWaitPeriodOver) {"}, {"line_number": 9, "line_content": "    const minutesLeft = 5 - (moment().minutes() - lastEmailSentAt.minutes());"}, {"line_number": 10, "line_content": "    return minutesLeft;"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  return 0;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getWaitMessage(ttl) {"}, {"line_number": 2, "line_content": "  const minutesLeft = getWaitPeriod(ttl);"}, {"line_number": 3, "line_content": "  if (minutesLeft <= 0) {"}, {"line_number": 4, "line_content": "    return null;"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const timeToWait = minutesLeft"}, {"line_number": 8, "line_content": "    ? `${minutesLeft} minute${minutesLeft > 1 ? 's' : ''}`"}, {"line_number": 9, "line_content": "    : 'a few seconds';"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  return dedent`"}, {"line_number": 12, "line_content": "    Please wait ${timeToWait} to resend an authentication link."}, {"line_number": 13, "line_content": "  `;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function getEncodedEmail(email) {"}, {"line_number": 2, "line_content": "  if (!email) {"}, {"line_number": 3, "line_content": "    return null;"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  return Buffer.from(email).toString('base64');"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function ensureLowerCaseEmail(profile) {"}, {"line_number": 2, "line_content": "  return typeof profile?.emails?.[0]?.value === 'string'"}, {"line_number": 3, "line_content": "    ? profile.emails[0].value.toLowerCase()"}, {"line_number": 4, "line_content": "    : '';"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 142, "lines": [{"line_number": 1, "line_content": "function initializeUserIdent(UserIdent) {"}, {"line_number": 2, "line_content": "  UserIdent.on('dataSourceAttached', () => {"}, {"line_number": 3, "line_content": "    UserIdent.findOne$ = observeMethod(UserIdent, 'findOne');"}, {"line_number": 4, "line_content": "  });"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  UserIdent.login = function ("}, {"line_number": 7, "line_content": "    _provider,"}, {"line_number": 8, "line_content": "    authScheme,"}, {"line_number": 9, "line_content": "    profile,"}, {"line_number": 10, "line_content": "    credentials,"}, {"line_number": 11, "line_content": "    options,"}, {"line_number": 12, "line_content": "    cb"}, {"line_number": 13, "line_content": "  ) {"}, {"line_number": 14, "line_content": "    const User = UserIdent.app.models.User;"}, {"line_number": 15, "line_content": "    const AccessToken = UserIdent.app.models.AccessToken;"}, {"line_number": 16, "line_content": "    options = options || {};"}, {"line_number": 17, "line_content": "    if (typeof options === 'function' && !cb) {"}, {"line_number": 18, "line_content": "      cb = options;"}, {"line_number": 19, "line_content": "      options = {};"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    // get the social provider data and the external id from auth0"}, {"line_number": 23, "line_content": "    profile.id = profile.id || profile.openid;"}, {"line_number": 24, "line_content": "    const auth0IdString = '' + profile.id;"}, {"line_number": 25, "line_content": "    const [provider, socialExtId] = auth0IdString.split('|');"}, {"line_number": 26, "line_content": "    const query = {"}, {"line_number": 27, "line_content": "      where: {"}, {"line_number": 28, "line_content": "        provider: provider,"}, {"line_number": 29, "line_content": "        externalId: socialExtId"}, {"line_number": 30, "line_content": "      },"}, {"line_number": 31, "line_content": "      include: 'user'"}, {"line_number": 32, "line_content": "    };"}, {"line_number": 33, "line_content": "    // get the email from the auth0 (its expected from social providers)"}, {"line_number": 34, "line_content": "    const email = ensureLowerCaseEmail(profile);"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    if (!isEmail('' + email)) {"}, {"line_number": 37, "line_content": "      throw wrapHandledError("}, {"line_number": 38, "line_content": "        new Error('invalid or empty email received from auth0'),"}, {"line_number": 39, "line_content": "        {"}, {"line_number": 40, "line_content": "          message: dedent`"}, {"line_number": 41, "line_content": "    ${provider} did not return a valid email address."}, {"line_number": 42, "line_content": "    Please try again with a different account that has an"}, {"line_number": 43, "line_content": "    email associated with it your update your settings on ${provider}, for us to be able to retrieve your email."}, {"line_number": 44, "line_content": "          `,"}, {"line_number": 45, "line_content": "          type: 'info',"}, {"line_number": 46, "line_content": "          redirectTo: '/'"}, {"line_number": 47, "line_content": "        }"}, {"line_number": 48, "line_content": "      );"}, {"line_number": 49, "line_content": "    }"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "    if (provider === 'email') {"}, {"line_number": 52, "line_content": "      return User.findOne$({ where: { email } })"}, {"line_number": 53, "line_content": "        .flatMap(user => {"}, {"line_number": 54, "line_content": "          return user"}, {"line_number": 55, "line_content": "            ? Observable.of(user)"}, {"line_number": 56, "line_content": "            : User.create$({ email }).toPromise();"}, {"line_number": 57, "line_content": "        })"}, {"line_number": 58, "line_content": "        .flatMap(user => {"}, {"line_number": 59, "line_content": "          if (!user) {"}, {"line_number": 60, "line_content": "            throw wrapHandledError("}, {"line_number": 61, "line_content": "              new Error('could not find or create a user'),"}, {"line_number": 62, "line_content": "              {"}, {"line_number": 63, "line_content": "                message: dedent`"}, {"line_number": 64, "line_content": "    We could not find or create a user with that email address."}, {"line_number": 65, "line_content": "                `,"}, {"line_number": 66, "line_content": "                type: 'info',"}, {"line_number": 67, "line_content": "                redirectTo: '/'"}, {"line_number": 68, "line_content": "              }"}, {"line_number": 69, "line_content": "            );"}, {"line_number": 70, "line_content": "          }"}, {"line_number": 71, "line_content": "          const createToken = observeQuery(AccessToken, 'create', {"}, {"line_number": 72, "line_content": "            userId: user.id,"}, {"line_number": 73, "line_content": "            created: new Date(),"}, {"line_number": 74, "line_content": "            ttl: user.constructor.settings.ttl"}, {"line_number": 75, "line_content": "          });"}, {"line_number": 76, "line_content": "          const updateUserPromise = new Promise((resolve, reject) =>"}, {"line_number": 77, "line_content": "            user.updateAttributes("}, {"line_number": 78, "line_content": "              {"}, {"line_number": 79, "line_content": "                emailVerified: true,"}, {"line_number": 80, "line_content": "                emailAuthLinkTTL: null,"}, {"line_number": 81, "line_content": "                emailVerifyTTL: null"}, {"line_number": 82, "line_content": "              },"}, {"line_number": 83, "line_content": "              err => {"}, {"line_number": 84, "line_content": "                if (err) {"}, {"line_number": 85, "line_content": "                  return reject(err);"}, {"line_number": 86, "line_content": "                }"}, {"line_number": 87, "line_content": "                return resolve();"}, {"line_number": 88, "line_content": "              }"}, {"line_number": 89, "line_content": "            )"}, {"line_number": 90, "line_content": "          );"}, {"line_number": 91, "line_content": "          return Observable.combineLatest("}, {"line_number": 92, "line_content": "            Observable.of(user),"}, {"line_number": 93, "line_content": "            createToken,"}, {"line_number": 94, "line_content": "            Observable.fromPromise(updateUserPromise),"}, {"line_number": 95, "line_content": "            (user, token) => ({ user, token })"}, {"line_number": 96, "line_content": "          );"}, {"line_number": 97, "line_content": "        })"}, {"line_number": 98, "line_content": "        .subscribe(({ user, token }) => cb(null, user, null, token), cb);"}, {"line_number": 99, "line_content": "    } else {"}, {"line_number": 100, "line_content": "      return UserIdent.findOne$(query)"}, {"line_number": 101, "line_content": "        .flatMap(identity => {"}, {"line_number": 102, "line_content": "          return identity"}, {"line_number": 103, "line_content": "            ? Observable.of(identity.user())"}, {"line_number": 104, "line_content": "            : User.findOne$({ where: { email } }).flatMap(user => {"}, {"line_number": 105, "line_content": "                return user"}, {"line_number": 106, "line_content": "                  ? Observable.of(user)"}, {"line_number": 107, "line_content": "                  : User.create$({ email }).toPromise();"}, {"line_number": 108, "line_content": "              });"}, {"line_number": 109, "line_content": "        })"}, {"line_number": 110, "line_content": "        .flatMap(user => {"}, {"line_number": 111, "line_content": "          const createToken = observeQuery(AccessToken, 'create', {"}, {"line_number": 112, "line_content": "            userId: user.id,"}, {"line_number": 113, "line_content": "            created: new Date(),"}, {"line_number": 114, "line_content": "            ttl: user.constructor.settings.ttl"}, {"line_number": 115, "line_content": "          });"}, {"line_number": 116, "line_content": "          const updateUser = new Promise((resolve, reject) =>"}, {"line_number": 117, "line_content": "            user.updateAttributes("}, {"line_number": 118, "line_content": "              {"}, {"line_number": 119, "line_content": "                email: email,"}, {"line_number": 120, "line_content": "                emailVerified: true,"}, {"line_number": 121, "line_content": "                emailAuthLinkTTL: null,"}, {"line_number": 122, "line_content": "                emailVerifyTTL: null"}, {"line_number": 123, "line_content": "              },"}, {"line_number": 124, "line_content": "              err => {"}, {"line_number": 125, "line_content": "                if (err) {"}, {"line_number": 126, "line_content": "                  return reject(err);"}, {"line_number": 127, "line_content": "                }"}, {"line_number": 128, "line_content": "                return resolve();"}, {"line_number": 129, "line_content": "              }"}, {"line_number": 130, "line_content": "            )"}, {"line_number": 131, "line_content": "          );"}, {"line_number": 132, "line_content": "          return Observable.combineLatest("}, {"line_number": 133, "line_content": "            Observable.of(user),"}, {"line_number": 134, "line_content": "            createToken,"}, {"line_number": 135, "line_content": "            Observable.fromPromise(updateUser),"}, {"line_number": 136, "line_content": "            (user, token) => ({ user, token })"}, {"line_number": 137, "line_content": "          );"}, {"line_number": 138, "line_content": "        })"}, {"line_number": 139, "line_content": "        .subscribe(({ user, token }) => cb(null, user, null, token), cb);"}, {"line_number": 140, "line_content": "    }"}, {"line_number": 141, "line_content": "  };"}, {"line_number": 142, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function initializeBlock(Block) {"}, {"line_number": 2, "line_content": "  Block.on('dataSourceAttached', () => {"}, {"line_number": 3, "line_content": "    Block.findOne$ = Observable.fromNodeCallback(Block.findOne, Block);"}, {"line_number": 4, "line_content": "    Block.findById$ = Observable.fromNodeCallback(Block.findById, Block);"}, {"line_number": 5, "line_content": "    Block.find$ = Observable.fromNodeCallback(Block.find, Block);"}, {"line_number": 6, "line_content": "  });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function destroyAll(id, Model) {"}, {"line_number": 2, "line_content": "  return Observable.fromNodeCallback(Model.destroyAll, Model)({ userId: id });"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function ensureLowerCaseString(maybeString) {"}, {"line_number": 2, "line_content": "  return (maybeString && maybeString.toLowerCase()) || '';"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 42, "lines": [{"line_number": 1, "line_content": "function buildCompletedChallengesUpdate(completedChallenges, project) {"}, {"line_number": 2, "line_content": "  const key = Object.keys(project)[0];"}, {"line_number": 3, "line_content": "  const solutions = project[key];"}, {"line_number": 4, "line_content": "  const solutionKeys = Object.keys(solutions);"}, {"line_number": 5, "line_content": "  const currentCompletedChallenges = ["}, {"line_number": 6, "line_content": "    ...completedChallenges.map(fixCompletedChallengeItem)"}, {"line_number": 7, "line_content": "  ];"}, {"line_number": 8, "line_content": "  const currentCompletedProjects = currentCompletedChallenges.filter(({ id }) =>"}, {"line_number": 9, "line_content": "    solutionKeys.includes(id)"}, {"line_number": 10, "line_content": "  );"}, {"line_number": 11, "line_content": "  const now = Date.now();"}, {"line_number": 12, "line_content": "  const update = solutionKeys.reduce((update, currentId) => {"}, {"line_number": 13, "line_content": "    const indexOfCurrentId = _.findIndex(update, ({ id }) => id === currentId);"}, {"line_number": 14, "line_content": "    const isCurrentlyCompleted = indexOfCurrentId !== -1;"}, {"line_number": 15, "line_content": "    if (isCurrentlyCompleted) {"}, {"line_number": 16, "line_content": "      update[indexOfCurrentId] = {"}, {"line_number": 17, "line_content": "        ..._.find(update, ({ id }) => id === currentId),"}, {"line_number": 18, "line_content": "        solution: solutions[currentId]"}, {"line_number": 19, "line_content": "      };"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": "    if (!isCurrentlyCompleted) {"}, {"line_number": 22, "line_content": "      return ["}, {"line_number": 23, "line_content": "        ...update,"}, {"line_number": 24, "line_content": "        {"}, {"line_number": 25, "line_content": "          id: currentId,"}, {"line_number": 26, "line_content": "          solution: solutions[currentId],"}, {"line_number": 27, "line_content": "          challengeType: 3,"}, {"line_number": 28, "line_content": "          completedDate: now"}, {"line_number": 29, "line_content": "        }"}, {"line_number": 30, "line_content": "      ];"}, {"line_number": 31, "line_content": "    }"}, {"line_number": 32, "line_content": "    return update;"}, {"line_number": 33, "line_content": "  }, currentCompletedProjects);"}, {"line_number": 34, "line_content": "  const updatedExisting = _.uniqBy("}, {"line_number": 35, "line_content": "    [...update, ...currentCompletedChallenges],"}, {"line_number": 36, "line_content": "    'id'"}, {"line_number": 37, "line_content": "  );"}, {"line_number": 38, "line_content": "  return {"}, {"line_number": 39, "line_content": "    updated: updatedExisting,"}, {"line_number": 40, "line_content": "    isNewCompletionCount: updatedExisting.length - completedChallenges.length"}, {"line_number": 41, "line_content": "  };"}, {"line_number": 42, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isTheSame(val1, val2) {"}, {"line_number": 2, "line_content": "  return val1 === val2;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getAboutProfile({"}, {"line_number": 2, "line_content": "  username,"}, {"line_number": 3, "line_content": "  usernameDisplay,"}, {"line_number": 4, "line_content": "  githubProfile: github,"}, {"line_number": 5, "line_content": "  progressTimestamps = [],"}, {"line_number": 6, "line_content": "  bio"}, {"line_number": 7, "line_content": "}) {"}, {"line_number": 8, "line_content": "  return {"}, {"line_number": 9, "line_content": "    username: usernameDisplay || username,"}, {"line_number": 10, "line_content": "    github,"}, {"line_number": 11, "line_content": "    browniePoints: progressTimestamps.length,"}, {"line_number": 12, "line_content": "    bio"}, {"line_number": 13, "line_content": "  };"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function nextTick(fn) {"}, {"line_number": 2, "line_content": "  return process.nextTick(fn);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function populateRequiredFields(user) {"}, {"line_number": 2, "line_content": "  user.usernameDisplay = user.username.trim();"}, {"line_number": 3, "line_content": "  user.username = user.usernameDisplay.toLowerCase();"}, {"line_number": 4, "line_content": "  user.email ="}, {"line_number": 5, "line_content": "    typeof user.email === 'string'"}, {"line_number": 6, "line_content": "      ? user.email.trim().toLowerCase()"}, {"line_number": 7, "line_content": "      : user.email;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  if (!user.progressTimestamps) {"}, {"line_number": 10, "line_content": "    user.progressTimestamps = [];"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  if (user.progressTimestamps.length === 0) {"}, {"line_number": 14, "line_content": "    user.progressTimestamps.push(Date.now());"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "  if (!user.externalId) {"}, {"line_number": 18, "line_content": "    user.externalId = uuid();"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  if (!user.unsubscribeId) {"}, {"line_number": 22, "line_content": "    user.unsubscribeId = nanoid();"}, {"line_number": 23, "line_content": "  }"}, {"line_number": 24, "line_content": "  return;"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 895, "lines": [{"line_number": 1, "line_content": "function initializeUser(User) {"}, {"line_number": 2, "line_content": "  // set salt factor for passwords"}, {"line_number": 3, "line_content": "  User.settings.saltWorkFactor = 5;"}, {"line_number": 4, "line_content": "  // set user.rand to random number"}, {"line_number": 5, "line_content": "  User.definition.rawProperties.rand.default = getRandomNumber;"}, {"line_number": 6, "line_content": "  User.definition.properties.rand.default = getRandomNumber;"}, {"line_number": 7, "line_content": "  // increase user accessToken ttl to 900 days"}, {"line_number": 8, "line_content": "  User.settings.ttl = 900 * 24 * 60 * 60 * 1000;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  // username should not be in blocklist"}, {"line_number": 11, "line_content": "  User.validatesExclusionOf('username', {"}, {"line_number": 12, "line_content": "    in: blocklistedUsernames,"}, {"line_number": 13, "line_content": "    message: 'is not available'"}, {"line_number": 14, "line_content": "  });"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  // username should be unique"}, {"line_number": 17, "line_content": "  User.validatesUniquenessOf('username');"}, {"line_number": 18, "line_content": "  User.settings.emailVerificationRequired = false;"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  User.on('dataSourceAttached', () => {"}, {"line_number": 21, "line_content": "    User.findOne$ = Observable.fromNodeCallback(User.findOne, User);"}, {"line_number": 22, "line_content": "    User.count$ = Observable.fromNodeCallback(User.count, User);"}, {"line_number": 23, "line_content": "    User.create$ = Observable.fromNodeCallback(User.create.bind(User));"}, {"line_number": 24, "line_content": "    User.prototype.createAccessToken$ = Observable.fromNodeCallback("}, {"line_number": 25, "line_content": "      User.prototype.createAccessToken"}, {"line_number": 26, "line_content": "    );"}, {"line_number": 27, "line_content": "  });"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "  User.observe('before save', function (ctx) {"}, {"line_number": 30, "line_content": "    const beforeCreate = Observable.of(ctx)"}, {"line_number": 31, "line_content": "      .filter(({ isNewInstance }) => isNewInstance)"}, {"line_number": 32, "line_content": "      // User.create"}, {"line_number": 33, "line_content": "      .map(({ instance }) => instance)"}, {"line_number": 34, "line_content": "      .flatMap(user => {"}, {"line_number": 35, "line_content": "        // note(berks): we now require all new users to supply an email"}, {"line_number": 36, "line_content": "        // this was not always the case"}, {"line_number": 37, "line_content": "        if (typeof user.email !== 'string' || !isEmail(user.email)) {"}, {"line_number": 38, "line_content": "          throw createEmailError();"}, {"line_number": 39, "line_content": "        }"}, {"line_number": 40, "line_content": "        // assign random username to new users"}, {"line_number": 41, "line_content": "        user.username = 'fcc' + uuid();"}, {"line_number": 42, "line_content": "        populateRequiredFields(user);"}, {"line_number": 43, "line_content": "        return Observable.fromPromise(User.doesExist(null, user.email)).do("}, {"line_number": 44, "line_content": "          exists => {"}, {"line_number": 45, "line_content": "            if (exists) {"}, {"line_number": 46, "line_content": "              throw wrapHandledError(new Error('user already exists'), {"}, {"line_number": 47, "line_content": "                redirectTo: `${apiLocation}/signin`,"}, {"line_number": 48, "line_content": "                message: dedent`"}, {"line_number": 49, "line_content": "        The ${user.email} email address is already associated with an account."}, {"line_number": 50, "line_content": "        Try signing in with it here instead."}, {"line_number": 51, "line_content": "                  `"}, {"line_number": 52, "line_content": "              });"}, {"line_number": 53, "line_content": "            }"}, {"line_number": 54, "line_content": "          }"}, {"line_number": 55, "line_content": "        );"}, {"line_number": 56, "line_content": "      })"}, {"line_number": 57, "line_content": "      .ignoreElements();"}, {"line_number": 58, "line_content": ""}, {"line_number": 59, "line_content": "    const updateOrSave = Observable.of(ctx)"}, {"line_number": 60, "line_content": "      // not new"}, {"line_number": 61, "line_content": "      .filter(({ isNewInstance }) => !isNewInstance)"}, {"line_number": 62, "line_content": "      .map(({ instance }) => instance)"}, {"line_number": 63, "line_content": "      // is update or save user"}, {"line_number": 64, "line_content": "      .filter(Boolean)"}, {"line_number": 65, "line_content": "      .do(user => {"}, {"line_number": 66, "line_content": "        // Some old accounts will not have emails associated with them"}, {"line_number": 67, "line_content": "        // we verify only if the email field is populated"}, {"line_number": 68, "line_content": "        if (user.email && !isEmail(user.email)) {"}, {"line_number": 69, "line_content": "          throw createEmailError();"}, {"line_number": 70, "line_content": "        }"}, {"line_number": 71, "line_content": "        populateRequiredFields(user);"}, {"line_number": 72, "line_content": "      })"}, {"line_number": 73, "line_content": "      .ignoreElements();"}, {"line_number": 74, "line_content": "    return Observable.merge(beforeCreate, updateOrSave).toPromise();"}, {"line_number": 75, "line_content": "  });"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "  // remove lingering user identities before deleting user"}, {"line_number": 78, "line_content": "  User.observe('before delete', function (ctx, next) {"}, {"line_number": 79, "line_content": "    const UserIdentity = User.app.models.UserIdentity;"}, {"line_number": 80, "line_content": "    const UserCredential = User.app.models.UserCredential;"}, {"line_number": 81, "line_content": "    log('removing user', ctx.where);"}, {"line_number": 82, "line_content": "    var id = ctx.where && ctx.where.id ? ctx.where.id : null;"}, {"line_number": 83, "line_content": "    if (!id) {"}, {"line_number": 84, "line_content": "      return next();"}, {"line_number": 85, "line_content": "    }"}, {"line_number": 86, "line_content": "    return Observable.combineLatest("}, {"line_number": 87, "line_content": "      destroyAll(id, UserIdentity),"}, {"line_number": 88, "line_content": "      destroyAll(id, UserCredential),"}, {"line_number": 89, "line_content": "      function (identData, credData) {"}, {"line_number": 90, "line_content": "        return {"}, {"line_number": 91, "line_content": "          identData: identData,"}, {"line_number": 92, "line_content": "          credData: credData"}, {"line_number": 93, "line_content": "        };"}, {"line_number": 94, "line_content": "      }"}, {"line_number": 95, "line_content": "    ).subscribe("}, {"line_number": 96, "line_content": "      function (data) {"}, {"line_number": 97, "line_content": "        log('deleted', data);"}, {"line_number": 98, "line_content": "      },"}, {"line_number": 99, "line_content": "      function (err) {"}, {"line_number": 100, "line_content": "        log('error deleting user %s stuff', id, err);"}, {"line_number": 101, "line_content": "        next(err);"}, {"line_number": 102, "line_content": "      },"}, {"line_number": 103, "line_content": "      function () {"}, {"line_number": 104, "line_content": "        log('user stuff deleted for user %s', id);"}, {"line_number": 105, "line_content": "        next();"}, {"line_number": 106, "line_content": "      }"}, {"line_number": 107, "line_content": "    );"}, {"line_number": 108, "line_content": "  });"}, {"line_number": 109, "line_content": ""}, {"line_number": 110, "line_content": "  log('setting up user hooks');"}, {"line_number": 111, "line_content": "  // overwrite lb confirm"}, {"line_number": 112, "line_content": "  User.confirm = function (uid, token, redirectTo) {"}, {"line_number": 113, "line_content": "    return this.findById(uid).then(user => {"}, {"line_number": 114, "line_content": "      if (!user) {"}, {"line_number": 115, "line_content": "        throw wrapHandledError(new Error(`User not found: ${uid}`), {"}, {"line_number": 116, "line_content": "          // standard oops"}, {"line_number": 117, "line_content": "          type: 'info',"}, {"line_number": 118, "line_content": "          redirectTo"}, {"line_number": 119, "line_content": "        });"}, {"line_number": 120, "line_content": "      }"}, {"line_number": 121, "line_content": "      if (user.verificationToken !== token) {"}, {"line_number": 122, "line_content": "        throw wrapHandledError(new Error(`Invalid token: ${token}`), {"}, {"line_number": 123, "line_content": "          type: 'info',"}, {"line_number": 124, "line_content": "          message: dedent`"}, {"line_number": 125, "line_content": "                Looks like you have clicked an invalid link."}, {"line_number": 126, "line_content": "                Please sign in and request a fresh one."}, {"line_number": 127, "line_content": "              `,"}, {"line_number": 128, "line_content": "          redirectTo"}, {"line_number": 129, "line_content": "        });"}, {"line_number": 130, "line_content": "      }"}, {"line_number": 131, "line_content": "      return new Promise((resolve, reject) =>"}, {"line_number": 132, "line_content": "        user.updateAttributes("}, {"line_number": 133, "line_content": "          {"}, {"line_number": 134, "line_content": "            email: user.newEmail,"}, {"line_number": 135, "line_content": "            emailVerified: true,"}, {"line_number": 136, "line_content": "            emailVerifyTTL: null,"}, {"line_number": 137, "line_content": "            newEmail: null,"}, {"line_number": 138, "line_content": "            verificationToken: null"}, {"line_number": 139, "line_content": "          },"}, {"line_number": 140, "line_content": "          err => {"}, {"line_number": 141, "line_content": "            if (err) {"}, {"line_number": 142, "line_content": "              return reject(err);"}, {"line_number": 143, "line_content": "            }"}, {"line_number": 144, "line_content": "            return resolve();"}, {"line_number": 145, "line_content": "          }"}, {"line_number": 146, "line_content": "        )"}, {"line_number": 147, "line_content": "      );"}, {"line_number": 148, "line_content": "    });"}, {"line_number": 149, "line_content": "  };"}, {"line_number": 150, "line_content": ""}, {"line_number": 151, "line_content": "  User.prototype.loginByRequest = function loginByRequest(req, res) {"}, {"line_number": 152, "line_content": "    const {"}, {"line_number": 153, "line_content": "      query: { emailChange }"}, {"line_number": 154, "line_content": "    } = req;"}, {"line_number": 155, "line_content": "    const createToken = this.createAccessToken$().do(accessToken => {"}, {"line_number": 156, "line_content": "      if (accessToken && accessToken.id) {"}, {"line_number": 157, "line_content": "        setAccessTokenToResponse({ accessToken }, req, res);"}, {"line_number": 158, "line_content": "      }"}, {"line_number": 159, "line_content": "    });"}, {"line_number": 160, "line_content": "    let data = {"}, {"line_number": 161, "line_content": "      emailVerified: true,"}, {"line_number": 162, "line_content": "      emailAuthLinkTTL: null,"}, {"line_number": 163, "line_content": "      emailVerifyTTL: null"}, {"line_number": 164, "line_content": "    };"}, {"line_number": 165, "line_content": "    if (emailChange && this.newEmail) {"}, {"line_number": 166, "line_content": "      data = {"}, {"line_number": 167, "line_content": "        ...data,"}, {"line_number": 168, "line_content": "        email: this.newEmail,"}, {"line_number": 169, "line_content": "        newEmail: null"}, {"line_number": 170, "line_content": "      };"}, {"line_number": 171, "line_content": "    }"}, {"line_number": 172, "line_content": "    const updateUser = new Promise((resolve, reject) =>"}, {"line_number": 173, "line_content": "      this.updateAttributes(data, err => {"}, {"line_number": 174, "line_content": "        if (err) {"}, {"line_number": 175, "line_content": "          return reject(err);"}, {"line_number": 176, "line_content": "        }"}, {"line_number": 177, "line_content": "        return resolve();"}, {"line_number": 178, "line_content": "      })"}, {"line_number": 179, "line_content": "    );"}, {"line_number": 180, "line_content": "    return Observable.combineLatest("}, {"line_number": 181, "line_content": "      createToken,"}, {"line_number": 182, "line_content": "      Observable.fromPromise(updateUser),"}, {"line_number": 183, "line_content": "      req.logIn(this),"}, {"line_number": 184, "line_content": "      accessToken => accessToken"}, {"line_number": 185, "line_content": "    );"}, {"line_number": 186, "line_content": "  };"}, {"line_number": 187, "line_content": ""}, {"line_number": 188, "line_content": "  User.afterRemote('logout', function ({ req, res }, result, next) {"}, {"line_number": 189, "line_content": "    removeCookies(req, res);"}, {"line_number": 190, "line_content": "    next();"}, {"line_number": 191, "line_content": "  });"}, {"line_number": 192, "line_content": ""}, {"line_number": 193, "line_content": "  User.doesExist = function doesExist(username, email) {"}, {"line_number": 194, "line_content": "    if (!username && (!email || !isEmail(email))) {"}, {"line_number": 195, "line_content": "      return Promise.resolve(false);"}, {"line_number": 196, "line_content": "    }"}, {"line_number": 197, "line_content": "    log('check if username is available');"}, {"line_number": 198, "line_content": "    // check to see if username is on blocklist"}, {"line_number": 199, "line_content": "    const usernameFilter = new badwordFilter();"}, {"line_number": 200, "line_content": "    if ("}, {"line_number": 201, "line_content": "      username &&"}, {"line_number": 202, "line_content": "      (blocklistedUsernames.includes(username) ||"}, {"line_number": 203, "line_content": "        usernameFilter.isProfane(username))"}, {"line_number": 204, "line_content": "    ) {"}, {"line_number": 205, "line_content": "      return Promise.resolve(true);"}, {"line_number": 206, "line_content": "    }"}, {"line_number": 207, "line_content": ""}, {"line_number": 208, "line_content": "    var where = {};"}, {"line_number": 209, "line_content": "    if (username) {"}, {"line_number": 210, "line_content": "      where.username = username.toLowerCase();"}, {"line_number": 211, "line_content": "    } else {"}, {"line_number": 212, "line_content": "      where.email = email ? email.toLowerCase() : email;"}, {"line_number": 213, "line_content": "    }"}, {"line_number": 214, "line_content": "    log('where', where);"}, {"line_number": 215, "line_content": "    return User.count(where).then(count => count > 0);"}, {"line_number": 216, "line_content": "  };"}, {"line_number": 217, "line_content": ""}, {"line_number": 218, "line_content": "  User.remoteMethod('doesExist', {"}, {"line_number": 219, "line_content": "    description: 'checks whether a user exists using email or username',"}, {"line_number": 220, "line_content": "    accepts: ["}, {"line_number": 221, "line_content": "      {"}, {"line_number": 222, "line_content": "        arg: 'username',"}, {"line_number": 223, "line_content": "        type: 'string'"}, {"line_number": 224, "line_content": "      },"}, {"line_number": 225, "line_content": "      {"}, {"line_number": 226, "line_content": "        arg: 'email',"}, {"line_number": 227, "line_content": "        type: 'string'"}, {"line_number": 228, "line_content": "      }"}, {"line_number": 229, "line_content": "    ],"}, {"line_number": 230, "line_content": "    returns: ["}, {"line_number": 231, "line_content": "      {"}, {"line_number": 232, "line_content": "        arg: 'exists',"}, {"line_number": 233, "line_content": "        type: 'boolean'"}, {"line_number": 234, "line_content": "      }"}, {"line_number": 235, "line_content": "    ],"}, {"line_number": 236, "line_content": "    http: {"}, {"line_number": 237, "line_content": "      path: '/exists',"}, {"line_number": 238, "line_content": "      verb: 'get'"}, {"line_number": 239, "line_content": "    }"}, {"line_number": 240, "line_content": "  });"}, {"line_number": 241, "line_content": ""}, {"line_number": 242, "line_content": "  User.about = function about(username, cb) {"}, {"line_number": 243, "line_content": "    if (!username) {"}, {"line_number": 244, "line_content": "      // Zalgo!!"}, {"line_number": 245, "line_content": "      return nextTick(() => {"}, {"line_number": 246, "line_content": "        cb(null, {});"}, {"line_number": 247, "line_content": "      });"}, {"line_number": 248, "line_content": "    }"}, {"line_number": 249, "line_content": "    return User.findOne({ where: { username } }, (err, user) => {"}, {"line_number": 250, "line_content": "      if (err) {"}, {"line_number": 251, "line_content": "        return cb(err);"}, {"line_number": 252, "line_content": "      }"}, {"line_number": 253, "line_content": "      if (!user || user.username !== username) {"}, {"line_number": 254, "line_content": "        return cb(null, {});"}, {"line_number": 255, "line_content": "      }"}, {"line_number": 256, "line_content": "      const aboutUser = getAboutProfile(user);"}, {"line_number": 257, "line_content": "      return cb(null, aboutUser);"}, {"line_number": 258, "line_content": "    });"}, {"line_number": 259, "line_content": "  };"}, {"line_number": 260, "line_content": ""}, {"line_number": 261, "line_content": "  User.remoteMethod('about', {"}, {"line_number": 262, "line_content": "    description: 'get public info about user',"}, {"line_number": 263, "line_content": "    accepts: ["}, {"line_number": 264, "line_content": "      {"}, {"line_number": 265, "line_content": "        arg: 'username',"}, {"line_number": 266, "line_content": "        type: 'string'"}, {"line_number": 267, "line_content": "      }"}, {"line_number": 268, "line_content": "    ],"}, {"line_number": 269, "line_content": "    returns: ["}, {"line_number": 270, "line_content": "      {"}, {"line_number": 271, "line_content": "        arg: 'about',"}, {"line_number": 272, "line_content": "        type: 'object'"}, {"line_number": 273, "line_content": "      }"}, {"line_number": 274, "line_content": "    ],"}, {"line_number": 275, "line_content": "    http: {"}, {"line_number": 276, "line_content": "      path: '/about',"}, {"line_number": 277, "line_content": "      verb: 'get'"}, {"line_number": 278, "line_content": "    }"}, {"line_number": 279, "line_content": "  });"}, {"line_number": 280, "line_content": ""}, {"line_number": 281, "line_content": "  User.prototype.createAuthToken = function createAuthToken({ ttl } = {}) {"}, {"line_number": 282, "line_content": "    return Observable.fromNodeCallback("}, {"line_number": 283, "line_content": "      this.authTokens.create.bind(this.authTokens)"}, {"line_number": 284, "line_content": "    )({ ttl });"}, {"line_number": 285, "line_content": "  };"}, {"line_number": 286, "line_content": ""}, {"line_number": 287, "line_content": "  User.prototype.createDonation = function createDonation(donation = {}) {"}, {"line_number": 288, "line_content": "    return Observable.fromNodeCallback("}, {"line_number": 289, "line_content": "      this.donations.create.bind(this.donations)"}, {"line_number": 290, "line_content": "    )(donation).do(() =>"}, {"line_number": 291, "line_content": "      this.updateAttributes({"}, {"line_number": 292, "line_content": "        isDonating: true,"}, {"line_number": 293, "line_content": "        donationEmails: [...(this.donationEmails || []), donation.email]"}, {"line_number": 294, "line_content": "      })"}, {"line_number": 295, "line_content": "    );"}, {"line_number": 296, "line_content": "  };"}, {"line_number": 297, "line_content": ""}, {"line_number": 298, "line_content": "  function requestCompletedChallenges() {"}, {"line_number": 299, "line_content": "    return this.getCompletedChallenges$();"}, {"line_number": 300, "line_content": "  }"}, {"line_number": 301, "line_content": ""}, {"line_number": 302, "line_content": "  User.prototype.requestCompletedChallenges = requestCompletedChallenges;"}, {"line_number": 303, "line_content": ""}, {"line_number": 304, "line_content": "  function requestAuthEmail(isSignUp, newEmail) {"}, {"line_number": 305, "line_content": "    return Observable.defer(() => {"}, {"line_number": 306, "line_content": "      const messageOrNull = getWaitMessage(this.emailAuthLinkTTL);"}, {"line_number": 307, "line_content": "      if (messageOrNull) {"}, {"line_number": 308, "line_content": "        throw wrapHandledError(new Error('request is throttled'), {"}, {"line_number": 309, "line_content": "          type: 'info',"}, {"line_number": 310, "line_content": "          message: messageOrNull"}, {"line_number": 311, "line_content": "        });"}, {"line_number": 312, "line_content": "      }"}, {"line_number": 313, "line_content": ""}, {"line_number": 314, "line_content": "      // create a temporary access token with ttl for 15 minutes"}, {"line_number": 315, "line_content": "      return this.createAuthToken({ ttl: 15 * 60 * 1000 });"}, {"line_number": 316, "line_content": "    })"}, {"line_number": 317, "line_content": "      .flatMap(token => {"}, {"line_number": 318, "line_content": "        let renderAuthEmail = renderSignInEmail;"}, {"line_number": 319, "line_content": "        let subject = 'Your sign in link for freeCodeCamp.org';"}, {"line_number": 320, "line_content": "        if (isSignUp) {"}, {"line_number": 321, "line_content": "          renderAuthEmail = renderSignUpEmail;"}, {"line_number": 322, "line_content": "          subject = 'Your sign in link for your new freeCodeCamp.org account';"}, {"line_number": 323, "line_content": "        }"}, {"line_number": 324, "line_content": "        if (newEmail) {"}, {"line_number": 325, "line_content": "          renderAuthEmail = renderEmailChangeEmail;"}, {"line_number": 326, "line_content": "          subject = dedent`"}, {"line_number": 327, "line_content": "            Please confirm your updated email address for freeCodeCamp.org"}, {"line_number": 328, "line_content": "          `;"}, {"line_number": 329, "line_content": "        }"}, {"line_number": 330, "line_content": "        const { id: loginToken, created: emailAuthLinkTTL } = token;"}, {"line_number": 331, "line_content": "        const loginEmail = getEncodedEmail(newEmail ? newEmail : null);"}, {"line_number": 332, "line_content": "        const host = apiLocation;"}, {"line_number": 333, "line_content": "        const mailOptions = {"}, {"line_number": 334, "line_content": "          type: 'email',"}, {"line_number": 335, "line_content": "          to: newEmail ? newEmail : this.email,"}, {"line_number": 336, "line_content": "          from: getEmailSender(),"}, {"line_number": 337, "line_content": "          subject,"}, {"line_number": 338, "line_content": "          text: renderAuthEmail({"}, {"line_number": 339, "line_content": "            host,"}, {"line_number": 340, "line_content": "            loginEmail,"}, {"line_number": 341, "line_content": "            loginToken,"}, {"line_number": 342, "line_content": "            emailChange: !!newEmail"}, {"line_number": 343, "line_content": "          })"}, {"line_number": 344, "line_content": "        };"}, {"line_number": 345, "line_content": "        const userUpdate = new Promise((resolve, reject) =>"}, {"line_number": 346, "line_content": "          this.updateAttributes({ emailAuthLinkTTL }, err => {"}, {"line_number": 347, "line_content": "            if (err) {"}, {"line_number": 348, "line_content": "              return reject(err);"}, {"line_number": 349, "line_content": "            }"}, {"line_number": 350, "line_content": "            return resolve();"}, {"line_number": 351, "line_content": "          })"}, {"line_number": 352, "line_content": "        );"}, {"line_number": 353, "line_content": "        return Observable.forkJoin("}, {"line_number": 354, "line_content": "          User.email.send$(mailOptions),"}, {"line_number": 355, "line_content": "          Observable.fromPromise(userUpdate)"}, {"line_number": 356, "line_content": "        );"}, {"line_number": 357, "line_content": "      })"}, {"line_number": 358, "line_content": "      .map("}, {"line_number": 359, "line_content": "        () =>"}, {"line_number": 360, "line_content": "          'Check your email and click the link we sent you to confirm' +"}, {"line_number": 361, "line_content": "          ' your new email address.'"}, {"line_number": 362, "line_content": "      );"}, {"line_number": 363, "line_content": "  }"}, {"line_number": 364, "line_content": ""}, {"line_number": 365, "line_content": "  User.prototype.requestAuthEmail = requestAuthEmail;"}, {"line_number": 366, "line_content": ""}, {"line_number": 367, "line_content": "  function requestUpdateEmail(requestedEmail) {"}, {"line_number": 368, "line_content": "    const newEmail = ensureLowerCaseString(requestedEmail);"}, {"line_number": 369, "line_content": "    const currentEmail = ensureLowerCaseString(this.email);"}, {"line_number": 370, "line_content": "    const isOwnEmail = isTheSame(newEmail, currentEmail);"}, {"line_number": 371, "line_content": "    const isResendUpdateToSameEmail = isTheSame("}, {"line_number": 372, "line_content": "      newEmail,"}, {"line_number": 373, "line_content": "      ensureLowerCaseString(this.newEmail)"}, {"line_number": 374, "line_content": "    );"}, {"line_number": 375, "line_content": "    const isLinkSentWithinLimit = getWaitMessage(this.emailVerifyTTL);"}, {"line_number": 376, "line_content": "    const isVerifiedEmail = this.emailVerified;"}, {"line_number": 377, "line_content": ""}, {"line_number": 378, "line_content": "    if (isOwnEmail && isVerifiedEmail) {"}, {"line_number": 379, "line_content": "      // email is already associated and verified with this account"}, {"line_number": 380, "line_content": "      throw wrapHandledError(new Error('email is already verified'), {"}, {"line_number": 381, "line_content": "        type: 'info',"}, {"line_number": 382, "line_content": "        message: `"}, {"line_number": 383, "line_content": "            ${newEmail} is already associated with this account."}, {"line_number": 384, "line_content": "            You can update a new email address instead.`"}, {"line_number": 385, "line_content": "      });"}, {"line_number": 386, "line_content": "    }"}, {"line_number": 387, "line_content": "    if (isResendUpdateToSameEmail && isLinkSentWithinLimit) {"}, {"line_number": 388, "line_content": "      // trying to update with the same newEmail and"}, {"line_number": 389, "line_content": "      // confirmation email is still valid"}, {"line_number": 390, "line_content": "      throw wrapHandledError(new Error(), {"}, {"line_number": 391, "line_content": "        type: 'info',"}, {"line_number": 392, "line_content": "        message: dedent`"}, {"line_number": 393, "line_content": "          We have already sent an email confirmation request to ${newEmail}."}, {"line_number": 394, "line_content": "          ${isLinkSentWithinLimit}`"}, {"line_number": 395, "line_content": "      });"}, {"line_number": 396, "line_content": "    }"}, {"line_number": 397, "line_content": "    if (!isEmail('' + newEmail)) {"}, {"line_number": 398, "line_content": "      throw createEmailError();"}, {"line_number": 399, "line_content": "    }"}, {"line_number": 400, "line_content": ""}, {"line_number": 401, "line_content": "    // newEmail is not associated with this user, and"}, {"line_number": 402, "line_content": "    // this attempt to change email is the first or"}, {"line_number": 403, "line_content": "    // previous attempts have expired"}, {"line_number": 404, "line_content": "    if ("}, {"line_number": 405, "line_content": "      !isOwnEmail ||"}, {"line_number": 406, "line_content": "      (isOwnEmail && !isVerifiedEmail) ||"}, {"line_number": 407, "line_content": "      (isResendUpdateToSameEmail && !isLinkSentWithinLimit)"}, {"line_number": 408, "line_content": "    ) {"}, {"line_number": 409, "line_content": "      const updateConfig = {"}, {"line_number": 410, "line_content": "        newEmail,"}, {"line_number": 411, "line_content": "        emailVerified: false,"}, {"line_number": 412, "line_content": "        emailVerifyTTL: new Date()"}, {"line_number": 413, "line_content": "      };"}, {"line_number": 414, "line_content": ""}, {"line_number": 415, "line_content": "      // defer prevents the promise from firing prematurely (before subscribe)"}, {"line_number": 416, "line_content": "      return Observable.defer(() => User.doesExist(null, newEmail))"}, {"line_number": 417, "line_content": "        .do(exists => {"}, {"line_number": 418, "line_content": "          if (exists && !isOwnEmail) {"}, {"line_number": 419, "line_content": "            // newEmail is not associated with this account,"}, {"line_number": 420, "line_content": "            // but is associated with different account"}, {"line_number": 421, "line_content": "            throw wrapHandledError(new Error('email already in use'), {"}, {"line_number": 422, "line_content": "              type: 'info',"}, {"line_number": 423, "line_content": "              message: `${newEmail} is already associated with another account.`"}, {"line_number": 424, "line_content": "            });"}, {"line_number": 425, "line_content": "          }"}, {"line_number": 426, "line_content": "        })"}, {"line_number": 427, "line_content": "        .flatMap(() => {"}, {"line_number": 428, "line_content": "          const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 429, "line_content": "            this.updateAttributes(updateConfig, err => {"}, {"line_number": 430, "line_content": "              if (err) {"}, {"line_number": 431, "line_content": "                return reject(err);"}, {"line_number": 432, "line_content": "              }"}, {"line_number": 433, "line_content": "              return resolve();"}, {"line_number": 434, "line_content": "            })"}, {"line_number": 435, "line_content": "          );"}, {"line_number": 436, "line_content": "          return Observable.forkJoin("}, {"line_number": 437, "line_content": "            Observable.fromPromise(updatePromise),"}, {"line_number": 438, "line_content": "            this.requestAuthEmail(false, newEmail),"}, {"line_number": 439, "line_content": "            (_, message) => message"}, {"line_number": 440, "line_content": "          );"}, {"line_number": 441, "line_content": "        });"}, {"line_number": 442, "line_content": "    } else {"}, {"line_number": 443, "line_content": "      return 'Something unexpected happened while updating your email.';"}, {"line_number": 444, "line_content": "    }"}, {"line_number": 445, "line_content": "  }"}, {"line_number": 446, "line_content": ""}, {"line_number": 447, "line_content": "  User.prototype.requestUpdateEmail = requestUpdateEmail;"}, {"line_number": 448, "line_content": ""}, {"line_number": 449, "line_content": "  User.prototype.requestUpdateFlags = async function requestUpdateFlags("}, {"line_number": 450, "line_content": "    values"}, {"line_number": 451, "line_content": "  ) {"}, {"line_number": 452, "line_content": "    const flagsToCheck = Object.keys(values);"}, {"line_number": 453, "line_content": "    const valuesToCheck = _.pick({ ...this }, flagsToCheck);"}, {"line_number": 454, "line_content": "    const flagsToUpdate = flagsToCheck.filter("}, {"line_number": 455, "line_content": "      flag => !isTheSame(values[flag], valuesToCheck[flag])"}, {"line_number": 456, "line_content": "    );"}, {"line_number": 457, "line_content": "    if (!flagsToUpdate.length) {"}, {"line_number": 458, "line_content": "      return Observable.of("}, {"line_number": 459, "line_content": "        dedent`"}, {"line_number": 460, "line_content": "        No property in"}, {"line_number": 461, "line_content": "        ${JSON.stringify(flagsToCheck, null, 2)}"}, {"line_number": 462, "line_content": "        will introduce a change in this user."}, {"line_number": 463, "line_content": "        `"}, {"line_number": 464, "line_content": "      ).map(() => dedent`Your settings have not been updated.`);"}, {"line_number": 465, "line_content": "    }"}, {"line_number": 466, "line_content": "    const userUpdateData = flagsToUpdate.reduce((data, currentFlag) => {"}, {"line_number": 467, "line_content": "      data[currentFlag] = values[currentFlag];"}, {"line_number": 468, "line_content": "      return data;"}, {"line_number": 469, "line_content": "    }, {});"}, {"line_number": 470, "line_content": "    log(userUpdateData);"}, {"line_number": 471, "line_content": "    const userUpdate = new Promise((resolve, reject) =>"}, {"line_number": 472, "line_content": "      this.updateAttributes(userUpdateData, err => {"}, {"line_number": 473, "line_content": "        if (err) {"}, {"line_number": 474, "line_content": "          return reject(err);"}, {"line_number": 475, "line_content": "        }"}, {"line_number": 476, "line_content": "        return resolve();"}, {"line_number": 477, "line_content": "      })"}, {"line_number": 478, "line_content": "    );"}, {"line_number": 479, "line_content": "    return Observable.fromPromise(userUpdate).map("}, {"line_number": 480, "line_content": "      () => dedent`"}, {"line_number": 481, "line_content": "        We have successfully updated your account."}, {"line_number": 482, "line_content": "      `"}, {"line_number": 483, "line_content": "    );"}, {"line_number": 484, "line_content": "  };"}, {"line_number": 485, "line_content": ""}, {"line_number": 486, "line_content": "  User.prototype.updateMyPortfolio = function updateMyPortfolio("}, {"line_number": 487, "line_content": "    portfolioItem,"}, {"line_number": 488, "line_content": "    deleteRequest"}, {"line_number": 489, "line_content": "  ) {"}, {"line_number": 490, "line_content": "    const currentPortfolio = this.portfolio.slice(0);"}, {"line_number": 491, "line_content": "    const pIndex = _.findIndex("}, {"line_number": 492, "line_content": "      currentPortfolio,"}, {"line_number": 493, "line_content": "      p => p.id === portfolioItem.id"}, {"line_number": 494, "line_content": "    );"}, {"line_number": 495, "line_content": "    let updatedPortfolio = [];"}, {"line_number": 496, "line_content": "    if (deleteRequest) {"}, {"line_number": 497, "line_content": "      updatedPortfolio = currentPortfolio.filter("}, {"line_number": 498, "line_content": "        p => p.id !== portfolioItem.id"}, {"line_number": 499, "line_content": "      );"}, {"line_number": 500, "line_content": "    } else if (pIndex === -1) {"}, {"line_number": 501, "line_content": "      updatedPortfolio = currentPortfolio.concat([portfolioItem]);"}, {"line_number": 502, "line_content": "    } else {"}, {"line_number": 503, "line_content": "      updatedPortfolio = [...currentPortfolio];"}, {"line_number": 504, "line_content": "      updatedPortfolio[pIndex] = { ...portfolioItem };"}, {"line_number": 505, "line_content": "    }"}, {"line_number": 506, "line_content": "    const userUpdate = new Promise((resolve, reject) =>"}, {"line_number": 507, "line_content": "      this.updateAttribute('portfolio', updatedPortfolio, err => {"}, {"line_number": 508, "line_content": "        if (err) {"}, {"line_number": 509, "line_content": "          return reject(err);"}, {"line_number": 510, "line_content": "        }"}, {"line_number": 511, "line_content": "        return resolve();"}, {"line_number": 512, "line_content": "      })"}, {"line_number": 513, "line_content": "    );"}, {"line_number": 514, "line_content": "    return Observable.fromPromise(userUpdate).map("}, {"line_number": 515, "line_content": "      () => dedent`"}, {"line_number": 516, "line_content": "          Your portfolio has been updated."}, {"line_number": 517, "line_content": "        `"}, {"line_number": 518, "line_content": "    );"}, {"line_number": 519, "line_content": "  };"}, {"line_number": 520, "line_content": ""}, {"line_number": 521, "line_content": "  User.prototype.updateMyProjects = function updateMyProjects(project) {"}, {"line_number": 522, "line_content": "    const updateData = { $set: {} };"}, {"line_number": 523, "line_content": "    return this.getCompletedChallenges$()"}, {"line_number": 524, "line_content": "      .flatMap(() => {"}, {"line_number": 525, "line_content": "        const { updated, isNewCompletionCount } ="}, {"line_number": 526, "line_content": "          buildCompletedChallengesUpdate(this.completedChallenges, project);"}, {"line_number": 527, "line_content": "        updateData.$set.completedChallenges = updated;"}, {"line_number": 528, "line_content": "        if (isNewCompletionCount) {"}, {"line_number": 529, "line_content": "          let points = [];"}, {"line_number": 530, "line_content": "          // give points a length of isNewCompletionCount"}, {"line_number": 531, "line_content": "          points[isNewCompletionCount - 1] = true;"}, {"line_number": 532, "line_content": "          updateData.$push = {};"}, {"line_number": 533, "line_content": "          updateData.$push.progressTimestamps = {"}, {"line_number": 534, "line_content": "            $each: points.map(() => Date.now())"}, {"line_number": 535, "line_content": "          };"}, {"line_number": 536, "line_content": "        }"}, {"line_number": 537, "line_content": "        const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 538, "line_content": "          this.updateAttributes(updateData, err => {"}, {"line_number": 539, "line_content": "            if (err) {"}, {"line_number": 540, "line_content": "              return reject(err);"}, {"line_number": 541, "line_content": "            }"}, {"line_number": 542, "line_content": "            return resolve();"}, {"line_number": 543, "line_content": "          })"}, {"line_number": 544, "line_content": "        );"}, {"line_number": 545, "line_content": "        return Observable.fromPromise(updatePromise);"}, {"line_number": 546, "line_content": "      })"}, {"line_number": 547, "line_content": "      .map("}, {"line_number": 548, "line_content": "        () => dedent`"}, {"line_number": 549, "line_content": "        Your projects have been updated."}, {"line_number": 550, "line_content": "      `"}, {"line_number": 551, "line_content": "      );"}, {"line_number": 552, "line_content": "  };"}, {"line_number": 553, "line_content": ""}, {"line_number": 554, "line_content": "  User.prototype.updateMyProfileUI = function updateMyProfileUI(profileUI) {"}, {"line_number": 555, "line_content": "    const newProfileUI = {"}, {"line_number": 556, "line_content": "      ...this.profileUI,"}, {"line_number": 557, "line_content": "      ...profileUI"}, {"line_number": 558, "line_content": "    };"}, {"line_number": 559, "line_content": "    const profileUIUpdate = new Promise((resolve, reject) =>"}, {"line_number": 560, "line_content": "      this.updateAttribute('profileUI', newProfileUI, err => {"}, {"line_number": 561, "line_content": "        if (err) {"}, {"line_number": 562, "line_content": "          return reject(err);"}, {"line_number": 563, "line_content": "        }"}, {"line_number": 564, "line_content": "        return resolve();"}, {"line_number": 565, "line_content": "      })"}, {"line_number": 566, "line_content": "    );"}, {"line_number": 567, "line_content": "    return Observable.fromPromise(profileUIUpdate).map("}, {"line_number": 568, "line_content": "      () => dedent`"}, {"line_number": 569, "line_content": "        Your privacy settings have been updated."}, {"line_number": 570, "line_content": "      `"}, {"line_number": 571, "line_content": "    );"}, {"line_number": 572, "line_content": "  };"}, {"line_number": 573, "line_content": ""}, {"line_number": 574, "line_content": "  function prepUserForPublish(user, profileUI) {"}, {"line_number": 575, "line_content": "    const {"}, {"line_number": 576, "line_content": "      about,"}, {"line_number": 577, "line_content": "      calendar,"}, {"line_number": 578, "line_content": "      completedChallenges,"}, {"line_number": 579, "line_content": "      isDonating,"}, {"line_number": 580, "line_content": "      joinDate,"}, {"line_number": 581, "line_content": "      location,"}, {"line_number": 582, "line_content": "      name,"}, {"line_number": 583, "line_content": "      points,"}, {"line_number": 584, "line_content": "      portfolio,"}, {"line_number": 585, "line_content": "      streak,"}, {"line_number": 586, "line_content": "      username,"}, {"line_number": 587, "line_content": "      yearsTopContributor"}, {"line_number": 588, "line_content": "    } = user;"}, {"line_number": 589, "line_content": "    const {"}, {"line_number": 590, "line_content": "      isLocked = true,"}, {"line_number": 591, "line_content": "      showAbout = false,"}, {"line_number": 592, "line_content": "      showCerts = false,"}, {"line_number": 593, "line_content": "      showDonation = false,"}, {"line_number": 594, "line_content": "      showHeatMap = false,"}, {"line_number": 595, "line_content": "      showLocation = false,"}, {"line_number": 596, "line_content": "      showName = false,"}, {"line_number": 597, "line_content": "      showPoints = false,"}, {"line_number": 598, "line_content": "      showPortfolio = false,"}, {"line_number": 599, "line_content": "      showTimeLine = false"}, {"line_number": 600, "line_content": "    } = profileUI;"}, {"line_number": 601, "line_content": ""}, {"line_number": 602, "line_content": "    if (isLocked) {"}, {"line_number": 603, "line_content": "      return {"}, {"line_number": 604, "line_content": "        isLocked,"}, {"line_number": 605, "line_content": "        profileUI,"}, {"line_number": 606, "line_content": "        username"}, {"line_number": 607, "line_content": "      };"}, {"line_number": 608, "line_content": "    }"}, {"line_number": 609, "line_content": "    return {"}, {"line_number": 610, "line_content": "      ...user,"}, {"line_number": 611, "line_content": "      about: showAbout ? about : '',"}, {"line_number": 612, "line_content": "      calendar: showHeatMap ? calendar : {},"}, {"line_number": 613, "line_content": "      completedChallenges: (function () {"}, {"line_number": 614, "line_content": "        if (showTimeLine) {"}, {"line_number": 615, "line_content": "          return showCerts"}, {"line_number": 616, "line_content": "            ? completedChallenges"}, {"line_number": 617, "line_content": "            : completedChallenges.filter("}, {"line_number": 618, "line_content": "                ({ challengeType }) => challengeType !== 7"}, {"line_number": 619, "line_content": "              );"}, {"line_number": 620, "line_content": "        } else {"}, {"line_number": 621, "line_content": "          return [];"}, {"line_number": 622, "line_content": "        }"}, {"line_number": 623, "line_content": "      })(),"}, {"line_number": 624, "line_content": "      isDonating: showDonation ? isDonating : null,"}, {"line_number": 625, "line_content": "      joinDate: showAbout ? joinDate : '',"}, {"line_number": 626, "line_content": "      location: showLocation ? location : '',"}, {"line_number": 627, "line_content": "      name: showName ? name : '',"}, {"line_number": 628, "line_content": "      points: showPoints ? points : null,"}, {"line_number": 629, "line_content": "      portfolio: showPortfolio ? portfolio : [],"}, {"line_number": 630, "line_content": "      streak: showHeatMap ? streak : {},"}, {"line_number": 631, "line_content": "      yearsTopContributor: yearsTopContributor"}, {"line_number": 632, "line_content": "    };"}, {"line_number": 633, "line_content": "  }"}, {"line_number": 634, "line_content": ""}, {"line_number": 635, "line_content": "  User.getPublicProfile = function getPublicProfile(username, cb) {"}, {"line_number": 636, "line_content": "    return User.findOne$({ where: { username } })"}, {"line_number": 637, "line_content": "      .flatMap(user => {"}, {"line_number": 638, "line_content": "        if (!user) {"}, {"line_number": 639, "line_content": "          return Observable.of({});"}, {"line_number": 640, "line_content": "        }"}, {"line_number": 641, "line_content": "        const { completedChallenges, progressTimestamps, timezone, profileUI } ="}, {"line_number": 642, "line_content": "          user;"}, {"line_number": 643, "line_content": "        const allUser = {"}, {"line_number": 644, "line_content": "          ..._.pick(user, publicUserProps),"}, {"line_number": 645, "line_content": "          isGithub: !!user.githubProfile,"}, {"line_number": 646, "line_content": "          isLinkedIn: !!user.linkedin,"}, {"line_number": 647, "line_content": "          isTwitter: !!user.twitter,"}, {"line_number": 648, "line_content": "          isWebsite: !!user.website,"}, {"line_number": 649, "line_content": "          points: progressTimestamps.length,"}, {"line_number": 650, "line_content": "          completedChallenges,"}, {"line_number": 651, "line_content": "          ...getProgress(progressTimestamps, timezone),"}, {"line_number": 652, "line_content": "          ...normaliseUserFields(user),"}, {"line_number": 653, "line_content": "          joinDate: user.id.getTimestamp()"}, {"line_number": 654, "line_content": "        };"}, {"line_number": 655, "line_content": ""}, {"line_number": 656, "line_content": "        const publicUser = prepUserForPublish(allUser, profileUI);"}, {"line_number": 657, "line_content": ""}, {"line_number": 658, "line_content": "        return Observable.of({"}, {"line_number": 659, "line_content": "          entities: {"}, {"line_number": 660, "line_content": "            user: {"}, {"line_number": 661, "line_content": "              [user.username]: {"}, {"line_number": 662, "line_content": "                ...publicUser"}, {"line_number": 663, "line_content": "              }"}, {"line_number": 664, "line_content": "            }"}, {"line_number": 665, "line_content": "          },"}, {"line_number": 666, "line_content": "          result: user.username"}, {"line_number": 667, "line_content": "        });"}, {"line_number": 668, "line_content": "      })"}, {"line_number": 669, "line_content": "      .subscribe(user => cb(null, user), cb);"}, {"line_number": 670, "line_content": "  };"}, {"line_number": 671, "line_content": ""}, {"line_number": 672, "line_content": "  User.remoteMethod('getPublicProfile', {"}, {"line_number": 673, "line_content": "    accepts: {"}, {"line_number": 674, "line_content": "      arg: 'username',"}, {"line_number": 675, "line_content": "      type: 'string',"}, {"line_number": 676, "line_content": "      required: true"}, {"line_number": 677, "line_content": "    },"}, {"line_number": 678, "line_content": "    returns: ["}, {"line_number": 679, "line_content": "      {"}, {"line_number": 680, "line_content": "        arg: 'user',"}, {"line_number": 681, "line_content": "        type: 'object',"}, {"line_number": 682, "line_content": "        root: true"}, {"line_number": 683, "line_content": "      }"}, {"line_number": 684, "line_content": "    ],"}, {"line_number": 685, "line_content": "    http: {"}, {"line_number": 686, "line_content": "      path: '/get-public-profile',"}, {"line_number": 687, "line_content": "      verb: 'GET'"}, {"line_number": 688, "line_content": "    }"}, {"line_number": 689, "line_content": "  });"}, {"line_number": 690, "line_content": ""}, {"line_number": 691, "line_content": "  User.giveBrowniePoints = function giveBrowniePoints("}, {"line_number": 692, "line_content": "    receiver,"}, {"line_number": 693, "line_content": "    giver,"}, {"line_number": 694, "line_content": "    data = {},"}, {"line_number": 695, "line_content": "    dev = false,"}, {"line_number": 696, "line_content": "    cb"}, {"line_number": 697, "line_content": "  ) {"}, {"line_number": 698, "line_content": "    const findUser = observeMethod(User, 'findOne');"}, {"line_number": 699, "line_content": "    if (!receiver) {"}, {"line_number": 700, "line_content": "      return nextTick(() => {"}, {"line_number": 701, "line_content": "        cb(new TypeError(`receiver should be a string but got ${receiver}`));"}, {"line_number": 702, "line_content": "      });"}, {"line_number": 703, "line_content": "    }"}, {"line_number": 704, "line_content": "    if (!giver) {"}, {"line_number": 705, "line_content": "      return nextTick(() => {"}, {"line_number": 706, "line_content": "        cb(new TypeError(`giver should be a string but got ${giver}`));"}, {"line_number": 707, "line_content": "      });"}, {"line_number": 708, "line_content": "    }"}, {"line_number": 709, "line_content": "    let temp = moment();"}, {"line_number": 710, "line_content": "    const browniePoints = temp.subtract"}, {"line_number": 711, "line_content": "      .apply(temp, BROWNIEPOINTS_TIMEOUT)"}, {"line_number": 712, "line_content": "      .valueOf();"}, {"line_number": 713, "line_content": "    const user$ = findUser({ where: { username: receiver } });"}, {"line_number": 714, "line_content": ""}, {"line_number": 715, "line_content": "    return ("}, {"line_number": 716, "line_content": "      user$"}, {"line_number": 717, "line_content": "        .tapOnNext(user => {"}, {"line_number": 718, "line_content": "          if (!user) {"}, {"line_number": 719, "line_content": "            throw new Error(`could not find receiver for ${receiver}`);"}, {"line_number": 720, "line_content": "          }"}, {"line_number": 721, "line_content": "        })"}, {"line_number": 722, "line_content": "        .flatMap(({ progressTimestamps = [] }) => {"}, {"line_number": 723, "line_content": "          return Observable.from(progressTimestamps);"}, {"line_number": 724, "line_content": "        })"}, {"line_number": 725, "line_content": "        // filter out non objects"}, {"line_number": 726, "line_content": "        .filter(timestamp => !!timestamp || typeof timestamp === 'object')"}, {"line_number": 727, "line_content": "        // filter out timestamps older than one hour"}, {"line_number": 728, "line_content": "        .filter(({ timestamp = 0 }) => {"}, {"line_number": 729, "line_content": "          return timestamp >= browniePoints;"}, {"line_number": 730, "line_content": "        })"}, {"line_number": 731, "line_content": "        // filter out brownie points given by giver"}, {"line_number": 732, "line_content": "        .filter(browniePoint => {"}, {"line_number": 733, "line_content": "          return browniePoint.giver === giver;"}, {"line_number": 734, "line_content": "        })"}, {"line_number": 735, "line_content": "        // no results means this is the first brownie point given by giver"}, {"line_number": 736, "line_content": "        // so return -1 to indicate receiver should receive point"}, {"line_number": 737, "line_content": "        .first({ defaultValue: -1 })"}, {"line_number": 738, "line_content": "        .flatMap(browniePointsFromGiver => {"}, {"line_number": 739, "line_content": "          if (browniePointsFromGiver === -1) {"}, {"line_number": 740, "line_content": "            return user$.flatMap(user => {"}, {"line_number": 741, "line_content": "              user.progressTimestamps.push({"}, {"line_number": 742, "line_content": "                giver,"}, {"line_number": 743, "line_content": "                timestamp: Date.now(),"}, {"line_number": 744, "line_content": "                ...data"}, {"line_number": 745, "line_content": "              });"}, {"line_number": 746, "line_content": "              return saveUser(user);"}, {"line_number": 747, "line_content": "            });"}, {"line_number": 748, "line_content": "          }"}, {"line_number": 749, "line_content": "          return Observable.throw("}, {"line_number": 750, "line_content": "            new Error(`${giver} already gave ${receiver} points`)"}, {"line_number": 751, "line_content": "          );"}, {"line_number": 752, "line_content": "        })"}, {"line_number": 753, "line_content": "        .subscribe("}, {"line_number": 754, "line_content": "          user => {"}, {"line_number": 755, "line_content": "            return cb("}, {"line_number": 756, "line_content": "              null,"}, {"line_number": 757, "line_content": "              getAboutProfile(user),"}, {"line_number": 758, "line_content": "              dev ? { giver, receiver, data } : null"}, {"line_number": 759, "line_content": "            );"}, {"line_number": 760, "line_content": "          },"}, {"line_number": 761, "line_content": "          e => cb(e, null, dev ? { giver, receiver, data } : null),"}, {"line_number": 762, "line_content": "          () => {"}, {"line_number": 763, "line_content": "            log('brownie points assigned completed');"}, {"line_number": 764, "line_content": "          }"}, {"line_number": 765, "line_content": "        )"}, {"line_number": 766, "line_content": "    );"}, {"line_number": 767, "line_content": "  };"}, {"line_number": 768, "line_content": ""}, {"line_number": 769, "line_content": "  User.remoteMethod('giveBrowniePoints', {"}, {"line_number": 770, "line_content": "    description: 'Give this user brownie points',"}, {"line_number": 771, "line_content": "    accepts: ["}, {"line_number": 772, "line_content": "      {"}, {"line_number": 773, "line_content": "        arg: 'receiver',"}, {"line_number": 774, "line_content": "        type: 'string',"}, {"line_number": 775, "line_content": "        required: true"}, {"line_number": 776, "line_content": "      },"}, {"line_number": 777, "line_content": "      {"}, {"line_number": 778, "line_content": "        arg: 'giver',"}, {"line_number": 779, "line_content": "        type: 'string',"}, {"line_number": 780, "line_content": "        required: true"}, {"line_number": 781, "line_content": "      },"}, {"line_number": 782, "line_content": "      {"}, {"line_number": 783, "line_content": "        arg: 'data',"}, {"line_number": 784, "line_content": "        type: 'object'"}, {"line_number": 785, "line_content": "      },"}, {"line_number": 786, "line_content": "      {"}, {"line_number": 787, "line_content": "        arg: 'debug',"}, {"line_number": 788, "line_content": "        type: 'boolean'"}, {"line_number": 789, "line_content": "      }"}, {"line_number": 790, "line_content": "    ],"}, {"line_number": 791, "line_content": "    returns: ["}, {"line_number": 792, "line_content": "      {"}, {"line_number": 793, "line_content": "        arg: 'about',"}, {"line_number": 794, "line_content": "        type: 'object'"}, {"line_number": 795, "line_content": "      },"}, {"line_number": 796, "line_content": "      {"}, {"line_number": 797, "line_content": "        arg: 'debug',"}, {"line_number": 798, "line_content": "        type: 'object'"}, {"line_number": 799, "line_content": "      }"}, {"line_number": 800, "line_content": "    ],"}, {"line_number": 801, "line_content": "    http: {"}, {"line_number": 802, "line_content": "      path: '/give-brownie-points',"}, {"line_number": 803, "line_content": "      verb: 'POST'"}, {"line_number": 804, "line_content": "    }"}, {"line_number": 805, "line_content": "  });"}, {"line_number": 806, "line_content": ""}, {"line_number": 807, "line_content": "  User.prototype.getPoints$ = function getPoints$() {"}, {"line_number": 808, "line_content": "    if ("}, {"line_number": 809, "line_content": "      Array.isArray(this.progressTimestamps) &&"}, {"line_number": 810, "line_content": "      this.progressTimestamps.length"}, {"line_number": 811, "line_content": "    ) {"}, {"line_number": 812, "line_content": "      return Observable.of(this.progressTimestamps);"}, {"line_number": 813, "line_content": "    }"}, {"line_number": 814, "line_content": "    const id = this.getId();"}, {"line_number": 815, "line_content": "    const filter = {"}, {"line_number": 816, "line_content": "      where: { id },"}, {"line_number": 817, "line_content": "      fields: { progressTimestamps: true }"}, {"line_number": 818, "line_content": "    };"}, {"line_number": 819, "line_content": "    return this.constructor.findOne$(filter).map(user => {"}, {"line_number": 820, "line_content": "      this.progressTimestamps = user.progressTimestamps;"}, {"line_number": 821, "line_content": "      return user.progressTimestamps;"}, {"line_number": 822, "line_content": "    });"}, {"line_number": 823, "line_content": "  };"}, {"line_number": 824, "line_content": "  User.prototype.getCompletedChallenges$ = function getCompletedChallenges$() {"}, {"line_number": 825, "line_content": "    if ("}, {"line_number": 826, "line_content": "      Array.isArray(this.completedChallenges) &&"}, {"line_number": 827, "line_content": "      this.completedChallenges.length"}, {"line_number": 828, "line_content": "    ) {"}, {"line_number": 829, "line_content": "      return Observable.of(this.completedChallenges);"}, {"line_number": 830, "line_content": "    }"}, {"line_number": 831, "line_content": "    const id = this.getId();"}, {"line_number": 832, "line_content": "    const filter = {"}, {"line_number": 833, "line_content": "      where: { id },"}, {"line_number": 834, "line_content": "      fields: { completedChallenges: true }"}, {"line_number": 835, "line_content": "    };"}, {"line_number": 836, "line_content": "    return this.constructor.findOne$(filter).map(user => {"}, {"line_number": 837, "line_content": "      this.completedChallenges = user.completedChallenges;"}, {"line_number": 838, "line_content": "      return user.completedChallenges;"}, {"line_number": 839, "line_content": "    });"}, {"line_number": 840, "line_content": "  };"}, {"line_number": 841, "line_content": "  User.prototype.getSavedChallenges$ = function getSavedChallenges$() {"}, {"line_number": 842, "line_content": "    if (Array.isArray(this.savedChallenges) && this.savedChallenges.length) {"}, {"line_number": 843, "line_content": "      return Observable.of(this.savedChallenges);"}, {"line_number": 844, "line_content": "    }"}, {"line_number": 845, "line_content": "    const id = this.getId();"}, {"line_number": 846, "line_content": "    const filter = {"}, {"line_number": 847, "line_content": "      where: { id },"}, {"line_number": 848, "line_content": "      fields: { savedChallenges: true }"}, {"line_number": 849, "line_content": "    };"}, {"line_number": 850, "line_content": "    return this.constructor.findOne$(filter).map(user => {"}, {"line_number": 851, "line_content": "      this.savedChallenges = user.savedChallenges;"}, {"line_number": 852, "line_content": "      return user.savedChallenges;"}, {"line_number": 853, "line_content": "    });"}, {"line_number": 854, "line_content": "  };"}, {"line_number": 855, "line_content": ""}, {"line_number": 856, "line_content": "  User.prototype.getPartiallyCompletedChallenges$ ="}, {"line_number": 857, "line_content": "    function getPartiallyCompletedChallenges$() {"}, {"line_number": 858, "line_content": "      if ("}, {"line_number": 859, "line_content": "        Array.isArray(this.partiallyCompletedChallenges) &&"}, {"line_number": 860, "line_content": "        this.partiallyCompletedChallenges.length"}, {"line_number": 861, "line_content": "      ) {"}, {"line_number": 862, "line_content": "        return Observable.of(this.partiallyCompletedChallenges);"}, {"line_number": 863, "line_content": "      }"}, {"line_number": 864, "line_content": "      const id = this.getId();"}, {"line_number": 865, "line_content": "      const filter = {"}, {"line_number": 866, "line_content": "        where: { id },"}, {"line_number": 867, "line_content": "        fields: { partiallyCompletedChallenges: true }"}, {"line_number": 868, "line_content": "      };"}, {"line_number": 869, "line_content": "      return this.constructor.findOne$(filter).map(user => {"}, {"line_number": 870, "line_content": "        this.partiallyCompletedChallenges = user.partiallyCompletedChallenges;"}, {"line_number": 871, "line_content": "        return user.partiallyCompletedChallenges;"}, {"line_number": 872, "line_content": "      });"}, {"line_number": 873, "line_content": "    };"}, {"line_number": 874, "line_content": ""}, {"line_number": 875, "line_content": "  User.getMessages = messages => Promise.resolve(messages);"}, {"line_number": 876, "line_content": ""}, {"line_number": 877, "line_content": "  User.remoteMethod('getMessages', {"}, {"line_number": 878, "line_content": "    http: {"}, {"line_number": 879, "line_content": "      verb: 'get',"}, {"line_number": 880, "line_content": "      path: '/get-messages'"}, {"line_number": 881, "line_content": "    },"}, {"line_number": 882, "line_content": "    accepts: {"}, {"line_number": 883, "line_content": "      arg: 'messages',"}, {"line_number": 884, "line_content": "      type: 'object',"}, {"line_number": 885, "line_content": "      http: ctx => ctx.req.flash()"}, {"line_number": 886, "line_content": "    },"}, {"line_number": 887, "line_content": "    returns: ["}, {"line_number": 888, "line_content": "      {"}, {"line_number": 889, "line_content": "        arg: 'messages',"}, {"line_number": 890, "line_content": "        type: 'object',"}, {"line_number": 891, "line_content": "        root: true"}, {"line_number": 892, "line_content": "      }"}, {"line_number": 893, "line_content": "    ]"}, {"line_number": 894, "line_content": "  });"}, {"line_number": 895, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function requestCompletedChallenges() {"}, {"line_number": 2, "line_content": "    return this.getCompletedChallenges$();"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 60, "lines": [{"line_number": 1, "line_content": "function requestAuthEmail(isSignUp, newEmail) {"}, {"line_number": 2, "line_content": "    return Observable.defer(() => {"}, {"line_number": 3, "line_content": "      const messageOrNull = getWaitMessage(this.emailAuthLinkTTL);"}, {"line_number": 4, "line_content": "      if (messageOrNull) {"}, {"line_number": 5, "line_content": "        throw wrapHandledError(new Error('request is throttled'), {"}, {"line_number": 6, "line_content": "          type: 'info',"}, {"line_number": 7, "line_content": "          message: messageOrNull"}, {"line_number": 8, "line_content": "        });"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "      // create a temporary access token with ttl for 15 minutes"}, {"line_number": 12, "line_content": "      return this.createAuthToken({ ttl: 15 * 60 * 1000 });"}, {"line_number": 13, "line_content": "    })"}, {"line_number": 14, "line_content": "      .flatMap(token => {"}, {"line_number": 15, "line_content": "        let renderAuthEmail = renderSignInEmail;"}, {"line_number": 16, "line_content": "        let subject = 'Your sign in link for freeCodeCamp.org';"}, {"line_number": 17, "line_content": "        if (isSignUp) {"}, {"line_number": 18, "line_content": "          renderAuthEmail = renderSignUpEmail;"}, {"line_number": 19, "line_content": "          subject = 'Your sign in link for your new freeCodeCamp.org account';"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "        if (newEmail) {"}, {"line_number": 22, "line_content": "          renderAuthEmail = renderEmailChangeEmail;"}, {"line_number": 23, "line_content": "          subject = dedent`"}, {"line_number": 24, "line_content": "            Please confirm your updated email address for freeCodeCamp.org"}, {"line_number": 25, "line_content": "          `;"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "        const { id: loginToken, created: emailAuthLinkTTL } = token;"}, {"line_number": 28, "line_content": "        const loginEmail = getEncodedEmail(newEmail ? newEmail : null);"}, {"line_number": 29, "line_content": "        const host = apiLocation;"}, {"line_number": 30, "line_content": "        const mailOptions = {"}, {"line_number": 31, "line_content": "          type: 'email',"}, {"line_number": 32, "line_content": "          to: newEmail ? newEmail : this.email,"}, {"line_number": 33, "line_content": "          from: getEmailSender(),"}, {"line_number": 34, "line_content": "          subject,"}, {"line_number": 35, "line_content": "          text: renderAuthEmail({"}, {"line_number": 36, "line_content": "            host,"}, {"line_number": 37, "line_content": "            loginEmail,"}, {"line_number": 38, "line_content": "            loginToken,"}, {"line_number": 39, "line_content": "            emailChange: !!newEmail"}, {"line_number": 40, "line_content": "          })"}, {"line_number": 41, "line_content": "        };"}, {"line_number": 42, "line_content": "        const userUpdate = new Promise((resolve, reject) =>"}, {"line_number": 43, "line_content": "          this.updateAttributes({ emailAuthLinkTTL }, err => {"}, {"line_number": 44, "line_content": "            if (err) {"}, {"line_number": 45, "line_content": "              return reject(err);"}, {"line_number": 46, "line_content": "            }"}, {"line_number": 47, "line_content": "            return resolve();"}, {"line_number": 48, "line_content": "          })"}, {"line_number": 49, "line_content": "        );"}, {"line_number": 50, "line_content": "        return Observable.forkJoin("}, {"line_number": 51, "line_content": "          User.email.send$(mailOptions),"}, {"line_number": 52, "line_content": "          Observable.fromPromise(userUpdate)"}, {"line_number": 53, "line_content": "        );"}, {"line_number": 54, "line_content": "      })"}, {"line_number": 55, "line_content": "      .map("}, {"line_number": 56, "line_content": "        () =>"}, {"line_number": 57, "line_content": "          'Check your email and click the link we sent you to confirm' +"}, {"line_number": 58, "line_content": "          ' your new email address.'"}, {"line_number": 59, "line_content": "      );"}, {"line_number": 60, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 79, "lines": [{"line_number": 1, "line_content": "function requestUpdateEmail(requestedEmail) {"}, {"line_number": 2, "line_content": "    const newEmail = ensureLowerCaseString(requestedEmail);"}, {"line_number": 3, "line_content": "    const currentEmail = ensureLowerCaseString(this.email);"}, {"line_number": 4, "line_content": "    const isOwnEmail = isTheSame(newEmail, currentEmail);"}, {"line_number": 5, "line_content": "    const isResendUpdateToSameEmail = isTheSame("}, {"line_number": 6, "line_content": "      newEmail,"}, {"line_number": 7, "line_content": "      ensureLowerCaseString(this.newEmail)"}, {"line_number": 8, "line_content": "    );"}, {"line_number": 9, "line_content": "    const isLinkSentWithinLimit = getWaitMessage(this.emailVerifyTTL);"}, {"line_number": 10, "line_content": "    const isVerifiedEmail = this.emailVerified;"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (isOwnEmail && isVerifiedEmail) {"}, {"line_number": 13, "line_content": "      // email is already associated and verified with this account"}, {"line_number": 14, "line_content": "      throw wrapHandledError(new Error('email is already verified'), {"}, {"line_number": 15, "line_content": "        type: 'info',"}, {"line_number": 16, "line_content": "        message: `"}, {"line_number": 17, "line_content": "            ${newEmail} is already associated with this account."}, {"line_number": 18, "line_content": "            You can update a new email address instead.`"}, {"line_number": 19, "line_content": "      });"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": "    if (isResendUpdateToSameEmail && isLinkSentWithinLimit) {"}, {"line_number": 22, "line_content": "      // trying to update with the same newEmail and"}, {"line_number": 23, "line_content": "      // confirmation email is still valid"}, {"line_number": 24, "line_content": "      throw wrapHandledError(new Error(), {"}, {"line_number": 25, "line_content": "        type: 'info',"}, {"line_number": 26, "line_content": "        message: dedent`"}, {"line_number": 27, "line_content": "          We have already sent an email confirmation request to ${newEmail}."}, {"line_number": 28, "line_content": "          ${isLinkSentWithinLimit}`"}, {"line_number": 29, "line_content": "      });"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": "    if (!isEmail('' + newEmail)) {"}, {"line_number": 32, "line_content": "      throw createEmailError();"}, {"line_number": 33, "line_content": "    }"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    // newEmail is not associated with this user, and"}, {"line_number": 36, "line_content": "    // this attempt to change email is the first or"}, {"line_number": 37, "line_content": "    // previous attempts have expired"}, {"line_number": 38, "line_content": "    if ("}, {"line_number": 39, "line_content": "      !isOwnEmail ||"}, {"line_number": 40, "line_content": "      (isOwnEmail && !isVerifiedEmail) ||"}, {"line_number": 41, "line_content": "      (isResendUpdateToSameEmail && !isLinkSentWithinLimit)"}, {"line_number": 42, "line_content": "    ) {"}, {"line_number": 43, "line_content": "      const updateConfig = {"}, {"line_number": 44, "line_content": "        newEmail,"}, {"line_number": 45, "line_content": "        emailVerified: false,"}, {"line_number": 46, "line_content": "        emailVerifyTTL: new Date()"}, {"line_number": 47, "line_content": "      };"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "      // defer prevents the promise from firing prematurely (before subscribe)"}, {"line_number": 50, "line_content": "      return Observable.defer(() => User.doesExist(null, newEmail))"}, {"line_number": 51, "line_content": "        .do(exists => {"}, {"line_number": 52, "line_content": "          if (exists && !isOwnEmail) {"}, {"line_number": 53, "line_content": "            // newEmail is not associated with this account,"}, {"line_number": 54, "line_content": "            // but is associated with different account"}, {"line_number": 55, "line_content": "            throw wrapHandledError(new Error('email already in use'), {"}, {"line_number": 56, "line_content": "              type: 'info',"}, {"line_number": 57, "line_content": "              message: `${newEmail} is already associated with another account.`"}, {"line_number": 58, "line_content": "            });"}, {"line_number": 59, "line_content": "          }"}, {"line_number": 60, "line_content": "        })"}, {"line_number": 61, "line_content": "        .flatMap(() => {"}, {"line_number": 62, "line_content": "          const updatePromise = new Promise((resolve, reject) =>"}, {"line_number": 63, "line_content": "            this.updateAttributes(updateConfig, err => {"}, {"line_number": 64, "line_content": "              if (err) {"}, {"line_number": 65, "line_content": "                return reject(err);"}, {"line_number": 66, "line_content": "              }"}, {"line_number": 67, "line_content": "              return resolve();"}, {"line_number": 68, "line_content": "            })"}, {"line_number": 69, "line_content": "          );"}, {"line_number": 70, "line_content": "          return Observable.forkJoin("}, {"line_number": 71, "line_content": "            Observable.fromPromise(updatePromise),"}, {"line_number": 72, "line_content": "            this.requestAuthEmail(false, newEmail),"}, {"line_number": 73, "line_content": "            (_, message) => message"}, {"line_number": 74, "line_content": "          );"}, {"line_number": 75, "line_content": "        });"}, {"line_number": 76, "line_content": "    } else {"}, {"line_number": 77, "line_content": "      return 'Something unexpected happened while updating your email.';"}, {"line_number": 78, "line_content": "    }"}, {"line_number": 79, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 60, "lines": [{"line_number": 1, "line_content": "function prepUserForPublish(user, profileUI) {"}, {"line_number": 2, "line_content": "    const {"}, {"line_number": 3, "line_content": "      about,"}, {"line_number": 4, "line_content": "      calendar,"}, {"line_number": 5, "line_content": "      completedChallenges,"}, {"line_number": 6, "line_content": "      isDonating,"}, {"line_number": 7, "line_content": "      joinDate,"}, {"line_number": 8, "line_content": "      location,"}, {"line_number": 9, "line_content": "      name,"}, {"line_number": 10, "line_content": "      points,"}, {"line_number": 11, "line_content": "      portfolio,"}, {"line_number": 12, "line_content": "      streak,"}, {"line_number": 13, "line_content": "      username,"}, {"line_number": 14, "line_content": "      yearsTopContributor"}, {"line_number": 15, "line_content": "    } = user;"}, {"line_number": 16, "line_content": "    const {"}, {"line_number": 17, "line_content": "      isLocked = true,"}, {"line_number": 18, "line_content": "      showAbout = false,"}, {"line_number": 19, "line_content": "      showCerts = false,"}, {"line_number": 20, "line_content": "      showDonation = false,"}, {"line_number": 21, "line_content": "      showHeatMap = false,"}, {"line_number": 22, "line_content": "      showLocation = false,"}, {"line_number": 23, "line_content": "      showName = false,"}, {"line_number": 24, "line_content": "      showPoints = false,"}, {"line_number": 25, "line_content": "      showPortfolio = false,"}, {"line_number": 26, "line_content": "      showTimeLine = false"}, {"line_number": 27, "line_content": "    } = profileUI;"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    if (isLocked) {"}, {"line_number": 30, "line_content": "      return {"}, {"line_number": 31, "line_content": "        isLocked,"}, {"line_number": 32, "line_content": "        profileUI,"}, {"line_number": 33, "line_content": "        username"}, {"line_number": 34, "line_content": "      };"}, {"line_number": 35, "line_content": "    }"}, {"line_number": 36, "line_content": "    return {"}, {"line_number": 37, "line_content": "      ...user,"}, {"line_number": 38, "line_content": "      about: showAbout ? about : '',"}, {"line_number": 39, "line_content": "      calendar: showHeatMap ? calendar : {},"}, {"line_number": 40, "line_content": "      completedChallenges: (function () {"}, {"line_number": 41, "line_content": "        if (showTimeLine) {"}, {"line_number": 42, "line_content": "          return showCerts"}, {"line_number": 43, "line_content": "            ? completedChallenges"}, {"line_number": 44, "line_content": "            : completedChallenges.filter("}, {"line_number": 45, "line_content": "                ({ challengeType }) => challengeType !== 7"}, {"line_number": 46, "line_content": "              );"}, {"line_number": 47, "line_content": "        } else {"}, {"line_number": 48, "line_content": "          return [];"}, {"line_number": 49, "line_content": "        }"}, {"line_number": 50, "line_content": "      })(),"}, {"line_number": 51, "line_content": "      isDonating: showDonation ? isDonating : null,"}, {"line_number": 52, "line_content": "      joinDate: showAbout ? joinDate : '',"}, {"line_number": 53, "line_content": "      location: showLocation ? location : '',"}, {"line_number": 54, "line_content": "      name: showName ? name : '',"}, {"line_number": 55, "line_content": "      points: showPoints ? points : null,"}, {"line_number": 56, "line_content": "      portfolio: showPortfolio ? portfolio : [],"}, {"line_number": 57, "line_content": "      streak: showHeatMap ? streak : {},"}, {"line_number": 58, "line_content": "      yearsTopContributor: yearsTopContributor"}, {"line_number": 59, "line_content": "    };"}, {"line_number": 60, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getLines(contents, range) {"}, {"line_number": 2, "line_content": "  if (isEmpty(range)) {"}, {"line_number": 3, "line_content": "    return '';"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  const lines = contents.split('\\n');"}, {"line_number": 6, "line_content": "  const editableLines ="}, {"line_number": 7, "line_content": "    isEmpty(lines) || range[1] <= range[0]"}, {"line_number": 8, "line_content": "      ? []"}, {"line_number": 9, "line_content": "      : lines.slice(range[0], range[1] - 1);"}, {"line_number": 10, "line_content": "  return editableLines.join('\\n');"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function inRange(num, range) {"}, {"line_number": 2, "line_content": "  return num >= range[0] && num <= range[1];"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function createPoly({ name, ext, contents, history, ...rest } = {}) {"}, {"line_number": 2, "line_content": "  invariant(typeof name === 'string', 'name must be a string but got %s', name);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  invariant(typeof ext === 'string', 'ext must be a string, but was %s', ext);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  invariant("}, {"line_number": 7, "line_content": "    typeof contents === 'string',"}, {"line_number": 8, "line_content": "    'contents must be a string but got %s',"}, {"line_number": 9, "line_content": "    contents"}, {"line_number": 10, "line_content": "  );"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  return {"}, {"line_number": 13, "line_content": "    ...rest,"}, {"line_number": 14, "line_content": "    history: Array.isArray(history) ? history : [name + '.' + ext],"}, {"line_number": 15, "line_content": "    name,"}, {"line_number": 16, "line_content": "    ext,"}, {"line_number": 17, "line_content": "    path: name + '.' + ext,"}, {"line_number": 18, "line_content": "    fileKey: name + ext,"}, {"line_number": 19, "line_content": "    contents,"}, {"line_number": 20, "line_content": "    error: null"}, {"line_number": 21, "line_content": "  };"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function isPoly(poly) {"}, {"line_number": 2, "line_content": "  return ("}, {"line_number": 3, "line_content": "    poly &&"}, {"line_number": 4, "line_content": "    typeof poly.contents === 'string' &&"}, {"line_number": 5, "line_content": "    typeof poly.name === 'string' &&"}, {"line_number": 6, "line_content": "    typeof poly.ext === 'string' &&"}, {"line_number": 7, "line_content": "    Array.isArray(poly.history)"}, {"line_number": 8, "line_content": "  );"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function checkPoly(poly) {"}, {"line_number": 2, "line_content": "  invariant("}, {"line_number": 3, "line_content": "    isPoly(poly),"}, {"line_number": 4, "line_content": "    'function should receive a PolyVinyl, but got %s',"}, {"line_number": 5, "line_content": "    poly"}, {"line_number": 6, "line_content": "  );"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function setContent(contents, poly) {"}, {"line_number": 2, "line_content": "  checkPoly(poly);"}, {"line_number": 3, "line_content": "  return {"}, {"line_number": 4, "line_content": "    ...poly,"}, {"line_number": 5, "line_content": "    contents,"}, {"line_number": 6, "line_content": "    source: null"}, {"line_number": 7, "line_content": "  };"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function setExt(ext, poly) {"}, {"line_number": 2, "line_content": "  checkPoly(poly);"}, {"line_number": 3, "line_content": "  const newPoly = {"}, {"line_number": 4, "line_content": "    ...poly,"}, {"line_number": 5, "line_content": "    ext,"}, {"line_number": 6, "line_content": "    path: poly.name + '.' + ext,"}, {"line_number": 7, "line_content": "    fileKey: poly.name + ext"}, {"line_number": 8, "line_content": "  };"}, {"line_number": 9, "line_content": "  newPoly.history = [...poly.history, newPoly.path];"}, {"line_number": 10, "line_content": "  return newPoly;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function setImportedFiles(importedFiles, poly) {"}, {"line_number": 2, "line_content": "  checkPoly(poly);"}, {"line_number": 3, "line_content": "  const newPoly = {"}, {"line_number": 4, "line_content": "    ...poly,"}, {"line_number": 5, "line_content": "    importedFiles: [...importedFiles]"}, {"line_number": 6, "line_content": "  };"}, {"line_number": 7, "line_content": "  return newPoly;"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function regeneratePathAndHistory(poly) {"}, {"line_number": 2, "line_content": "  const newPath = poly.name + '.' + poly.ext;"}, {"line_number": 3, "line_content": "  const newPoly = {"}, {"line_number": 4, "line_content": "    ...poly,"}, {"line_number": 5, "line_content": "    path: newPath,"}, {"line_number": 6, "line_content": "    history: [newPath]"}, {"line_number": 7, "line_content": "  };"}, {"line_number": 8, "line_content": "  checkPoly(newPoly);"}, {"line_number": 9, "line_content": "  return newPoly;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function clearHeadTail(poly) {"}, {"line_number": 2, "line_content": "  checkPoly(poly);"}, {"line_number": 3, "line_content": "  return {"}, {"line_number": 4, "line_content": "    ...poly,"}, {"line_number": 5, "line_content": "    head: '',"}, {"line_number": 6, "line_content": "    tail: ''"}, {"line_number": 7, "line_content": "  };"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function compileHeadTail(padding = '', poly) {"}, {"line_number": 2, "line_content": "  return clearHeadTail("}, {"line_number": 3, "line_content": "    transformContents("}, {"line_number": 4, "line_content": "      () => [poly.head, poly.contents, poly.tail].join(padding),"}, {"line_number": 5, "line_content": "      poly"}, {"line_number": 6, "line_content": "    )"}, {"line_number": 7, "line_content": "  );"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function transformContents(wrap, poly) {"}, {"line_number": 2, "line_content": "  const newPoly = setContent(wrap(poly.contents), poly);"}, {"line_number": 3, "line_content": "  // if no source exist, set the original contents as source"}, {"line_number": 4, "line_content": "  newPoly.source = poly.source || poly.contents;"}, {"line_number": 5, "line_content": "  return newPoly;"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function transformHeadTailAndContents(wrap, poly) {"}, {"line_number": 2, "line_content": "  return {"}, {"line_number": 3, "line_content": "    ...transformContents(wrap, poly),"}, {"line_number": 4, "line_content": "    head: wrap(poly.head),"}, {"line_number": 5, "line_content": "    tail: wrap(poly.tail)"}, {"line_number": 6, "line_content": "  };"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function isAuditedCert(lang, cert) {"}, {"line_number": 2, "line_content": "  if (!lang || !cert)"}, {"line_number": 3, "line_content": "    throw Error('Both arguments must be provided for auditing');"}, {"line_number": 4, "line_content": "  return lang === 'english' || auditedCerts[lang].includes(cert);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function spyOnListener(win) {"}, {"line_number": 2, "line_content": "  const addListener = win.EventTarget.prototype.addEventListener;"}, {"line_number": 3, "line_content": "  win.EventTarget.prototype.addEventListener = function (name) {"}, {"line_number": 4, "line_content": "    if (name === 'click') {"}, {"line_number": 5, "line_content": "      appHasStarted = true;"}, {"line_number": 6, "line_content": "      win.EventTarget.prototype.addEventListener = addListener;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return addListener.apply(this, arguments);"}, {"line_number": 9, "line_content": "  };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function waitForAppStart() {"}, {"line_number": 2, "line_content": "  return new Promise(resolve => {"}, {"line_number": 3, "line_content": "    const isReady = () => {"}, {"line_number": 4, "line_content": "      if (appHasStarted) {"}, {"line_number": 5, "line_content": "        return resolve();"}, {"line_number": 6, "line_content": "      }"}, {"line_number": 7, "line_content": "      return setTimeout(isReady, 0);"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "    isReady();"}, {"line_number": 10, "line_content": "  });"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function submitFrontEndSolutions() {"}, {"line_number": 2, "line_content": "      const { superBlock, block, challenges } = projects;"}, {"line_number": 3, "line_content": "      challenges.forEach(({ slug, solution }) => {"}, {"line_number": 4, "line_content": "        const url = `/learn/${superBlock}/${block}/${slug}`;"}, {"line_number": 5, "line_content": "        cy.visit(url);"}, {"line_number": 6, "line_content": "        cy.get('#dynamic-front-end-form')"}, {"line_number": 7, "line_content": "          .get('#solution')"}, {"line_number": 8, "line_content": "          .type(solution, { force: true, delay: 0 });"}, {"line_number": 9, "line_content": "        cy.contains(\"I've completed this challenge\")"}, {"line_number": 10, "line_content": "          .should('not.be.disabled')"}, {"line_number": 11, "line_content": "          .click();"}, {"line_number": 12, "line_content": "        cy.intercept(`${Cypress.env('API_LOCATION')}/project-completed`).as("}, {"line_number": 13, "line_content": "          'challengeCompleted'"}, {"line_number": 14, "line_content": "        );"}, {"line_number": 15, "line_content": "        cy.contains('Submit and go to next challenge').click();"}, {"line_number": 16, "line_content": "        cy.wait('@challengeCompleted')"}, {"line_number": 17, "line_content": "          .its('response.statusCode')"}, {"line_number": 18, "line_content": "          .should('eq', 200);"}, {"line_number": 19, "line_content": "        cy.location().should(loc => {"}, {"line_number": 20, "line_content": "          expect(loc.pathname).to.not.include(url);"}, {"line_number": 21, "line_content": "        });"}, {"line_number": 22, "line_content": "      });"}, {"line_number": 23, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function getSuperOrder("}, {"line_number": 2, "line_content": "  superblock,"}, {"line_number": 3, "line_content": "  { showNewCurriculum } = { showNewCurriculum: false }"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  let orderMap = superBlockToOrder;"}, {"line_number": 6, "line_content": "  if (showNewCurriculum) {"}, {"line_number": 7, "line_content": "    orderMap = superBlockToNewOrder;"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": "  if ("}, {"line_number": 10, "line_content": "    !languagesWithAuditedBetaReleases.includes(process.env.CURRICULUM_LOCALE)"}, {"line_number": 11, "line_content": "  ) {"}, {"line_number": 12, "line_content": "    orderMap = superBlockNonAuditedOrder;"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "  if (typeof superblock !== 'string')"}, {"line_number": 15, "line_content": "    throw Error('superblock must be a string');"}, {"line_number": 16, "line_content": "  const order = orderMap[superblock];"}, {"line_number": 17, "line_content": "  if (typeof order === 'undefined')"}, {"line_number": 18, "line_content": "    throw Error(`${superblock} is not a valid superblock`);"}, {"line_number": 19, "line_content": "  return order;"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getSuperBlockFromDir(dir) {"}, {"line_number": 2, "line_content": "  const superBlock = directoryToSuperblock[dir];"}, {"line_number": 3, "line_content": "  if (!superBlock) throw Error(`${dir} does not map to a superblock`);"}, {"line_number": 4, "line_content": "  return directoryToSuperblock[dir];"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "async function newPageContext(browser) {"}, {"line_number": 2, "line_content": "  const page = await browser.newPage();"}, {"line_number": 3, "line_content": "  // it's needed for workers as context."}, {"line_number": 4, "line_content": "  await page.goto('http://127.0.0.1:8080/index.html');"}, {"line_number": 5, "line_content": "  return page;"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 89, "lines": [{"line_number": 1, "line_content": "async function setup() {"}, {"line_number": 2, "line_content": "  if (process.env.npm_config_superblock && process.env.npm_config_block) {"}, {"line_number": 3, "line_content": "    throw new Error(`Please do not use both a block and superblock as input.`);"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  // liveServer starts synchronously"}, {"line_number": 7, "line_content": "  liveServer.start({"}, {"line_number": 8, "line_content": "    host: '127.0.0.1',"}, {"line_number": 9, "line_content": "    port: '8080',"}, {"line_number": 10, "line_content": "    root: path.resolve(__dirname, 'stubs'),"}, {"line_number": 11, "line_content": "    mount: [['/js', path.join(clientPath, 'static/js')]],"}, {"line_number": 12, "line_content": "    open: false,"}, {"line_number": 13, "line_content": "    logLevel: 0"}, {"line_number": 14, "line_content": "  });"}, {"line_number": 15, "line_content": "  browser = await puppeteer.launch({"}, {"line_number": 16, "line_content": "    args: ["}, {"line_number": 17, "line_content": "      // Required for Docker version of Puppeteer"}, {"line_number": 18, "line_content": "      '--no-sandbox',"}, {"line_number": 19, "line_content": "      '--disable-setuid-sandbox',"}, {"line_number": 20, "line_content": "      // This will write shared memory files into /tmp instead of /dev/shm,"}, {"line_number": 21, "line_content": "      // because Docker\u2019s default for /dev/shm is 64MB"}, {"line_number": 22, "line_content": "      '--disable-dev-shm-usage'"}, {"line_number": 23, "line_content": "      // dumpio: true"}, {"line_number": 24, "line_content": "    ]"}, {"line_number": 25, "line_content": "  });"}, {"line_number": 26, "line_content": "  global.Worker = createPseudoWorker(await newPageContext(browser));"}, {"line_number": 27, "line_content": "  page = await newPageContext(browser);"}, {"line_number": 28, "line_content": "  await page.setViewport({ width: 300, height: 150 });"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "  const lang = testedLang();"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "  let challenges = await getChallenges(lang);"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "  // the next few statements create a list of all blocks and superblocks"}, {"line_number": 35, "line_content": "  // as they appear in the list of challenges"}, {"line_number": 36, "line_content": "  const blocks = challenges.map(({ block }) => block);"}, {"line_number": 37, "line_content": "  const superBlocks = challenges.map(({ superBlock }) => superBlock);"}, {"line_number": 38, "line_content": "  const targetBlockStrings = [...new Set(blocks.filter(el => Boolean(el)))];"}, {"line_number": 39, "line_content": "  const targetSuperBlockStrings = ["}, {"line_number": 40, "line_content": "    ...new Set(superBlocks.filter(el => Boolean(el)))"}, {"line_number": 41, "line_content": "  ];"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "  // the next few statements will filter challenges based on command variables"}, {"line_number": 44, "line_content": "  if (process.env.npm_config_superblock) {"}, {"line_number": 45, "line_content": "    const filter = stringSimilarity.findBestMatch("}, {"line_number": 46, "line_content": "      process.env.npm_config_superblock,"}, {"line_number": 47, "line_content": "      targetSuperBlockStrings"}, {"line_number": 48, "line_content": "    ).bestMatch.target;"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "    console.log(`\\nsuperBlock being tested: ${filter}`);"}, {"line_number": 51, "line_content": "    challenges = challenges.filter("}, {"line_number": 52, "line_content": "      challenge => challenge.superBlock === filter"}, {"line_number": 53, "line_content": "    );"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "    if (!challenges.length) {"}, {"line_number": 56, "line_content": "      throw new Error(`No challenges found with superBlock \"${filter}\"`);"}, {"line_number": 57, "line_content": "    }"}, {"line_number": 58, "line_content": "  }"}, {"line_number": 59, "line_content": ""}, {"line_number": 60, "line_content": "  if (process.env.npm_config_block) {"}, {"line_number": 61, "line_content": "    const filter = stringSimilarity.findBestMatch("}, {"line_number": 62, "line_content": "      process.env.npm_config_block,"}, {"line_number": 63, "line_content": "      targetBlockStrings"}, {"line_number": 64, "line_content": "    ).bestMatch.target;"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "    console.log(`\\nblock being tested: ${filter}`);"}, {"line_number": 67, "line_content": "    challenges = challenges.filter(challenge => challenge.block === filter);"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "    if (!challenges.length) {"}, {"line_number": 70, "line_content": "      throw new Error(`No challenges found with block \"${filter}\"`);"}, {"line_number": 71, "line_content": "    }"}, {"line_number": 72, "line_content": "  }"}, {"line_number": 73, "line_content": ""}, {"line_number": 74, "line_content": "  const meta = {};"}, {"line_number": 75, "line_content": "  for (const challenge of challenges) {"}, {"line_number": 76, "line_content": "    const dashedBlockName = challenge.block;"}, {"line_number": 77, "line_content": "    // certifications do not have dashedBlockName's and don't have metas so"}, {"line_number": 78, "line_content": "    // we can skip them."}, {"line_number": 79, "line_content": "    // TODO: omit certifications from the list of challenges"}, {"line_number": 80, "line_content": "    if (dashedBlockName && !meta[dashedBlockName]) {"}, {"line_number": 81, "line_content": "      meta[dashedBlockName] = await getMetaForBlock(dashedBlockName);"}, {"line_number": 82, "line_content": "    }"}, {"line_number": 83, "line_content": "  }"}, {"line_number": 84, "line_content": "  return {"}, {"line_number": 85, "line_content": "    meta,"}, {"line_number": 86, "line_content": "    challenges,"}, {"line_number": 87, "line_content": "    lang"}, {"line_number": 88, "line_content": "  };"}, {"line_number": 89, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function cleanup() {"}, {"line_number": 2, "line_content": "  if (browser) {"}, {"line_number": 3, "line_content": "    browser.close();"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  liveServer.shutdown();"}, {"line_number": 6, "line_content": "  spinner.stop();"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function runTests(challengeData) {"}, {"line_number": 2, "line_content": "  describe('Check challenges', function () {"}, {"line_number": 3, "line_content": "    after(function () {"}, {"line_number": 4, "line_content": "      cleanup();"}, {"line_number": 5, "line_content": "    });"}, {"line_number": 6, "line_content": "    populateTestsForLang(challengeData);"}, {"line_number": 7, "line_content": "  });"}, {"line_number": 8, "line_content": "  spinner.text = 'Testing';"}, {"line_number": 9, "line_content": "  run();"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "async function getChallenges(lang) {"}, {"line_number": 2, "line_content": "  const challenges = await getChallengesForLang(lang).then(curriculum =>"}, {"line_number": 3, "line_content": "    Object.keys(curriculum)"}, {"line_number": 4, "line_content": "      .map(key => curriculum[key].blocks)"}, {"line_number": 5, "line_content": "      .reduce((challengeArray, superBlock) => {"}, {"line_number": 6, "line_content": "        const challengesForBlock = Object.keys(superBlock).map("}, {"line_number": 7, "line_content": "          key => superBlock[key].challenges"}, {"line_number": 8, "line_content": "        );"}, {"line_number": 9, "line_content": "        return [...challengeArray, ...flatten(challengesForBlock)];"}, {"line_number": 10, "line_content": "      }, [])"}, {"line_number": 11, "line_content": "  );"}, {"line_number": 12, "line_content": "  // This matches the order Gatsby uses (via a GraphQL query). Ideally both"}, {"line_number": 13, "line_content": "  // should be sourced and sorted using a single query, but we're not there yet."}, {"line_number": 14, "line_content": "  return sortChallenges(challenges);"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 318, "lines": [{"line_number": 1, "line_content": "function populateTestsForLang({ lang, challenges, meta }) {"}, {"line_number": 2, "line_content": "  const mongoIds = new MongoIds();"}, {"line_number": 3, "line_content": "  const challengeTitles = new ChallengeTitles();"}, {"line_number": 4, "line_content": "  const validateChallenge = challengeSchemaValidator();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  describe('Assert meta order', function () {"}, {"line_number": 7, "line_content": "    /** This array can be used to skip a superblock - we'll use this"}, {"line_number": 8, "line_content": "     * when we are working on the new project-based curriculum for"}, {"line_number": 9, "line_content": "     * a superblock (because keeping those challenges in order is"}, {"line_number": 10, "line_content": "     * tricky and needs cleaning up before deploying)."}, {"line_number": 11, "line_content": "     */"}, {"line_number": 12, "line_content": "    const superBlocksUnderDevelopment = ["}, {"line_number": 13, "line_content": "      '2022/javascript-algorithms-and-data-structures'"}, {"line_number": 14, "line_content": "    ];"}, {"line_number": 15, "line_content": "    const superBlocks = new Set(["}, {"line_number": 16, "line_content": "      ...Object.values(meta)"}, {"line_number": 17, "line_content": "        .map(el => el.superBlock)"}, {"line_number": 18, "line_content": "        .filter(el => !superBlocksUnderDevelopment.includes(el))"}, {"line_number": 19, "line_content": "    ]);"}, {"line_number": 20, "line_content": "    superBlocks.forEach(superBlock => {"}, {"line_number": 21, "line_content": "      const filteredMeta = Object.values(meta)"}, {"line_number": 22, "line_content": "        .filter(el => el.superBlock === superBlock)"}, {"line_number": 23, "line_content": "        .sort((a, b) => a.order - b.order);"}, {"line_number": 24, "line_content": "      if (!filteredMeta.length) {"}, {"line_number": 25, "line_content": "        return;"}, {"line_number": 26, "line_content": "      }"}, {"line_number": 27, "line_content": "      it(`${superBlock} should have the same order in every meta`, function () {"}, {"line_number": 28, "line_content": "        const firstOrder = getSuperOrder(filteredMeta[0].superBlock, {"}, {"line_number": 29, "line_content": "          showNewCurriculum: process.env.SHOW_NEW_CURRICULUM"}, {"line_number": 30, "line_content": "        });"}, {"line_number": 31, "line_content": "        assert.isNumber(firstOrder);"}, {"line_number": 32, "line_content": "        assert.isTrue("}, {"line_number": 33, "line_content": "          filteredMeta.every("}, {"line_number": 34, "line_content": "            el =>"}, {"line_number": 35, "line_content": "              getSuperOrder(el.superBlock, {"}, {"line_number": 36, "line_content": "                showNewCurriculum: process.env.SHOW_NEW_CURRICULUM"}, {"line_number": 37, "line_content": "              }) === firstOrder"}, {"line_number": 38, "line_content": "          ),"}, {"line_number": 39, "line_content": "          'The superOrder properties are mismatched.'"}, {"line_number": 40, "line_content": "        );"}, {"line_number": 41, "line_content": "      });"}, {"line_number": 42, "line_content": "      filteredMeta.forEach((meta, index) => {"}, {"line_number": 43, "line_content": "        it(`${meta.superBlock} ${meta.name} must be in order`, function () {"}, {"line_number": 44, "line_content": "          assert.equal(meta.order, index);"}, {"line_number": 45, "line_content": "        });"}, {"line_number": 46, "line_content": "      });"}, {"line_number": 47, "line_content": "    });"}, {"line_number": 48, "line_content": "  });"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "  describe(`Check challenges (${lang})`, function () {"}, {"line_number": 51, "line_content": "    this.timeout(5000);"}, {"line_number": 52, "line_content": "    challenges.forEach((challenge, id) => {"}, {"line_number": 53, "line_content": "      const dashedBlockName = challenge.block;"}, {"line_number": 54, "line_content": "      // TODO: once certifications are not included in the list of challenges,"}, {"line_number": 55, "line_content": "      // stop returning early here."}, {"line_number": 56, "line_content": "      if (typeof dashedBlockName === 'undefined') return;"}, {"line_number": 57, "line_content": "      describe(challenge.block || 'No block', function () {"}, {"line_number": 58, "line_content": "        describe(challenge.title || 'No title', function () {"}, {"line_number": 59, "line_content": "          // Note: the title in meta.json are purely for human readability and"}, {"line_number": 60, "line_content": "          // do not include translations, so we do not validate against them."}, {"line_number": 61, "line_content": "          it('Matches an ID in meta.json', function () {"}, {"line_number": 62, "line_content": "            const index = meta[dashedBlockName]?.challengeOrder?.findIndex("}, {"line_number": 63, "line_content": "              arr => arr[0] === challenge.id"}, {"line_number": 64, "line_content": "            );"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "            if (index < 0) {"}, {"line_number": 67, "line_content": "              throw new AssertionError("}, {"line_number": 68, "line_content": "                `Cannot find ID \"${challenge.id}\" in meta.json file for block \"${dashedBlockName}\"`"}, {"line_number": 69, "line_content": "              );"}, {"line_number": 70, "line_content": "            }"}, {"line_number": 71, "line_content": "          });"}, {"line_number": 72, "line_content": ""}, {"line_number": 73, "line_content": "          it('Common checks', function () {"}, {"line_number": 74, "line_content": "            const result = validateChallenge(challenge);"}, {"line_number": 75, "line_content": ""}, {"line_number": 76, "line_content": "            if (result.error) {"}, {"line_number": 77, "line_content": "              throw new AssertionError(result.error);"}, {"line_number": 78, "line_content": "            }"}, {"line_number": 79, "line_content": "            const { id, title, block, dashedName } = challenge;"}, {"line_number": 80, "line_content": "            const pathAndTitle = `${block}/${dashedName}`;"}, {"line_number": 81, "line_content": "            mongoIds.check(id, title);"}, {"line_number": 82, "line_content": "            challengeTitles.check(title, pathAndTitle);"}, {"line_number": 83, "line_content": "          });"}, {"line_number": 84, "line_content": ""}, {"line_number": 85, "line_content": "          it('Has replaced all the English comments', () => {"}, {"line_number": 86, "line_content": "            // special cases are where this process breaks for some reason, but"}, {"line_number": 87, "line_content": "            // we have validated that the challenge gets parsed correctly."}, {"line_number": 88, "line_content": "            const specialCases = ["}, {"line_number": 89, "line_content": "              '587d7b84367417b2b2512b36',"}, {"line_number": 90, "line_content": "              '587d7b84367417b2b2512b37',"}, {"line_number": 91, "line_content": "              '587d7db0367417b2b2512b82',"}, {"line_number": 92, "line_content": "              '587d7dbe367417b2b2512bb8',"}, {"line_number": 93, "line_content": "              '5a24c314108439a4d4036161',"}, {"line_number": 94, "line_content": "              '5a24c314108439a4d4036154',"}, {"line_number": 95, "line_content": "              '5a94fe0569fb03452672e45c',"}, {"line_number": 96, "line_content": "              '5a94fe7769fb03452672e463',"}, {"line_number": 97, "line_content": "              '5a24c314108439a4d4036148'"}, {"line_number": 98, "line_content": "            ];"}, {"line_number": 99, "line_content": "            if (specialCases.includes(challenge.id)) return;"}, {"line_number": 100, "line_content": "            if ("}, {"line_number": 101, "line_content": "              lang === 'english' ||"}, {"line_number": 102, "line_content": "              !isAuditedCert(lang, challenge.superBlock)"}, {"line_number": 103, "line_content": "            ) {"}, {"line_number": 104, "line_content": "              return;"}, {"line_number": 105, "line_content": "            }"}, {"line_number": 106, "line_content": ""}, {"line_number": 107, "line_content": "            // If no .challengeFiles, then no seed:"}, {"line_number": 108, "line_content": "            if (!challenge.challengeFiles) return;"}, {"line_number": 109, "line_content": ""}, {"line_number": 110, "line_content": "            // - None of the translatable comments should appear in the"}, {"line_number": 111, "line_content": "            //   translations. While this is a crude check, no challenges"}, {"line_number": 112, "line_content": "            //   currently have the text of a comment elsewhere. If that happens"}, {"line_number": 113, "line_content": "            //   we can handle that challenge separately."}, {"line_number": 114, "line_content": "            TRANSLATABLE_COMMENTS.forEach(comment => {"}, {"line_number": 115, "line_content": "              const errorText = `English comment '${comment}' should be replaced with its translation`;"}, {"line_number": 116, "line_content": "              challenge.challengeFiles.forEach(challengeFile => {"}, {"line_number": 117, "line_content": "                if (challengeFile.contents.includes(comment))"}, {"line_number": 118, "line_content": "                  if (process.env.SHOW_UPCOMING_CHANGES == 'true') {"}, {"line_number": 119, "line_content": "                    console.warn(errorText);"}, {"line_number": 120, "line_content": "                  } else {"}, {"line_number": 121, "line_content": "                    throw Error(errorText);"}, {"line_number": 122, "line_content": "                  }"}, {"line_number": 123, "line_content": "              });"}, {"line_number": 124, "line_content": "            });"}, {"line_number": 125, "line_content": ""}, {"line_number": 126, "line_content": "            // - None of the translated comment texts should appear *outside* a"}, {"line_number": 127, "line_content": "            //   comment"}, {"line_number": 128, "line_content": "            challenge.challengeFiles.forEach(challengeFile => {"}, {"line_number": 129, "line_content": "              let comments = {};"}, {"line_number": 130, "line_content": ""}, {"line_number": 131, "line_content": "              // We get all the actual comments using the appropriate parsers"}, {"line_number": 132, "line_content": "              if (challengeFile.ext === 'html') {"}, {"line_number": 133, "line_content": "                const commentTypes = ['css', 'html', 'scriptJs'];"}, {"line_number": 134, "line_content": "                for (let type of commentTypes) {"}, {"line_number": 135, "line_content": "                  const newComments = commentExtractors[type]("}, {"line_number": 136, "line_content": "                    challengeFile.contents"}, {"line_number": 137, "line_content": "                  );"}, {"line_number": 138, "line_content": "                  for (const [key, value] of Object.entries(newComments)) {"}, {"line_number": 139, "line_content": "                    comments[key] = comments[key]"}, {"line_number": 140, "line_content": "                      ? comments[key] + value"}, {"line_number": 141, "line_content": "                      : value;"}, {"line_number": 142, "line_content": "                  }"}, {"line_number": 143, "line_content": "                }"}, {"line_number": 144, "line_content": "              } else {"}, {"line_number": 145, "line_content": "                comments = commentExtractors[challengeFile.ext]("}, {"line_number": 146, "line_content": "                  challengeFile.contents"}, {"line_number": 147, "line_content": "                );"}, {"line_number": 148, "line_content": "              }"}, {"line_number": 149, "line_content": ""}, {"line_number": 150, "line_content": "              /*"}, {"line_number": 151, "line_content": "               * Then we compare the number of times each comment appears in the"}, {"line_number": 152, "line_content": "               * translated text (commentMap) with the number of replacements"}, {"line_number": 153, "line_content": "               * made during translation (challenge.__commentCounts). If they"}, {"line_number": 154, "line_content": "               * differ, the translation must have gone wrong"}, {"line_number": 155, "line_content": "               */"}, {"line_number": 156, "line_content": ""}, {"line_number": 157, "line_content": "              const commentMap = new Map(Object.entries(comments));"}, {"line_number": 158, "line_content": ""}, {"line_number": 159, "line_content": "              if (isEmpty(challenge.__commentCounts) && isEmpty(commentMap))"}, {"line_number": 160, "line_content": "                return;"}, {"line_number": 161, "line_content": ""}, {"line_number": 162, "line_content": "              if ("}, {"line_number": 163, "line_content": "                process.env.SHOW_NEW_CURRICULUM !== 'true' &&"}, {"line_number": 164, "line_content": "                !isEqual(commentMap, challenge.__commentCounts)"}, {"line_number": 165, "line_content": "              )"}, {"line_number": 166, "line_content": "                throw Error(`Mismatch in ${challenge.title}. Replaced comments:"}, {"line_number": 167, "line_content": "${inspect(challenge.__commentCounts)}"}, {"line_number": 168, "line_content": "Comments in translated text:"}, {"line_number": 169, "line_content": "${inspect(commentMap)}"}, {"line_number": 170, "line_content": "`);"}, {"line_number": 171, "line_content": "            });"}, {"line_number": 172, "line_content": "          });"}, {"line_number": 173, "line_content": ""}, {"line_number": 174, "line_content": "          const { challengeType } = challenge;"}, {"line_number": 175, "line_content": "          if ("}, {"line_number": 176, "line_content": "            challengeType !== challengeTypes.html &&"}, {"line_number": 177, "line_content": "            challengeType !== challengeTypes.js &&"}, {"line_number": 178, "line_content": "            challengeType !== challengeTypes.bonfire &&"}, {"line_number": 179, "line_content": "            challengeType !== challengeTypes.modern &&"}, {"line_number": 180, "line_content": "            challengeType !== challengeTypes.backend"}, {"line_number": 181, "line_content": "          ) {"}, {"line_number": 182, "line_content": "            return;"}, {"line_number": 183, "line_content": "          }"}, {"line_number": 184, "line_content": ""}, {"line_number": 185, "line_content": "          let { tests = [] } = challenge;"}, {"line_number": 186, "line_content": "          tests = tests.filter(test => !!test.testString);"}, {"line_number": 187, "line_content": "          if (tests.length === 0) {"}, {"line_number": 188, "line_content": "            it('Check tests. No tests.');"}, {"line_number": 189, "line_content": "            return;"}, {"line_number": 190, "line_content": "          }"}, {"line_number": 191, "line_content": ""}, {"line_number": 192, "line_content": "          describe('Check tests syntax', function () {"}, {"line_number": 193, "line_content": "            tests.forEach(test => {"}, {"line_number": 194, "line_content": "              it(`Check for: ${test.text}`, function () {"}, {"line_number": 195, "line_content": "                assert.doesNotThrow(() => new vm.Script(test.testString));"}, {"line_number": 196, "line_content": "              });"}, {"line_number": 197, "line_content": "            });"}, {"line_number": 198, "line_content": "          });"}, {"line_number": 199, "line_content": ""}, {"line_number": 200, "line_content": "          if (challengeType === challengeTypes.backend) {"}, {"line_number": 201, "line_content": "            it('Check tests is not implemented.');"}, {"line_number": 202, "line_content": "            return;"}, {"line_number": 203, "line_content": "          }"}, {"line_number": 204, "line_content": ""}, {"line_number": 205, "line_content": "          const buildChallenge ="}, {"line_number": 206, "line_content": "            challengeType === challengeTypes.js ||"}, {"line_number": 207, "line_content": "            challengeType === challengeTypes.bonfire"}, {"line_number": 208, "line_content": "              ? buildJSChallenge"}, {"line_number": 209, "line_content": "              : buildDOMChallenge;"}, {"line_number": 210, "line_content": ""}, {"line_number": 211, "line_content": "          it('Test suite must fail on the initial contents', async function () {"}, {"line_number": 212, "line_content": "            this.timeout(5000 * tests.length + 1000);"}, {"line_number": 213, "line_content": "            // suppress errors in the console."}, {"line_number": 214, "line_content": "            const oldConsoleError = console.error;"}, {"line_number": 215, "line_content": "            console.error = () => {};"}, {"line_number": 216, "line_content": "            let fails = false;"}, {"line_number": 217, "line_content": "            let testRunner;"}, {"line_number": 218, "line_content": "            try {"}, {"line_number": 219, "line_content": "              testRunner = await createTestRunner("}, {"line_number": 220, "line_content": "                challenge,"}, {"line_number": 221, "line_content": "                [],"}, {"line_number": 222, "line_content": "                buildChallenge"}, {"line_number": 223, "line_content": "              );"}, {"line_number": 224, "line_content": "            } catch {"}, {"line_number": 225, "line_content": "              fails = true;"}, {"line_number": 226, "line_content": "            }"}, {"line_number": 227, "line_content": "            if (!fails) {"}, {"line_number": 228, "line_content": "              for (const test of tests) {"}, {"line_number": 229, "line_content": "                try {"}, {"line_number": 230, "line_content": "                  await testRunner(test);"}, {"line_number": 231, "line_content": "                } catch (e) {"}, {"line_number": 232, "line_content": "                  fails = true;"}, {"line_number": 233, "line_content": "                  break;"}, {"line_number": 234, "line_content": "                }"}, {"line_number": 235, "line_content": "              }"}, {"line_number": 236, "line_content": "            }"}, {"line_number": 237, "line_content": "            console.error = oldConsoleError;"}, {"line_number": 238, "line_content": "            assert(fails, 'Test suit does not fail on the initial contents');"}, {"line_number": 239, "line_content": "          });"}, {"line_number": 240, "line_content": ""}, {"line_number": 241, "line_content": "          let { solutions = [] } = challenge;"}, {"line_number": 242, "line_content": ""}, {"line_number": 243, "line_content": "          // if there's an empty string as solution, this is likely a mistake"}, {"line_number": 244, "line_content": "          // TODO: what does this look like now? (this being detection of empty"}, {"line_number": 245, "line_content": "          // lines in solutions - rather than entirely missing solutions)"}, {"line_number": 246, "line_content": ""}, {"line_number": 247, "line_content": "          // We need to track where the solution came from to give better"}, {"line_number": 248, "line_content": "          // feedback if the solution is failing."}, {"line_number": 249, "line_content": "          let solutionFromNext = false;"}, {"line_number": 250, "line_content": ""}, {"line_number": 251, "line_content": "          if (isEmpty(solutions)) {"}, {"line_number": 252, "line_content": "            // if there are no solutions in the challenge, it's assumed the next"}, {"line_number": 253, "line_content": "            // challenge's seed will be a solution to the current challenge."}, {"line_number": 254, "line_content": "            // This is expected to happen in the project based curriculum."}, {"line_number": 255, "line_content": ""}, {"line_number": 256, "line_content": "            const nextChallenge = challenges[id + 1];"}, {"line_number": 257, "line_content": ""}, {"line_number": 258, "line_content": "            if (nextChallenge) {"}, {"line_number": 259, "line_content": "              const solutionFiles = cloneDeep(nextChallenge.challengeFiles);"}, {"line_number": 260, "line_content": "              const solutionFilesWithEditableContents = solutionFiles.map("}, {"line_number": 261, "line_content": "                file => ({"}, {"line_number": 262, "line_content": "                  ...file,"}, {"line_number": 263, "line_content": "                  editableContents: getLines("}, {"line_number": 264, "line_content": "                    file.contents,"}, {"line_number": 265, "line_content": "                    file.editableRegionBoundaries"}, {"line_number": 266, "line_content": "                  )"}, {"line_number": 267, "line_content": "                })"}, {"line_number": 268, "line_content": "              );"}, {"line_number": 269, "line_content": "              // Since there is only one seed, there can only be one solution,"}, {"line_number": 270, "line_content": "              // but the tests assume solutions is an array."}, {"line_number": 271, "line_content": "              solutions = [solutionFilesWithEditableContents];"}, {"line_number": 272, "line_content": "              solutionFromNext = true;"}, {"line_number": 273, "line_content": "            } else {"}, {"line_number": 274, "line_content": "              throw Error("}, {"line_number": 275, "line_content": "                `solution omitted for ${challenge.superBlock} ${challenge.block} ${challenge.title}`"}, {"line_number": 276, "line_content": "              );"}, {"line_number": 277, "line_content": "            }"}, {"line_number": 278, "line_content": "          }"}, {"line_number": 279, "line_content": ""}, {"line_number": 280, "line_content": "          // TODO: the no-solution filtering is a little convoluted:"}, {"line_number": 281, "line_content": "          const noSolution = new RegExp('// solution required');"}, {"line_number": 282, "line_content": ""}, {"line_number": 283, "line_content": "          const filteredSolutions = solutions.filter(solution => {"}, {"line_number": 284, "line_content": "            return !isEmpty("}, {"line_number": 285, "line_content": "              solution.filter("}, {"line_number": 286, "line_content": "                challengeFile => !noSolution.test(challengeFile.contents)"}, {"line_number": 287, "line_content": "              )"}, {"line_number": 288, "line_content": "            );"}, {"line_number": 289, "line_content": "          });"}, {"line_number": 290, "line_content": ""}, {"line_number": 291, "line_content": "          if (isEmpty(filteredSolutions)) {"}, {"line_number": 292, "line_content": "            it('Check tests. No solutions');"}, {"line_number": 293, "line_content": "            return;"}, {"line_number": 294, "line_content": "          }"}, {"line_number": 295, "line_content": ""}, {"line_number": 296, "line_content": "          describe('Check tests against solutions', function () {"}, {"line_number": 297, "line_content": "            solutions.forEach((solution, index) => {"}, {"line_number": 298, "line_content": "              it(`Solution ${"}, {"line_number": 299, "line_content": "                index + 1"}, {"line_number": 300, "line_content": "              } must pass the tests`, async function () {"}, {"line_number": 301, "line_content": "                this.timeout(5000 * tests.length + 2000);"}, {"line_number": 302, "line_content": "                const testRunner = await createTestRunner("}, {"line_number": 303, "line_content": "                  challenge,"}, {"line_number": 304, "line_content": "                  solution,"}, {"line_number": 305, "line_content": "                  buildChallenge,"}, {"line_number": 306, "line_content": "                  solutionFromNext"}, {"line_number": 307, "line_content": "                );"}, {"line_number": 308, "line_content": "                for (const test of tests) {"}, {"line_number": 309, "line_content": "                  await testRunner(test);"}, {"line_number": 310, "line_content": "                }"}, {"line_number": 311, "line_content": "              });"}, {"line_number": 312, "line_content": "            });"}, {"line_number": 313, "line_content": "          });"}, {"line_number": 314, "line_content": "        });"}, {"line_number": 315, "line_content": "      });"}, {"line_number": 316, "line_content": "    });"}, {"line_number": 317, "line_content": "  });"}, {"line_number": 318, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 53, "lines": [{"line_number": 1, "line_content": "async function createTestRunner("}, {"line_number": 2, "line_content": "  challenge,"}, {"line_number": 3, "line_content": "  solutionFiles,"}, {"line_number": 4, "line_content": "  buildChallenge,"}, {"line_number": 5, "line_content": "  solutionFromNext"}, {"line_number": 6, "line_content": ") {"}, {"line_number": 7, "line_content": "  const { required = [], template, removeComments } = challenge;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  const challengeFiles = replaceChallengeFilesContentsWithSolutions("}, {"line_number": 10, "line_content": "    challenge.challengeFiles,"}, {"line_number": 11, "line_content": "    solutionFiles"}, {"line_number": 12, "line_content": "  );"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "  const { build, sources, loadEnzyme } = await buildChallenge("}, {"line_number": 15, "line_content": "    {"}, {"line_number": 16, "line_content": "      challengeFiles,"}, {"line_number": 17, "line_content": "      required,"}, {"line_number": 18, "line_content": "      template"}, {"line_number": 19, "line_content": "    },"}, {"line_number": 20, "line_content": "    { usesTestRunner: true }"}, {"line_number": 21, "line_content": "  );"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  const code = {"}, {"line_number": 24, "line_content": "    contents: sources.index,"}, {"line_number": 25, "line_content": "    editableContents: sources.editableContents"}, {"line_number": 26, "line_content": "  };"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "  const evaluator = await (buildChallenge === buildDOMChallenge"}, {"line_number": 29, "line_content": "    ? getContextEvaluator(build, sources, code, loadEnzyme)"}, {"line_number": 30, "line_content": "    : getWorkerEvaluator(build, sources, code, removeComments));"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "  return async ({ text, testString }) => {"}, {"line_number": 33, "line_content": "    try {"}, {"line_number": 34, "line_content": "      const { pass, err } = await evaluator.evaluate(testString, 5000);"}, {"line_number": 35, "line_content": "      if (!pass) {"}, {"line_number": 36, "line_content": "        throw err;"}, {"line_number": 37, "line_content": "      }"}, {"line_number": 38, "line_content": "    } catch (err) {"}, {"line_number": 39, "line_content": "      // add more info to the error so the failing test can be identified."}, {"line_number": 40, "line_content": "      text = 'Test text: ' + text;"}, {"line_number": 41, "line_content": "      const newMessage = solutionFromNext"}, {"line_number": 42, "line_content": "        ? 'Check next step for solution!\\n' + text"}, {"line_number": 43, "line_content": "        : text;"}, {"line_number": 44, "line_content": "      // if the stack is missing, the message should be included. Otherwise it"}, {"line_number": 45, "line_content": "      // is redundant."}, {"line_number": 46, "line_content": "      err.message = err.stack"}, {"line_number": 47, "line_content": "        ? newMessage"}, {"line_number": 48, "line_content": "        : `${newMessage}"}, {"line_number": 49, "line_content": "      ${err.message}`;"}, {"line_number": 50, "line_content": "      throw err;"}, {"line_number": 51, "line_content": "    }"}, {"line_number": 52, "line_content": "  };"}, {"line_number": 53, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function replaceChallengeFilesContentsWithSolutions("}, {"line_number": 2, "line_content": "  challengeFiles,"}, {"line_number": 3, "line_content": "  solutionFiles"}, {"line_number": 4, "line_content": ") {"}, {"line_number": 5, "line_content": "  return challengeFiles.map(file => {"}, {"line_number": 6, "line_content": "    const matchingSolutionFile = solutionFiles.find("}, {"line_number": 7, "line_content": "      ({ ext, name }) => ext === file.ext && file.name === name"}, {"line_number": 8, "line_content": "    );"}, {"line_number": 9, "line_content": "    if (!matchingSolutionFile) {"}, {"line_number": 10, "line_content": "      throw Error(`No matching solution file found`);"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "    return {"}, {"line_number": 13, "line_content": "      ...file,"}, {"line_number": 14, "line_content": "      contents: matchingSolutionFile.contents,"}, {"line_number": 15, "line_content": "      editableContents: matchingSolutionFile.editableContents"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": "  });"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "async function getContextEvaluator(build, sources, code, loadEnzyme) {"}, {"line_number": 2, "line_content": "  await initializeTestRunner(build, sources, code, loadEnzyme);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  return {"}, {"line_number": 5, "line_content": "    evaluate: async (testString, timeout) =>"}, {"line_number": 6, "line_content": "      Promise.race(["}, {"line_number": 7, "line_content": "        new Promise((_, reject) =>"}, {"line_number": 8, "line_content": "          setTimeout(() => reject('timeout'), timeout)"}, {"line_number": 9, "line_content": "        ),"}, {"line_number": 10, "line_content": "        await page.evaluate(async testString => {"}, {"line_number": 11, "line_content": "          return await document.__runTest(testString);"}, {"line_number": 12, "line_content": "        }, testString)"}, {"line_number": 13, "line_content": "      ])"}, {"line_number": 14, "line_content": "  };"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function getWorkerEvaluator(build, sources, code, removeComments) {"}, {"line_number": 2, "line_content": "  const testWorker = createWorker(testEvaluator, { terminateWorker: true });"}, {"line_number": 3, "line_content": "  return {"}, {"line_number": 4, "line_content": "    evaluate: async (testString, timeout) =>"}, {"line_number": 5, "line_content": "      await testWorker.execute("}, {"line_number": 6, "line_content": "        { testString, build, code, sources, removeComments },"}, {"line_number": 7, "line_content": "        timeout"}, {"line_number": 8, "line_content": "      ).done"}, {"line_number": 9, "line_content": "  };"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "async function initializeTestRunner(build, sources, code, loadEnzyme) {"}, {"line_number": 2, "line_content": "  await page.reload();"}, {"line_number": 3, "line_content": "  await page.setContent(build);"}, {"line_number": 4, "line_content": "  await page.evaluate("}, {"line_number": 5, "line_content": "    async (code, sources, loadEnzyme) => {"}, {"line_number": 6, "line_content": "      const getUserInput = fileName => sources[fileName];"}, {"line_number": 7, "line_content": "      await document.__initTestFrame({"}, {"line_number": 8, "line_content": "        code: sources,"}, {"line_number": 9, "line_content": "        getUserInput,"}, {"line_number": 10, "line_content": "        loadEnzyme"}, {"line_number": 11, "line_content": "      });"}, {"line_number": 12, "line_content": "    },"}, {"line_number": 13, "line_content": "    code,"}, {"line_number": 14, "line_content": "    sources,"}, {"line_number": 15, "line_content": "    loadEnzyme"}, {"line_number": 16, "line_content": "  );"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function extractComments(html) {"}, {"line_number": 2, "line_content": "  return processor.processSync(vfile(html)).data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 83, "lines": [{"line_number": 1, "line_content": "function createPseudoWorker(context) {"}, {"line_number": 2, "line_content": "  class PseudoWorker {"}, {"line_number": 3, "line_content": "    constructor(path) {"}, {"line_number": 4, "line_content": "      this.terminated = false;"}, {"line_number": 5, "line_content": "      this.worker = context.evaluateHandle(path => new Worker(path), path);"}, {"line_number": 6, "line_content": "      this.listenToWorker('onmessage');"}, {"line_number": 7, "line_content": "      this.listenToWorker('onerror');"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    terminate() {"}, {"line_number": 11, "line_content": "      this.terminated = true;"}, {"line_number": 12, "line_content": "      this.worker.then(worker =>"}, {"line_number": 13, "line_content": "        context.evaluate(worker => worker.terminate(), worker)"}, {"line_number": 14, "line_content": "      );"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    listenToWorker(eventName) {"}, {"line_number": 18, "line_content": "      this.worker.then(async worker => {"}, {"line_number": 19, "line_content": "        const producer = await context.evaluateHandle("}, {"line_number": 20, "line_content": "          (worker, eventName) => {"}, {"line_number": 21, "line_content": "            let callback;"}, {"line_number": 22, "line_content": "            const queue = [];"}, {"line_number": 23, "line_content": "            function send(event) {"}, {"line_number": 24, "line_content": "              if (!queue.length && callback) {"}, {"line_number": 25, "line_content": "                callback();"}, {"line_number": 26, "line_content": "              }"}, {"line_number": 27, "line_content": "              queue.push(event);"}, {"line_number": 28, "line_content": "            }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "            worker[eventName] = e => send(e);"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "            const resolver = resolve => (callback = resolve);"}, {"line_number": 33, "line_content": "            async function* produce() {"}, {"line_number": 34, "line_content": "              while (true) {"}, {"line_number": 35, "line_content": "                while (queue.length) {"}, {"line_number": 36, "line_content": "                  yield queue.shift();"}, {"line_number": 37, "line_content": "                }"}, {"line_number": 38, "line_content": "                await new Promise(resolver);"}, {"line_number": 39, "line_content": "              }"}, {"line_number": 40, "line_content": "            }"}, {"line_number": 41, "line_content": "            return produce();"}, {"line_number": 42, "line_content": "          },"}, {"line_number": 43, "line_content": "          worker,"}, {"line_number": 44, "line_content": "          eventName"}, {"line_number": 45, "line_content": "        );"}, {"line_number": 46, "line_content": "        while (!this.terminated) {"}, {"line_number": 47, "line_content": "          try {"}, {"line_number": 48, "line_content": "            const data = await context.evaluate("}, {"line_number": 49, "line_content": "              producer =>"}, {"line_number": 50, "line_content": "                producer"}, {"line_number": 51, "line_content": "                  .next()"}, {"line_number": 52, "line_content": "                  .then(({ value: { data, message } }) => ({ data, message })),"}, {"line_number": 53, "line_content": "              producer"}, {"line_number": 54, "line_content": "            );"}, {"line_number": 55, "line_content": "            if (this[eventName]) {"}, {"line_number": 56, "line_content": "              this[eventName](data);"}, {"line_number": 57, "line_content": "            }"}, {"line_number": 58, "line_content": "          } catch (err) {"}, {"line_number": 59, "line_content": "            break;"}, {"line_number": 60, "line_content": "          }"}, {"line_number": 61, "line_content": "        }"}, {"line_number": 62, "line_content": "      });"}, {"line_number": 63, "line_content": "    }"}, {"line_number": 64, "line_content": ""}, {"line_number": 65, "line_content": "    async postMessage(msg) {"}, {"line_number": 66, "line_content": "      if (this.terminated) {"}, {"line_number": 67, "line_content": "        throw new Error('Worker is terminated.');"}, {"line_number": 68, "line_content": "      }"}, {"line_number": 69, "line_content": "      try {"}, {"line_number": 70, "line_content": "        await this.worker.then(worker =>"}, {"line_number": 71, "line_content": "          worker"}, {"line_number": 72, "line_content": "            .executionContext()"}, {"line_number": 73, "line_content": "            .evaluate((worker, msg) => worker.postMessage(msg), worker, msg)"}, {"line_number": 74, "line_content": "        );"}, {"line_number": 75, "line_content": "      } catch (e) {"}, {"line_number": 76, "line_content": "        if (this.onerror) {"}, {"line_number": 77, "line_content": "          this.onerror({ message: e.message });"}, {"line_number": 78, "line_content": "        }"}, {"line_number": 79, "line_content": "      }"}, {"line_number": 80, "line_content": "    }"}, {"line_number": 81, "line_content": "  }"}, {"line_number": 82, "line_content": "  return PseudoWorker;"}, {"line_number": 83, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function send(event) {"}, {"line_number": 2, "line_content": "              if (!queue.length && callback) {"}, {"line_number": 3, "line_content": "                callback();"}, {"line_number": 4, "line_content": "              }"}, {"line_number": 5, "line_content": "              queue.push(event);"}, {"line_number": 6, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function* produce() {"}, {"line_number": 2, "line_content": "              while (true) {"}, {"line_number": 3, "line_content": "                while (queue.length) {"}, {"line_number": 4, "line_content": "                  yield queue.shift();"}, {"line_number": 5, "line_content": "                }"}, {"line_number": 6, "line_content": "                await new Promise(resolver);"}, {"line_number": 7, "line_content": "              }"}, {"line_number": 8, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function extractComments(html) {"}, {"line_number": 2, "line_content": "  return processor.processSync(vfile(html)).data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function commentToData(file, comment) {"}, {"line_number": 2, "line_content": "  if (file.data[comment]) {"}, {"line_number": 3, "line_content": "    file.data[comment]++;"}, {"line_number": 4, "line_content": "  } else {"}, {"line_number": 5, "line_content": "    file.data[comment] = 1;"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function extractComments(html) {"}, {"line_number": 2, "line_content": "  return processor.processSync(vfile(html)).data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function extractComments(jsx) {"}, {"line_number": 2, "line_content": "  let comments = [];"}, {"line_number": 3, "line_content": "  const file = { data: {} };"}, {"line_number": 4, "line_content": "  parser.parse(jsx, { onComment: comments, ecmaVersion: 2020 });"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  comments"}, {"line_number": 7, "line_content": "    .map(({ value }) => value.trim())"}, {"line_number": 8, "line_content": "    .forEach(comment => commentToData(file, comment));"}, {"line_number": 9, "line_content": "  return file.data;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function extractComments(js) {"}, {"line_number": 2, "line_content": "  let comments = [];"}, {"line_number": 3, "line_content": "  const file = { data: {} };"}, {"line_number": 4, "line_content": "  try {"}, {"line_number": 5, "line_content": "    parser.parse(js, { onComment: comments, ecmaVersion: 2020 });"}, {"line_number": 6, "line_content": "  } catch {"}, {"line_number": 7, "line_content": "    throw Error(`extract-js-comments could not parse the code below, this challenge has invalid syntax:"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "${js}"}, {"line_number": 10, "line_content": "`);"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "  comments"}, {"line_number": 13, "line_content": "    .map(({ value }) => value.trim())"}, {"line_number": 14, "line_content": "    .forEach(comment => commentToData(file, comment));"}, {"line_number": 15, "line_content": "  return file.data;"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function visitComments(node, cb) {"}, {"line_number": 2, "line_content": "  node.rules.forEach(rule => {"}, {"line_number": 3, "line_content": "    if (rule.type === 'rule') {"}, {"line_number": 4, "line_content": "      visitDeclarations(rule.declarations, cb);"}, {"line_number": 5, "line_content": "    } else if (rule.type === 'comment') {"}, {"line_number": 6, "line_content": "      cb(rule.comment);"}, {"line_number": 7, "line_content": "    } else if (rule.type === 'media') {"}, {"line_number": 8, "line_content": "      visitComments(rule, cb);"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "  });"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function visitDeclarations(declarations, cb) {"}, {"line_number": 2, "line_content": "  declarations.forEach(dec => {"}, {"line_number": 3, "line_content": "    if (dec.type === 'comment') {"}, {"line_number": 4, "line_content": "      cb(dec.comment);"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": "  });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    if (isEmpty(file.data)) file.data = {};"}, {"line_number": 6, "line_content": "    visit(tree, { type: 'element', tagName: 'style' }, styleVisitor);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    function styleVisitor(node) {"}, {"line_number": 9, "line_content": "      visit(node, 'text', cssVisitor);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    function cssVisitor(node) {"}, {"line_number": 12, "line_content": "      const ast = css.parse(node.value);"}, {"line_number": 13, "line_content": "      visitComments(ast.stylesheet, comment =>"}, {"line_number": 14, "line_content": "        commentToData(file, comment.trim())"}, {"line_number": 15, "line_content": "      );"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    if (isEmpty(file.data)) file.data = {};"}, {"line_number": 3, "line_content": "    visit(tree, { type: 'element', tagName: 'style' }, styleVisitor);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    function styleVisitor(node) {"}, {"line_number": 6, "line_content": "      visit(node, 'text', cssVisitor);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    function cssVisitor(node) {"}, {"line_number": 9, "line_content": "      const ast = css.parse(node.value);"}, {"line_number": 10, "line_content": "      visitComments(ast.stylesheet, comment =>"}, {"line_number": 11, "line_content": "        commentToData(file, comment.trim())"}, {"line_number": 12, "line_content": "      );"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function styleVisitor(node) {"}, {"line_number": 2, "line_content": "      visit(node, 'text', cssVisitor);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function cssVisitor(node) {"}, {"line_number": 2, "line_content": "      const ast = css.parse(node.value);"}, {"line_number": 3, "line_content": "      visitComments(ast.stylesheet, comment =>"}, {"line_number": 4, "line_content": "        commentToData(file, comment.trim())"}, {"line_number": 5, "line_content": "      );"}, {"line_number": 6, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    if (isEmpty(file.data)) {"}, {"line_number": 6, "line_content": "      file.data = {};"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    visit(tree, 'comment', visitor);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    function visitor(node) {"}, {"line_number": 11, "line_content": "      commentToData(file, node.value.trim());"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    if (isEmpty(file.data)) {"}, {"line_number": 3, "line_content": "      file.data = {};"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    visit(tree, 'comment', visitor);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    function visitor(node) {"}, {"line_number": 8, "line_content": "      commentToData(file, node.value.trim());"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function visitor(node) {"}, {"line_number": 2, "line_content": "      commentToData(file, node.value.trim());"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function plugin() {"}, {"line_number": 2, "line_content": "  return transformer;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  function transformer(tree, file) {"}, {"line_number": 5, "line_content": "    if (isEmpty(file.data)) file.data = {};"}, {"line_number": 6, "line_content": "    visit(tree, { type: 'element', tagName: 'script' }, scriptVisitor);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    function scriptVisitor(node) {"}, {"line_number": 9, "line_content": "      visit(node, 'text', jsVisitor);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    function jsVisitor(node) {"}, {"line_number": 12, "line_content": "      let comments = [];"}, {"line_number": 13, "line_content": "      parser.parse(node.value, { onComment: comments, ecmaVersion: 2020 });"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "      comments"}, {"line_number": 16, "line_content": "        .map(({ value }) => value.trim())"}, {"line_number": 17, "line_content": "        .forEach(comment => commentToData(file, comment));"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function transformer(tree, file) {"}, {"line_number": 2, "line_content": "    if (isEmpty(file.data)) file.data = {};"}, {"line_number": 3, "line_content": "    visit(tree, { type: 'element', tagName: 'script' }, scriptVisitor);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    function scriptVisitor(node) {"}, {"line_number": 6, "line_content": "      visit(node, 'text', jsVisitor);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    function jsVisitor(node) {"}, {"line_number": 9, "line_content": "      let comments = [];"}, {"line_number": 10, "line_content": "      parser.parse(node.value, { onComment: comments, ecmaVersion: 2020 });"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      comments"}, {"line_number": 13, "line_content": "        .map(({ value }) => value.trim())"}, {"line_number": 14, "line_content": "        .forEach(comment => commentToData(file, comment));"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function scriptVisitor(node) {"}, {"line_number": 2, "line_content": "      visit(node, 'text', jsVisitor);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function jsVisitor(node) {"}, {"line_number": 2, "line_content": "      let comments = [];"}, {"line_number": 3, "line_content": "      parser.parse(node.value, { onComment: comments, ecmaVersion: 2020 });"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "      comments"}, {"line_number": 6, "line_content": "        .map(({ value }) => value.trim())"}, {"line_number": 7, "line_content": "        .forEach(comment => commentToData(file, comment));"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getTranslatableComments(dictionariesDir) {"}, {"line_number": 2, "line_content": "  const COMMENTS_TO_TRANSLATE = require(path.resolve("}, {"line_number": 3, "line_content": "    dictionariesDir,"}, {"line_number": 4, "line_content": "    'english',"}, {"line_number": 5, "line_content": "    'comments.json'"}, {"line_number": 6, "line_content": "  ));"}, {"line_number": 7, "line_content": "  return Object.values(COMMENTS_TO_TRANSLATE);"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 58, "lines": [{"line_number": 1, "line_content": "function createCommentMap(dictionariesDir) {"}, {"line_number": 2, "line_content": "  // get all the languages for which there are dictionaries."}, {"line_number": 3, "line_content": "  const languages = fs"}, {"line_number": 4, "line_content": "    .readdirSync(dictionariesDir)"}, {"line_number": 5, "line_content": "    .filter(x => x !== 'english');"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  // get all their dictionaries"}, {"line_number": 8, "line_content": "  const dictionaries = languages.reduce("}, {"line_number": 9, "line_content": "    (acc, lang) => ({"}, {"line_number": 10, "line_content": "      ...acc,"}, {"line_number": 11, "line_content": "      [lang]: require(path.resolve(dictionariesDir, lang, 'comments.json'))"}, {"line_number": 12, "line_content": "    }),"}, {"line_number": 13, "line_content": "    {}"}, {"line_number": 14, "line_content": "  );"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  // get the english dicts"}, {"line_number": 17, "line_content": "  const COMMENTS_TO_TRANSLATE = require(path.resolve("}, {"line_number": 18, "line_content": "    dictionariesDir,"}, {"line_number": 19, "line_content": "    'english',"}, {"line_number": 20, "line_content": "    'comments.json'"}, {"line_number": 21, "line_content": "  ));"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  const COMMENTS_TO_NOT_TRANSLATE = require(path.resolve("}, {"line_number": 24, "line_content": "    dictionariesDir,"}, {"line_number": 25, "line_content": "    'english',"}, {"line_number": 26, "line_content": "    'comments-to-not-translate'"}, {"line_number": 27, "line_content": "  ));"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "  // map from english comment text to translations"}, {"line_number": 30, "line_content": "  const translatedCommentMap = Object.entries(COMMENTS_TO_TRANSLATE).reduce("}, {"line_number": 31, "line_content": "    (acc, [id, text]) => {"}, {"line_number": 32, "line_content": "      return {"}, {"line_number": 33, "line_content": "        ...acc,"}, {"line_number": 34, "line_content": "        [text]: getTranslationEntry(dictionaries, { engId: id, text })"}, {"line_number": 35, "line_content": "      };"}, {"line_number": 36, "line_content": "    },"}, {"line_number": 37, "line_content": "    {}"}, {"line_number": 38, "line_content": "  );"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "  // map from english comment text to itself"}, {"line_number": 41, "line_content": "  const untranslatableCommentMap = Object.values("}, {"line_number": 42, "line_content": "    COMMENTS_TO_NOT_TRANSLATE"}, {"line_number": 43, "line_content": "  ).reduce((acc, text) => {"}, {"line_number": 44, "line_content": "    const englishEntry = languages.reduce("}, {"line_number": 45, "line_content": "      (acc, lang) => ({"}, {"line_number": 46, "line_content": "        ...acc,"}, {"line_number": 47, "line_content": "        [lang]: text"}, {"line_number": 48, "line_content": "      }),"}, {"line_number": 49, "line_content": "      {}"}, {"line_number": 50, "line_content": "    );"}, {"line_number": 51, "line_content": "    return {"}, {"line_number": 52, "line_content": "      ...acc,"}, {"line_number": 53, "line_content": "      [text]: englishEntry"}, {"line_number": 54, "line_content": "    };"}, {"line_number": 55, "line_content": "  }, {});"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "  return { ...translatedCommentMap, ...untranslatableCommentMap };"}, {"line_number": 58, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getTranslationEntry(dicts, { engId, text }) {"}, {"line_number": 2, "line_content": "  return Object.keys(dicts).reduce((acc, lang) => {"}, {"line_number": 3, "line_content": "    const entry = dicts[lang][engId];"}, {"line_number": 4, "line_content": "    if (entry) {"}, {"line_number": 5, "line_content": "      return { ...acc, [lang]: entry };"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "      // default to english"}, {"line_number": 8, "line_content": "      return { ...acc, [lang]: text };"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "  }, {});"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getChallengesDirForLang(lang) {"}, {"line_number": 2, "line_content": "  return path.resolve(CHALLENGES_DIR, `${lang}`);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function parseCert(filePath) {"}, {"line_number": 2, "line_content": "  return yaml.load(fs.readFileSync(filePath, 'utf8'));"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getMetaForBlock(block) {"}, {"line_number": 2, "line_content": "  return JSON.parse("}, {"line_number": 3, "line_content": "    fs.readFileSync(path.resolve(META_DIR, `${block}/meta.json`), 'utf8')"}, {"line_number": 4, "line_content": "  );"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "async function buildBlocks({ basename: blockName }, curriculum, superBlock) {"}, {"line_number": 2, "line_content": "  const metaPath = path.resolve(META_DIR, `${blockName}/meta.json`);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  if (fs.existsSync(metaPath)) {"}, {"line_number": 5, "line_content": "    // try to read the file, if the meta path does not exist it should be a certification."}, {"line_number": 6, "line_content": "    // As they do not have meta files."}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const blockMeta = JSON.parse(fs.readFileSync(metaPath));"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const { isUpcomingChange } = blockMeta;"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (typeof isUpcomingChange !== 'boolean') {"}, {"line_number": 13, "line_content": "      throw Error("}, {"line_number": 14, "line_content": "        `meta file at ${metaPath} is missing 'isUpcomingChange', it must be 'true' or 'false'`"}, {"line_number": 15, "line_content": "      );"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    if (!isUpcomingChange || showUpcomingChanges) {"}, {"line_number": 19, "line_content": "      // add the block to the superBlock"}, {"line_number": 20, "line_content": "      const blockInfo = { meta: blockMeta, challenges: [] };"}, {"line_number": 21, "line_content": "      curriculum[superBlock].blocks[blockName] = blockInfo;"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": "  } else {"}, {"line_number": 24, "line_content": "    curriculum['certifications'].blocks[blockName] = { challenges: [] };"}, {"line_number": 25, "line_content": "  }"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function buildSuperBlocks({ path, fullPath }, curriculum) {"}, {"line_number": 2, "line_content": "  const superBlock = getSuperBlockFromDir(getBaseDir(path));"}, {"line_number": 3, "line_content": "  curriculum[superBlock] = { blocks: {} };"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  const cb = (file, curriculum) => buildBlocks(file, curriculum, superBlock);"}, {"line_number": 6, "line_content": "  return walk(fullPath, curriculum, { depth: 1, type: 'directories' }, cb);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function done() {"}, {"line_number": 2, "line_content": "      if (--running === 0) {"}, {"line_number": 3, "line_content": "        resolve(target);"}, {"line_number": 4, "line_content": "      }"}, {"line_number": 5, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "async function buildChallenges({ path: filePath }, curriculum, lang) {"}, {"line_number": 2, "line_content": "  // path is relative to getChallengesDirForLang(lang)"}, {"line_number": 3, "line_content": "  const block = getBlockNameFromPath(filePath);"}, {"line_number": 4, "line_content": "  const superBlockDir = getBaseDir(filePath);"}, {"line_number": 5, "line_content": "  const superBlock = getSuperBlockFromDir(superBlockDir);"}, {"line_number": 6, "line_content": "  let challengeBlock;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  // TODO: this try block and process exit can all go once errors terminate the"}, {"line_number": 9, "line_content": "  // tests correctly."}, {"line_number": 10, "line_content": "  try {"}, {"line_number": 11, "line_content": "    challengeBlock = curriculum[superBlock].blocks[block];"}, {"line_number": 12, "line_content": "    if (!challengeBlock) {"}, {"line_number": 13, "line_content": "      // this should only happen when a isUpcomingChange block is skipped"}, {"line_number": 14, "line_content": "      return;"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "  } catch (e) {"}, {"line_number": 17, "line_content": "    console.log(`failed to create superBlock from ${superBlockDir}`);"}, {"line_number": 18, "line_content": "    // eslint-disable-next-line no-process-exit"}, {"line_number": 19, "line_content": "    process.exit(1);"}, {"line_number": 20, "line_content": "  }"}, {"line_number": 21, "line_content": "  const { meta } = challengeBlock;"}, {"line_number": 22, "line_content": "  const isCert = path.extname(filePath) === '.yml';"}, {"line_number": 23, "line_content": "  // TODO: there's probably a better way, but this makes sure we don't build any"}, {"line_number": 24, "line_content": "  // of the new curriculum when we don't want it."}, {"line_number": 25, "line_content": "  if ("}, {"line_number": 26, "line_content": "    !showUpcomingChanges &&"}, {"line_number": 27, "line_content": "    meta?.superBlock === '2022/javascript-algorithms-and-data-structures'"}, {"line_number": 28, "line_content": "  ) {"}, {"line_number": 29, "line_content": "    return;"}, {"line_number": 30, "line_content": "  }"}, {"line_number": 31, "line_content": "  const createChallenge = generateChallengeCreator(CHALLENGES_DIR, lang);"}, {"line_number": 32, "line_content": "  const challenge = isCert"}, {"line_number": 33, "line_content": "    ? await createCertification(CHALLENGES_DIR, filePath, lang)"}, {"line_number": 34, "line_content": "    : await createChallenge(filePath, meta);"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "  challengeBlock.challenges = [...challengeBlock.challenges, challenge];"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function parseTranslation(transPath, dict, lang, parse = parseMD) {"}, {"line_number": 2, "line_content": "  const translatedChal = await parse(transPath);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const { challengeType } = translatedChal;"}, {"line_number": 5, "line_content": "  // challengeType 11 is for video challenges and 3 is for front-end projects"}, {"line_number": 6, "line_content": "  // neither of which have seeds."}, {"line_number": 7, "line_content": "  return challengeType !== 11 && challengeType !== 3"}, {"line_number": 8, "line_content": "    ? translateCommentsInChallenge(translatedChal, lang, dict)"}, {"line_number": 9, "line_content": "    : translatedChal;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function createCertification(basePath, filePath) {"}, {"line_number": 2, "line_content": "  function getFullPath(pathLang) {"}, {"line_number": 3, "line_content": "    return path.resolve(__dirname, basePath, pathLang, filePath);"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": "  // TODO: restart using isAudited() once we can determine a) the superBlocks"}, {"line_number": 6, "line_content": "  // (plural) a certification belongs to and b) get that info from the parsed"}, {"line_number": 7, "line_content": "  // certification, rather than the path. ASSUMING that this is used by the"}, {"line_number": 8, "line_content": "  // client.  If not, delete this comment and the lang param."}, {"line_number": 9, "line_content": "  return parseCert(getFullPath('english'));"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getFullPath(pathLang) {"}, {"line_number": 2, "line_content": "    return path.resolve(__dirname, basePath, pathLang, filePath);"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 116, "lines": [{"line_number": 1, "line_content": "function generateChallengeCreator(basePath, lang) {"}, {"line_number": 2, "line_content": "  function getFullPath(pathLang, filePath) {"}, {"line_number": 3, "line_content": "    return path.resolve(__dirname, basePath, pathLang, filePath);"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  async function validate(filePath, superBlock) {"}, {"line_number": 7, "line_content": "    const invalidLang = !curriculumLangs.includes(lang);"}, {"line_number": 8, "line_content": "    if (invalidLang)"}, {"line_number": 9, "line_content": "      throw Error(`${lang} is not a accepted language."}, {"line_number": 10, "line_content": "Trying to parse ${filePath}`);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    const missingEnglish ="}, {"line_number": 13, "line_content": "      lang !== 'english' && !(await hasEnglishSource(basePath, filePath));"}, {"line_number": 14, "line_content": "    if (missingEnglish)"}, {"line_number": 15, "line_content": "      throw Error(`Missing English challenge for"}, {"line_number": 16, "line_content": "${filePath}"}, {"line_number": 17, "line_content": "It should be in"}, {"line_number": 18, "line_content": "${getFullPath('english', filePath)}"}, {"line_number": 19, "line_content": "`);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    const missingAuditedChallenge ="}, {"line_number": 22, "line_content": "      isAuditedCert(lang, superBlock) &&"}, {"line_number": 23, "line_content": "      !fs.existsSync(getFullPath(lang, filePath));"}, {"line_number": 24, "line_content": "    if (missingAuditedChallenge)"}, {"line_number": 25, "line_content": "      throw Error(`Missing ${lang} audited challenge for"}, {"line_number": 26, "line_content": "${filePath}"}, {"line_number": 27, "line_content": "No audited challenges should fallback to English."}, {"line_number": 28, "line_content": "    `);"}, {"line_number": 29, "line_content": "  }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "  function addMetaToChallenge(challenge, meta) {"}, {"line_number": 32, "line_content": "    const challengeOrder = findIndex("}, {"line_number": 33, "line_content": "      meta.challengeOrder,"}, {"line_number": 34, "line_content": "      ([id]) => id === challenge.id"}, {"line_number": 35, "line_content": "    );"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "    challenge.block = meta.name ? dasherize(meta.name) : null;"}, {"line_number": 38, "line_content": "    challenge.hasEditableBoundaries = !!meta.hasEditableBoundaries;"}, {"line_number": 39, "line_content": "    challenge.order = meta.order;"}, {"line_number": 40, "line_content": "    // const superOrder = getSuperOrder(meta.superBlock);"}, {"line_number": 41, "line_content": "    // NOTE: Use this version when a super block is in beta."}, {"line_number": 42, "line_content": "    const superOrder = getSuperOrder(meta.superBlock, {"}, {"line_number": 43, "line_content": "      // switch this back to SHOW_NEW_CURRICULUM when we're ready to beta the JS superblock"}, {"line_number": 44, "line_content": "      showNewCurriculum: process.env.SHOW_UPCOMING_CHANGES === 'true'"}, {"line_number": 45, "line_content": "    });"}, {"line_number": 46, "line_content": "    if (superOrder !== null) challenge.superOrder = superOrder;"}, {"line_number": 47, "line_content": "    /* Since there can be more than one way to complete a certification (using the"}, {"line_number": 48, "line_content": "   legacy curriculum or the new one, for instance), we need a certification"}, {"line_number": 49, "line_content": "   field to track which certification this belongs to. */"}, {"line_number": 50, "line_content": "    const dupeCertifications = ["}, {"line_number": 51, "line_content": "      {"}, {"line_number": 52, "line_content": "        certification: 'responsive-web-design',"}, {"line_number": 53, "line_content": "        dupe: '2022/responsive-web-design'"}, {"line_number": 54, "line_content": "      },"}, {"line_number": 55, "line_content": "      {"}, {"line_number": 56, "line_content": "        certification: 'javascript-algorithms-and-data-structures',"}, {"line_number": 57, "line_content": "        dupe: '2022/javascript-algorithms-and-data-structures'"}, {"line_number": 58, "line_content": "      }"}, {"line_number": 59, "line_content": "    ];"}, {"line_number": 60, "line_content": "    const hasDupe = dupeCertifications.find("}, {"line_number": 61, "line_content": "      cert => cert.dupe === meta.superBlock"}, {"line_number": 62, "line_content": "    );"}, {"line_number": 63, "line_content": "    challenge.certification = hasDupe ? hasDupe.certification : meta.superBlock;"}, {"line_number": 64, "line_content": "    challenge.superBlock = meta.superBlock;"}, {"line_number": 65, "line_content": "    challenge.challengeOrder = challengeOrder;"}, {"line_number": 66, "line_content": "    challenge.isPrivate = challenge.isPrivate || meta.isPrivate;"}, {"line_number": 67, "line_content": "    challenge.required = (meta.required || []).concat(challenge.required || []);"}, {"line_number": 68, "line_content": "    challenge.template = meta.template;"}, {"line_number": 69, "line_content": "    challenge.time = meta.time;"}, {"line_number": 70, "line_content": "    challenge.helpCategory ="}, {"line_number": 71, "line_content": "      challenge.helpCategory || helpCategoryMap[challenge.block];"}, {"line_number": 72, "line_content": "    challenge.translationPending ="}, {"line_number": 73, "line_content": "      lang !== 'english' && !isAuditedCert(lang, meta.superBlock);"}, {"line_number": 74, "line_content": "    challenge.usesMultifileEditor = !!meta.usesMultifileEditor;"}, {"line_number": 75, "line_content": "    if (challenge.challengeFiles) {"}, {"line_number": 76, "line_content": "      // The client expects the challengeFiles to be an array of polyvinyls"}, {"line_number": 77, "line_content": "      challenge.challengeFiles = challengeFilesToPolys("}, {"line_number": 78, "line_content": "        challenge.challengeFiles"}, {"line_number": 79, "line_content": "      );"}, {"line_number": 80, "line_content": "    }"}, {"line_number": 81, "line_content": "    if (challenge.solutions?.length) {"}, {"line_number": 82, "line_content": "      // The test runner needs the solutions to be arrays of polyvinyls so it"}, {"line_number": 83, "line_content": "      // can sort them correctly."}, {"line_number": 84, "line_content": "      challenge.solutions = challenge.solutions.map(challengeFilesToPolys);"}, {"line_number": 85, "line_content": "    }"}, {"line_number": 86, "line_content": "  }"}, {"line_number": 87, "line_content": ""}, {"line_number": 88, "line_content": "  async function createChallenge(filePath, maybeMeta) {"}, {"line_number": 89, "line_content": "    const meta = maybeMeta"}, {"line_number": 90, "line_content": "      ? maybeMeta"}, {"line_number": 91, "line_content": "      : require(path.resolve("}, {"line_number": 92, "line_content": "          META_DIR,"}, {"line_number": 93, "line_content": "          `${getBlockNameFromPath(filePath)}/meta.json`"}, {"line_number": 94, "line_content": "        ));"}, {"line_number": 95, "line_content": ""}, {"line_number": 96, "line_content": "    await validate(filePath, meta.superBlock);"}, {"line_number": 97, "line_content": ""}, {"line_number": 98, "line_content": "    const useEnglish ="}, {"line_number": 99, "line_content": "      lang === 'english' ||"}, {"line_number": 100, "line_content": "      !isAuditedCert(lang, meta.superBlock) ||"}, {"line_number": 101, "line_content": "      !fs.existsSync(getFullPath(lang, filePath));"}, {"line_number": 102, "line_content": ""}, {"line_number": 103, "line_content": "    const challenge = await (useEnglish"}, {"line_number": 104, "line_content": "      ? parseMD(getFullPath('english', filePath))"}, {"line_number": 105, "line_content": "      : parseTranslation("}, {"line_number": 106, "line_content": "          getFullPath(lang, filePath),"}, {"line_number": 107, "line_content": "          COMMENT_TRANSLATIONS,"}, {"line_number": 108, "line_content": "          lang"}, {"line_number": 109, "line_content": "        ));"}, {"line_number": 110, "line_content": ""}, {"line_number": 111, "line_content": "    addMetaToChallenge(challenge, meta);"}, {"line_number": 112, "line_content": ""}, {"line_number": 113, "line_content": "    return challenge;"}, {"line_number": 114, "line_content": "  }"}, {"line_number": 115, "line_content": "  return createChallenge;"}, {"line_number": 116, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getFullPath(pathLang, filePath) {"}, {"line_number": 2, "line_content": "    return path.resolve(__dirname, basePath, pathLang, filePath);"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "async function validate(filePath, superBlock) {"}, {"line_number": 2, "line_content": "    const invalidLang = !curriculumLangs.includes(lang);"}, {"line_number": 3, "line_content": "    if (invalidLang)"}, {"line_number": 4, "line_content": "      throw Error(`${lang} is not a accepted language."}, {"line_number": 5, "line_content": "Trying to parse ${filePath}`);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    const missingEnglish ="}, {"line_number": 8, "line_content": "      lang !== 'english' && !(await hasEnglishSource(basePath, filePath));"}, {"line_number": 9, "line_content": "    if (missingEnglish)"}, {"line_number": 10, "line_content": "      throw Error(`Missing English challenge for"}, {"line_number": 11, "line_content": "${filePath}"}, {"line_number": 12, "line_content": "It should be in"}, {"line_number": 13, "line_content": "${getFullPath('english', filePath)}"}, {"line_number": 14, "line_content": "`);"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    const missingAuditedChallenge ="}, {"line_number": 17, "line_content": "      isAuditedCert(lang, superBlock) &&"}, {"line_number": 18, "line_content": "      !fs.existsSync(getFullPath(lang, filePath));"}, {"line_number": 19, "line_content": "    if (missingAuditedChallenge)"}, {"line_number": 20, "line_content": "      throw Error(`Missing ${lang} audited challenge for"}, {"line_number": 21, "line_content": "${filePath}"}, {"line_number": 22, "line_content": "No audited challenges should fallback to English."}, {"line_number": 23, "line_content": "    `);"}, {"line_number": 24, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function challengeFilesToPolys(files) {"}, {"line_number": 2, "line_content": "  return files.reduce((challengeFiles, challengeFile) => {"}, {"line_number": 3, "line_content": "    return ["}, {"line_number": 4, "line_content": "      ...challengeFiles,"}, {"line_number": 5, "line_content": "      {"}, {"line_number": 6, "line_content": "        ...createPoly(challengeFile),"}, {"line_number": 7, "line_content": "        seed: challengeFile.contents.slice(0)"}, {"line_number": 8, "line_content": "      }"}, {"line_number": 9, "line_content": "    ];"}, {"line_number": 10, "line_content": "  }, []);"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "async function hasEnglishSource(basePath, translationPath) {"}, {"line_number": 2, "line_content": "  const englishRoot = path.resolve(__dirname, basePath, 'english');"}, {"line_number": 3, "line_content": "  return await access("}, {"line_number": 4, "line_content": "    path.join(englishRoot, translationPath),"}, {"line_number": 5, "line_content": "    fs.constants.F_OK"}, {"line_number": 6, "line_content": "  )"}, {"line_number": 7, "line_content": "    .then(() => true)"}, {"line_number": 8, "line_content": "    .catch(() => false);"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getBaseDir(filePath) {"}, {"line_number": 2, "line_content": "  const [baseDir] = filePath.split(path.sep);"}, {"line_number": 3, "line_content": "  return baseDir;"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/freeCodeCamp/freeCodeCamp", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getBlockNameFromPath(filePath) {"}, {"line_number": 2, "line_content": "  const [, block] = filePath.split(path.sep);"}, {"line_number": 3, "line_content": "  return block;"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/kamranahmedse/developer-roadmap", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function getSlugPriority(pageSlug) {"}, {"line_number": 2, "line_content": "  if (pageSlug === '/') {"}, {"line_number": 3, "line_content": "    return '1.0';"}, {"line_number": 4, "line_content": "  }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  const slugPriorities = ["}, {"line_number": 7, "line_content": "    ['/roadmaps', '/guides', '/watch', '/podcasts'], // 1.0"}, {"line_number": 8, "line_content": "    ['/signup'], // 0.9"}, {"line_number": 9, "line_content": "    ['/about'], // 0.8"}, {"line_number": 10, "line_content": "  ];"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "  const foundIndex = slugPriorities.findIndex((routes) =>"}, {"line_number": 13, "line_content": "    routes.some((route) => pageSlug.startsWith(route))"}, {"line_number": 14, "line_content": "  );"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  if (foundIndex !== -1) {"}, {"line_number": 17, "line_content": "    return parseFloat((10 - foundIndex) / 10).toFixed(1);"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  return 0.5;"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/kamranahmedse/developer-roadmap", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "function generateSiteMap() {"}, {"line_number": 2, "line_content": "  const pageRoutes = getPageRoutes();"}, {"line_number": 3, "line_content": "  const pageSlugs = Object.keys(pageRoutes).filter("}, {"line_number": 4, "line_content": "    (route) => !['/privacy', '/terms'].includes(route)"}, {"line_number": 5, "line_content": "  );"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const pagesChunk = pageSlugs.map((pageSlug) => {"}, {"line_number": 8, "line_content": "    return generateNode({"}, {"line_number": 9, "line_content": "      basePath: PAGES_DIR,"}, {"line_number": 10, "line_content": "      fileName: `${pageRoutes[pageSlug].page}.tsx`,"}, {"line_number": 11, "line_content": "      slug: pageSlug,"}, {"line_number": 12, "line_content": "    });"}, {"line_number": 13, "line_content": "  });"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  const guidesChunk = guides.map((guide) => {"}, {"line_number": 16, "line_content": "    return generateNode({"}, {"line_number": 17, "line_content": "      basePath: GUIDES_PATH,"}, {"line_number": 18, "line_content": "      fileName: `${guide.id}.md`,"}, {"line_number": 19, "line_content": "      slug: `/guides/${guide.id}`,"}, {"line_number": 20, "line_content": "      date: guide.updatedAt,"}, {"line_number": 21, "line_content": "      priority: '1.0',"}, {"line_number": 22, "line_content": "    });"}, {"line_number": 23, "line_content": "  });"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "  const roadmapsChunk = roadmaps.map((roadmap, roadmapCounter) => {"}, {"line_number": 26, "line_content": "    return generateNode({"}, {"line_number": 27, "line_content": "      basePath: ROADMAPS_PATH,"}, {"line_number": 28, "line_content": "      fileName: roadmap.metaPath.replace('/roadmaps', ''),"}, {"line_number": 29, "line_content": "      slug: `/${roadmap.id}`,"}, {"line_number": 30, "line_content": "      date: roadmap.updatedAt,"}, {"line_number": 31, "line_content": "      priority: '1.0',"}, {"line_number": 32, "line_content": "    });"}, {"line_number": 33, "line_content": "  });"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "  const nodes = [...roadmapsChunk, ...guidesChunk, ...pagesChunk];"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "  const sitemap = `${xmlUrlWrapper(nodes.join('\\n'))}`;"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "  fs.writeFileSync(SITEMAP_PATH, sitemap);"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "  console.log("}, {"line_number": 42, "line_content": "    `sitemap.xml with ${nodes.length} entries was written to ${SITEMAP_PATH}`"}, {"line_number": 43, "line_content": "  );"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/kamranahmedse/developer-roadmap", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function getPageRoutes() {"}, {"line_number": 2, "line_content": "  const files = glob.sync(`${PAGES_PATH}/**/*.tsx`, {"}, {"line_number": 3, "line_content": "    ignore: ["}, {"line_number": 4, "line_content": "      '**/_*.tsx', // private non-page files e.g. _document.js"}, {"line_number": 5, "line_content": "      '**/[[]*[]].tsx', // Ignore dynamic pages i.e. `page/[something].js` files"}, {"line_number": 6, "line_content": "      '**/[[]*[]]/*.tsx', // Ignore files inside dynamic pages i.e. `[something]/abc.js`"}, {"line_number": 7, "line_content": "      '**/components/*.tsx', // Ignore the component files"}, {"line_number": 8, "line_content": "    ],"}, {"line_number": 9, "line_content": "  });"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const pageRoutes = {};"}, {"line_number": 12, "line_content": "  files.forEach((file) => {"}, {"line_number": 13, "line_content": "    const pageName = file.replace(PAGES_PATH, '').replace('.tsx', '');"}, {"line_number": 14, "line_content": "    const pagePath = pageName.replace('/index', '') || '/';"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    pageRoutes[pagePath] = { page: `${pageName}` };"}, {"line_number": 17, "line_content": "  });"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  return pageRoutes;"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/kamranahmedse/developer-roadmap", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function generateNode(nodeProps) {"}, {"line_number": 2, "line_content": "  const {"}, {"line_number": 3, "line_content": "    slug,"}, {"line_number": 4, "line_content": "    basePath,"}, {"line_number": 5, "line_content": "    fileName,"}, {"line_number": 6, "line_content": "    priority = null,"}, {"line_number": 7, "line_content": "    date = null,"}, {"line_number": 8, "line_content": "    frequency = 'monthly',"}, {"line_number": 9, "line_content": "  } = nodeProps;"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const pagePath = path.join(basePath, fileName);"}, {"line_number": 12, "line_content": "  let pageStats = {};"}, {"line_number": 13, "line_content": "  try {"}, {"line_number": 14, "line_content": "    pageStats = fs.lstatSync(pagePath);"}, {"line_number": 15, "line_content": "  } catch (e) {"}, {"line_number": 16, "line_content": "    console.log(`File not found: ${pagePath}`);"}, {"line_number": 17, "line_content": "    pageStats = { mtime: new Date() };"}, {"line_number": 18, "line_content": "  }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "  return `<url>"}, {"line_number": 21, "line_content": "              <loc>${DOMAIN}${slug}</loc>"}, {"line_number": 22, "line_content": "              <changefreq>${frequency}</changefreq>"}, {"line_number": 23, "line_content": "              <lastmod>${date || pageStats.mtime.toISOString()}</lastmod>"}, {"line_number": 24, "line_content": "              <priority>${priority || getSlugPriority(slug)}</priority>"}, {"line_number": 25, "line_content": "          </url>`;"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "function C() {"}, {"line_number": 2, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function sum(z) {"}, {"line_number": 2, "line_content": "            return z + f(z) + w + self.w;"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 2, "lines": [{"line_number": 1, "line_content": "function Company() {"}, {"line_number": 2, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 91, "lines": [{"line_number": 1, "line_content": "async function processResourceRequest(event, requestUrlComponents) {"}, {"line_number": 2, "line_content": "\tconst client = await sw.clients.get(event.clientId);"}, {"line_number": 3, "line_content": "\tif (!client) {"}, {"line_number": 4, "line_content": "\t\tconsole.error('Could not find inner client for request');"}, {"line_number": 5, "line_content": "\t\treturn notFound();"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tconst webviewId = getWebviewIdForClient(client);"}, {"line_number": 9, "line_content": "\tif (!webviewId) {"}, {"line_number": 10, "line_content": "\t\tconsole.error('Could not resolve webview id');"}, {"line_number": 11, "line_content": "\t\treturn notFound();"}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\tconst shouldTryCaching = (event.request.method === 'GET');"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\t/**"}, {"line_number": 17, "line_content": "\t * @param {ResourceResponse} entry"}, {"line_number": 18, "line_content": "\t * @param {Response | undefined} cachedResponse"}, {"line_number": 19, "line_content": "\t */"}, {"line_number": 20, "line_content": "\tconst resolveResourceEntry = (entry, cachedResponse) => {"}, {"line_number": 21, "line_content": "\t\tif (entry.status === 304) { // Not modified"}, {"line_number": 22, "line_content": "\t\t\tif (cachedResponse) {"}, {"line_number": 23, "line_content": "\t\t\t\treturn cachedResponse.clone();"}, {"line_number": 24, "line_content": "\t\t\t} else {"}, {"line_number": 25, "line_content": "\t\t\t\tthrow new Error('No cache found');"}, {"line_number": 26, "line_content": "\t\t\t}"}, {"line_number": 27, "line_content": "\t\t}"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "\t\tif (entry.status === 401) {"}, {"line_number": 30, "line_content": "\t\t\treturn unauthorized();"}, {"line_number": 31, "line_content": "\t\t}"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\t\tif (entry.status !== 200) {"}, {"line_number": 34, "line_content": "\t\t\treturn notFound();"}, {"line_number": 35, "line_content": "\t\t}"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "\t\t/** @type {Record<string, string>} */"}, {"line_number": 38, "line_content": "\t\tconst headers = {"}, {"line_number": 39, "line_content": "\t\t\t'Content-Type': entry.mime,"}, {"line_number": 40, "line_content": "\t\t\t'Content-Length': entry.data.byteLength.toString(),"}, {"line_number": 41, "line_content": "\t\t\t'Access-Control-Allow-Origin': '*',"}, {"line_number": 42, "line_content": "\t\t};"}, {"line_number": 43, "line_content": "\t\tif (entry.etag) {"}, {"line_number": 44, "line_content": "\t\t\theaders['ETag'] = entry.etag;"}, {"line_number": 45, "line_content": "\t\t\theaders['Cache-Control'] = 'no-cache';"}, {"line_number": 46, "line_content": "\t\t}"}, {"line_number": 47, "line_content": "\t\tif (entry.mtime) {"}, {"line_number": 48, "line_content": "\t\t\theaders['Last-Modified'] = new Date(entry.mtime).toUTCString();"}, {"line_number": 49, "line_content": "\t\t}"}, {"line_number": 50, "line_content": "\t\tconst response = new Response(entry.data, {"}, {"line_number": 51, "line_content": "\t\t\tstatus: 200,"}, {"line_number": 52, "line_content": "\t\t\theaders"}, {"line_number": 53, "line_content": "\t\t});"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "\t\tif (shouldTryCaching && entry.etag) {"}, {"line_number": 56, "line_content": "\t\t\tcaches.open(resourceCacheName).then(cache => {"}, {"line_number": 57, "line_content": "\t\t\t\treturn cache.put(event.request, response);"}, {"line_number": 58, "line_content": "\t\t\t});"}, {"line_number": 59, "line_content": "\t\t}"}, {"line_number": 60, "line_content": "\t\treturn response.clone();"}, {"line_number": 61, "line_content": "\t};"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "\tconst parentClients = await getOuterIframeClient(webviewId);"}, {"line_number": 64, "line_content": "\tif (!parentClients.length) {"}, {"line_number": 65, "line_content": "\t\tconsole.log('Could not find parent client for request');"}, {"line_number": 66, "line_content": "\t\treturn notFound();"}, {"line_number": 67, "line_content": "\t}"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "\t/** @type {Response | undefined} */"}, {"line_number": 70, "line_content": "\tlet cached;"}, {"line_number": 71, "line_content": "\tif (shouldTryCaching) {"}, {"line_number": 72, "line_content": "\t\tconst cache = await caches.open(resourceCacheName);"}, {"line_number": 73, "line_content": "\t\tcached = await cache.match(event.request);"}, {"line_number": 74, "line_content": "\t}"}, {"line_number": 75, "line_content": ""}, {"line_number": 76, "line_content": "\tconst { requestId, promise } = resourceRequestStore.create();"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "\tfor (const parentClient of parentClients) {"}, {"line_number": 79, "line_content": "\t\tparentClient.postMessage({"}, {"line_number": 80, "line_content": "\t\t\tchannel: 'load-resource',"}, {"line_number": 81, "line_content": "\t\t\tid: requestId,"}, {"line_number": 82, "line_content": "\t\t\tscheme: requestUrlComponents.scheme,"}, {"line_number": 83, "line_content": "\t\t\tauthority: requestUrlComponents.authority,"}, {"line_number": 84, "line_content": "\t\t\tpath: requestUrlComponents.path,"}, {"line_number": 85, "line_content": "\t\t\tquery: requestUrlComponents.query,"}, {"line_number": 86, "line_content": "\t\t\tifNoneMatch: cached?.headers.get('ETag'),"}, {"line_number": 87, "line_content": "\t\t});"}, {"line_number": 88, "line_content": "\t}"}, {"line_number": 89, "line_content": ""}, {"line_number": 90, "line_content": "\treturn promise.then(entry => resolveResourceEntry(entry, cached));"}, {"line_number": 91, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 49, "lines": [{"line_number": 1, "line_content": "async function processLocalhostRequest(event, requestUrl) {"}, {"line_number": 2, "line_content": "\tconst client = await sw.clients.get(event.clientId);"}, {"line_number": 3, "line_content": "\tif (!client) {"}, {"line_number": 4, "line_content": "\t\t// This is expected when requesting resources on other localhost ports"}, {"line_number": 5, "line_content": "\t\t// that are not spawned by vs code"}, {"line_number": 6, "line_content": "\t\treturn fetch(event.request);"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": "\tconst webviewId = getWebviewIdForClient(client);"}, {"line_number": 9, "line_content": "\tif (!webviewId) {"}, {"line_number": 10, "line_content": "\t\tconsole.error('Could not resolve webview id');"}, {"line_number": 11, "line_content": "\t\treturn fetch(event.request);"}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\tconst origin = requestUrl.origin;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\t/**"}, {"line_number": 17, "line_content": "\t * @param {string | undefined} redirectOrigin"}, {"line_number": 18, "line_content": "\t * @return {Promise<Response>}"}, {"line_number": 19, "line_content": "\t */"}, {"line_number": 20, "line_content": "\tconst resolveRedirect = async (redirectOrigin) => {"}, {"line_number": 21, "line_content": "\t\tif (!redirectOrigin) {"}, {"line_number": 22, "line_content": "\t\t\treturn fetch(event.request);"}, {"line_number": 23, "line_content": "\t\t}"}, {"line_number": 24, "line_content": "\t\tconst location = event.request.url.replace(new RegExp(`^${requestUrl.origin}(/|$)`), `${redirectOrigin}$1`);"}, {"line_number": 25, "line_content": "\t\treturn new Response(null, {"}, {"line_number": 26, "line_content": "\t\t\tstatus: 302,"}, {"line_number": 27, "line_content": "\t\t\theaders: {"}, {"line_number": 28, "line_content": "\t\t\t\tLocation: location"}, {"line_number": 29, "line_content": "\t\t\t}"}, {"line_number": 30, "line_content": "\t\t});"}, {"line_number": 31, "line_content": "\t};"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tconst parentClients = await getOuterIframeClient(webviewId);"}, {"line_number": 34, "line_content": "\tif (!parentClients.length) {"}, {"line_number": 35, "line_content": "\t\tconsole.log('Could not find parent client for request');"}, {"line_number": 36, "line_content": "\t\treturn notFound();"}, {"line_number": 37, "line_content": "\t}"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tconst { requestId, promise } = localhostRequestStore.create();"}, {"line_number": 40, "line_content": "\tfor (const parentClient of parentClients) {"}, {"line_number": 41, "line_content": "\t\tparentClient.postMessage({"}, {"line_number": 42, "line_content": "\t\t\tchannel: 'load-localhost',"}, {"line_number": 43, "line_content": "\t\t\torigin: origin,"}, {"line_number": 44, "line_content": "\t\t\tid: requestId,"}, {"line_number": 45, "line_content": "\t\t});"}, {"line_number": 46, "line_content": "\t}"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\treturn promise.then(resolveRedirect);"}, {"line_number": 49, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getWebviewIdForClient(client) {"}, {"line_number": 2, "line_content": "\tconst requesterClientUrl = new URL(client.url);"}, {"line_number": 3, "line_content": "\treturn requesterClientUrl.searchParams.get('id');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function getOuterIframeClient(webviewId) {"}, {"line_number": 2, "line_content": "\tconst allClients = await sw.clients.matchAll({ includeUncontrolled: true });"}, {"line_number": 3, "line_content": "\treturn allClients.filter(client => {"}, {"line_number": 4, "line_content": "\t\tconst clientUrl = new URL(client.url);"}, {"line_number": 5, "line_content": "\t\tconst hasExpectedPathName = (clientUrl.pathname === `${rootPath}/` || clientUrl.pathname === `${rootPath}/index.html` || clientUrl.pathname === `${rootPath}/index-no-csp.html`);"}, {"line_number": 6, "line_content": "\t\treturn hasExpectedPathName && clientUrl.searchParams.get('id') === webviewId;"}, {"line_number": 7, "line_content": "\t});"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function BrowserCSSLoader() {"}, {"line_number": 2, "line_content": "            this._pendingLoads = 0;"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function CSSPlugin() {"}, {"line_number": 2, "line_content": "            this._cssLoader = new BrowserCSSLoader();"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function validateIPC(channel) {"}, {"line_number": 2, "line_content": "\t\tif (!channel || !channel.startsWith('vscode:')) {"}, {"line_number": 3, "line_content": "\t\t\tthrow new Error(`Unsupported event IPC channel '${channel}'`);"}, {"line_number": 4, "line_content": "\t\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\t\treturn true;"}, {"line_number": 7, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function parseArgv(key) {"}, {"line_number": 2, "line_content": "\t\tfor (const arg of process.argv) {"}, {"line_number": 3, "line_content": "\t\t\tif (arg.indexOf(`--${key}=`) === 0) {"}, {"line_number": 4, "line_content": "\t\t\t\treturn arg.split('=')[1];"}, {"line_number": 5, "line_content": "\t\t\t}"}, {"line_number": 6, "line_content": "\t\t}"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\t\treturn undefined;"}, {"line_number": 9, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 38, "lines": [{"line_number": 1, "line_content": "function factory(path, os, productName, cwd) {"}, {"line_number": 2, "line_content": "\t\t// First group matches a double quoted string"}, {"line_number": 3, "line_content": "\t\t// Second group matches a single quoted string"}, {"line_number": 4, "line_content": "\t\t// Third group matches a multi line comment"}, {"line_number": 5, "line_content": "\t\t// Forth group matches a single line comment"}, {"line_number": 6, "line_content": "\t\tconst regexp = /(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")|('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')|(\\/\\*[^\\/\\*]*(?:(?:\\*|\\/)[^\\/\\*]*)*?\\*\\/)|(\\/{2,}.*?(?:(?:\\r?\\n)|$))/g;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\t\t/**"}, {"line_number": 9, "line_content": "\t\t *"}, {"line_number": 10, "line_content": "\t\t * @param {string} content"}, {"line_number": 11, "line_content": "\t\t * @returns {string}"}, {"line_number": 12, "line_content": "\t\t */"}, {"line_number": 13, "line_content": "\t\tfunction stripComments(content) {"}, {"line_number": 14, "line_content": "\t\t\treturn content.replace(regexp, function (match, _m1, _m2, m3, m4) {"}, {"line_number": 15, "line_content": "\t\t\t\t// Only one of m1, m2, m3, m4 matches"}, {"line_number": 16, "line_content": "\t\t\t\tif (m3) {"}, {"line_number": 17, "line_content": "\t\t\t\t\t// A block comment. Replace with nothing"}, {"line_number": 18, "line_content": "\t\t\t\t\treturn '';"}, {"line_number": 19, "line_content": "\t\t\t\t} else if (m4) {"}, {"line_number": 20, "line_content": "\t\t\t\t\t// Since m4 is a single line comment is is at least of length 2 (e.g. //)"}, {"line_number": 21, "line_content": "\t\t\t\t\t// If it ends in \\r?\\n then keep it."}, {"line_number": 22, "line_content": "\t\t\t\t\tconst length = m4.length;"}, {"line_number": 23, "line_content": "\t\t\t\t\tif (m4[length - 1] === '\\n') {"}, {"line_number": 24, "line_content": "\t\t\t\t\t\treturn m4[length - 2] === '\\r' ? '\\r\\n' : '\\n';"}, {"line_number": 25, "line_content": "\t\t\t\t\t}"}, {"line_number": 26, "line_content": "\t\t\t\t\telse {"}, {"line_number": 27, "line_content": "\t\t\t\t\t\treturn '';"}, {"line_number": 28, "line_content": "\t\t\t\t\t}"}, {"line_number": 29, "line_content": "\t\t\t\t} else {"}, {"line_number": 30, "line_content": "\t\t\t\t\t// We match a string"}, {"line_number": 31, "line_content": "\t\t\t\t\treturn match;"}, {"line_number": 32, "line_content": "\t\t\t\t}"}, {"line_number": 33, "line_content": "\t\t\t});"}, {"line_number": 34, "line_content": "\t\t}"}, {"line_number": 35, "line_content": "\t\treturn {"}, {"line_number": 36, "line_content": "\t\t\tstripComments"}, {"line_number": 37, "line_content": "\t\t};"}, {"line_number": 38, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function stripComments(content) {"}, {"line_number": 2, "line_content": "\t\t\treturn content.replace(regexp, function (match, _m1, _m2, m3, m4) {"}, {"line_number": 3, "line_content": "\t\t\t\t// Only one of m1, m2, m3, m4 matches"}, {"line_number": 4, "line_content": "\t\t\t\tif (m3) {"}, {"line_number": 5, "line_content": "\t\t\t\t\t// A block comment. Replace with nothing"}, {"line_number": 6, "line_content": "\t\t\t\t\treturn '';"}, {"line_number": 7, "line_content": "\t\t\t\t} else if (m4) {"}, {"line_number": 8, "line_content": "\t\t\t\t\t// Since m4 is a single line comment is is at least of length 2 (e.g. //)"}, {"line_number": 9, "line_content": "\t\t\t\t\t// If it ends in \\r?\\n then keep it."}, {"line_number": 10, "line_content": "\t\t\t\t\tconst length = m4.length;"}, {"line_number": 11, "line_content": "\t\t\t\t\tif (m4[length - 1] === '\\n') {"}, {"line_number": 12, "line_content": "\t\t\t\t\t\treturn m4[length - 2] === '\\r' ? '\\r\\n' : '\\n';"}, {"line_number": 13, "line_content": "\t\t\t\t\t}"}, {"line_number": 14, "line_content": "\t\t\t\t\telse {"}, {"line_number": 15, "line_content": "\t\t\t\t\t\treturn '';"}, {"line_number": 16, "line_content": "\t\t\t\t\t}"}, {"line_number": 17, "line_content": "\t\t\t\t} else {"}, {"line_number": 18, "line_content": "\t\t\t\t\t// We match a string"}, {"line_number": 19, "line_content": "\t\t\t\t\treturn match;"}, {"line_number": 20, "line_content": "\t\t\t\t}"}, {"line_number": 21, "line_content": "\t\t\t});"}, {"line_number": 22, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function _definePolyfillMarks(timeOrigin) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\t\tconst _data = [];"}, {"line_number": 4, "line_content": "\t\tif (typeof timeOrigin === 'number') {"}, {"line_number": 5, "line_content": "\t\t\t_data.push('code/timeOrigin', timeOrigin);"}, {"line_number": 6, "line_content": "\t\t}"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\t\tfunction mark(name) {"}, {"line_number": 9, "line_content": "\t\t\t_data.push(name, Date.now());"}, {"line_number": 10, "line_content": "\t\t}"}, {"line_number": 11, "line_content": "\t\tfunction getMarks() {"}, {"line_number": 12, "line_content": "\t\t\tconst result = [];"}, {"line_number": 13, "line_content": "\t\t\tfor (let i = 0; i < _data.length; i += 2) {"}, {"line_number": 14, "line_content": "\t\t\t\tresult.push({"}, {"line_number": 15, "line_content": "\t\t\t\t\tname: _data[i],"}, {"line_number": 16, "line_content": "\t\t\t\t\tstartTime: _data[i + 1],"}, {"line_number": 17, "line_content": "\t\t\t\t});"}, {"line_number": 18, "line_content": "\t\t\t}"}, {"line_number": 19, "line_content": "\t\t\treturn result;"}, {"line_number": 20, "line_content": "\t\t}"}, {"line_number": 21, "line_content": "\t\treturn { mark, getMarks };"}, {"line_number": 22, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function mark(name) {"}, {"line_number": 2, "line_content": "\t\t\t_data.push(name, Date.now());"}, {"line_number": 3, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function getMarks() {"}, {"line_number": 2, "line_content": "\t\t\tconst result = [];"}, {"line_number": 3, "line_content": "\t\t\tfor (let i = 0; i < _data.length; i += 2) {"}, {"line_number": 4, "line_content": "\t\t\t\tresult.push({"}, {"line_number": 5, "line_content": "\t\t\t\t\tname: _data[i],"}, {"line_number": 6, "line_content": "\t\t\t\t\tstartTime: _data[i + 1],"}, {"line_number": 7, "line_content": "\t\t\t\t});"}, {"line_number": 8, "line_content": "\t\t\t}"}, {"line_number": 9, "line_content": "\t\t\treturn result;"}, {"line_number": 10, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 49, "lines": [{"line_number": 1, "line_content": "function _define() {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\t\t// Identify browser environment when following property is not present"}, {"line_number": 4, "line_content": "\t\t// https://nodejs.org/dist/latest-v16.x/docs/api/perf_hooks.html#performancenodetiming"}, {"line_number": 5, "line_content": "\t\tif (typeof performance === 'object' && typeof performance.mark === 'function' && !performance.nodeTiming) {"}, {"line_number": 6, "line_content": "\t\t\t// in a browser context, reuse performance-util"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\t\t\tif (typeof performance.timeOrigin !== 'number' && !performance.timing) {"}, {"line_number": 9, "line_content": "\t\t\t\t// safari & webworker: because there is no timeOrigin and no workaround"}, {"line_number": 10, "line_content": "\t\t\t\t// we use the `Date.now`-based polyfill."}, {"line_number": 11, "line_content": "\t\t\t\treturn _definePolyfillMarks();"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\t\t\t} else {"}, {"line_number": 14, "line_content": "\t\t\t\t// use \"native\" performance for mark and getMarks"}, {"line_number": 15, "line_content": "\t\t\t\treturn {"}, {"line_number": 16, "line_content": "\t\t\t\t\tmark(name) {"}, {"line_number": 17, "line_content": "\t\t\t\t\t\tperformance.mark(name);"}, {"line_number": 18, "line_content": "\t\t\t\t\t},"}, {"line_number": 19, "line_content": "\t\t\t\t\tgetMarks() {"}, {"line_number": 20, "line_content": "\t\t\t\t\t\tlet timeOrigin = performance.timeOrigin;"}, {"line_number": 21, "line_content": "\t\t\t\t\t\tif (typeof timeOrigin !== 'number') {"}, {"line_number": 22, "line_content": "\t\t\t\t\t\t\t// safari: there is no timerOrigin but in renderers there is the timing-property"}, {"line_number": 23, "line_content": "\t\t\t\t\t\t\t// see https://bugs.webkit.org/show_bug.cgi?id=174862"}, {"line_number": 24, "line_content": "\t\t\t\t\t\t\ttimeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;"}, {"line_number": 25, "line_content": "\t\t\t\t\t\t}"}, {"line_number": 26, "line_content": "\t\t\t\t\t\tconst result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];"}, {"line_number": 27, "line_content": "\t\t\t\t\t\tfor (const entry of performance.getEntriesByType('mark')) {"}, {"line_number": 28, "line_content": "\t\t\t\t\t\t\tresult.push({"}, {"line_number": 29, "line_content": "\t\t\t\t\t\t\t\tname: entry.name,"}, {"line_number": 30, "line_content": "\t\t\t\t\t\t\t\tstartTime: Math.round(timeOrigin + entry.startTime)"}, {"line_number": 31, "line_content": "\t\t\t\t\t\t\t});"}, {"line_number": 32, "line_content": "\t\t\t\t\t\t}"}, {"line_number": 33, "line_content": "\t\t\t\t\t\treturn result;"}, {"line_number": 34, "line_content": "\t\t\t\t\t}"}, {"line_number": 35, "line_content": "\t\t\t\t};"}, {"line_number": 36, "line_content": "\t\t\t}"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\t\t} else if (typeof process === 'object') {"}, {"line_number": 39, "line_content": "\t\t\t// node.js: use the normal polyfill but add the timeOrigin"}, {"line_number": 40, "line_content": "\t\t\t// from the node perf_hooks API as very first mark"}, {"line_number": 41, "line_content": "\t\t\tconst timeOrigin = Math.round((require.nodeRequire || require)('perf_hooks').performance.timeOrigin);"}, {"line_number": 42, "line_content": "\t\t\treturn _definePolyfillMarks(timeOrigin);"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "\t\t} else {"}, {"line_number": 45, "line_content": "\t\t\t// unknown environment"}, {"line_number": 46, "line_content": "\t\t\tconsole.trace('perf-util loaded in UNKNOWN environment');"}, {"line_number": 47, "line_content": "\t\t\treturn _definePolyfillMarks();"}, {"line_number": 48, "line_content": "\t\t}"}, {"line_number": 49, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function _factory(sharedObj) {"}, {"line_number": 2, "line_content": "\t\tif (!sharedObj.MonacoPerformanceMarks) {"}, {"line_number": 3, "line_content": "\t\t\tsharedObj.MonacoPerformanceMarks = _define();"}, {"line_number": 4, "line_content": "\t\t}"}, {"line_number": 5, "line_content": "\t\treturn sharedObj.MonacoPerformanceMarks;"}, {"line_number": 6, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function F(e,r){if(e instanceof H)return e;if(\"string\"!=typeof e)return null;if(e.length>o)return null;if(!(r?s[T]:s[b]).test(e))return null;try{return new H(e,r)}catch(e){return null}}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function H(e,r){if(e instanceof H){if(e.loose===r)return e;e=e.version}else if(\"string\"!=typeof e)throw new TypeError(\"Invalid Version: \"+e);if(e.length>o)throw new TypeError(\"version is longer than \"+o+\" characters\");if(!(this instanceof H))return new H(e,r);n(\"SemVer\",e,r),this.loose=r;var t=e.trim().match(r?s[T]:s[b]);if(!t)throw new TypeError(\"Invalid Version: \"+e);if(this.raw=e,this.major=+t[1],this.minor=+t[2],this.patch=+t[3],this.major>i||this.major<0)throw new TypeError(\"Invalid major version\");if(this.minor>i||this.minor<0)throw new TypeError(\"Invalid minor version\");if(this.patch>i||this.patch<0)throw new TypeError(\"Invalid patch version\");t[4]?this.prerelease=t[4].split(\".\").map((function(e){if(/^[0-9]+$/.test(e)){var r=+e;if(r>=0&&r<i)return r}return e})):this.prerelease=[],this.build=t[5]?t[5].split(\".\"):[],this.format()}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function K(e,r){var t=J.test(e),n=J.test(r);return t&&n&&(e=+e,r=+r),t&&!n?-1:n&&!t?1:e<r?-1:e>r?1:0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function Y(e,r,t){return Q(e,r,t)<0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ee(e,r,t){return 0===Q(e,r,t)}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function re(e,r,t){return 0!==Q(e,r,t)}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function te(e,r,t){return Q(e,r,t)>=0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ne(e,r,t){return Q(e,r,t)<=0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function oe(e,r,t,n){var o;switch(r){case\"===\":\"object\"==typeof e&&(e=e.version),\"object\"==typeof t&&(t=t.version),o=e===t;break;case\"!==\":\"object\"==typeof e&&(e=e.version),\"object\"==typeof t&&(t=t.version),o=e!==t;break;case\"\":case\"=\":case\"==\":o=ee(e,t,n);break;case\"!=\":o=re(e,t,n);break;case\">\":o=W(e,t,n);break;case\">=\":o=te(e,t,n);break;case\"<\":o=Y(e,t,n);break;case\"<=\":o=ne(e,t,n);break;default:throw new TypeError(\"Invalid operator: \"+r)}return o}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ie(e,r){if(e instanceof ie){if(e.loose===r)return e;e=e.value}if(!(this instanceof ie))return new ie(e,r);n(\"comparator\",e,r),this.loose=r,this.parse(e),this.semver===se?this.value=\"\":this.value=this.operator+this.semver.version,n(\"comp\",this)}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ae(e,r){if(e instanceof ae)return e.loose===r?e:new ae(e.raw,r);if(e instanceof ie)return new ae(e.value,r);if(!(this instanceof ae))return new ae(e,r);if(this.loose=r,this.raw=e,this.set=e.split(/\\s*\\|\\|\\s*/).map((function(e){return this.parseRange(e.trim())}),this).filter((function(e){return e.length})),!this.set.length)throw new TypeError(\"Invalid SemVer Range: \"+e);this.format()}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ue(e){return!e||\"x\"===e.toLowerCase()||\"*\"===e}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function ce(e,r,t,n,o,i,s,a,u,c,p,f,l){return((r=ue(t)?\"\":ue(n)?\">=\"+t+\".0.0\":ue(o)?\">=\"+t+\".\"+n+\".0\":\">=\"+r)+\" \"+(a=ue(u)?\"\":ue(c)?\"<\"+(+u+1)+\".0.0\":ue(p)?\"<\"+u+\".\"+(+c+1)+\".0\":f?\"<=\"+u+\".\"+c+\".\"+p+\"-\"+f:\"<=\"+a)).trim()}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function pe(e,r){for(var t=0;t<e.length;t++)if(!e[t].test(r))return!1;if(r.prerelease.length){for(t=0;t<e.length;t++)if(n(e[t].semver),e[t].semver!==se&&e[t].semver.prerelease.length>0){var o=e[t].semver;if(o.major===r.major&&o.minor===r.minor&&o.patch===r.patch)return!0}return!1}return!0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function fe(e,r,t){try{r=new ae(r,t)}catch(e){return!1}return r.test(e)}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function le(e,r,t,n){var o,i,s,a,u;switch(e=new H(e,n),r=new ae(r,n),t){case\">\":o=W,i=ne,s=Y,a=\">\",u=\">=\";break;case\"<\":o=Y,i=te,s=W,a=\"<\",u=\"<=\";break;default:throw new TypeError('Must provide a hilo val of \"<\" or \">\"')}if(fe(e,r,n))return!1;for(var c=0;c<r.set.length;++c){var p=r.set[c],f=null,l=null;if(p.forEach((function(e){e.semver===se&&(e=new ie(\">=0.0.0\")),f=f||e,l=l||e,o(e.semver,f.semver,n)?f=e:s(e.semver,l.semver,n)&&(l=e)})),f.operator===a||f.operator===u)return!1;if((!l.operator||l.operator===a)&&i(e,l.semver))return!1;if(l.operator===u&&s(e,l.semver))return!1}return!0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function Q(e,r,t){return new H(e,t).compare(new H(r,t))}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function W(e,r,t){return Q(e,r,t)>0}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function l(){p&&u&&(p=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function h(){if(!p){var e=a(l);p=!0;for(var r=c.length;r;){for(u=c,c=[];++f<r;)u&&u[f].run();f=-1,r=c.length}u=null,p=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(r){try{return n.call(null,e)}catch(r){return n.call(this,e)}}}(e)}}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function v(e,r){this.fun=e,this.array=r}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function m(){}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function i(){throw new Error(\"setTimeout has not been defined\")}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function s(){throw new Error(\"clearTimeout has not been defined\")}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function _defineProperties(target, props) {"}, {"line_number": 2, "line_content": "    for (var i = 0; i < props.length; i++) {"}, {"line_number": 3, "line_content": "      var descriptor = props[i];"}, {"line_number": 4, "line_content": "      descriptor.enumerable = descriptor.enumerable || false;"}, {"line_number": 5, "line_content": "      descriptor.configurable = true;"}, {"line_number": 6, "line_content": "      if (\"value\" in descriptor) descriptor.writable = true;"}, {"line_number": 7, "line_content": "      Object.defineProperty(target, descriptor.key, descriptor);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function _createClass(Constructor, protoProps, staticProps) {"}, {"line_number": 2, "line_content": "    if (protoProps) _defineProperties(Constructor.prototype, protoProps);"}, {"line_number": 3, "line_content": "    if (staticProps) _defineProperties(Constructor, staticProps);"}, {"line_number": 4, "line_content": "    Object.defineProperty(Constructor, \"prototype\", {"}, {"line_number": 5, "line_content": "      writable: false"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": "    return Constructor;"}, {"line_number": 8, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function _unsupportedIterableToArray(o, minLen) {"}, {"line_number": 2, "line_content": "    if (!o) return;"}, {"line_number": 3, "line_content": "    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);"}, {"line_number": 4, "line_content": "    var n = Object.prototype.toString.call(o).slice(8, -1);"}, {"line_number": 5, "line_content": "    if (n === \"Object\" && o.constructor) n = o.constructor.name;"}, {"line_number": 6, "line_content": "    if (n === \"Map\" || n === \"Set\") return Array.from(o);"}, {"line_number": 7, "line_content": "    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);"}, {"line_number": 8, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function _arrayLikeToArray(arr, len) {"}, {"line_number": 2, "line_content": "    if (len == null || len > arr.length) len = arr.length;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return arr2;"}, {"line_number": 7, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function _createForOfIteratorHelperLoose(o, allowArrayLike) {"}, {"line_number": 2, "line_content": "    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];"}, {"line_number": 3, "line_content": "    if (it) return (it = it.call(o)).next.bind(it);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {"}, {"line_number": 6, "line_content": "      if (it) o = it;"}, {"line_number": 7, "line_content": "      var i = 0;"}, {"line_number": 8, "line_content": "      return function () {"}, {"line_number": 9, "line_content": "        if (i >= o.length) return {"}, {"line_number": 10, "line_content": "          done: true"}, {"line_number": 11, "line_content": "        };"}, {"line_number": 12, "line_content": "        return {"}, {"line_number": 13, "line_content": "          done: false,"}, {"line_number": 14, "line_content": "          value: o[i++]"}, {"line_number": 15, "line_content": "        };"}, {"line_number": 16, "line_content": "      };"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");"}, {"line_number": 20, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function getDefaults() {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "      baseUrl: null,"}, {"line_number": 4, "line_content": "      breaks: false,"}, {"line_number": 5, "line_content": "      extensions: null,"}, {"line_number": 6, "line_content": "      gfm: true,"}, {"line_number": 7, "line_content": "      headerIds: true,"}, {"line_number": 8, "line_content": "      headerPrefix: '',"}, {"line_number": 9, "line_content": "      highlight: null,"}, {"line_number": 10, "line_content": "      langPrefix: 'language-',"}, {"line_number": 11, "line_content": "      mangle: true,"}, {"line_number": 12, "line_content": "      pedantic: false,"}, {"line_number": 13, "line_content": "      renderer: null,"}, {"line_number": 14, "line_content": "      sanitize: false,"}, {"line_number": 15, "line_content": "      sanitizer: null,"}, {"line_number": 16, "line_content": "      silent: false,"}, {"line_number": 17, "line_content": "      smartLists: false,"}, {"line_number": 18, "line_content": "      smartypants: false,"}, {"line_number": 19, "line_content": "      tokenizer: null,"}, {"line_number": 20, "line_content": "      walkTokens: null,"}, {"line_number": 21, "line_content": "      xhtml: false"}, {"line_number": 22, "line_content": "    };"}, {"line_number": 23, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function changeDefaults(newDefaults) {"}, {"line_number": 2, "line_content": "    exports.defaults = newDefaults;"}, {"line_number": 3, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function escape(html, encode) {"}, {"line_number": 2, "line_content": "    if (encode) {"}, {"line_number": 3, "line_content": "      if (escapeTest.test(html)) {"}, {"line_number": 4, "line_content": "        return html.replace(escapeReplace, getEscapeReplacement);"}, {"line_number": 5, "line_content": "      }"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "      if (escapeTestNoEncode.test(html)) {"}, {"line_number": 8, "line_content": "        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return html;"}, {"line_number": 13, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function unescape(html) {"}, {"line_number": 2, "line_content": "    // explicitly match decimal, hex, and named HTML entities"}, {"line_number": 3, "line_content": "    return html.replace(unescapeTest, function (_, n) {"}, {"line_number": 4, "line_content": "      n = n.toLowerCase();"}, {"line_number": 5, "line_content": "      if (n === 'colon') return ':';"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "      if (n.charAt(0) === '#') {"}, {"line_number": 8, "line_content": "        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "      return '';"}, {"line_number": 12, "line_content": "    });"}, {"line_number": 13, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "function resolveUrl(base, href) {"}, {"line_number": 2, "line_content": "    if (!baseUrls[' ' + base]) {"}, {"line_number": 3, "line_content": "      // we can ignore everything in base after the last slash of its path component,"}, {"line_number": 4, "line_content": "      // but we might need to add _that_"}, {"line_number": 5, "line_content": "      // https://tools.ietf.org/html/rfc3986#section-3"}, {"line_number": 6, "line_content": "      if (justDomain.test(base)) {"}, {"line_number": 7, "line_content": "        baseUrls[' ' + base] = base + '/';"}, {"line_number": 8, "line_content": "      } else {"}, {"line_number": 9, "line_content": "        baseUrls[' ' + base] = rtrim(base, '/', true);"}, {"line_number": 10, "line_content": "      }"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    base = baseUrls[' ' + base];"}, {"line_number": 14, "line_content": "    var relativeBase = base.indexOf(':') === -1;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    if (href.substring(0, 2) === '//') {"}, {"line_number": 17, "line_content": "      if (relativeBase) {"}, {"line_number": 18, "line_content": "        return href;"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "      return base.replace(protocol, '$1') + href;"}, {"line_number": 22, "line_content": "    } else if (href.charAt(0) === '/') {"}, {"line_number": 23, "line_content": "      if (relativeBase) {"}, {"line_number": 24, "line_content": "        return href;"}, {"line_number": 25, "line_content": "      }"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "      return base.replace(domain, '$1') + href;"}, {"line_number": 28, "line_content": "    } else {"}, {"line_number": 29, "line_content": "      return base + href;"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function merge(obj) {"}, {"line_number": 2, "line_content": "    var i = 1,"}, {"line_number": 3, "line_content": "        target,"}, {"line_number": 4, "line_content": "        key;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    for (; i < arguments.length; i++) {"}, {"line_number": 7, "line_content": "      target = arguments[i];"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "      for (key in target) {"}, {"line_number": 10, "line_content": "        if (Object.prototype.hasOwnProperty.call(target, key)) {"}, {"line_number": 11, "line_content": "          obj[key] = target[key];"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "      }"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    return obj;"}, {"line_number": 17, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 46, "lines": [{"line_number": 1, "line_content": "function splitCells(tableRow, count) {"}, {"line_number": 2, "line_content": "    // ensure that every cell-delimiting pipe has a space"}, {"line_number": 3, "line_content": "    // before it to distinguish it from an escaped pipe"}, {"line_number": 4, "line_content": "    var row = tableRow.replace(/\\|/g, function (match, offset, str) {"}, {"line_number": 5, "line_content": "      var escaped = false,"}, {"line_number": 6, "line_content": "          curr = offset;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "      while (--curr >= 0 && str[curr] === '\\\\') {"}, {"line_number": 9, "line_content": "        escaped = !escaped;"}, {"line_number": 10, "line_content": "      }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      if (escaped) {"}, {"line_number": 13, "line_content": "        // odd number of slashes means | is escaped"}, {"line_number": 14, "line_content": "        // so we leave it alone"}, {"line_number": 15, "line_content": "        return '|';"}, {"line_number": 16, "line_content": "      } else {"}, {"line_number": 17, "line_content": "        // add space before unescaped |"}, {"line_number": 18, "line_content": "        return ' |';"}, {"line_number": 19, "line_content": "      }"}, {"line_number": 20, "line_content": "    }),"}, {"line_number": 21, "line_content": "        cells = row.split(/ \\|/);"}, {"line_number": 22, "line_content": "    var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    if (!cells[0].trim()) {"}, {"line_number": 25, "line_content": "      cells.shift();"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    if (cells.length > 0 && !cells[cells.length - 1].trim()) {"}, {"line_number": 29, "line_content": "      cells.pop();"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    if (cells.length > count) {"}, {"line_number": 33, "line_content": "      cells.splice(count);"}, {"line_number": 34, "line_content": "    } else {"}, {"line_number": 35, "line_content": "      while (cells.length < count) {"}, {"line_number": 36, "line_content": "        cells.push('');"}, {"line_number": 37, "line_content": "      }"}, {"line_number": 38, "line_content": "    }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "    for (; i < cells.length; i++) {"}, {"line_number": 41, "line_content": "      // leading or trailing whitespace is ignored per the gfm spec"}, {"line_number": 42, "line_content": "      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');"}, {"line_number": 43, "line_content": "    }"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    return cells;"}, {"line_number": 46, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "function rtrim(str, c, invert) {"}, {"line_number": 2, "line_content": "    var l = str.length;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (l === 0) {"}, {"line_number": 5, "line_content": "      return '';"}, {"line_number": 6, "line_content": "    } // Length of suffix matching the invert condition."}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    var suffLen = 0; // Step left until we fail to match the invert condition."}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    while (suffLen < l) {"}, {"line_number": 12, "line_content": "      var currChar = str.charAt(l - suffLen - 1);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      if (currChar === c && !invert) {"}, {"line_number": 15, "line_content": "        suffLen++;"}, {"line_number": 16, "line_content": "      } else if (currChar !== c && invert) {"}, {"line_number": 17, "line_content": "        suffLen++;"}, {"line_number": 18, "line_content": "      } else {"}, {"line_number": 19, "line_content": "        break;"}, {"line_number": 20, "line_content": "      }"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    return str.slice(0, l - suffLen);"}, {"line_number": 24, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function findClosingBracket(str, b) {"}, {"line_number": 2, "line_content": "    if (str.indexOf(b[1]) === -1) {"}, {"line_number": 3, "line_content": "      return -1;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    var l = str.length;"}, {"line_number": 7, "line_content": "    var level = 0,"}, {"line_number": 8, "line_content": "        i = 0;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    for (; i < l; i++) {"}, {"line_number": 11, "line_content": "      if (str[i] === '\\\\') {"}, {"line_number": 12, "line_content": "        i++;"}, {"line_number": 13, "line_content": "      } else if (str[i] === b[0]) {"}, {"line_number": 14, "line_content": "        level++;"}, {"line_number": 15, "line_content": "      } else if (str[i] === b[1]) {"}, {"line_number": 16, "line_content": "        level--;"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "        if (level < 0) {"}, {"line_number": 19, "line_content": "          return i;"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "      }"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    return -1;"}, {"line_number": 25, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function checkSanitizeDeprecation(opt) {"}, {"line_number": 2, "line_content": "    if (opt && opt.sanitize && !opt.silent) {"}, {"line_number": 3, "line_content": "      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function repeatString(pattern, count) {"}, {"line_number": 2, "line_content": "    if (count < 1) {"}, {"line_number": 3, "line_content": "      return '';"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    var result = '';"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    while (count > 1) {"}, {"line_number": 9, "line_content": "      if (count & 1) {"}, {"line_number": 10, "line_content": "        result += pattern;"}, {"line_number": 11, "line_content": "      }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "      count >>= 1;"}, {"line_number": 14, "line_content": "      pattern += pattern;"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return result + pattern;"}, {"line_number": 18, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function outputLink(cap, link, raw, lexer) {"}, {"line_number": 2, "line_content": "    var href = link.href;"}, {"line_number": 3, "line_content": "    var title = link.title ? escape(link.title) : null;"}, {"line_number": 4, "line_content": "    var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (cap[0].charAt(0) !== '!') {"}, {"line_number": 7, "line_content": "      lexer.state.inLink = true;"}, {"line_number": 8, "line_content": "      var token = {"}, {"line_number": 9, "line_content": "        type: 'link',"}, {"line_number": 10, "line_content": "        raw: raw,"}, {"line_number": 11, "line_content": "        href: href,"}, {"line_number": 12, "line_content": "        title: title,"}, {"line_number": 13, "line_content": "        text: text,"}, {"line_number": 14, "line_content": "        tokens: lexer.inlineTokens(text, [])"}, {"line_number": 15, "line_content": "      };"}, {"line_number": 16, "line_content": "      lexer.state.inLink = false;"}, {"line_number": 17, "line_content": "      return token;"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    return {"}, {"line_number": 21, "line_content": "      type: 'image',"}, {"line_number": 22, "line_content": "      raw: raw,"}, {"line_number": 23, "line_content": "      href: href,"}, {"line_number": 24, "line_content": "      title: title,"}, {"line_number": 25, "line_content": "      text: escape(text)"}, {"line_number": 26, "line_content": "    };"}, {"line_number": 27, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "function indentCodeCompensation(raw, text) {"}, {"line_number": 2, "line_content": "    var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (matchIndentToCode === null) {"}, {"line_number": 5, "line_content": "      return text;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    var indentToCode = matchIndentToCode[1];"}, {"line_number": 9, "line_content": "    return text.split('\\n').map(function (node) {"}, {"line_number": 10, "line_content": "      var matchIndentInNode = node.match(/^\\s+/);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "      if (matchIndentInNode === null) {"}, {"line_number": 13, "line_content": "        return node;"}, {"line_number": 14, "line_content": "      }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "      var indentInNode = matchIndentInNode[0];"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "      if (indentInNode.length >= indentToCode.length) {"}, {"line_number": 19, "line_content": "        return node.slice(indentToCode.length);"}, {"line_number": 20, "line_content": "      }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "      return node;"}, {"line_number": 23, "line_content": "    }).join('\\n');"}, {"line_number": 24, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function Tokenizer(options) {"}, {"line_number": 2, "line_content": "      this.options = options || exports.defaults;"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function smartypants(text) {"}, {"line_number": 2, "line_content": "    return text // em-dashes"}, {"line_number": 3, "line_content": "    .replace(/---/g, \"\\u2014\") // en-dashes"}, {"line_number": 4, "line_content": "    .replace(/--/g, \"\\u2013\") // opening singles"}, {"line_number": 5, "line_content": "    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes"}, {"line_number": 6, "line_content": "    .replace(/'/g, \"\\u2019\") // opening doubles"}, {"line_number": 7, "line_content": "    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles"}, {"line_number": 8, "line_content": "    .replace(/\"/g, \"\\u201D\") // ellipses"}, {"line_number": 9, "line_content": "    .replace(/\\.{3}/g, \"\\u2026\");"}, {"line_number": 10, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function mangle(text) {"}, {"line_number": 2, "line_content": "    var out = '',"}, {"line_number": 3, "line_content": "        i,"}, {"line_number": 4, "line_content": "        ch;"}, {"line_number": 5, "line_content": "    var l = text.length;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    for (i = 0; i < l; i++) {"}, {"line_number": 8, "line_content": "      ch = text.charCodeAt(i);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      if (Math.random() > 0.5) {"}, {"line_number": 11, "line_content": "        ch = 'x' + ch.toString(16);"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      out += '&#' + ch + ';';"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return out;"}, {"line_number": 18, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "function Lexer(options) {"}, {"line_number": 2, "line_content": "      this.tokens = [];"}, {"line_number": 3, "line_content": "      this.tokens.links = Object.create(null);"}, {"line_number": 4, "line_content": "      this.options = options || exports.defaults;"}, {"line_number": 5, "line_content": "      this.options.tokenizer = this.options.tokenizer || new Tokenizer();"}, {"line_number": 6, "line_content": "      this.tokenizer = this.options.tokenizer;"}, {"line_number": 7, "line_content": "      this.tokenizer.options = this.options;"}, {"line_number": 8, "line_content": "      this.tokenizer.lexer = this;"}, {"line_number": 9, "line_content": "      this.inlineQueue = [];"}, {"line_number": 10, "line_content": "      this.state = {"}, {"line_number": 11, "line_content": "        inLink: false,"}, {"line_number": 12, "line_content": "        inRawBlock: false,"}, {"line_number": 13, "line_content": "        top: true"}, {"line_number": 14, "line_content": "      };"}, {"line_number": 15, "line_content": "      var rules = {"}, {"line_number": 16, "line_content": "        block: block.normal,"}, {"line_number": 17, "line_content": "        inline: inline.normal"}, {"line_number": 18, "line_content": "      };"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "      if (this.options.pedantic) {"}, {"line_number": 21, "line_content": "        rules.block = block.pedantic;"}, {"line_number": 22, "line_content": "        rules.inline = inline.pedantic;"}, {"line_number": 23, "line_content": "      } else if (this.options.gfm) {"}, {"line_number": 24, "line_content": "        rules.block = block.gfm;"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "        if (this.options.breaks) {"}, {"line_number": 27, "line_content": "          rules.inline = inline.breaks;"}, {"line_number": 28, "line_content": "        } else {"}, {"line_number": 29, "line_content": "          rules.inline = inline.gfm;"}, {"line_number": 30, "line_content": "        }"}, {"line_number": 31, "line_content": "      }"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "      this.tokenizer.rules = rules;"}, {"line_number": 34, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function Renderer(options) {"}, {"line_number": 2, "line_content": "      this.options = options || exports.defaults;"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function TextRenderer() {}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function Slugger() {"}, {"line_number": 2, "line_content": "      this.seen = {};"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function Parser(options) {"}, {"line_number": 2, "line_content": "      this.options = options || exports.defaults;"}, {"line_number": 3, "line_content": "      this.options.renderer = this.options.renderer || new Renderer();"}, {"line_number": 4, "line_content": "      this.renderer = this.options.renderer;"}, {"line_number": 5, "line_content": "      this.renderer.options = this.options;"}, {"line_number": 6, "line_content": "      this.textRenderer = new TextRenderer();"}, {"line_number": 7, "line_content": "      this.slugger = new Slugger();"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 103, "lines": [{"line_number": 1, "line_content": "function marked(src, opt, callback) {"}, {"line_number": 2, "line_content": "    // throw error in case of non string input"}, {"line_number": 3, "line_content": "    if (typeof src === 'undefined' || src === null) {"}, {"line_number": 4, "line_content": "      throw new Error('marked(): input parameter is undefined or null');"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (typeof src !== 'string') {"}, {"line_number": 8, "line_content": "      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    if (typeof opt === 'function') {"}, {"line_number": 12, "line_content": "      callback = opt;"}, {"line_number": 13, "line_content": "      opt = null;"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    opt = merge({}, marked.defaults, opt || {});"}, {"line_number": 17, "line_content": "    checkSanitizeDeprecation(opt);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    if (callback) {"}, {"line_number": 20, "line_content": "      var highlight = opt.highlight;"}, {"line_number": 21, "line_content": "      var tokens;"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "      try {"}, {"line_number": 24, "line_content": "        tokens = Lexer.lex(src, opt);"}, {"line_number": 25, "line_content": "      } catch (e) {"}, {"line_number": 26, "line_content": "        return callback(e);"}, {"line_number": 27, "line_content": "      }"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "      var done = function done(err) {"}, {"line_number": 30, "line_content": "        var out;"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "        if (!err) {"}, {"line_number": 33, "line_content": "          try {"}, {"line_number": 34, "line_content": "            if (opt.walkTokens) {"}, {"line_number": 35, "line_content": "              marked.walkTokens(tokens, opt.walkTokens);"}, {"line_number": 36, "line_content": "            }"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "            out = Parser.parse(tokens, opt);"}, {"line_number": 39, "line_content": "          } catch (e) {"}, {"line_number": 40, "line_content": "            err = e;"}, {"line_number": 41, "line_content": "          }"}, {"line_number": 42, "line_content": "        }"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "        opt.highlight = highlight;"}, {"line_number": 45, "line_content": "        return err ? callback(err) : callback(null, out);"}, {"line_number": 46, "line_content": "      };"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "      if (!highlight || highlight.length < 3) {"}, {"line_number": 49, "line_content": "        return done();"}, {"line_number": 50, "line_content": "      }"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "      delete opt.highlight;"}, {"line_number": 53, "line_content": "      if (!tokens.length) return done();"}, {"line_number": 54, "line_content": "      var pending = 0;"}, {"line_number": 55, "line_content": "      marked.walkTokens(tokens, function (token) {"}, {"line_number": 56, "line_content": "        if (token.type === 'code') {"}, {"line_number": 57, "line_content": "          pending++;"}, {"line_number": 58, "line_content": "          setTimeout(function () {"}, {"line_number": 59, "line_content": "            highlight(token.text, token.lang, function (err, code) {"}, {"line_number": 60, "line_content": "              if (err) {"}, {"line_number": 61, "line_content": "                return done(err);"}, {"line_number": 62, "line_content": "              }"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "              if (code != null && code !== token.text) {"}, {"line_number": 65, "line_content": "                token.text = code;"}, {"line_number": 66, "line_content": "                token.escaped = true;"}, {"line_number": 67, "line_content": "              }"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "              pending--;"}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "              if (pending === 0) {"}, {"line_number": 72, "line_content": "                done();"}, {"line_number": 73, "line_content": "              }"}, {"line_number": 74, "line_content": "            });"}, {"line_number": 75, "line_content": "          }, 0);"}, {"line_number": 76, "line_content": "        }"}, {"line_number": 77, "line_content": "      });"}, {"line_number": 78, "line_content": ""}, {"line_number": 79, "line_content": "      if (pending === 0) {"}, {"line_number": 80, "line_content": "        done();"}, {"line_number": 81, "line_content": "      }"}, {"line_number": 82, "line_content": ""}, {"line_number": 83, "line_content": "      return;"}, {"line_number": 84, "line_content": "    }"}, {"line_number": 85, "line_content": ""}, {"line_number": 86, "line_content": "    try {"}, {"line_number": 87, "line_content": "      var _tokens = Lexer.lex(src, opt);"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "      if (opt.walkTokens) {"}, {"line_number": 90, "line_content": "        marked.walkTokens(_tokens, opt.walkTokens);"}, {"line_number": 91, "line_content": "      }"}, {"line_number": 92, "line_content": ""}, {"line_number": 93, "line_content": "      return Parser.parse(_tokens, opt);"}, {"line_number": 94, "line_content": "    } catch (e) {"}, {"line_number": 95, "line_content": "      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';"}, {"line_number": 96, "line_content": ""}, {"line_number": 97, "line_content": "      if (opt.silent) {"}, {"line_number": 98, "line_content": "        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';"}, {"line_number": 99, "line_content": "      }"}, {"line_number": 100, "line_content": ""}, {"line_number": 101, "line_content": "      throw e;"}, {"line_number": 102, "line_content": "    }"}, {"line_number": 103, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function edit(regex, opt) {"}, {"line_number": 2, "line_content": "    regex = typeof regex === 'string' ? regex : regex.source;"}, {"line_number": 3, "line_content": "    opt = opt || '';"}, {"line_number": 4, "line_content": "    var obj = {"}, {"line_number": 5, "line_content": "      replace: function replace(name, val) {"}, {"line_number": 6, "line_content": "        val = val.source || val;"}, {"line_number": 7, "line_content": "        val = val.replace(caret, '$1');"}, {"line_number": 8, "line_content": "        regex = regex.replace(name, val);"}, {"line_number": 9, "line_content": "        return obj;"}, {"line_number": 10, "line_content": "      },"}, {"line_number": 11, "line_content": "      getRegex: function getRegex() {"}, {"line_number": 12, "line_content": "        return new RegExp(regex, opt);"}, {"line_number": 13, "line_content": "      }"}, {"line_number": 14, "line_content": "    };"}, {"line_number": 15, "line_content": "    return obj;"}, {"line_number": 16, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function cleanUrl(sanitize, base, href) {"}, {"line_number": 2, "line_content": "    if (sanitize) {"}, {"line_number": 3, "line_content": "      var prot;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "      try {"}, {"line_number": 6, "line_content": "        prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();"}, {"line_number": 7, "line_content": "      } catch (e) {"}, {"line_number": 8, "line_content": "        return null;"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {"}, {"line_number": 12, "line_content": "        return null;"}, {"line_number": 13, "line_content": "      }"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    if (base && !originIndependentUrl.test(href)) {"}, {"line_number": 17, "line_content": "      href = resolveUrl(base, href);"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    try {"}, {"line_number": 21, "line_content": "      href = encodeURI(href).replace(/%25/g, '%');"}, {"line_number": 22, "line_content": "    } catch (e) {"}, {"line_number": 23, "line_content": "      return null;"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    return href;"}, {"line_number": 27, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 229, "lines": [{"line_number": 1, "line_content": "function factory(nodeRequire, path, fs, perf) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\t\t/**"}, {"line_number": 4, "line_content": "\t\t * @param {string} file"}, {"line_number": 5, "line_content": "\t\t * @returns {Promise<boolean>}"}, {"line_number": 6, "line_content": "\t\t */"}, {"line_number": 7, "line_content": "\t\tfunction exists(file) {"}, {"line_number": 8, "line_content": "\t\t\treturn new Promise(c => fs.exists(file, c));"}, {"line_number": 9, "line_content": "\t\t}"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\t\t/**"}, {"line_number": 12, "line_content": "\t\t * @param {string} file"}, {"line_number": 13, "line_content": "\t\t * @returns {Promise<void>}"}, {"line_number": 14, "line_content": "\t\t */"}, {"line_number": 15, "line_content": "\t\tfunction touch(file) {"}, {"line_number": 16, "line_content": "\t\t\treturn new Promise((c, e) => { const d = new Date(); fs.utimes(file, d, d, err => err ? e(err) : c()); });"}, {"line_number": 17, "line_content": "\t\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\t\t/**"}, {"line_number": 20, "line_content": "\t\t * @param {string} dir"}, {"line_number": 21, "line_content": "\t\t * @returns {Promise<string>}"}, {"line_number": 22, "line_content": "\t\t */"}, {"line_number": 23, "line_content": "\t\tfunction mkdirp(dir) {"}, {"line_number": 24, "line_content": "\t\t\treturn new Promise((c, e) => fs.mkdir(dir, { recursive: true }, err => (err && err.code !== 'EEXIST') ? e(err) : c(dir)));"}, {"line_number": 25, "line_content": "\t\t}"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\t\t/**"}, {"line_number": 28, "line_content": "\t\t * @param {string} location"}, {"line_number": 29, "line_content": "\t\t * @returns {Promise<void>}"}, {"line_number": 30, "line_content": "\t\t */"}, {"line_number": 31, "line_content": "\t\tfunction rimraf(location) {"}, {"line_number": 32, "line_content": "\t\t\treturn new Promise((c, e) => fs.rm(location, { recursive: true, force: true, maxRetries: 3 }, err => err ? e(err) : c()));"}, {"line_number": 33, "line_content": "\t\t}"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "\t\t/**"}, {"line_number": 36, "line_content": "\t\t * @param {string} file"}, {"line_number": 37, "line_content": "\t\t * @returns {Promise<string>}"}, {"line_number": 38, "line_content": "\t\t */"}, {"line_number": 39, "line_content": "\t\tfunction readFile(file) {"}, {"line_number": 40, "line_content": "\t\t\treturn new Promise((c, e) => fs.readFile(file, 'utf8', (err, data) => err ? e(err) : c(data)));"}, {"line_number": 41, "line_content": "\t\t}"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\t\t/**"}, {"line_number": 44, "line_content": "\t\t * @param {string} file"}, {"line_number": 45, "line_content": "\t\t * @param {string} content"}, {"line_number": 46, "line_content": "\t\t * @returns {Promise<void>}"}, {"line_number": 47, "line_content": "\t\t */"}, {"line_number": 48, "line_content": "\t\tfunction writeFile(file, content) {"}, {"line_number": 49, "line_content": "\t\t\treturn new Promise((c, e) => fs.writeFile(file, content, 'utf8', err => err ? e(err) : c()));"}, {"line_number": 50, "line_content": "\t\t}"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "\t\t/**"}, {"line_number": 53, "line_content": "\t\t * @param {string} userDataPath"}, {"line_number": 54, "line_content": "\t\t * @returns {object}"}, {"line_number": 55, "line_content": "\t\t */"}, {"line_number": 56, "line_content": "\t\tfunction getLanguagePackConfigurations(userDataPath) {"}, {"line_number": 57, "line_content": "\t\t\tconst configFile = path.join(userDataPath, 'languagepacks.json');"}, {"line_number": 58, "line_content": "\t\t\ttry {"}, {"line_number": 59, "line_content": "\t\t\t\treturn nodeRequire(configFile);"}, {"line_number": 60, "line_content": "\t\t\t} catch (err) {"}, {"line_number": 61, "line_content": "\t\t\t\t// Do nothing. If we can't read the file we have no"}, {"line_number": 62, "line_content": "\t\t\t\t// language pack config."}, {"line_number": 63, "line_content": "\t\t\t}"}, {"line_number": 64, "line_content": "\t\t\treturn undefined;"}, {"line_number": 65, "line_content": "\t\t}"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "\t\t/**"}, {"line_number": 68, "line_content": "\t\t * @param {object} config"}, {"line_number": 69, "line_content": "\t\t * @param {string} locale"}, {"line_number": 70, "line_content": "\t\t */"}, {"line_number": 71, "line_content": "\t\tfunction resolveLanguagePackLocale(config, locale) {"}, {"line_number": 72, "line_content": "\t\t\ttry {"}, {"line_number": 73, "line_content": "\t\t\t\twhile (locale) {"}, {"line_number": 74, "line_content": "\t\t\t\t\tif (config[locale]) {"}, {"line_number": 75, "line_content": "\t\t\t\t\t\treturn locale;"}, {"line_number": 76, "line_content": "\t\t\t\t\t} else {"}, {"line_number": 77, "line_content": "\t\t\t\t\t\tconst index = locale.lastIndexOf('-');"}, {"line_number": 78, "line_content": "\t\t\t\t\t\tif (index > 0) {"}, {"line_number": 79, "line_content": "\t\t\t\t\t\t\tlocale = locale.substring(0, index);"}, {"line_number": 80, "line_content": "\t\t\t\t\t\t} else {"}, {"line_number": 81, "line_content": "\t\t\t\t\t\t\treturn undefined;"}, {"line_number": 82, "line_content": "\t\t\t\t\t\t}"}, {"line_number": 83, "line_content": "\t\t\t\t\t}"}, {"line_number": 84, "line_content": "\t\t\t\t}"}, {"line_number": 85, "line_content": "\t\t\t} catch (err) {"}, {"line_number": 86, "line_content": "\t\t\t\tconsole.error('Resolving language pack configuration failed.', err);"}, {"line_number": 87, "line_content": "\t\t\t}"}, {"line_number": 88, "line_content": "\t\t\treturn undefined;"}, {"line_number": 89, "line_content": "\t\t}"}, {"line_number": 90, "line_content": ""}, {"line_number": 91, "line_content": "\t\t/**"}, {"line_number": 92, "line_content": "\t\t * @param {string} commit"}, {"line_number": 93, "line_content": "\t\t * @param {string} userDataPath"}, {"line_number": 94, "line_content": "\t\t * @param {string} metaDataFile"}, {"line_number": 95, "line_content": "\t\t * @param {string} locale"}, {"line_number": 96, "line_content": "\t\t */"}, {"line_number": 97, "line_content": "\t\tfunction getNLSConfiguration(commit, userDataPath, metaDataFile, locale) {"}, {"line_number": 98, "line_content": "\t\t\tif (locale === 'pseudo') {"}, {"line_number": 99, "line_content": "\t\t\t\treturn Promise.resolve({ locale: locale, availableLanguages: {}, pseudo: true });"}, {"line_number": 100, "line_content": "\t\t\t}"}, {"line_number": 101, "line_content": ""}, {"line_number": 102, "line_content": "\t\t\tif (process.env['VSCODE_DEV']) {"}, {"line_number": 103, "line_content": "\t\t\t\treturn Promise.resolve({ locale: locale, availableLanguages: {} });"}, {"line_number": 104, "line_content": "\t\t\t}"}, {"line_number": 105, "line_content": ""}, {"line_number": 106, "line_content": "\t\t\t// We have a built version so we have extracted nls file. Try to find"}, {"line_number": 107, "line_content": "\t\t\t// the right file to use."}, {"line_number": 108, "line_content": ""}, {"line_number": 109, "line_content": "\t\t\t// Check if we have an English or English US locale. If so fall to default since that is our"}, {"line_number": 110, "line_content": "\t\t\t// English translation (we don't ship *.nls.en.json files)"}, {"line_number": 111, "line_content": "\t\t\tif (locale && (locale === 'en' || locale === 'en-us')) {"}, {"line_number": 112, "line_content": "\t\t\t\treturn Promise.resolve({ locale: locale, availableLanguages: {} });"}, {"line_number": 113, "line_content": "\t\t\t}"}, {"line_number": 114, "line_content": ""}, {"line_number": 115, "line_content": "\t\t\tconst initialLocale = locale;"}, {"line_number": 116, "line_content": ""}, {"line_number": 117, "line_content": "\t\t\tperf.mark('code/willGenerateNls');"}, {"line_number": 118, "line_content": ""}, {"line_number": 119, "line_content": "\t\t\tconst defaultResult = function (locale) {"}, {"line_number": 120, "line_content": "\t\t\t\tperf.mark('code/didGenerateNls');"}, {"line_number": 121, "line_content": "\t\t\t\treturn Promise.resolve({ locale: locale, availableLanguages: {} });"}, {"line_number": 122, "line_content": "\t\t\t};"}, {"line_number": 123, "line_content": "\t\t\ttry {"}, {"line_number": 124, "line_content": "\t\t\t\tif (!commit) {"}, {"line_number": 125, "line_content": "\t\t\t\t\treturn defaultResult(initialLocale);"}, {"line_number": 126, "line_content": "\t\t\t\t}"}, {"line_number": 127, "line_content": "\t\t\t\tconst configs = getLanguagePackConfigurations(userDataPath);"}, {"line_number": 128, "line_content": "\t\t\t\tif (!configs) {"}, {"line_number": 129, "line_content": "\t\t\t\t\treturn defaultResult(initialLocale);"}, {"line_number": 130, "line_content": "\t\t\t\t}"}, {"line_number": 131, "line_content": "\t\t\t\tlocale = resolveLanguagePackLocale(configs, locale);"}, {"line_number": 132, "line_content": "\t\t\t\tif (!locale) {"}, {"line_number": 133, "line_content": "\t\t\t\t\treturn defaultResult(initialLocale);"}, {"line_number": 134, "line_content": "\t\t\t\t}"}, {"line_number": 135, "line_content": "\t\t\t\tconst packConfig = configs[locale];"}, {"line_number": 136, "line_content": "\t\t\t\tlet mainPack;"}, {"line_number": 137, "line_content": "\t\t\t\tif (!packConfig || typeof packConfig.hash !== 'string' || !packConfig.translations || typeof (mainPack = packConfig.translations['vscode']) !== 'string') {"}, {"line_number": 138, "line_content": "\t\t\t\t\treturn defaultResult(initialLocale);"}, {"line_number": 139, "line_content": "\t\t\t\t}"}, {"line_number": 140, "line_content": "\t\t\t\treturn exists(mainPack).then(fileExists => {"}, {"line_number": 141, "line_content": "\t\t\t\t\tif (!fileExists) {"}, {"line_number": 142, "line_content": "\t\t\t\t\t\treturn defaultResult(initialLocale);"}, {"line_number": 143, "line_content": "\t\t\t\t\t}"}, {"line_number": 144, "line_content": "\t\t\t\t\tconst packId = packConfig.hash + '.' + locale;"}, {"line_number": 145, "line_content": "\t\t\t\t\tconst cacheRoot = path.join(userDataPath, 'clp', packId);"}, {"line_number": 146, "line_content": "\t\t\t\t\tconst coreLocation = path.join(cacheRoot, commit);"}, {"line_number": 147, "line_content": "\t\t\t\t\tconst translationsConfigFile = path.join(cacheRoot, 'tcf.json');"}, {"line_number": 148, "line_content": "\t\t\t\t\tconst corruptedFile = path.join(cacheRoot, 'corrupted.info');"}, {"line_number": 149, "line_content": "\t\t\t\t\tconst result = {"}, {"line_number": 150, "line_content": "\t\t\t\t\t\tlocale: initialLocale,"}, {"line_number": 151, "line_content": "\t\t\t\t\t\tavailableLanguages: { '*': locale },"}, {"line_number": 152, "line_content": "\t\t\t\t\t\t_languagePackId: packId,"}, {"line_number": 153, "line_content": "\t\t\t\t\t\t_translationsConfigFile: translationsConfigFile,"}, {"line_number": 154, "line_content": "\t\t\t\t\t\t_cacheRoot: cacheRoot,"}, {"line_number": 155, "line_content": "\t\t\t\t\t\t_resolvedLanguagePackCoreLocation: coreLocation,"}, {"line_number": 156, "line_content": "\t\t\t\t\t\t_corruptedFile: corruptedFile"}, {"line_number": 157, "line_content": "\t\t\t\t\t};"}, {"line_number": 158, "line_content": "\t\t\t\t\treturn exists(corruptedFile).then(corrupted => {"}, {"line_number": 159, "line_content": "\t\t\t\t\t\t// The nls cache directory is corrupted."}, {"line_number": 160, "line_content": "\t\t\t\t\t\tlet toDelete;"}, {"line_number": 161, "line_content": "\t\t\t\t\t\tif (corrupted) {"}, {"line_number": 162, "line_content": "\t\t\t\t\t\t\ttoDelete = rimraf(cacheRoot);"}, {"line_number": 163, "line_content": "\t\t\t\t\t\t} else {"}, {"line_number": 164, "line_content": "\t\t\t\t\t\t\ttoDelete = Promise.resolve(undefined);"}, {"line_number": 165, "line_content": "\t\t\t\t\t\t}"}, {"line_number": 166, "line_content": "\t\t\t\t\t\treturn toDelete.then(() => {"}, {"line_number": 167, "line_content": "\t\t\t\t\t\t\treturn exists(coreLocation).then(fileExists => {"}, {"line_number": 168, "line_content": "\t\t\t\t\t\t\t\tif (fileExists) {"}, {"line_number": 169, "line_content": "\t\t\t\t\t\t\t\t\t// We don't wait for this. No big harm if we can't touch"}, {"line_number": 170, "line_content": "\t\t\t\t\t\t\t\t\ttouch(coreLocation).catch(() => { });"}, {"line_number": 171, "line_content": "\t\t\t\t\t\t\t\t\tperf.mark('code/didGenerateNls');"}, {"line_number": 172, "line_content": "\t\t\t\t\t\t\t\t\treturn result;"}, {"line_number": 173, "line_content": "\t\t\t\t\t\t\t\t}"}, {"line_number": 174, "line_content": "\t\t\t\t\t\t\t\treturn mkdirp(coreLocation).then(() => {"}, {"line_number": 175, "line_content": "\t\t\t\t\t\t\t\t\treturn Promise.all([readFile(metaDataFile), readFile(mainPack)]);"}, {"line_number": 176, "line_content": "\t\t\t\t\t\t\t\t}).then(values => {"}, {"line_number": 177, "line_content": "\t\t\t\t\t\t\t\t\tconst metadata = JSON.parse(values[0]);"}, {"line_number": 178, "line_content": "\t\t\t\t\t\t\t\t\tconst packData = JSON.parse(values[1]).contents;"}, {"line_number": 179, "line_content": "\t\t\t\t\t\t\t\t\tconst bundles = Object.keys(metadata.bundles);"}, {"line_number": 180, "line_content": "\t\t\t\t\t\t\t\t\tconst writes = [];"}, {"line_number": 181, "line_content": "\t\t\t\t\t\t\t\t\tfor (const bundle of bundles) {"}, {"line_number": 182, "line_content": "\t\t\t\t\t\t\t\t\t\tconst modules = metadata.bundles[bundle];"}, {"line_number": 183, "line_content": "\t\t\t\t\t\t\t\t\t\tconst target = Object.create(null);"}, {"line_number": 184, "line_content": "\t\t\t\t\t\t\t\t\t\tfor (const module of modules) {"}, {"line_number": 185, "line_content": "\t\t\t\t\t\t\t\t\t\t\tconst keys = metadata.keys[module];"}, {"line_number": 186, "line_content": "\t\t\t\t\t\t\t\t\t\t\tconst defaultMessages = metadata.messages[module];"}, {"line_number": 187, "line_content": "\t\t\t\t\t\t\t\t\t\t\tconst translations = packData[module];"}, {"line_number": 188, "line_content": "\t\t\t\t\t\t\t\t\t\t\tlet targetStrings;"}, {"line_number": 189, "line_content": "\t\t\t\t\t\t\t\t\t\t\tif (translations) {"}, {"line_number": 190, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\ttargetStrings = [];"}, {"line_number": 191, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {"}, {"line_number": 192, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\tconst elem = keys[i];"}, {"line_number": 193, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\tconst key = typeof elem === 'string' ? elem : elem.key;"}, {"line_number": 194, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\tlet translatedMessage = translations[key];"}, {"line_number": 195, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\tif (translatedMessage === undefined) {"}, {"line_number": 196, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\ttranslatedMessage = defaultMessages[i];"}, {"line_number": 197, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\t}"}, {"line_number": 198, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t\ttargetStrings.push(translatedMessage);"}, {"line_number": 199, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\t}"}, {"line_number": 200, "line_content": "\t\t\t\t\t\t\t\t\t\t\t} else {"}, {"line_number": 201, "line_content": "\t\t\t\t\t\t\t\t\t\t\t\ttargetStrings = defaultMessages;"}, {"line_number": 202, "line_content": "\t\t\t\t\t\t\t\t\t\t\t}"}, {"line_number": 203, "line_content": "\t\t\t\t\t\t\t\t\t\t\ttarget[module] = targetStrings;"}, {"line_number": 204, "line_content": "\t\t\t\t\t\t\t\t\t\t}"}, {"line_number": 205, "line_content": "\t\t\t\t\t\t\t\t\t\twrites.push(writeFile(path.join(coreLocation, bundle.replace(/\\//g, '!') + '.nls.json'), JSON.stringify(target)));"}, {"line_number": 206, "line_content": "\t\t\t\t\t\t\t\t\t}"}, {"line_number": 207, "line_content": "\t\t\t\t\t\t\t\t\twrites.push(writeFile(translationsConfigFile, JSON.stringify(packConfig.translations)));"}, {"line_number": 208, "line_content": "\t\t\t\t\t\t\t\t\treturn Promise.all(writes);"}, {"line_number": 209, "line_content": "\t\t\t\t\t\t\t\t}).then(() => {"}, {"line_number": 210, "line_content": "\t\t\t\t\t\t\t\t\tperf.mark('code/didGenerateNls');"}, {"line_number": 211, "line_content": "\t\t\t\t\t\t\t\t\treturn result;"}, {"line_number": 212, "line_content": "\t\t\t\t\t\t\t\t}).catch(err => {"}, {"line_number": 213, "line_content": "\t\t\t\t\t\t\t\t\tconsole.error('Generating translation files failed.', err);"}, {"line_number": 214, "line_content": "\t\t\t\t\t\t\t\t\treturn defaultResult(locale);"}, {"line_number": 215, "line_content": "\t\t\t\t\t\t\t\t});"}, {"line_number": 216, "line_content": "\t\t\t\t\t\t\t});"}, {"line_number": 217, "line_content": "\t\t\t\t\t\t});"}, {"line_number": 218, "line_content": "\t\t\t\t\t});"}, {"line_number": 219, "line_content": "\t\t\t\t});"}, {"line_number": 220, "line_content": "\t\t\t} catch (err) {"}, {"line_number": 221, "line_content": "\t\t\t\tconsole.error('Generating translation files failed.', err);"}, {"line_number": 222, "line_content": "\t\t\t\treturn defaultResult(locale);"}, {"line_number": 223, "line_content": "\t\t\t}"}, {"line_number": 224, "line_content": "\t\t}"}, {"line_number": 225, "line_content": ""}, {"line_number": 226, "line_content": "\t\treturn {"}, {"line_number": 227, "line_content": "\t\t\tgetNLSConfiguration"}, {"line_number": 228, "line_content": "\t\t};"}, {"line_number": 229, "line_content": "\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function exists(file) {"}, {"line_number": 2, "line_content": "\t\t\treturn new Promise(c => fs.exists(file, c));"}, {"line_number": 3, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function touch(file) {"}, {"line_number": 2, "line_content": "\t\t\treturn new Promise((c, e) => { const d = new Date(); fs.utimes(file, d, d, err => err ? e(err) : c()); });"}, {"line_number": 3, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function mkdirp(dir) {"}, {"line_number": 2, "line_content": "\t\t\treturn new Promise((c, e) => fs.mkdir(dir, { recursive: true }, err => (err && err.code !== 'EEXIST') ? e(err) : c(dir)));"}, {"line_number": 3, "line_content": "\t\t}"}]}}
{"type": "functions", "project_source": "https://github.com/microsoft/vscode", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function rimraf(location) {"}, {"line_number": 2, "line_content": "\t\t\treturn new Promise((c, e) => fs.rm(location, { recursive: true, force: true, maxRetries: 3 }, err => err ? e(err) : c()));"}, {"line_number": 3, "line_content": "\t\t}"}]}}

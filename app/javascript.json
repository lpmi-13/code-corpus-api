{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function getPage(array, page, perPage) {"}, {"line_number": 2, "line_content": "  const obj = {}"}, {"line_number": 3, "line_content": "  const start = (page - 1) * perPage"}, {"line_number": 4, "line_content": "  const end = page * perPage"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  obj.items = array.slice(start, end)"}, {"line_number": 7, "line_content": "  if (obj.items.length === 0) {"}, {"line_number": 8, "line_content": "    return obj"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  if (page > 1) {"}, {"line_number": 12, "line_content": "    obj.prev = page - 1"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  if (end < array.length) {"}, {"line_number": 16, "line_content": "    obj.next = page + 1"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  if (obj.items.length !== array.length) {"}, {"line_number": 20, "line_content": "    obj.current = page"}, {"line_number": 21, "line_content": "    obj.first = 1"}, {"line_number": 22, "line_content": "    obj.last = Math.ceil(array.length / perPage)"}, {"line_number": 23, "line_content": "  }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "  return obj"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function deepQuery(value, q) {"}, {"line_number": 2, "line_content": "  const _ = this"}, {"line_number": 3, "line_content": "  if (value && q) {"}, {"line_number": 4, "line_content": "    if (_.isArray(value)) {"}, {"line_number": 5, "line_content": "      for (let i = 0; i < value.length; i++) {"}, {"line_number": 6, "line_content": "        if (_.deepQuery(value[i], q)) {"}, {"line_number": 7, "line_content": "          return true"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "      }"}, {"line_number": 10, "line_content": "    } else if (_.isObject(value) && !_.isArray(value)) {"}, {"line_number": 11, "line_content": "      for (const k in value) {"}, {"line_number": 12, "line_content": "        if (_.deepQuery(value[k], q)) {"}, {"line_number": 13, "line_content": "          return true"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {"}, {"line_number": 17, "line_content": "      return true"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "  }"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function validateKey(key) {"}, {"line_number": 2, "line_content": "  if (key.indexOf('/') !== -1) {"}, {"line_number": 3, "line_content": "    const msg = ["}, {"line_number": 4, "line_content": "      `Oops, found / character in database property '${key}'.`,"}, {"line_number": 5, "line_content": "      '',"}, {"line_number": 6, "line_content": "      \"/ aren't supported, if you want to tweak default routes, see\","}, {"line_number": 7, "line_content": "      'https://github.com/typicode/json-server/#add-custom-routes',"}, {"line_number": 8, "line_content": "    ].join('\\n')"}, {"line_number": 9, "line_content": "    throw new Error(msg)"}, {"line_number": 10, "line_content": "  }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function getRemovable(db, opts) {"}, {"line_number": 2, "line_content": "  const _ = this"}, {"line_number": 3, "line_content": "  const removable = []"}, {"line_number": 4, "line_content": "  _.each(db, (coll, collName) => {"}, {"line_number": 5, "line_content": "    _.each(coll, (doc) => {"}, {"line_number": 6, "line_content": "      _.each(doc, (value, key) => {"}, {"line_number": 7, "line_content": "        if (new RegExp(`${opts.foreignKeySuffix}$`).test(key)) {"}, {"line_number": 8, "line_content": "          // Remove foreign key suffix and pluralize it"}, {"line_number": 9, "line_content": "          // Example postId -> posts"}, {"line_number": 10, "line_content": "          const refName = pluralize.plural("}, {"line_number": 11, "line_content": "            key.replace(new RegExp(`${opts.foreignKeySuffix}$`), '')"}, {"line_number": 12, "line_content": "          )"}, {"line_number": 13, "line_content": "          // Test if table exists"}, {"line_number": 14, "line_content": "          if (db[refName]) {"}, {"line_number": 15, "line_content": "            // Test if references is defined in table"}, {"line_number": 16, "line_content": "            const ref = _.getById(db[refName], value)"}, {"line_number": 17, "line_content": "            if (_.isUndefined(ref)) {"}, {"line_number": 18, "line_content": "              removable.push({ name: collName, id: doc.id })"}, {"line_number": 19, "line_content": "            }"}, {"line_number": 20, "line_content": "          }"}, {"line_number": 21, "line_content": "        }"}, {"line_number": 22, "line_content": "      })"}, {"line_number": 23, "line_content": "    })"}, {"line_number": 24, "line_content": "  })"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "  return removable"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function createId(coll) {"}, {"line_number": 2, "line_content": "  const _ = this"}, {"line_number": 3, "line_content": "  const idProperty = _.__id()"}, {"line_number": 4, "line_content": "  if (_.isEmpty(coll)) {"}, {"line_number": 5, "line_content": "    return 1"}, {"line_number": 6, "line_content": "  } else {"}, {"line_number": 7, "line_content": "    let id = _(coll).maxBy(idProperty)[idProperty]"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // Increment integer id or generate string id"}, {"line_number": 10, "line_content": "    return _.isFinite(id) ? ++id : nanoid(7)"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function get(req, res, next) {"}, {"line_number": 2, "line_content": "    const prop = pluralize.singular(req.params.resource)"}, {"line_number": 3, "line_content": "    req.query[`${prop}${opts.foreignKeySuffix}`] = req.params.id"}, {"line_number": 4, "line_content": "    req.url = `/${req.params.nested}`"}, {"line_number": 5, "line_content": "    next()"}, {"line_number": 6, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function post(req, res, next) {"}, {"line_number": 2, "line_content": "    const prop = pluralize.singular(req.params.resource)"}, {"line_number": 3, "line_content": "    req.body[`${prop}${opts.foreignKeySuffix}`] = req.params.id"}, {"line_number": 4, "line_content": "    req.url = `/${req.params.nested}`"}, {"line_number": 5, "line_content": "    next()"}, {"line_number": 6, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function show(req, res, next) {"}, {"line_number": 2, "line_content": "    res.locals.data = db.get(name).value()"}, {"line_number": 3, "line_content": "    next()"}, {"line_number": 4, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function create(req, res, next) {"}, {"line_number": 2, "line_content": "    if (opts._isFake) {"}, {"line_number": 3, "line_content": "      res.locals.data = req.body"}, {"line_number": 4, "line_content": "    } else {"}, {"line_number": 5, "line_content": "      db.set(name, req.body).value()"}, {"line_number": 6, "line_content": "      res.locals.data = db.get(name).value()"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    res.setHeader('Access-Control-Expose-Headers', 'Location')"}, {"line_number": 10, "line_content": "    res.location(`${getFullURL(req)}`)"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    res.status(201)"}, {"line_number": 13, "line_content": "    next()"}, {"line_number": 14, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function update(req, res, next) {"}, {"line_number": 2, "line_content": "    if (opts._isFake) {"}, {"line_number": 3, "line_content": "      if (req.method === 'PUT') {"}, {"line_number": 4, "line_content": "        res.locals.data = req.body"}, {"line_number": 5, "line_content": "      } else {"}, {"line_number": 6, "line_content": "        const resource = db.get(name).value()"}, {"line_number": 7, "line_content": "        res.locals.data = { ...resource, ...req.body }"}, {"line_number": 8, "line_content": "      }"}, {"line_number": 9, "line_content": "    } else {"}, {"line_number": 10, "line_content": "      if (req.method === 'PUT') {"}, {"line_number": 11, "line_content": "        db.set(name, req.body).value()"}, {"line_number": 12, "line_content": "      } else {"}, {"line_number": 13, "line_content": "        db.get(name).assign(req.body).value()"}, {"line_number": 14, "line_content": "      }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "      res.locals.data = db.get(name).value()"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    next()"}, {"line_number": 20, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function embed(resource, e) {"}, {"line_number": 2, "line_content": "    e &&"}, {"line_number": 3, "line_content": "      [].concat(e).forEach((externalResource) => {"}, {"line_number": 4, "line_content": "        if (db.get(externalResource).value) {"}, {"line_number": 5, "line_content": "          const query = {}"}, {"line_number": 6, "line_content": "          const singularResource = pluralize.singular(name)"}, {"line_number": 7, "line_content": "          query[`${singularResource}${opts.foreignKeySuffix}`] = resource.id"}, {"line_number": 8, "line_content": "          resource[externalResource] = db"}, {"line_number": 9, "line_content": "            .get(externalResource)"}, {"line_number": 10, "line_content": "            .filter(query)"}, {"line_number": 11, "line_content": "            .value()"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "      })"}, {"line_number": 14, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function expand(resource, e) {"}, {"line_number": 2, "line_content": "    e &&"}, {"line_number": 3, "line_content": "      [].concat(e).forEach((innerResource) => {"}, {"line_number": 4, "line_content": "        const plural = pluralize(innerResource)"}, {"line_number": 5, "line_content": "        if (db.get(plural).value()) {"}, {"line_number": 6, "line_content": "          const prop = `${innerResource}${opts.foreignKeySuffix}`"}, {"line_number": 7, "line_content": "          resource[innerResource] = db"}, {"line_number": 8, "line_content": "            .get(plural)"}, {"line_number": 9, "line_content": "            .getById(resource[prop])"}, {"line_number": 10, "line_content": "            .value()"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": "      })"}, {"line_number": 13, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 178, "lines": [{"line_number": 1, "line_content": "function list(req, res, next) {"}, {"line_number": 2, "line_content": "    // Resource chain"}, {"line_number": 3, "line_content": "    let chain = db.get(name)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // Remove q, _start, _end, ... from req.query to avoid filtering using those"}, {"line_number": 6, "line_content": "    // parameters"}, {"line_number": 7, "line_content": "    let q = req.query.q"}, {"line_number": 8, "line_content": "    let _start = req.query._start"}, {"line_number": 9, "line_content": "    let _end = req.query._end"}, {"line_number": 10, "line_content": "    let _page = req.query._page"}, {"line_number": 11, "line_content": "    const _sort = req.query._sort"}, {"line_number": 12, "line_content": "    const _order = req.query._order"}, {"line_number": 13, "line_content": "    let _limit = req.query._limit"}, {"line_number": 14, "line_content": "    const _embed = req.query._embed"}, {"line_number": 15, "line_content": "    const _expand = req.query._expand"}, {"line_number": 16, "line_content": "    delete req.query.q"}, {"line_number": 17, "line_content": "    delete req.query._start"}, {"line_number": 18, "line_content": "    delete req.query._end"}, {"line_number": 19, "line_content": "    delete req.query._sort"}, {"line_number": 20, "line_content": "    delete req.query._order"}, {"line_number": 21, "line_content": "    delete req.query._limit"}, {"line_number": 22, "line_content": "    delete req.query._embed"}, {"line_number": 23, "line_content": "    delete req.query._expand"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    // Automatically delete query parameters that can't be found"}, {"line_number": 26, "line_content": "    // in the database"}, {"line_number": 27, "line_content": "    Object.keys(req.query).forEach((query) => {"}, {"line_number": 28, "line_content": "      const arr = db.get(name).value()"}, {"line_number": 29, "line_content": "      for (const i in arr) {"}, {"line_number": 30, "line_content": "        if ("}, {"line_number": 31, "line_content": "          _.has(arr[i], query) ||"}, {"line_number": 32, "line_content": "          query === 'callback' ||"}, {"line_number": 33, "line_content": "          query === '_' ||"}, {"line_number": 34, "line_content": "          /_lte$/.test(query) ||"}, {"line_number": 35, "line_content": "          /_gte$/.test(query) ||"}, {"line_number": 36, "line_content": "          /_ne$/.test(query) ||"}, {"line_number": 37, "line_content": "          /_like$/.test(query)"}, {"line_number": 38, "line_content": "        )"}, {"line_number": 39, "line_content": "          return"}, {"line_number": 40, "line_content": "      }"}, {"line_number": 41, "line_content": "      delete req.query[query]"}, {"line_number": 42, "line_content": "    })"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "    if (q) {"}, {"line_number": 45, "line_content": "      // Full-text search"}, {"line_number": 46, "line_content": "      if (Array.isArray(q)) {"}, {"line_number": 47, "line_content": "        q = q[0]"}, {"line_number": 48, "line_content": "      }"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "      q = q.toLowerCase()"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "      chain = chain.filter((obj) => {"}, {"line_number": 53, "line_content": "        for (const key in obj) {"}, {"line_number": 54, "line_content": "          const value = obj[key]"}, {"line_number": 55, "line_content": "          if (db._.deepQuery(value, q)) {"}, {"line_number": 56, "line_content": "            return true"}, {"line_number": 57, "line_content": "          }"}, {"line_number": 58, "line_content": "        }"}, {"line_number": 59, "line_content": "        return false"}, {"line_number": 60, "line_content": "      })"}, {"line_number": 61, "line_content": "    }"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "    Object.keys(req.query).forEach((key) => {"}, {"line_number": 64, "line_content": "      // Don't take into account JSONP query parameters"}, {"line_number": 65, "line_content": "      // jQuery adds a '_' query parameter too"}, {"line_number": 66, "line_content": "      if (key !== 'callback' && key !== '_') {"}, {"line_number": 67, "line_content": "        // Always use an array, in case req.query is an array"}, {"line_number": 68, "line_content": "        const arr = [].concat(req.query[key])"}, {"line_number": 69, "line_content": ""}, {"line_number": 70, "line_content": "        const isDifferent = /_ne$/.test(key)"}, {"line_number": 71, "line_content": "        const isRange = /_lte$/.test(key) || /_gte$/.test(key)"}, {"line_number": 72, "line_content": "        const isLike = /_like$/.test(key)"}, {"line_number": 73, "line_content": "        const path = key.replace(/(_lte|_gte|_ne|_like)$/, '')"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "        chain = chain.filter((element) => {"}, {"line_number": 76, "line_content": "          return arr"}, {"line_number": 77, "line_content": "            .map(function (value) {"}, {"line_number": 78, "line_content": "              // get item value based on path"}, {"line_number": 79, "line_content": "              // i.e post.title -> 'foo'"}, {"line_number": 80, "line_content": "              const elementValue = _.get(element, path)"}, {"line_number": 81, "line_content": ""}, {"line_number": 82, "line_content": "              // Prevent toString() failing on undefined or null values"}, {"line_number": 83, "line_content": "              if (elementValue === undefined || elementValue === null) {"}, {"line_number": 84, "line_content": "                return undefined"}, {"line_number": 85, "line_content": "              }"}, {"line_number": 86, "line_content": ""}, {"line_number": 87, "line_content": "              if (isRange) {"}, {"line_number": 88, "line_content": "                const isLowerThan = /_gte$/.test(key)"}, {"line_number": 89, "line_content": ""}, {"line_number": 90, "line_content": "                return isLowerThan"}, {"line_number": 91, "line_content": "                  ? value <= elementValue"}, {"line_number": 92, "line_content": "                  : value >= elementValue"}, {"line_number": 93, "line_content": "              } else if (isDifferent) {"}, {"line_number": 94, "line_content": "                return value !== elementValue.toString()"}, {"line_number": 95, "line_content": "              } else if (isLike) {"}, {"line_number": 96, "line_content": "                return new RegExp(value, 'i').test(elementValue.toString())"}, {"line_number": 97, "line_content": "              } else {"}, {"line_number": 98, "line_content": "                return value === elementValue.toString()"}, {"line_number": 99, "line_content": "              }"}, {"line_number": 100, "line_content": "            })"}, {"line_number": 101, "line_content": "            .reduce((a, b) => (isDifferent ? a && b : a || b))"}, {"line_number": 102, "line_content": "        })"}, {"line_number": 103, "line_content": "      }"}, {"line_number": 104, "line_content": "    })"}, {"line_number": 105, "line_content": ""}, {"line_number": 106, "line_content": "    // Sort"}, {"line_number": 107, "line_content": "    if (_sort) {"}, {"line_number": 108, "line_content": "      const _sortSet = _sort.split(',')"}, {"line_number": 109, "line_content": "      const _orderSet = (_order || '').split(',').map((s) => s.toLowerCase())"}, {"line_number": 110, "line_content": "      chain = chain.orderBy(_sortSet, _orderSet)"}, {"line_number": 111, "line_content": "    }"}, {"line_number": 112, "line_content": ""}, {"line_number": 113, "line_content": "    // Slice result"}, {"line_number": 114, "line_content": "    if (_end || _limit || _page) {"}, {"line_number": 115, "line_content": "      res.setHeader('X-Total-Count', chain.size())"}, {"line_number": 116, "line_content": "      res.setHeader("}, {"line_number": 117, "line_content": "        'Access-Control-Expose-Headers',"}, {"line_number": 118, "line_content": "        `X-Total-Count${_page ? ', Link' : ''}`"}, {"line_number": 119, "line_content": "      )"}, {"line_number": 120, "line_content": "    }"}, {"line_number": 121, "line_content": ""}, {"line_number": 122, "line_content": "    if (_page) {"}, {"line_number": 123, "line_content": "      _page = parseInt(_page, 10)"}, {"line_number": 124, "line_content": "      _page = _page >= 1 ? _page : 1"}, {"line_number": 125, "line_content": "      _limit = parseInt(_limit, 10) || 10"}, {"line_number": 126, "line_content": "      const page = utils.getPage(chain.value(), _page, _limit)"}, {"line_number": 127, "line_content": "      const links = {}"}, {"line_number": 128, "line_content": "      const fullURL = getFullURL(req)"}, {"line_number": 129, "line_content": ""}, {"line_number": 130, "line_content": "      if (page.first) {"}, {"line_number": 131, "line_content": "        links.first = fullURL.replace("}, {"line_number": 132, "line_content": "          `page=${page.current}`,"}, {"line_number": 133, "line_content": "          `page=${page.first}`"}, {"line_number": 134, "line_content": "        )"}, {"line_number": 135, "line_content": "      }"}, {"line_number": 136, "line_content": ""}, {"line_number": 137, "line_content": "      if (page.prev) {"}, {"line_number": 138, "line_content": "        links.prev = fullURL.replace("}, {"line_number": 139, "line_content": "          `page=${page.current}`,"}, {"line_number": 140, "line_content": "          `page=${page.prev}`"}, {"line_number": 141, "line_content": "        )"}, {"line_number": 142, "line_content": "      }"}, {"line_number": 143, "line_content": ""}, {"line_number": 144, "line_content": "      if (page.next) {"}, {"line_number": 145, "line_content": "        links.next = fullURL.replace("}, {"line_number": 146, "line_content": "          `page=${page.current}`,"}, {"line_number": 147, "line_content": "          `page=${page.next}`"}, {"line_number": 148, "line_content": "        )"}, {"line_number": 149, "line_content": "      }"}, {"line_number": 150, "line_content": ""}, {"line_number": 151, "line_content": "      if (page.last) {"}, {"line_number": 152, "line_content": "        links.last = fullURL.replace("}, {"line_number": 153, "line_content": "          `page=${page.current}`,"}, {"line_number": 154, "line_content": "          `page=${page.last}`"}, {"line_number": 155, "line_content": "        )"}, {"line_number": 156, "line_content": "      }"}, {"line_number": 157, "line_content": ""}, {"line_number": 158, "line_content": "      res.links(links)"}, {"line_number": 159, "line_content": "      chain = _.chain(page.items)"}, {"line_number": 160, "line_content": "    } else if (_end) {"}, {"line_number": 161, "line_content": "      _start = parseInt(_start, 10) || 0"}, {"line_number": 162, "line_content": "      _end = parseInt(_end, 10)"}, {"line_number": 163, "line_content": "      chain = chain.slice(_start, _end)"}, {"line_number": 164, "line_content": "    } else if (_limit) {"}, {"line_number": 165, "line_content": "      _start = parseInt(_start, 10) || 0"}, {"line_number": 166, "line_content": "      _limit = parseInt(_limit, 10)"}, {"line_number": 167, "line_content": "      chain = chain.slice(_start, _start + _limit)"}, {"line_number": 168, "line_content": "    }"}, {"line_number": 169, "line_content": ""}, {"line_number": 170, "line_content": "    // embed and expand"}, {"line_number": 171, "line_content": "    chain = chain.cloneDeep().forEach(function (element) {"}, {"line_number": 172, "line_content": "      embed(element, _embed)"}, {"line_number": 173, "line_content": "      expand(element, _expand)"}, {"line_number": 174, "line_content": "    })"}, {"line_number": 175, "line_content": ""}, {"line_number": 176, "line_content": "    res.locals.data = chain.value()"}, {"line_number": 177, "line_content": "    next()"}, {"line_number": 178, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function destroy(req, res, next) {"}, {"line_number": 2, "line_content": "    let resource"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (opts._isFake) {"}, {"line_number": 5, "line_content": "      resource = db.get(name).value()"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "      resource = db.get(name).removeById(req.params.id).value()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "      // Remove dependents documents"}, {"line_number": 10, "line_content": "      const removable = db._.getRemovable(db.getState(), opts)"}, {"line_number": 11, "line_content": "      removable.forEach((item) => {"}, {"line_number": 12, "line_content": "        db.get(item.name).removeById(item.id).value()"}, {"line_number": 13, "line_content": "      })"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    if (resource) {"}, {"line_number": 17, "line_content": "      res.locals.data = {}"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    next()"}, {"line_number": 21, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "function update(req, res, next) {"}, {"line_number": 2, "line_content": "    const id = req.params.id"}, {"line_number": 3, "line_content": "    let resource"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (opts._isFake) {"}, {"line_number": 6, "line_content": "      resource = db.get(name).getById(id).value()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "      if (req.method === 'PATCH') {"}, {"line_number": 9, "line_content": "        resource = { ...resource, ...req.body }"}, {"line_number": 10, "line_content": "      } else {"}, {"line_number": 11, "line_content": "        resource = { ...req.body, id: resource.id }"}, {"line_number": 12, "line_content": "      }"}, {"line_number": 13, "line_content": "    } else {"}, {"line_number": 14, "line_content": "      let chain = db.get(name)"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "      chain ="}, {"line_number": 17, "line_content": "        req.method === 'PATCH'"}, {"line_number": 18, "line_content": "          ? chain.updateById(id, req.body)"}, {"line_number": 19, "line_content": "          : chain.replaceById(id, req.body)"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "      resource = chain.value()"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    if (resource) {"}, {"line_number": 25, "line_content": "      res.locals.data = resource"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    next()"}, {"line_number": 29, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function show(req, res, next) {"}, {"line_number": 2, "line_content": "    const _embed = req.query._embed"}, {"line_number": 3, "line_content": "    const _expand = req.query._expand"}, {"line_number": 4, "line_content": "    const resource = db.get(name).getById(req.params.id).value()"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (resource) {"}, {"line_number": 7, "line_content": "      // Clone resource to avoid making changes to the underlying object"}, {"line_number": 8, "line_content": "      const clone = _.cloneDeep(resource)"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      // Embed other resources based on resource id"}, {"line_number": 11, "line_content": "      // /posts/1?_embed=comments"}, {"line_number": 12, "line_content": "      embed(clone, _embed)"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      // Expand inner resources based on id"}, {"line_number": 15, "line_content": "      // /posts/1?_expand=user"}, {"line_number": 16, "line_content": "      expand(clone, _expand)"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "      res.locals.data = clone"}, {"line_number": 19, "line_content": "    }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    next()"}, {"line_number": 22, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function create(req, res, next) {"}, {"line_number": 2, "line_content": "    let resource"}, {"line_number": 3, "line_content": "    if (opts._isFake) {"}, {"line_number": 4, "line_content": "      const id = db.get(name).createId().value()"}, {"line_number": 5, "line_content": "      resource = { ...req.body, id }"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "      resource = db.get(name).insert(req.body).value()"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    res.setHeader('Access-Control-Expose-Headers', 'Location')"}, {"line_number": 11, "line_content": "    res.location(`${getFullURL(req)}/${resource.id}`)"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    res.status(201)"}, {"line_number": 14, "line_content": "    res.locals.data = resource"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    next()"}, {"line_number": 17, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function prettyPrint(argv, object, rules) {"}, {"line_number": 2, "line_content": "  const root = `http://${argv.host}:${argv.port}`"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  console.log()"}, {"line_number": 5, "line_content": "  console.log(chalk.bold('  Resources'))"}, {"line_number": 6, "line_content": "  for (const prop in object) {"}, {"line_number": 7, "line_content": "    console.log(`  ${root}/${prop}`)"}, {"line_number": 8, "line_content": "  }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "  if (rules) {"}, {"line_number": 11, "line_content": "    console.log()"}, {"line_number": 12, "line_content": "    console.log(chalk.bold('  Other routes'))"}, {"line_number": 13, "line_content": "    for (const rule in rules) {"}, {"line_number": 14, "line_content": "      console.log(`  ${rule} -> ${rules[rule]}`)"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "  }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  console.log()"}, {"line_number": 19, "line_content": "  console.log(chalk.bold('  Home'))"}, {"line_number": 20, "line_content": "  console.log(`  ${root}`)"}, {"line_number": 21, "line_content": "  console.log()"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "function createApp(db, routes, middlewares, argv) {"}, {"line_number": 2, "line_content": "  const app = jsonServer.create()"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const { foreignKeySuffix } = argv"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  const router = jsonServer.router("}, {"line_number": 7, "line_content": "    db,"}, {"line_number": 8, "line_content": "    foreignKeySuffix ? { foreignKeySuffix } : undefined"}, {"line_number": 9, "line_content": "  )"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const defaultsOpts = {"}, {"line_number": 12, "line_content": "    logger: !argv.quiet,"}, {"line_number": 13, "line_content": "    readOnly: argv.readOnly,"}, {"line_number": 14, "line_content": "    noCors: argv.noCors,"}, {"line_number": 15, "line_content": "    noGzip: argv.noGzip,"}, {"line_number": 16, "line_content": "    bodyParser: true,"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  if (argv.static) {"}, {"line_number": 20, "line_content": "    defaultsOpts.static = path.join(process.cwd(), argv.static)"}, {"line_number": 21, "line_content": "  }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "  const defaults = jsonServer.defaults(defaultsOpts)"}, {"line_number": 24, "line_content": "  app.use(defaults)"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "  if (routes) {"}, {"line_number": 27, "line_content": "    const rewriter = jsonServer.rewriter(routes)"}, {"line_number": 28, "line_content": "    app.use(rewriter)"}, {"line_number": 29, "line_content": "  }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "  if (middlewares) {"}, {"line_number": 32, "line_content": "    app.use(middlewares)"}, {"line_number": 33, "line_content": "  }"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "  if (argv.delay) {"}, {"line_number": 36, "line_content": "    app.use(pause(argv.delay))"}, {"line_number": 37, "line_content": "  }"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "  router.db._.id = argv.id"}, {"line_number": 40, "line_content": "  app.db = router.db"}, {"line_number": 41, "line_content": "  app.use(router)"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "  return app"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 51, "lines": [{"line_number": 1, "line_content": "function start(cb) {"}, {"line_number": 2, "line_content": "    console.log()"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    console.log(chalk.gray('  Loading', source))"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    server = undefined"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // create db and load object, JSON file, JS or HTTP database"}, {"line_number": 9, "line_content": "    return load(source).then((db) => {"}, {"line_number": 10, "line_content": "      // Load additional routes"}, {"line_number": 11, "line_content": "      let routes"}, {"line_number": 12, "line_content": "      if (argv.routes) {"}, {"line_number": 13, "line_content": "        console.log(chalk.gray('  Loading', argv.routes))"}, {"line_number": 14, "line_content": "        routes = JSON.parse(fs.readFileSync(argv.routes))"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "      // Load middlewares"}, {"line_number": 18, "line_content": "      let middlewares"}, {"line_number": 19, "line_content": "      if (argv.middlewares) {"}, {"line_number": 20, "line_content": "        middlewares = argv.middlewares.map(function (m) {"}, {"line_number": 21, "line_content": "          console.log(chalk.gray('  Loading', m))"}, {"line_number": 22, "line_content": "          return require(path.resolve(m))"}, {"line_number": 23, "line_content": "        })"}, {"line_number": 24, "line_content": "      }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "      // Done"}, {"line_number": 27, "line_content": "      console.log(chalk.gray('  Done'))"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "      // Create app and server"}, {"line_number": 30, "line_content": "      app = createApp(db, routes, middlewares, argv)"}, {"line_number": 31, "line_content": "      server = app.listen(argv.port, argv.host)"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "      // Enhance with a destroy function"}, {"line_number": 34, "line_content": "      enableDestroy(server)"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "      // Display server informations"}, {"line_number": 37, "line_content": "      prettyPrint(argv, db.getState(), routes)"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "      // Catch and handle any error occurring in the server process"}, {"line_number": 40, "line_content": "      process.on('uncaughtException', (error) => {"}, {"line_number": 41, "line_content": "        if (error.errno === 'EADDRINUSE')"}, {"line_number": 42, "line_content": "          console.log("}, {"line_number": 43, "line_content": "            chalk.red("}, {"line_number": 44, "line_content": "              `Cannot bind to the port ${error.port}. Please specify another port number either through --port argument or through the json-server.json configuration file`"}, {"line_number": 45, "line_content": "            )"}, {"line_number": 46, "line_content": "          )"}, {"line_number": 47, "line_content": "        else console.log('Some error occurred', error)"}, {"line_number": 48, "line_content": "        process.exit(1)"}, {"line_number": 49, "line_content": "      })"}, {"line_number": 50, "line_content": "    })"}, {"line_number": 51, "line_content": "  }"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function FILE(s) {"}, {"line_number": 2, "line_content": "  return !URL(s) && /\\.json$/.test(s)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function JS(s) {"}, {"line_number": 2, "line_content": "  return !URL(s) && /\\.js$/.test(s)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function URL(s) {"}, {"line_number": 2, "line_content": "  return /^(http|https):/.test(s)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function ResourceItem({ name, length }) {"}, {"line_number": 2, "line_content": "  return `"}, {"line_number": 3, "line_content": "    <li>"}, {"line_number": 4, "line_content": "      <a href=\"${name}\">/${name}</a>"}, {"line_number": 5, "line_content": "      <sup>${length ? `${length}x` : 'object'}</sup>"}, {"line_number": 6, "line_content": "    </li>"}, {"line_number": 7, "line_content": "  `"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function ResourceList({ db }) {"}, {"line_number": 2, "line_content": "  return `"}, {"line_number": 3, "line_content": "    <ul>"}, {"line_number": 4, "line_content": "      ${Object.keys(db)"}, {"line_number": 5, "line_content": "        .map((name) =>"}, {"line_number": 6, "line_content": "          ResourceItem({"}, {"line_number": 7, "line_content": "            name,"}, {"line_number": 8, "line_content": "            length: Array.isArray(db[name]) && db[name].length,"}, {"line_number": 9, "line_content": "          })"}, {"line_number": 10, "line_content": "        )"}, {"line_number": 11, "line_content": "        .join('')}"}, {"line_number": 12, "line_content": "    </ul>"}, {"line_number": 13, "line_content": "  `"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function NoResources() {"}, {"line_number": 2, "line_content": "  return `<p>No resources found</p>`"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function ResourcesBlock({ db }) {"}, {"line_number": 2, "line_content": "  return `"}, {"line_number": 3, "line_content": "    <div>"}, {"line_number": 4, "line_content": "      <h1>Resources</h1>"}, {"line_number": 5, "line_content": "      ${Object.keys(db).length ? ResourceList({ db }) : NoResources()}"}, {"line_number": 6, "line_content": "    </div>"}, {"line_number": 7, "line_content": "  `"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function CustomRoutesBlock({ customRoutes }) {"}, {"line_number": 2, "line_content": "  const rules = Object.keys(customRoutes)"}, {"line_number": 3, "line_content": "  if (rules.length) {"}, {"line_number": 4, "line_content": "    return `"}, {"line_number": 5, "line_content": "      <div>"}, {"line_number": 6, "line_content": "        <h1>Custom Routes</h1>"}, {"line_number": 7, "line_content": "        <table>"}, {"line_number": 8, "line_content": "          ${rules"}, {"line_number": 9, "line_content": "            .map("}, {"line_number": 10, "line_content": "              (rule) =>"}, {"line_number": 11, "line_content": "                `<tr>"}, {"line_number": 12, "line_content": "              <td>${rule}</td>"}, {"line_number": 13, "line_content": "              <td><code>\u21e2</code> ${customRoutes[rule]}</td>"}, {"line_number": 14, "line_content": "            </tr>`"}, {"line_number": 15, "line_content": "            )"}, {"line_number": 16, "line_content": "            .join('')}"}, {"line_number": 17, "line_content": "        </table>"}, {"line_number": 18, "line_content": "      </div>"}, {"line_number": 19, "line_content": "    `"}, {"line_number": 20, "line_content": "  }"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/typicode/json-server", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function cli(args) {"}, {"line_number": 2, "line_content": "  return cp.spawn('node', ['--', bin, '-p', PORT].concat(args), {"}, {"line_number": 3, "line_content": "    cwd: __dirname,"}, {"line_number": 4, "line_content": "    stdio: ['pipe', process.stdout, process.stderr],"}, {"line_number": 5, "line_content": "  })"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function getChannelRegions(stream, { regions }) {\r"}, {"line_number": 2, "line_content": "\treturn stream.broadcast_area\r"}, {"line_number": 3, "line_content": "\t\t.reduce((acc, item) => {\r"}, {"line_number": 4, "line_content": "\t\t\tconst [type, code] = item.split('/')\r"}, {"line_number": 5, "line_content": "\t\t\tswitch (type) {\r"}, {"line_number": 6, "line_content": "\t\t\t\tcase 'r':\r"}, {"line_number": 7, "line_content": "\t\t\t\t\tacc.push(regions[code])\r"}, {"line_number": 8, "line_content": "\t\t\t\t\tbreak\r"}, {"line_number": 9, "line_content": "\t\t\t\tcase 's':\r"}, {"line_number": 10, "line_content": "\t\t\t\t\tconst [c] = code.split('-')\r"}, {"line_number": 11, "line_content": "\t\t\t\t\tconst r1 = _.filter(regions, { countries: [c] })\r"}, {"line_number": 12, "line_content": "\t\t\t\t\tacc = acc.concat(r1)\r"}, {"line_number": 13, "line_content": "\t\t\t\t\tbreak\r"}, {"line_number": 14, "line_content": "\t\t\t\tcase 'c':\r"}, {"line_number": 15, "line_content": "\t\t\t\t\tconst r2 = _.filter(regions, { countries: [code] })\r"}, {"line_number": 16, "line_content": "\t\t\t\t\tacc = acc.concat(r2)\r"}, {"line_number": 17, "line_content": "\t\t\t\t\tbreak\r"}, {"line_number": 18, "line_content": "\t\t\t}\r"}, {"line_number": 19, "line_content": "\t\t\treturn acc\r"}, {"line_number": 20, "line_content": "\t\t}, [])\r"}, {"line_number": 21, "line_content": "\t\t.filter(i => i)\r"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function getBroadcastCountries(stream, { countries, regions, subdivisions }) {\r"}, {"line_number": 2, "line_content": "\tlet codes = stream.broadcast_area.reduce((acc, item) => {\r"}, {"line_number": 3, "line_content": "\t\tconst [type, code] = item.split('/')\r"}, {"line_number": 4, "line_content": "\t\tswitch (type) {\r"}, {"line_number": 5, "line_content": "\t\t\tcase 'c':\r"}, {"line_number": 6, "line_content": "\t\t\t\tacc.push(code)\r"}, {"line_number": 7, "line_content": "\t\t\t\tbreak\r"}, {"line_number": 8, "line_content": "\t\t\tcase 'r':\r"}, {"line_number": 9, "line_content": "\t\t\t\tif (regions[code]) {\r"}, {"line_number": 10, "line_content": "\t\t\t\t\tacc = acc.concat(regions[code].countries)\r"}, {"line_number": 11, "line_content": "\t\t\t\t}\r"}, {"line_number": 12, "line_content": "\t\t\t\tbreak\r"}, {"line_number": 13, "line_content": "\t\t\tcase 's':\r"}, {"line_number": 14, "line_content": "\t\t\t\tif (subdivisions[code]) {\r"}, {"line_number": 15, "line_content": "\t\t\t\t\tacc.push(subdivisions[code].country)\r"}, {"line_number": 16, "line_content": "\t\t\t\t}\r"}, {"line_number": 17, "line_content": "\t\t\t\tbreak\r"}, {"line_number": 18, "line_content": "\t\t}\r"}, {"line_number": 19, "line_content": "\t\treturn acc\r"}, {"line_number": 20, "line_content": "\t}, [])\r"}, {"line_number": 21, "line_content": "\r"}, {"line_number": 22, "line_content": "\tcodes = _.uniq(codes)\r"}, {"line_number": 23, "line_content": "\r"}, {"line_number": 24, "line_content": "\treturn codes.map(code => countries[code]).filter(c => c)\r"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  await createCategoryTable()"}, {"line_number": 3, "line_content": "  await createCountryTable()"}, {"line_number": 4, "line_content": "  await createLanguageTable()"}, {"line_number": 5, "line_content": "  await createRegionTable()"}, {"line_number": 6, "line_content": "  await updateReadme()"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function createLanguageTable() {"}, {"line_number": 2, "line_content": "  logger.info('creating language table...')"}, {"line_number": 3, "line_content": "  const rows = []"}, {"line_number": 4, "line_content": "  await api.languages.load()"}, {"line_number": 5, "line_content": "  const items = await parser.parseLogs(`${LOGS_DIR}/languages.log`)"}, {"line_number": 6, "line_content": "  for (const item of items) {"}, {"line_number": 7, "line_content": "    const code = file.getFilename(item.filepath)"}, {"line_number": 8, "line_content": "    const language = await api.languages.find({ code })"}, {"line_number": 9, "line_content": "    rows.push({"}, {"line_number": 10, "line_content": "      name: language ? language.name : 'Undefined',"}, {"line_number": 11, "line_content": "      channels: item.count,"}, {"line_number": 12, "line_content": "      playlist: `<code>https://iptv-org.github.io/iptv/${item.filepath}</code>`"}, {"line_number": 13, "line_content": "    })"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  const table = createTable(rows, ["}, {"line_number": 17, "line_content": "    { name: 'Language', align: 'left' },"}, {"line_number": 18, "line_content": "    { name: 'Channels', align: 'right' },"}, {"line_number": 19, "line_content": "    { name: 'Playlist', align: 'left', nowrap: true }"}, {"line_number": 20, "line_content": "  ])"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "  await file.create('./.readme/_languages.md', table)"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function createCategoryTable() {"}, {"line_number": 2, "line_content": "  logger.info('creating category table...')"}, {"line_number": 3, "line_content": "  const rows = []"}, {"line_number": 4, "line_content": "  await api.categories.load()"}, {"line_number": 5, "line_content": "  const items = await parser.parseLogs(`${LOGS_DIR}/categories.log`)"}, {"line_number": 6, "line_content": "  for (const item of items) {"}, {"line_number": 7, "line_content": "    const id = file.getFilename(item.filepath)"}, {"line_number": 8, "line_content": "    const category = await api.categories.find({ id })"}, {"line_number": 9, "line_content": "    rows.push({"}, {"line_number": 10, "line_content": "      name: category ? category.name : 'Undefined',"}, {"line_number": 11, "line_content": "      channels: item.count,"}, {"line_number": 12, "line_content": "      playlist: `<code>https://iptv-org.github.io/iptv/${item.filepath}</code>`"}, {"line_number": 13, "line_content": "    })"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  const table = createTable(rows, ["}, {"line_number": 17, "line_content": "    { name: 'Category' },"}, {"line_number": 18, "line_content": "    { name: 'Channels', align: 'right' },"}, {"line_number": 19, "line_content": "    { name: 'Playlist', nowrap: true }"}, {"line_number": 20, "line_content": "  ])"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "  await file.create('./.readme/_categories.md', table)"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "async function updateReadme() {"}, {"line_number": 2, "line_content": "  logger.info('updating readme.md...')"}, {"line_number": 3, "line_content": "  const config = require(file.resolve(options.config))"}, {"line_number": 4, "line_content": "  await file.createDir(file.dirname(config.build))"}, {"line_number": 5, "line_content": "  await markdown.compile(options.config)"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function createCountryTable() {"}, {"line_number": 2, "line_content": "  logger.info('creating country table...')"}, {"line_number": 3, "line_content": "  const rows = []"}, {"line_number": 4, "line_content": "  await api.countries.load()"}, {"line_number": 5, "line_content": "  const items = await parser.parseLogs(`${LOGS_DIR}/countries.log`)"}, {"line_number": 6, "line_content": "  for (const item of items) {"}, {"line_number": 7, "line_content": "    const code = file.getFilename(item.filepath)"}, {"line_number": 8, "line_content": "    const country = await api.countries.find({ code: code.toUpperCase() })"}, {"line_number": 9, "line_content": "    rows.push({"}, {"line_number": 10, "line_content": "      name: country ? `${country.flag} ${country.name}` : 'Undefined',"}, {"line_number": 11, "line_content": "      channels: item.count,"}, {"line_number": 12, "line_content": "      playlist: `<code>https://iptv-org.github.io/iptv/${item.filepath}</code>`"}, {"line_number": 13, "line_content": "    })"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  const table = createTable(rows, ["}, {"line_number": 17, "line_content": "    { name: 'Country' },"}, {"line_number": 18, "line_content": "    { name: 'Channels', align: 'right' },"}, {"line_number": 19, "line_content": "    { name: 'Playlist', nowrap: true }"}, {"line_number": 20, "line_content": "  ])"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "  await file.create('./.readme/_countries.md', table)"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function createRegionTable() {"}, {"line_number": 2, "line_content": "  logger.info('creating region table...')"}, {"line_number": 3, "line_content": "  const rows = []"}, {"line_number": 4, "line_content": "  await api.regions.load()"}, {"line_number": 5, "line_content": "  const items = await parser.parseLogs(`${LOGS_DIR}/regions.log`)"}, {"line_number": 6, "line_content": "  for (const item of items) {"}, {"line_number": 7, "line_content": "    const code = file.getFilename(item.filepath)"}, {"line_number": 8, "line_content": "    const region = await api.regions.find({ code: code.toUpperCase() })"}, {"line_number": 9, "line_content": "    rows.push({"}, {"line_number": 10, "line_content": "      name: region ? region.name : 'Undefined',"}, {"line_number": 11, "line_content": "      channels: item.count,"}, {"line_number": 12, "line_content": "      playlist: `<code>https://iptv-org.github.io/iptv/${item.filepath}</code>`"}, {"line_number": 13, "line_content": "    })"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  const table = createTable(rows, ["}, {"line_number": 17, "line_content": "    { name: 'Region', align: 'left' },"}, {"line_number": 18, "line_content": "    { name: 'Channels', align: 'right' },"}, {"line_number": 19, "line_content": "    { name: 'Playlist', align: 'left', nowrap: true }"}, {"line_number": 20, "line_content": "  ])"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "  await file.create('./.readme/_regions.md', table)"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  logger.info('starting...')"}, {"line_number": 3, "line_content": "  logger.info(`number of clusters: ${options.maxClusters}`)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  await saveToDatabase(await findStreams())"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  logger.info('done')"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "async function findStreams() {"}, {"line_number": 2, "line_content": "  logger.info(`looking for streams...`)"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  await api.channels.load()"}, {"line_number": 5, "line_content": "  await db.streams.load()"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const streams = []"}, {"line_number": 8, "line_content": "  const files = await file.list(`${options.inputDir}/**/*.m3u`)"}, {"line_number": 9, "line_content": "  for (const filepath of files) {"}, {"line_number": 10, "line_content": "    const playlist = await parser.parsePlaylist(filepath)"}, {"line_number": 11, "line_content": "    for (const item of playlist.items) {"}, {"line_number": 12, "line_content": "      item.filepath = filepath"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      const stream = store.create()"}, {"line_number": 15, "line_content": "      const channel = await api.channels.find({ id: item.tvg.id })"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "      stream.set('channel', { channel: channel ? channel.id : null })"}, {"line_number": 18, "line_content": "      stream.set('title', { title: item.name })"}, {"line_number": 19, "line_content": "      stream.set('filepath', { filepath: item.filepath })"}, {"line_number": 20, "line_content": "      stream.set('url', { url: item.url })"}, {"line_number": 21, "line_content": "      stream.set('http_referrer', { http_referrer: item.http.referrer })"}, {"line_number": 22, "line_content": "      stream.set('user_agent', { user_agent: item.http['user-agent'] })"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "      streams.push(stream)"}, {"line_number": 25, "line_content": "    }"}, {"line_number": 26, "line_content": "  }"}, {"line_number": 27, "line_content": "  logger.info(`found ${streams.length} streams`)"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "  return streams"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function saveToDatabase(streams = []) {"}, {"line_number": 2, "line_content": "  logger.info('saving to the database...')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  await db.streams.reset()"}, {"line_number": 5, "line_content": "  const chunks = split(_.shuffle(streams), options.maxClusters)"}, {"line_number": 6, "line_content": "  for (const [i, chunk] of chunks.entries()) {"}, {"line_number": 7, "line_content": "    for (const stream of chunk) {"}, {"line_number": 8, "line_content": "      stream.set('cluster_id', { cluster_id: i + 1 })"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "      await db.streams.insert(stream.data())"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "  }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  await db.streams.load()"}, {"line_number": 3, "line_content": "  const docs = await db.streams.find({}).sort({ cluster_id: 1 })"}, {"line_number": 4, "line_content": "  const cluster_id = docs.reduce((acc, curr) => {"}, {"line_number": 5, "line_content": "    if (!acc.includes(curr.cluster_id)) acc.push(curr.cluster_id)"}, {"line_number": 6, "line_content": "    return acc"}, {"line_number": 7, "line_content": "  }, [])"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  const matrix = { cluster_id }"}, {"line_number": 10, "line_content": "  const output = `::set-output name=matrix::${JSON.stringify(matrix)}`"}, {"line_number": 11, "line_content": "  logger.info(output)"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function split(arr, n) {"}, {"line_number": 2, "line_content": "  let result = []"}, {"line_number": 3, "line_content": "  for (let i = n; i > 0; i--) {"}, {"line_number": 4, "line_content": "    result.push(arr.splice(0, Math.ceil(arr.length / i)))"}, {"line_number": 5, "line_content": "  }"}, {"line_number": 6, "line_content": "  return result"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  await db.streams.load()"}, {"line_number": 3, "line_content": "  let streams = await db.streams.find({})"}, {"line_number": 4, "line_content": "  streams = _.sortBy(streams, 'channel')"}, {"line_number": 5, "line_content": "  streams = streams.map(stream => {"}, {"line_number": 6, "line_content": "    return {"}, {"line_number": 7, "line_content": "      channel: stream.channel,"}, {"line_number": 8, "line_content": "      url: stream.url,"}, {"line_number": 9, "line_content": "      http_referrer: stream.http_referrer,"}, {"line_number": 10, "line_content": "      user_agent: stream.user_agent,"}, {"line_number": 11, "line_content": "      status: stream.status,"}, {"line_number": 12, "line_content": "      width: stream.width,"}, {"line_number": 13, "line_content": "      height: stream.height,"}, {"line_number": 14, "line_content": "      bitrate: stream.bitrate,"}, {"line_number": 15, "line_content": "      frame_rate: stream.frame_rate"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "  })"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  await file.create(`${PUBLIC_DIR}/streams.json`, JSON.stringify(streams))"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  const streams = await loadStreams()"}, {"line_number": 3, "line_content": "  const results = await loadResults()"}, {"line_number": 4, "line_content": "  const origins = await loadOrigins(results)"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  await updateStreams(streams, results, origins)"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 45, "lines": [{"line_number": 1, "line_content": "async function updateStreams(items = [], results = {}, origins = {}) {"}, {"line_number": 2, "line_content": "  logger.info('updating streams...')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  let buffer = {}"}, {"line_number": 5, "line_content": "  let updated = 0"}, {"line_number": 6, "line_content": "  let removed = 0"}, {"line_number": 7, "line_content": "  for (const item of items) {"}, {"line_number": 8, "line_content": "    const stream = store.create(item)"}, {"line_number": 9, "line_content": "    const result = results[item._id]"}, {"line_number": 10, "line_content": "    if (result) {"}, {"line_number": 11, "line_content": "      const status = parseStatus(result.error)"}, {"line_number": 12, "line_content": "      stream.set('status', { status })"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "      if (result.streams.length) {"}, {"line_number": 15, "line_content": "        const { width, height, bitrate, frame_rate } = parseMediaInfo(result.streams)"}, {"line_number": 16, "line_content": "        stream.set('width', { width })"}, {"line_number": 17, "line_content": "        stream.set('height', { height })"}, {"line_number": 18, "line_content": "        stream.set('bitrate', { bitrate })"}, {"line_number": 19, "line_content": "        stream.set('frame_rate', { frame_rate })"}, {"line_number": 20, "line_content": "      }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "      if (result.requests.length) {"}, {"line_number": 23, "line_content": "        const origin = findOrigin(result.requests, origins)"}, {"line_number": 24, "line_content": "        if (origin) {"}, {"line_number": 25, "line_content": "          stream.set('url', { url: origin })"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "      }"}, {"line_number": 28, "line_content": "    }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    if (buffer[stream.get('url')]) {"}, {"line_number": 31, "line_content": "      await db.streams.remove({ _id: stream.get('_id') })"}, {"line_number": 32, "line_content": "      removed++"}, {"line_number": 33, "line_content": "    } else if (stream.changed) {"}, {"line_number": 34, "line_content": "      await db.streams.update({ _id: stream.get('_id') }, stream.data())"}, {"line_number": 35, "line_content": "      buffer[stream.get('url')] = true"}, {"line_number": 36, "line_content": "      updated++"}, {"line_number": 37, "line_content": "    }"}, {"line_number": 38, "line_content": "  }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "  db.streams.compact()"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "  logger.info(`updated ${updated} streams`)"}, {"line_number": 43, "line_content": "  logger.info(`removed ${removed} duplicates`)"}, {"line_number": 44, "line_content": "  logger.info('done')"}, {"line_number": 45, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function loadStreams() {"}, {"line_number": 2, "line_content": "  logger.info('loading streams...')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  await db.streams.load()"}, {"line_number": 5, "line_content": "  const streams = await db.streams.find({})"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  logger.info(`found ${streams.length} streams`)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "  return streams"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function loadResults() {"}, {"line_number": 2, "line_content": "  logger.info('loading check results...')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const results = {}"}, {"line_number": 5, "line_content": "  const files = await file.list(`${LOGS_DIR}/cluster_*.log`)"}, {"line_number": 6, "line_content": "  for (const filepath of files) {"}, {"line_number": 7, "line_content": "    const parsed = await parser.parseLogs(filepath)"}, {"line_number": 8, "line_content": "    for (const item of parsed) {"}, {"line_number": 9, "line_content": "      results[item._id] = item"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  logger.info(`found ${Object.values(results).length} results`)"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "  return results"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function parseMediaInfo(streams) {"}, {"line_number": 2, "line_content": "  streams = streams.filter(s => s.codec_type === 'video')"}, {"line_number": 3, "line_content": "  streams = streams.map(s => {"}, {"line_number": 4, "line_content": "    s.bitrate = s.tags && s.tags.variant_bitrate ? parseInt(s.tags.variant_bitrate) : 0"}, {"line_number": 5, "line_content": "    s.frame_rate = parseFrameRate(s.avg_frame_rate)"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    return s"}, {"line_number": 8, "line_content": "  })"}, {"line_number": 9, "line_content": "  streams = _.orderBy(streams, ['height', 'bitrate'], ['desc', 'desc'])"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  return _.head(streams) || {}"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function parseFrameRate(frame_rate = '0/0') {"}, {"line_number": 2, "line_content": "  const parts = frame_rate.split('/')"}, {"line_number": 3, "line_content": "  const number = parseInt(parts[0]) / parseInt(parts[1])"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "  return number > 0 ? Math.round(number * 100) / 100 : 0"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function parseStatus(error) {"}, {"line_number": 2, "line_content": "  if (!error) return 'online'"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  switch (error.code) {"}, {"line_number": 5, "line_content": "    case 'HTTP_REQUEST_TIMEOUT':"}, {"line_number": 6, "line_content": "    case 'FFMPEG_PROCESS_TIMEOUT':"}, {"line_number": 7, "line_content": "      return 'timeout'"}, {"line_number": 8, "line_content": "    case 'HTTP_FORBIDDEN':"}, {"line_number": 9, "line_content": "    case 'HTTP_UNAVAILABLE_FOR_LEGAL_REASONS':"}, {"line_number": 10, "line_content": "      return 'blocked'"}, {"line_number": 11, "line_content": "    default:"}, {"line_number": 12, "line_content": "      return 'error'"}, {"line_number": 13, "line_content": "  }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "async function loadOrigins(results = {}) {"}, {"line_number": 2, "line_content": "  logger.info('loading origins...')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  const origins = {}"}, {"line_number": 5, "line_content": "  for (const { error, requests } of Object.values(results)) {"}, {"line_number": 6, "line_content": "    if (error || !Array.isArray(requests) || !requests.length) continue"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    let origin = requests.shift()"}, {"line_number": 9, "line_content": "    origin = new URL(origin.url)"}, {"line_number": 10, "line_content": "    for (const request of requests) {"}, {"line_number": 11, "line_content": "      const curr = new URL(request.url)"}, {"line_number": 12, "line_content": "      const key = curr.href.replace(/(^\\w+:|^)/, '')"}, {"line_number": 13, "line_content": "      if (!origins[key] && curr.host === origin.host) {"}, {"line_number": 14, "line_content": "        origins[key] = origin.href"}, {"line_number": 15, "line_content": "      }"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "  }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "  logger.info(`found ${_.uniq(Object.values(origins)).length} origins`)"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  return origins"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function findOrigin(requests = [], origins = {}) {"}, {"line_number": 2, "line_content": "  if (origins && Array.isArray(requests)) {"}, {"line_number": 3, "line_content": "    requests = requests.map(r => r.url.replace(/(^\\w+:|^)/, ''))"}, {"line_number": 4, "line_content": "    for (const url of requests) {"}, {"line_number": 5, "line_content": "      if (origins[url]) {"}, {"line_number": 6, "line_content": "        return origins[url]"}, {"line_number": 7, "line_content": "      }"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "  }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  return null"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  logger.info('starting...')"}, {"line_number": 3, "line_content": "  logger.info(`timeout: ${options.timeout}ms`)"}, {"line_number": 4, "line_content": "  logger.info(`delay: ${options.delay}ms`)"}, {"line_number": 5, "line_content": "  timer.start()"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "  const clusterLog = `${LOGS_DIR}/cluster_${options.clusterId}.log`"}, {"line_number": 8, "line_content": "  logger.info(`loading cluster: ${options.clusterId}`)"}, {"line_number": 9, "line_content": "  logger.info(`creating '${clusterLog}'...`)"}, {"line_number": 10, "line_content": "  await file.create(clusterLog)"}, {"line_number": 11, "line_content": "  await db.streams.load()"}, {"line_number": 12, "line_content": "  const items = await db.streams.find({ cluster_id: options.clusterId })"}, {"line_number": 13, "line_content": "  const total = items.length"}, {"line_number": 14, "line_content": "  logger.info(`found ${total} links`)"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  logger.info('checking...')"}, {"line_number": 17, "line_content": "  const results = {}"}, {"line_number": 18, "line_content": "  for (const [i, item] of items.entries()) {"}, {"line_number": 19, "line_content": "    const message = `[${i + 1}/${total}] ${item.filepath}: ${item.url}`"}, {"line_number": 20, "line_content": "    const request = {"}, {"line_number": 21, "line_content": "      _id: item._id,"}, {"line_number": 22, "line_content": "      url: item.url,"}, {"line_number": 23, "line_content": "      http: {"}, {"line_number": 24, "line_content": "        referrer: item.http_referrer,"}, {"line_number": 25, "line_content": "        'user-agent': item.user_agent"}, {"line_number": 26, "line_content": "      }"}, {"line_number": 27, "line_content": "    }"}, {"line_number": 28, "line_content": "    const result = await checker.check(request, config)"}, {"line_number": 29, "line_content": "    if (!result.error) {"}, {"line_number": 30, "line_content": "      logger.info(message)"}, {"line_number": 31, "line_content": "    } else {"}, {"line_number": 32, "line_content": "      logger.info(`${message} (${result.error.message})`)"}, {"line_number": 33, "line_content": "    }"}, {"line_number": 34, "line_content": "    const output = {"}, {"line_number": 35, "line_content": "      _id: result._id,"}, {"line_number": 36, "line_content": "      error: result.error,"}, {"line_number": 37, "line_content": "      streams: result.streams,"}, {"line_number": 38, "line_content": "      requests: result.requests"}, {"line_number": 39, "line_content": "    }"}, {"line_number": 40, "line_content": "    await file.append(clusterLog, JSON.stringify(output) + '\\n')"}, {"line_number": 41, "line_content": "  }"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "  logger.info(`done in ${timer.format('HH[h] mm[m] ss[s]')}`)"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 78, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  const files = program.args.length ? program.args : await file.list('streams/*.m3u')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  logger.info(`loading blocklist...`)"}, {"line_number": 5, "line_content": "  await api.channels.load()"}, {"line_number": 6, "line_content": "  await api.blocklist.load()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  let blocklist = await api.blocklist.all()"}, {"line_number": 9, "line_content": "  blocklist = blocklist"}, {"line_number": 10, "line_content": "    .map(blocked => {"}, {"line_number": 11, "line_content": "      const channel = api.channels.find({ id: blocked.channel })"}, {"line_number": 12, "line_content": "      if (!channel) return null"}, {"line_number": 13, "line_content": "      return { ...blocked, name: channel.name }"}, {"line_number": 14, "line_content": "    })"}, {"line_number": 15, "line_content": "    .filter(i => i)"}, {"line_number": 16, "line_content": "  logger.info(`found ${blocklist.length} records`)"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "  let errors = []"}, {"line_number": 19, "line_content": "  let warnings = []"}, {"line_number": 20, "line_content": "  for (const filepath of files) {"}, {"line_number": 21, "line_content": "    if (!filepath.endsWith('.m3u')) continue"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    const basename = file.basename(filepath)"}, {"line_number": 24, "line_content": "    const [__, country] = basename.match(/([a-z]{2})(|_.*)\\.m3u/i) || [null, null]"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    const fileLog = []"}, {"line_number": 27, "line_content": "    const playlist = await parser.parsePlaylist(filepath)"}, {"line_number": 28, "line_content": "    for (const item of playlist.items) {"}, {"line_number": 29, "line_content": "      if (item.tvg.id && !api.channels.find({ id: item.tvg.id })) {"}, {"line_number": 30, "line_content": "        fileLog.push({"}, {"line_number": 31, "line_content": "          type: 'warning',"}, {"line_number": 32, "line_content": "          line: item.line,"}, {"line_number": 33, "line_content": "          message: `\"${item.tvg.id}\" is not in the database`"}, {"line_number": 34, "line_content": "        })"}, {"line_number": 35, "line_content": "      }"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "      const channel_id = id.generate(item.name, country)"}, {"line_number": 38, "line_content": "      const found = blocklist.find("}, {"line_number": 39, "line_content": "        blocked =>"}, {"line_number": 40, "line_content": "          item.tvg.id.toLowerCase() === blocked.channel.toLowerCase() ||"}, {"line_number": 41, "line_content": "          channel_id.toLowerCase() === blocked.channel.toLowerCase()"}, {"line_number": 42, "line_content": "      )"}, {"line_number": 43, "line_content": "      if (found) {"}, {"line_number": 44, "line_content": "        fileLog.push({"}, {"line_number": 45, "line_content": "          type: 'error',"}, {"line_number": 46, "line_content": "          line: item.line,"}, {"line_number": 47, "line_content": "          message: `\"${found.name}\" is on the blocklist due to claims of copyright holders (${found.ref})`"}, {"line_number": 48, "line_content": "        })"}, {"line_number": 49, "line_content": "      }"}, {"line_number": 50, "line_content": "    }"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "    if (fileLog.length) {"}, {"line_number": 53, "line_content": "      logger.info(`\\n${chalk.underline(filepath)}`)"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "      fileLog.forEach(err => {"}, {"line_number": 56, "line_content": "        const position = err.line.toString().padEnd(6, ' ')"}, {"line_number": 57, "line_content": "        const type = err.type.padEnd(9, ' ')"}, {"line_number": 58, "line_content": "        const status = err.type === 'error' ? chalk.red(type) : chalk.yellow(type)"}, {"line_number": 59, "line_content": "        logger.info(` ${chalk.gray(position)}${status}${err.message}`)"}, {"line_number": 60, "line_content": "      })"}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "      errors = errors.concat(fileLog.filter(e => e.type === 'error'))"}, {"line_number": 63, "line_content": "      warnings = warnings.concat(fileLog.filter(e => e.type === 'warning'))"}, {"line_number": 64, "line_content": "    }"}, {"line_number": 65, "line_content": "  }"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "  logger.error("}, {"line_number": 68, "line_content": "    chalk.red("}, {"line_number": 69, "line_content": "      `\\n${errors.length + warnings.length} problems (${errors.length} errors, ${"}, {"line_number": 70, "line_content": "        warnings.length"}, {"line_number": 71, "line_content": "      } warnings)`"}, {"line_number": 72, "line_content": "    )"}, {"line_number": 73, "line_content": "  )"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "  if (errors.length) {"}, {"line_number": 76, "line_content": "    process.exit(1)"}, {"line_number": 77, "line_content": "  }"}, {"line_number": 78, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  const streams = await loadStreams()"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  logger.info('generating categories/...')"}, {"line_number": 5, "line_content": "  await generator.generate('categories', streams)"}, {"line_number": 6, "line_content": "  logger.info('generating countries/...')"}, {"line_number": 7, "line_content": "  await generator.generate('countries', streams)"}, {"line_number": 8, "line_content": "  logger.info('generating languages/...')"}, {"line_number": 9, "line_content": "  await generator.generate('languages', streams)"}, {"line_number": 10, "line_content": "  logger.info('generating regions/...')"}, {"line_number": 11, "line_content": "  await generator.generate('regions', streams)"}, {"line_number": 12, "line_content": "  logger.info('generating index.category.m3u...')"}, {"line_number": 13, "line_content": "  await generator.generate('index_category_m3u', streams)"}, {"line_number": 14, "line_content": "  logger.info('generating index.country.m3u...')"}, {"line_number": 15, "line_content": "  await generator.generate('index_country_m3u', streams)"}, {"line_number": 16, "line_content": "  logger.info('generating index.language.m3u...')"}, {"line_number": 17, "line_content": "  await generator.generate('index_language_m3u', streams)"}, {"line_number": 18, "line_content": "  logger.info('generating index.m3u...')"}, {"line_number": 19, "line_content": "  await generator.generate('index_m3u', streams)"}, {"line_number": 20, "line_content": "  logger.info('generating index.nsfw.m3u...')"}, {"line_number": 21, "line_content": "  await generator.generate('index_nsfw_m3u', streams)"}, {"line_number": 22, "line_content": "  logger.info('generating index.region.m3u...')"}, {"line_number": 23, "line_content": "  await generator.generate('index_region_m3u', streams)"}, {"line_number": 24, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 57, "lines": [{"line_number": 1, "line_content": "async function loadStreams() {"}, {"line_number": 2, "line_content": "  await db.streams.load()"}, {"line_number": 3, "line_content": "  let streams = await db.streams.find({})"}, {"line_number": 4, "line_content": "  streams = _.filter(streams, stream => stream.status !== 'error')"}, {"line_number": 5, "line_content": "  const levels = { online: 1, blocked: 2, timeout: 3, error: 4, default: 5 }"}, {"line_number": 6, "line_content": "  streams = orderBy("}, {"line_number": 7, "line_content": "    streams,"}, {"line_number": 8, "line_content": "    ['channel', s => levels[s.status] || levels['default'], 'height', 'frame_rate', 'url'],"}, {"line_number": 9, "line_content": "    ['asc', 'asc', 'desc', 'desc', 'asc']"}, {"line_number": 10, "line_content": "  )"}, {"line_number": 11, "line_content": "  streams = _.uniqBy(streams, stream => stream.channel || _.uniqueId())"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "  await api.channels.load()"}, {"line_number": 14, "line_content": "  let channels = await api.channels.all()"}, {"line_number": 15, "line_content": "  channels = _.keyBy(channels, 'id')"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "  await api.categories.load()"}, {"line_number": 18, "line_content": "  let categories = await api.categories.all()"}, {"line_number": 19, "line_content": "  categories = _.keyBy(categories, 'id')"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "  await api.languages.load()"}, {"line_number": 22, "line_content": "  let languages = await api.languages.all()"}, {"line_number": 23, "line_content": "  languages = _.keyBy(languages, 'code')"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "  await api.guides.load()"}, {"line_number": 26, "line_content": "  let guides = await api.guides.all()"}, {"line_number": 27, "line_content": "  guides = _.groupBy(guides, 'channel')"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "  streams = streams.map(stream => {"}, {"line_number": 30, "line_content": "    const channel = channels[stream.channel] || null"}, {"line_number": 31, "line_content": "    const filename = file.getFilename(stream.filepath)"}, {"line_number": 32, "line_content": "    const [_, code] = filename.match(/^([a-z]{2})(_|$)/) || [null, null]"}, {"line_number": 33, "line_content": "    const defaultBroadcastArea = code ? [`c/${code.toUpperCase()}`] : []"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    if (channel) {"}, {"line_number": 36, "line_content": "      stream.guides = Array.isArray(guides[channel.id]) ? guides[channel.id] : []"}, {"line_number": 37, "line_content": "      stream.categories = channel.categories.map(id => categories[id]).filter(i => i)"}, {"line_number": 38, "line_content": "      stream.languages = channel.languages.map(id => languages[id]).filter(i => i)"}, {"line_number": 39, "line_content": "      stream.broadcast_area = channel.broadcast_area"}, {"line_number": 40, "line_content": "      stream.is_nsfw = channel.is_nsfw"}, {"line_number": 41, "line_content": "      stream.logo = channel.logo"}, {"line_number": 42, "line_content": "    } else {"}, {"line_number": 43, "line_content": "      stream.guides = []"}, {"line_number": 44, "line_content": "      stream.categories = []"}, {"line_number": 45, "line_content": "      stream.languages = []"}, {"line_number": 46, "line_content": "      stream.broadcast_area = defaultBroadcastArea"}, {"line_number": 47, "line_content": "      stream.is_nsfw = false"}, {"line_number": 48, "line_content": "      stream.logo = null"}, {"line_number": 49, "line_content": "    }"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "    return stream"}, {"line_number": 52, "line_content": "  })"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "  streams = orderBy(streams, ['title'], ['asc'])"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "  return streams"}, {"line_number": 57, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 45, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  const files = program.args.length ? program.args : await file.list('streams/*.m3u')"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  for (const filepath of files) {"}, {"line_number": 5, "line_content": "    if (!filepath.endsWith('.m3u')) continue"}, {"line_number": 6, "line_content": "    logger.info(`${filepath}`)"}, {"line_number": 7, "line_content": "    const playlist = await parser.parsePlaylist(filepath)"}, {"line_number": 8, "line_content": "    const before = playlist.items.length"}, {"line_number": 9, "line_content": "    for (const stream of playlist.items) {"}, {"line_number": 10, "line_content": "      if (options.debug) logger.info(stream.url)"}, {"line_number": 11, "line_content": "      const [_, status] = stream.raw.match(/status=\"([a-z]+)\"/) || [null, null]"}, {"line_number": 12, "line_content": "      stream.status = status"}, {"line_number": 13, "line_content": "      if (status === 'error' && /^(http|https)/.test(stream.url)) {"}, {"line_number": 14, "line_content": "        const result = await checkStream(stream)"}, {"line_number": 15, "line_content": "        const newStatus = parseStatus(result.error)"}, {"line_number": 16, "line_content": "        if (status === newStatus) {"}, {"line_number": 17, "line_content": "          stream.remove = true"}, {"line_number": 18, "line_content": "          logger.info(`removed \"${stream.name}\"`)"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "      }"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    const items = playlist.items"}, {"line_number": 24, "line_content": "      .filter(i => !i.remove)"}, {"line_number": 25, "line_content": "      .map(item => ({"}, {"line_number": 26, "line_content": "        attrs: {"}, {"line_number": 27, "line_content": "          'tvg-id': item.tvg.id,"}, {"line_number": 28, "line_content": "          status: item.status,"}, {"line_number": 29, "line_content": "          'user-agent': item.http['user-agent'] || undefined"}, {"line_number": 30, "line_content": "        },"}, {"line_number": 31, "line_content": "        title: item.name,"}, {"line_number": 32, "line_content": "        url: item.url,"}, {"line_number": 33, "line_content": "        vlcOpts: {"}, {"line_number": 34, "line_content": "          'http-referrer': item.http.referrer || undefined,"}, {"line_number": 35, "line_content": "          'http-user-agent': item.http['user-agent'] || undefined"}, {"line_number": 36, "line_content": "        }"}, {"line_number": 37, "line_content": "      }))"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    if (before !== items.length) {"}, {"line_number": 40, "line_content": "      const output = m3u.create(items)"}, {"line_number": 41, "line_content": "      await file.create(filepath, output)"}, {"line_number": 42, "line_content": "      logger.info(`saved`)"}, {"line_number": 43, "line_content": "    }"}, {"line_number": 44, "line_content": "  }"}, {"line_number": 45, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "async function checkStream(item) {"}, {"line_number": 2, "line_content": "  const config = {"}, {"line_number": 3, "line_content": "    timeout: options.timeout,"}, {"line_number": 4, "line_content": "    delay: options.delay,"}, {"line_number": 5, "line_content": "    debug: options.debug"}, {"line_number": 6, "line_content": "  }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "  const request = {"}, {"line_number": 9, "line_content": "    url: item.url,"}, {"line_number": 10, "line_content": "    http: {"}, {"line_number": 11, "line_content": "      referrer: item.http.referrer,"}, {"line_number": 12, "line_content": "      'user-agent': item.http['user-agent']"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "  }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "  return checker.check(request, config)"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function parseStatus(error) {"}, {"line_number": 2, "line_content": "  if (!error) return 'online'"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "  switch (error) {"}, {"line_number": 5, "line_content": "    case 'Operation timed out':"}, {"line_number": 6, "line_content": "      return 'timeout'"}, {"line_number": 7, "line_content": "    case 'Server returned 403 Forbidden (access denied)':"}, {"line_number": 8, "line_content": "      return 'blocked'"}, {"line_number": 9, "line_content": "    default:"}, {"line_number": 10, "line_content": "      return 'error'"}, {"line_number": 11, "line_content": "  }"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function main() {"}, {"line_number": 2, "line_content": "  await db.streams.load()"}, {"line_number": 3, "line_content": "  let streams = await db.streams.find({})"}, {"line_number": 4, "line_content": "  const levels = { online: 1, blocked: 2, timeout: 3, error: 4, default: 5 }"}, {"line_number": 5, "line_content": "  streams = orderBy("}, {"line_number": 6, "line_content": "    streams,"}, {"line_number": 7, "line_content": "    ['channel', s => levels[s.status] || levels['default'], 'height', 'frame_rate', 'url'],"}, {"line_number": 8, "line_content": "    ['asc', 'asc', 'desc', 'desc', 'asc']"}, {"line_number": 9, "line_content": "  )"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "  const files = _.groupBy(streams, 'filepath')"}, {"line_number": 12, "line_content": "  for (const filepath in files) {"}, {"line_number": 13, "line_content": "    const playlist = createPlaylist(files[filepath], { public: false })"}, {"line_number": 14, "line_content": "    await file.create(filepath, playlist.toString())"}, {"line_number": 15, "line_content": "  }"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function toJSON(type) {"}, {"line_number": 2, "line_content": "  type.count = type.items.length"}, {"line_number": 3, "line_content": "  delete type.items"}, {"line_number": 4, "line_content": "  return JSON.stringify(type)"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  const data = fs.readFileSync(path.resolve(filepath), {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return JSON.stringify(data)"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  const data = fs.readFileSync(path.resolve(filepath), {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return data"}, {"line_number": 7, "line_content": "    .split('\\n')"}, {"line_number": 8, "line_content": "    .filter(l => l)"}, {"line_number": 9, "line_content": "    .map(l => {"}, {"line_number": 10, "line_content": "      return JSON.parse(l)"}, {"line_number": 11, "line_content": "    })"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  const data = fs.readFileSync(path.resolve(filepath), {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return data"}, {"line_number": 7, "line_content": "    .split('\\n')"}, {"line_number": 8, "line_content": "    .filter(l => l)"}, {"line_number": 9, "line_content": "    .map(l => {"}, {"line_number": 10, "line_content": "      return JSON.parse(l)"}, {"line_number": 11, "line_content": "    })"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  return fs.readFileSync(`tests/__data__/${filepath}`, {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  const data = fs.readFileSync(path.resolve(filepath), {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "  return data"}, {"line_number": 7, "line_content": "    .split('\\n')"}, {"line_number": 8, "line_content": "    .filter(l => l)"}, {"line_number": 9, "line_content": "    .map(l => {"}, {"line_number": 10, "line_content": "      return JSON.parse(l)"}, {"line_number": 11, "line_content": "    })"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  return fs.readFileSync(`tests/__data__/${filepath}`, {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/iptv-org/iptv", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function content(filepath) {"}, {"line_number": 2, "line_content": "  return fs.readFileSync(`tests/__data__/${filepath}`, {"}, {"line_number": 3, "line_content": "    encoding: 'utf8'"}, {"line_number": 4, "line_content": "  })"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function redirectAdminUrls(req, res, next) {"}, {"line_number": 2, "line_content": "    const subdir = urlUtils.getSubdir();"}, {"line_number": 3, "line_content": "    const ghostPathRegex = new RegExp(`^${subdir}/ghost/(.+)`);"}, {"line_number": 4, "line_content": "    const ghostPathMatch = req.originalUrl.match(ghostPathRegex);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (ghostPathMatch) {"}, {"line_number": 7, "line_content": "        return res.redirect(urlUtils.urlJoin(urlUtils.urlFor('admin'), '#', ghostPathMatch[1]));"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    next();"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function redirectAdminUrls(req, res, next) {"}, {"line_number": 2, "line_content": "    const subdir = urlUtils.getSubdir();"}, {"line_number": 3, "line_content": "    const ghostPathRegex = new RegExp(`^${subdir}/ghost/(.+)`);"}, {"line_number": 4, "line_content": "    const ghostPathMatch = req.originalUrl.match(ghostPathRegex);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (ghostPathMatch) {"}, {"line_number": 7, "line_content": "        return res.redirect(urlUtils.urlJoin(urlUtils.urlFor('admin'), '#', ghostPathMatch[1]));"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    next();"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function logResponse() {"}, {"line_number": 2, "line_content": "        res.responseTime = (Date.now() - startTime) + 'ms';"}, {"line_number": 3, "line_content": "        req.userId = req.user ? (req.user.id ? req.user.id : req.user) : null;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        if (req.err && req.err.statusCode !== 404) {"}, {"line_number": 6, "line_content": "            logging.error({req: req, res: res, err: req.err});"}, {"line_number": 7, "line_content": "        } else {"}, {"line_number": 8, "line_content": "            logging.info({req: req, res: res});"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        res.removeListener('finish', logResponse);"}, {"line_number": 12, "line_content": "        res.removeListener('close', logResponse);"}, {"line_number": 13, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function getIPs() {"}, {"line_number": 2, "line_content": "    const ifaces = os.networkInterfaces();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const ips = ["}, {"line_number": 5, "line_content": "        'localhost'"}, {"line_number": 6, "line_content": "    ];"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    Object.keys(ifaces).forEach((ifname) => {"}, {"line_number": 9, "line_content": "        ifaces[ifname].forEach((iface) => {"}, {"line_number": 10, "line_content": "            // only support IPv4"}, {"line_number": 11, "line_content": "            if (iface.family !== 'IPv4') {"}, {"line_number": 12, "line_content": "                return;"}, {"line_number": 13, "line_content": "            }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "            ips.push(iface.address);"}, {"line_number": 16, "line_content": "        });"}, {"line_number": 17, "line_content": "    });"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    return ips;"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getUrls() {"}, {"line_number": 2, "line_content": "    const blogHost = url.parse(urlUtils.urlFor('home', true)).hostname;"}, {"line_number": 3, "line_content": "    const adminHost = url.parse(urlUtils.urlFor('admin', true)).hostname;"}, {"line_number": 4, "line_content": "    const urls = [];"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    urls.push(blogHost);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (adminHost !== blogHost) {"}, {"line_number": 9, "line_content": "        urls.push(adminHost);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return urls;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getAllowlist() {"}, {"line_number": 2, "line_content": "    // This needs doing just one time after init"}, {"line_number": 3, "line_content": "    if (allowlist.length === 0) {"}, {"line_number": 4, "line_content": "        // origins that always match: localhost, local IPs, etc."}, {"line_number": 5, "line_content": "        allowlist = allowlist.concat(getIPs());"}, {"line_number": 6, "line_content": "        // Trusted urls from config.js"}, {"line_number": 7, "line_content": "        allowlist = allowlist.concat(getUrls());"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return allowlist;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function handleCORS(req, cb) {"}, {"line_number": 2, "line_content": "    const origin = req.get('origin');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // Request must have an Origin header"}, {"line_number": 5, "line_content": "    if (!origin || origin === 'null') {"}, {"line_number": 6, "line_content": "        return cb(null, DISABLE_CORS);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // Origin matches allowlist"}, {"line_number": 10, "line_content": "    if (getAllowlist().indexOf(url.parse(origin).hostname) > -1) {"}, {"line_number": 11, "line_content": "        return cb(null, ENABLE_CORS);"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    return cb(null, DISABLE_CORS);"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function checkVersionMatch(req, res, next) {"}, {"line_number": 2, "line_content": "    const clientVersion = req.get('X-Ghost-Version');"}, {"line_number": 3, "line_content": "    // can contain pre-release suffix, you should be able to use e.g. 1.19.0-pre [server] with 1.18.0 [client]"}, {"line_number": 4, "line_content": "    const serverVersion = res.locals.version.match(/^(\\d+\\.)?(\\d+\\.)?(\\d+)/)[0];"}, {"line_number": 5, "line_content": "    const constraint = '^' + clientVersion + '.0';"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // no error when client is on an earlier minor version than server"}, {"line_number": 8, "line_content": "    // error when client is on a later minor version than server"}, {"line_number": 9, "line_content": "    // always error when the major version is different"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    if (clientVersion && !semver.satisfies(serverVersion, constraint)) {"}, {"line_number": 12, "line_content": "        return next(new errors.VersionMismatchError({"}, {"line_number": 13, "line_content": "            message: tpl(messages.versionMismatch, {"}, {"line_number": 14, "line_content": "                clientVersion: clientVersion,"}, {"line_number": 15, "line_content": "                serverVersion: serverVersion"}, {"line_number": 16, "line_content": "            })"}, {"line_number": 17, "line_content": "        }));"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    next();"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "function addTableColumn(tableName, table, columnName, columnSpec = schema[tableName][columnName]) {"}, {"line_number": 2, "line_content": "    let column;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // creation distinguishes between text with fieldtype, string with maxlength and all others"}, {"line_number": 5, "line_content": "    if (columnSpec.type === 'text' && Object.prototype.hasOwnProperty.call(columnSpec, 'fieldtype')) {"}, {"line_number": 6, "line_content": "        column = table[columnSpec.type](columnName, columnSpec.fieldtype);"}, {"line_number": 7, "line_content": "    } else if (columnSpec.type === 'string') {"}, {"line_number": 8, "line_content": "        if (Object.prototype.hasOwnProperty.call(columnSpec, 'maxlength')) {"}, {"line_number": 9, "line_content": "            column = table[columnSpec.type](columnName, columnSpec.maxlength);"}, {"line_number": 10, "line_content": "        } else {"}, {"line_number": 11, "line_content": "            column = table[columnSpec.type](columnName, 191);"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    } else {"}, {"line_number": 14, "line_content": "        column = table[columnSpec.type](columnName);"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'nullable') && columnSpec.nullable === true) {"}, {"line_number": 18, "line_content": "        column.nullable();"}, {"line_number": 19, "line_content": "    } else {"}, {"line_number": 20, "line_content": "        column.nullable(false);"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'primary') && columnSpec.primary === true) {"}, {"line_number": 23, "line_content": "        column.primary();"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'unique') && columnSpec.unique) {"}, {"line_number": 26, "line_content": "        column.unique();"}, {"line_number": 27, "line_content": "    }"}, {"line_number": 28, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'unsigned') && columnSpec.unsigned) {"}, {"line_number": 29, "line_content": "        column.unsigned();"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'references')) {"}, {"line_number": 32, "line_content": "        // check if table exists?"}, {"line_number": 33, "line_content": "        column.references(columnSpec.references);"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'cascadeDelete') && columnSpec.cascadeDelete === true) {"}, {"line_number": 36, "line_content": "        column.onDelete('CASCADE');"}, {"line_number": 37, "line_content": "    }"}, {"line_number": 38, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'defaultTo')) {"}, {"line_number": 39, "line_content": "        column.defaultTo(columnSpec.defaultTo);"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'index') && columnSpec.index === true) {"}, {"line_number": 42, "line_content": "        column.index();"}, {"line_number": 43, "line_content": "    }"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function setNullable(tableName, column, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    return transaction.schema.table(tableName, function (table) {"}, {"line_number": 3, "line_content": "        table.setNullable(column);"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function dropNullable(tableName, column, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    return transaction.schema.table(tableName, function (table) {"}, {"line_number": 3, "line_content": "        table.dropNullable(column);"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "async function addColumn(tableName, column, transaction = db.knex, columnSpec) {"}, {"line_number": 2, "line_content": "    const addColumnBuilder = transaction.schema.table(tableName, function (table) {"}, {"line_number": 3, "line_content": "        addTableColumn(tableName, table, column, columnSpec);"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // Use the default flow for SQLite because .toSQL() is tricky with SQLite when"}, {"line_number": 7, "line_content": "    // it does the table dance"}, {"line_number": 8, "line_content": "    if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 9, "line_content": "        await addColumnBuilder;"}, {"line_number": 10, "line_content": "        return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    let sql = addColumnBuilder.toSQL()[0].sql;"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    if (DatabaseInfo.isMySQL(transaction)) {"}, {"line_number": 16, "line_content": "        // Guard against an ending semicolon"}, {"line_number": 17, "line_content": "        sql = sql.replace(/;\\s*$/, '') + ', algorithm=copy';"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    await transaction.raw(sql);"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "async function dropUnique(tableName, columns, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    try {"}, {"line_number": 3, "line_content": "        logging.info(`Dropping unique constraint for '${columns}' in table '${tableName}'`);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        return await transaction.schema.table(tableName, function (table) {"}, {"line_number": 6, "line_content": "            table.dropUnique(columns);"}, {"line_number": 7, "line_content": "        });"}, {"line_number": 8, "line_content": "    } catch (err) {"}, {"line_number": 9, "line_content": "        if (err.code === 'SQLITE_ERROR') {"}, {"line_number": 10, "line_content": "            logging.warn(`Constraint for '${columns}' does not exist for table '${tableName}'`);"}, {"line_number": 11, "line_content": "            return;"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "        if (err.code === 'ER_CANT_DROP_FIELD_OR_KEY') {"}, {"line_number": 14, "line_content": "            logging.warn(`Constraint for '${columns}' does not exist for table '${tableName}'`);"}, {"line_number": 15, "line_content": "            return;"}, {"line_number": 16, "line_content": "        }"}, {"line_number": 17, "line_content": "        throw err;"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function hasForeignSQLite({fromTable, fromColumn, toTable, toColumn, transaction = db.knex}) {"}, {"line_number": 2, "line_content": "    if (!DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 3, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 4, "line_content": "            message: tpl(messages.hasForeignSQLite3)"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const foreignKeys = await transaction.raw(`PRAGMA foreign_key_list('${fromTable}');`);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const hasForeignKey = foreignKeys.some(foreignKey => foreignKey.table === toTable && foreignKey.from === fromColumn && foreignKey.to === toColumn);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return hasForeignKey;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 41, "lines": [{"line_number": 1, "line_content": "async function addForeign({fromTable, fromColumn, toTable, toColumn, cascadeDelete = false, transaction = db.knex}) {"}, {"line_number": 2, "line_content": "    if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 3, "line_content": "        const foreignKeyExists = await hasForeignSQLite({fromTable, fromColumn, toTable, toColumn, transaction});"}, {"line_number": 4, "line_content": "        if (foreignKeyExists) {"}, {"line_number": 5, "line_content": "            logging.warn(`Skipped adding foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn} - already exists`);"}, {"line_number": 6, "line_content": "            return;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    try {"}, {"line_number": 10, "line_content": "        logging.info(`Adding foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn}`);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        //disable and re-enable foreign key checks on sqlite because of https://github.com/knex/knex/issues/4155"}, {"line_number": 13, "line_content": "        let foreignKeysEnabled;"}, {"line_number": 14, "line_content": "        if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 15, "line_content": "            foreignKeysEnabled = await db.knex.raw('PRAGMA foreign_keys;');"}, {"line_number": 16, "line_content": "            if (foreignKeysEnabled[0].foreign_keys) {"}, {"line_number": 17, "line_content": "                await db.knex.raw('PRAGMA foreign_keys = OFF;');"}, {"line_number": 18, "line_content": "            }"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "        await transaction.schema.table(fromTable, function (table) {"}, {"line_number": 22, "line_content": "            if (cascadeDelete) {"}, {"line_number": 23, "line_content": "                table.foreign(fromColumn).references(`${toTable}.${toColumn}`).onDelete('CASCADE');"}, {"line_number": 24, "line_content": "            } else {"}, {"line_number": 25, "line_content": "                table.foreign(fromColumn).references(`${toTable}.${toColumn}`);"}, {"line_number": 26, "line_content": "            }"}, {"line_number": 27, "line_content": "        });"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "        if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 30, "line_content": "            if (foreignKeysEnabled[0].foreign_keys) {"}, {"line_number": 31, "line_content": "                await db.knex.raw('PRAGMA foreign_keys = ON;');"}, {"line_number": 32, "line_content": "            }"}, {"line_number": 33, "line_content": "        }"}, {"line_number": 34, "line_content": "    } catch (err) {"}, {"line_number": 35, "line_content": "        if (err.code === 'ER_DUP_KEY' || err.code === 'ER_FK_DUP_KEY' || err.code === 'ER_FK_DUP_NAME') {"}, {"line_number": 36, "line_content": "            logging.warn(`Skipped adding foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn} - already exists`);"}, {"line_number": 37, "line_content": "            return;"}, {"line_number": 38, "line_content": "        }"}, {"line_number": 39, "line_content": "        throw err;"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "async function dropForeign({fromTable, fromColumn, toTable, toColumn, transaction = db.knex}) {"}, {"line_number": 2, "line_content": "    if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 3, "line_content": "        const foreignKeyExists = await hasForeignSQLite({fromTable, fromColumn, toTable, toColumn, transaction});"}, {"line_number": 4, "line_content": "        if (!foreignKeyExists) {"}, {"line_number": 5, "line_content": "            logging.warn(`Skipped dropping foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn} - does not exist`);"}, {"line_number": 6, "line_content": "            return;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    try {"}, {"line_number": 10, "line_content": "        logging.info(`Dropping foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn}`);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        //disable and re-enable foreign key checks on sqlite because of https://github.com/knex/knex/issues/4155"}, {"line_number": 13, "line_content": "        let foreignKeysEnabled;"}, {"line_number": 14, "line_content": "        if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 15, "line_content": "            foreignKeysEnabled = await db.knex.raw('PRAGMA foreign_keys;');"}, {"line_number": 16, "line_content": "            if (foreignKeysEnabled[0].foreign_keys) {"}, {"line_number": 17, "line_content": "                await db.knex.raw('PRAGMA foreign_keys = OFF;');"}, {"line_number": 18, "line_content": "            }"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "        await transaction.schema.table(fromTable, function (table) {"}, {"line_number": 22, "line_content": "            table.dropForeign(fromColumn);"}, {"line_number": 23, "line_content": "        });"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "        if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 26, "line_content": "            if (foreignKeysEnabled[0].foreign_keys) {"}, {"line_number": 27, "line_content": "                await db.knex.raw('PRAGMA foreign_keys = ON;');"}, {"line_number": 28, "line_content": "            }"}, {"line_number": 29, "line_content": "        }"}, {"line_number": 30, "line_content": "    } catch (err) {"}, {"line_number": 31, "line_content": "        if (err.code === 'ER_CANT_DROP_FIELD_OR_KEY') {"}, {"line_number": 32, "line_content": "            logging.warn(`Skipped dropping foreign key from ${fromTable}.${fromColumn} to ${toTable}.${toColumn} - does not exist`);"}, {"line_number": 33, "line_content": "            return;"}, {"line_number": 34, "line_content": "        }"}, {"line_number": 35, "line_content": "        throw err;"}, {"line_number": 36, "line_content": "    }"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "async function hasPrimaryKeySQLite(tableName, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    if (!DatabaseInfo.isSQLite(transaction)){"}, {"line_number": 3, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 4, "line_content": "            message: tpl(messages.hasPrimaryKeySQLiteError)"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const rawConstraints = await transaction.raw(`PRAGMA index_list('${tableName}');`);"}, {"line_number": 9, "line_content": "    const tablePrimaryKey = rawConstraints.find(c => c.origin === 'pk');"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    return tablePrimaryKey;"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "async function addPrimaryKey(tableName, columns, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 3, "line_content": "        const primaryKeyExists = await hasPrimaryKeySQLite(tableName, transaction);"}, {"line_number": 4, "line_content": "        if (primaryKeyExists) {"}, {"line_number": 5, "line_content": "            logging.warn(`Primary key constraint for '${columns}' already exists for table '${tableName}'`);"}, {"line_number": 6, "line_content": "            return;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    try {"}, {"line_number": 10, "line_content": "        logging.info(`Adding primary key constraint for '${columns}' in table '${tableName}'`);"}, {"line_number": 11, "line_content": "        return await transaction.schema.table(tableName, function (table) {"}, {"line_number": 12, "line_content": "            table.primary(columns);"}, {"line_number": 13, "line_content": "        });"}, {"line_number": 14, "line_content": "    } catch (err) {"}, {"line_number": 15, "line_content": "        if (err.code === 'ER_MULTIPLE_PRI_KEY') {"}, {"line_number": 16, "line_content": "            logging.warn(`Primary key constraint for '${columns}' already exists for table '${tableName}'`);"}, {"line_number": 17, "line_content": "            return;"}, {"line_number": 18, "line_content": "        }"}, {"line_number": 19, "line_content": "        throw err;"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function createTable(table, transaction = db.knex, tableSpec = schema[table]) {"}, {"line_number": 2, "line_content": "    return transaction.schema.createTable(table, function (t) {"}, {"line_number": 3, "line_content": "        Object.keys(tableSpec)"}, {"line_number": 4, "line_content": "            .filter(column => !(column.startsWith('@@')))"}, {"line_number": 5, "line_content": "            .forEach(column => addTableColumn(table, t, column, tableSpec[column]));"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        if (tableSpec['@@INDEXES@@']) {"}, {"line_number": 8, "line_content": "            tableSpec['@@INDEXES@@'].forEach(index => t.index(index));"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": "        if (tableSpec['@@UNIQUE_CONSTRAINTS@@']) {"}, {"line_number": 11, "line_content": "            tableSpec['@@UNIQUE_CONSTRAINTS@@'].forEach(unique => t.unique(unique));"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    });"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function deleteTable(table, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    return transaction.schema.dropTableIfExists(table);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getTables(transaction = db.knex) {"}, {"line_number": 2, "line_content": "    const client = transaction.client.config.client;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (_.includes(_.keys(clients), client)) {"}, {"line_number": 5, "line_content": "        return clients[client].getTables(transaction);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return Promise.reject(tpl(messages.noSupportForDatabase, {client: client}));"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getIndexes(table, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    const client = transaction.client.config.client;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (_.includes(_.keys(clients), client)) {"}, {"line_number": 5, "line_content": "        return clients[client].getIndexes(table, transaction);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return Promise.reject(tpl(messages.noSupportForDatabase, {client: client}));"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getColumns(table, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    const client = transaction.client.config.client;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (_.includes(_.keys(clients), client)) {"}, {"line_number": 5, "line_content": "        return clients[client].getColumns(table);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return Promise.reject(tpl(messages.noSupportForDatabase, {client: client}));"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function checkTables(transaction = db.knex) {"}, {"line_number": 2, "line_content": "    const client = transaction.client.config.client;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (DatabaseInfo.isMySQL(transaction)) {"}, {"line_number": 5, "line_content": "        return clients[client].checkPostTable();"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "function createColumnMigration(...migrations) {"}, {"line_number": 2, "line_content": "    async function runColumnMigration(conn, migration) {"}, {"line_number": 3, "line_content": "        const {"}, {"line_number": 4, "line_content": "            table,"}, {"line_number": 5, "line_content": "            column,"}, {"line_number": 6, "line_content": "            dbIsInCorrectState,"}, {"line_number": 7, "line_content": "            operation,"}, {"line_number": 8, "line_content": "            operationVerb,"}, {"line_number": 9, "line_content": "            columnDefinition"}, {"line_number": 10, "line_content": "        } = migration;"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        const hasColumn = await conn.schema.hasColumn(table, column);"}, {"line_number": 13, "line_content": "        const isInCorrectState = dbIsInCorrectState(hasColumn);"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "        if (isInCorrectState) {"}, {"line_number": 16, "line_content": "            logging.warn(`${operationVerb} ${table}.${column} column - skipping as table is correct`);"}, {"line_number": 17, "line_content": "        } else {"}, {"line_number": 18, "line_content": "            logging.info(`${operationVerb} ${table}.${column} column`);"}, {"line_number": 19, "line_content": "            await operation(table, column, conn, columnDefinition);"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    return async function columnMigration(conn) {"}, {"line_number": 24, "line_content": "        for (const migration of migrations) {"}, {"line_number": 25, "line_content": "            await runColumnMigration(conn, migration);"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "    };"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "async function runColumnMigration(conn, migration) {"}, {"line_number": 2, "line_content": "        const {"}, {"line_number": 3, "line_content": "            table,"}, {"line_number": 4, "line_content": "            column,"}, {"line_number": 5, "line_content": "            dbIsInCorrectState,"}, {"line_number": 6, "line_content": "            operation,"}, {"line_number": 7, "line_content": "            operationVerb,"}, {"line_number": 8, "line_content": "            columnDefinition"}, {"line_number": 9, "line_content": "        } = migration;"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        const hasColumn = await conn.schema.hasColumn(table, column);"}, {"line_number": 12, "line_content": "        const isInCorrectState = dbIsInCorrectState(hasColumn);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "        if (isInCorrectState) {"}, {"line_number": 15, "line_content": "            logging.warn(`${operationVerb} ${table}.${column} column - skipping as table is correct`);"}, {"line_number": 16, "line_content": "        } else {"}, {"line_number": 17, "line_content": "            logging.info(`${operationVerb} ${table}.${column} column`);"}, {"line_number": 18, "line_content": "            await operation(table, column, conn, columnDefinition);"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "async function dropColumn(tableName, column, transaction = db.knex, columnSpec = {}) {"}, {"line_number": 2, "line_content": "    if (Object.prototype.hasOwnProperty.call(columnSpec, 'references')) {"}, {"line_number": 3, "line_content": "        const [toTable, toColumn] = columnSpec.references.split('.');"}, {"line_number": 4, "line_content": "        await dropForeign({fromTable: tableName, fromColumn: column, toTable, toColumn, transaction});"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    const dropTableBuilder = transaction.schema.table(tableName, function (table) {"}, {"line_number": 8, "line_content": "        table.dropColumn(column);"}, {"line_number": 9, "line_content": "    });"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    // Use the default flow for SQLite because .toSQL() is tricky with SQLite when"}, {"line_number": 12, "line_content": "    // it does the table dance"}, {"line_number": 13, "line_content": "    if (DatabaseInfo.isSQLite(transaction)) {"}, {"line_number": 14, "line_content": "        await dropTableBuilder;"}, {"line_number": 15, "line_content": "        return;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    let sql = dropTableBuilder.toSQL()[0].sql;"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    if (DatabaseInfo.isMySQL(transaction)) {"}, {"line_number": 21, "line_content": "        // Guard against an ending semicolon"}, {"line_number": 22, "line_content": "        sql = sql.replace(/;\\s*$/, '') + ', algorithm=copy';"}, {"line_number": 23, "line_content": "    }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    await transaction.raw(sql);"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "async function addUnique(tableName, columns, transaction = db.knex) {"}, {"line_number": 2, "line_content": "    try {"}, {"line_number": 3, "line_content": "        logging.info(`Adding unique constraint for '${columns}' in table '${tableName}'`);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        return await transaction.schema.table(tableName, function (table) {"}, {"line_number": 6, "line_content": "            table.unique(columns);"}, {"line_number": 7, "line_content": "        });"}, {"line_number": 8, "line_content": "    } catch (err) {"}, {"line_number": 9, "line_content": "        if (err.code === 'SQLITE_ERROR') {"}, {"line_number": 10, "line_content": "            logging.warn(`Constraint for '${columns}' already exists for table '${tableName}'`);"}, {"line_number": 11, "line_content": "            return;"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "        if (err.code === 'ER_DUP_KEYNAME') {"}, {"line_number": 14, "line_content": "            logging.warn(`Constraint for '${columns}' already exists for table '${tableName}'`);"}, {"line_number": 15, "line_content": "            return;"}, {"line_number": 16, "line_content": "        }"}, {"line_number": 17, "line_content": "        throw err;"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 98, "lines": [{"line_number": 1, "line_content": "function validateSchema(tableName, model, options) {"}, {"line_number": 2, "line_content": "    options = options || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const columns = _.keys(schema[tableName]);"}, {"line_number": 5, "line_content": "    let validationErrors = [];"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    _.each(columns, function each(columnKey) {"}, {"line_number": 8, "line_content": "        let message = ''; // KEEP: Validator.js only validates strings."}, {"line_number": 9, "line_content": "        const strVal = _.toString(model.get(columnKey));"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        if (options.method !== 'insert' && !_.has(model.changed, columnKey)) {"}, {"line_number": 12, "line_content": "            return;"}, {"line_number": 13, "line_content": "        }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "        // check nullable"}, {"line_number": 16, "line_content": "        if (Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'nullable') &&"}, {"line_number": 17, "line_content": "            schema[tableName][columnKey].nullable !== true &&"}, {"line_number": 18, "line_content": "            Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'type') &&"}, {"line_number": 19, "line_content": "            schema[tableName][columnKey].type !== 'text' &&"}, {"line_number": 20, "line_content": "            !Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'defaultTo')"}, {"line_number": 21, "line_content": "        ) {"}, {"line_number": 22, "line_content": "            if (validator.isEmpty(strVal)) {"}, {"line_number": 23, "line_content": "                message = tpl(messages.valueCannotBeBlank, {"}, {"line_number": 24, "line_content": "                    tableName: tableName,"}, {"line_number": 25, "line_content": "                    columnKey: columnKey"}, {"line_number": 26, "line_content": "                });"}, {"line_number": 27, "line_content": "                validationErrors.push(new errors.ValidationError({"}, {"line_number": 28, "line_content": "                    message: message,"}, {"line_number": 29, "line_content": "                    context: tableName + '.' + columnKey"}, {"line_number": 30, "line_content": "                }));"}, {"line_number": 31, "line_content": "            }"}, {"line_number": 32, "line_content": "        }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "        // validate boolean columns"}, {"line_number": 35, "line_content": "        if (Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'type')"}, {"line_number": 36, "line_content": "            && schema[tableName][columnKey].type === 'bool') {"}, {"line_number": 37, "line_content": "            if (!(validator.isBoolean(strVal) || validator.isEmpty(strVal))) {"}, {"line_number": 38, "line_content": "                message = tpl(messages.valueMustBeBoolean, {"}, {"line_number": 39, "line_content": "                    tableName: tableName,"}, {"line_number": 40, "line_content": "                    columnKey: columnKey"}, {"line_number": 41, "line_content": "                });"}, {"line_number": 42, "line_content": "                validationErrors.push(new errors.ValidationError({"}, {"line_number": 43, "line_content": "                    message: message,"}, {"line_number": 44, "line_content": "                    context: tableName + '.' + columnKey"}, {"line_number": 45, "line_content": "                }));"}, {"line_number": 46, "line_content": "            }"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "            // CASE: ensure we transform 0|1 to false|true"}, {"line_number": 49, "line_content": "            if (!validator.isEmpty(strVal)) {"}, {"line_number": 50, "line_content": "                model.set(columnKey, !!model.get(columnKey));"}, {"line_number": 51, "line_content": "            }"}, {"line_number": 52, "line_content": "        }"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "        // TODO: check if mandatory values should be enforced"}, {"line_number": 55, "line_content": "        if (model.get(columnKey) !== null && model.get(columnKey) !== undefined) {"}, {"line_number": 56, "line_content": "            // check length"}, {"line_number": 57, "line_content": "            if (Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'maxlength')) {"}, {"line_number": 58, "line_content": "                if (!validator.isLength(strVal, 0, schema[tableName][columnKey].maxlength)) {"}, {"line_number": 59, "line_content": "                    message = tpl(messages.valueExceedsMaxLength,"}, {"line_number": 60, "line_content": "                        {"}, {"line_number": 61, "line_content": "                            tableName: tableName,"}, {"line_number": 62, "line_content": "                            columnKey: columnKey,"}, {"line_number": 63, "line_content": "                            maxlength: schema[tableName][columnKey].maxlength"}, {"line_number": 64, "line_content": "                        });"}, {"line_number": 65, "line_content": "                    validationErrors.push(new errors.ValidationError({"}, {"line_number": 66, "line_content": "                        message: message,"}, {"line_number": 67, "line_content": "                        context: tableName + '.' + columnKey"}, {"line_number": 68, "line_content": "                    }));"}, {"line_number": 69, "line_content": "                }"}, {"line_number": 70, "line_content": "            }"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "            // check validations objects"}, {"line_number": 73, "line_content": "            if (Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'validations')) {"}, {"line_number": 74, "line_content": "                validationErrors = validationErrors.concat(validator.validate(strVal, columnKey, schema[tableName][columnKey].validations, tableName));"}, {"line_number": 75, "line_content": "            }"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "            // check type"}, {"line_number": 78, "line_content": "            if (Object.prototype.hasOwnProperty.call(schema[tableName][columnKey], 'type')) {"}, {"line_number": 79, "line_content": "                if (schema[tableName][columnKey].type === 'integer' && !validator.isInt(strVal)) {"}, {"line_number": 80, "line_content": "                    message = tpl(messages.valueIsNotInteger, {"}, {"line_number": 81, "line_content": "                        tableName: tableName,"}, {"line_number": 82, "line_content": "                        columnKey: columnKey"}, {"line_number": 83, "line_content": "                    });"}, {"line_number": 84, "line_content": "                    validationErrors.push(new errors.ValidationError({"}, {"line_number": 85, "line_content": "                        message: message,"}, {"line_number": 86, "line_content": "                        context: tableName + '.' + columnKey"}, {"line_number": 87, "line_content": "                    }));"}, {"line_number": 88, "line_content": "                }"}, {"line_number": 89, "line_content": "            }"}, {"line_number": 90, "line_content": "        }"}, {"line_number": 91, "line_content": "    });"}, {"line_number": 92, "line_content": ""}, {"line_number": 93, "line_content": "    if (validationErrors.length !== 0) {"}, {"line_number": 94, "line_content": "        return Promise.reject(validationErrors);"}, {"line_number": 95, "line_content": "    }"}, {"line_number": 96, "line_content": ""}, {"line_number": 97, "line_content": "    return Promise.resolve();"}, {"line_number": 98, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function configure(dbConfig) {"}, {"line_number": 2, "line_content": "    const client = dbConfig.client;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (client === 'sqlite3') {"}, {"line_number": 5, "line_content": "        // Backwards compatibility with old knex behaviour"}, {"line_number": 6, "line_content": "        dbConfig.useNullAsDefault = Object.prototype.hasOwnProperty.call(dbConfig, 'useNullAsDefault') ? dbConfig.useNullAsDefault : true;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "        // Enables foreign key checks and delete on cascade"}, {"line_number": 9, "line_content": "        dbConfig.pool = {"}, {"line_number": 10, "line_content": "            afterCreate(conn, cb) {"}, {"line_number": 11, "line_content": "                conn.run('PRAGMA foreign_keys = ON', cb);"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "                // These two are meant to improve performance at the cost of reliability"}, {"line_number": 14, "line_content": "                // Should be safe for tests. We add them here and leave them on"}, {"line_number": 15, "line_content": "                if (config.get('env').startsWith('testing')) {"}, {"line_number": 16, "line_content": "                    conn.run('PRAGMA synchronous = OFF;');"}, {"line_number": 17, "line_content": "                    conn.run('PRAGMA journal_mode = TRUNCATE;');"}, {"line_number": 18, "line_content": "                }"}, {"line_number": 19, "line_content": "            }"}, {"line_number": 20, "line_content": "        };"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        // Force bthreads to use child_process backend until a worker_thread-compatible version of sqlite3 is published"}, {"line_number": 23, "line_content": "        // https://github.com/mapbox/node-sqlite3/issues/1386"}, {"line_number": 24, "line_content": "        process.env.BTHREADS_BACKEND = 'child_process';"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "        // In the default SQLite test config we set the path to /tmp/ghost-test.db,"}, {"line_number": 27, "line_content": "        // but this won't work on Windows, so we need to replace the /tmp bit with"}, {"line_number": 28, "line_content": "        // the Windows temp folder"}, {"line_number": 29, "line_content": "        const filename = dbConfig.connection.filename;"}, {"line_number": 30, "line_content": "        if (process.platform === 'win32' && _.isString(filename) && filename.match(/^\\/tmp/)) {"}, {"line_number": 31, "line_content": "            dbConfig.connection.filename = filename.replace(/^\\/tmp/, os.tmpdir());"}, {"line_number": 32, "line_content": "            logging.info(`Ghost DB path: ${dbConfig.connection.filename}`);"}, {"line_number": 33, "line_content": "        }"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    if (client === 'mysql2') {"}, {"line_number": 37, "line_content": "        dbConfig.connection.timezone = 'Z';"}, {"line_number": 38, "line_content": "        dbConfig.connection.charset = 'utf8mb4';"}, {"line_number": 39, "line_content": "        dbConfig.connection.decimalNumbers = true;"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    return dbConfig;"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "async function addPermissionHelper(connection, config) {"}, {"line_number": 2, "line_content": "    const existingPermission = await connection('permissions').where({"}, {"line_number": 3, "line_content": "        name: config.name,"}, {"line_number": 4, "line_content": "        action_type: config.action,"}, {"line_number": 5, "line_content": "        object_type: config.object"}, {"line_number": 6, "line_content": "    }).first();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (existingPermission) {"}, {"line_number": 9, "line_content": "        logging.warn(`Permission for ${config.action}:${config.object} already added`);"}, {"line_number": 10, "line_content": "        return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    logging.info(`Adding permission for ${config.action}:${config.object}`);"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    const date = connection.raw('CURRENT_TIMESTAMP');"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    await connection('permissions').insert({"}, {"line_number": 18, "line_content": "        id: ObjectId().toHexString(),"}, {"line_number": 19, "line_content": "        name: config.name,"}, {"line_number": 20, "line_content": "        action_type: config.action,"}, {"line_number": 21, "line_content": "        object_type: config.object,"}, {"line_number": 22, "line_content": "        created_at: date,"}, {"line_number": 23, "line_content": "        created_by: MIGRATION_USER,"}, {"line_number": 24, "line_content": "        updated_at: date,"}, {"line_number": 25, "line_content": "        updated_by: MIGRATION_USER"}, {"line_number": 26, "line_content": "    });"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "async function removePermissionHelper(connection, config) {"}, {"line_number": 2, "line_content": "    const existingPermission = await connection('permissions').where({"}, {"line_number": 3, "line_content": "        name: config.name,"}, {"line_number": 4, "line_content": "        action_type: config.action,"}, {"line_number": 5, "line_content": "        object_type: config.object"}, {"line_number": 6, "line_content": "    }).first();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!existingPermission) {"}, {"line_number": 9, "line_content": "        logging.warn(`Permission for ${config.action}:${config.object} already removed`);"}, {"line_number": 10, "line_content": "        return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    logging.info(`Removing permission for ${config.action}:${config.object}`);"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    await connection('permissions').where({"}, {"line_number": 16, "line_content": "        action_type: config.action,"}, {"line_number": 17, "line_content": "        object_type: config.object"}, {"line_number": 18, "line_content": "    }).del();"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function addPermission(config) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            await addPermissionHelper(connection, config);"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async function down(connection) {"}, {"line_number": 7, "line_content": "            await removePermissionHelper(connection, config);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function removePermission(config) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            await removePermissionHelper(connection, config);"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async function down(connection) {"}, {"line_number": 7, "line_content": "            await addPermissionHelper(connection, config);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 48, "lines": [{"line_number": 1, "line_content": "async function addPermissionToRoleHelper(connection, config) {"}, {"line_number": 2, "line_content": "    const permission = await connection('permissions').where({"}, {"line_number": 3, "line_content": "        name: config.permission"}, {"line_number": 4, "line_content": "    }).first();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (!permission) {"}, {"line_number": 7, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 8, "line_content": "            message: tpl(messages.permissionRoleActionError, {"}, {"line_number": 9, "line_content": "                action: 'add',"}, {"line_number": 10, "line_content": "                permission: config.permission,"}, {"line_number": 11, "line_content": "                role: config.role,"}, {"line_number": 12, "line_content": "                resource: 'permission'"}, {"line_number": 13, "line_content": "            })"}, {"line_number": 14, "line_content": "        });"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    const role = await connection('roles').where({"}, {"line_number": 18, "line_content": "        name: config.role"}, {"line_number": 19, "line_content": "    }).first();"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    if (!role) {"}, {"line_number": 22, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 23, "line_content": "            message: tpl(messages.permissionRoleActionError, {"}, {"line_number": 24, "line_content": "                action: 'add',"}, {"line_number": 25, "line_content": "                permission: config.permission,"}, {"line_number": 26, "line_content": "                role: config.role,"}, {"line_number": 27, "line_content": "                resource: 'role'"}, {"line_number": 28, "line_content": "            })"}, {"line_number": 29, "line_content": "        });"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    const existingRelation = await connection('permissions_roles').where({"}, {"line_number": 33, "line_content": "        permission_id: permission.id,"}, {"line_number": 34, "line_content": "        role_id: role.id"}, {"line_number": 35, "line_content": "    }).first();"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "    if (existingRelation) {"}, {"line_number": 38, "line_content": "        logging.warn(`Adding permission(${config.permission}) to role(${config.role}) - already exists`);"}, {"line_number": 39, "line_content": "        return;"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    logging.info(`Adding permission(${config.permission}) to role(${config.role})`);"}, {"line_number": 43, "line_content": "    await connection('permissions_roles').insert({"}, {"line_number": 44, "line_content": "        id: ObjectId().toHexString(),"}, {"line_number": 45, "line_content": "        permission_id: permission.id,"}, {"line_number": 46, "line_content": "        role_id: role.id"}, {"line_number": 47, "line_content": "    });"}, {"line_number": 48, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "async function removePermissionFromRoleHelper(connection, config) {"}, {"line_number": 2, "line_content": "    const permission = await connection('permissions').where({"}, {"line_number": 3, "line_content": "        name: config.permission"}, {"line_number": 4, "line_content": "    }).first();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (!permission) {"}, {"line_number": 7, "line_content": "        logging.warn(`Removing permission(${config.permission}) from role(${config.role}) - Permission not found.`);"}, {"line_number": 8, "line_content": "        return;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    const role = await connection('roles').where({"}, {"line_number": 12, "line_content": "        name: config.role"}, {"line_number": 13, "line_content": "    }).first();"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    if (!role) {"}, {"line_number": 16, "line_content": "        logging.warn(`Removing permission(${config.permission}) from role(${config.role}) - Role not found.`);"}, {"line_number": 17, "line_content": "        return;"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    const existingRelation = await connection('permissions_roles').where({"}, {"line_number": 21, "line_content": "        permission_id: permission.id,"}, {"line_number": 22, "line_content": "        role_id: role.id"}, {"line_number": 23, "line_content": "    }).first();"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    if (!existingRelation) {"}, {"line_number": 26, "line_content": "        logging.warn(`Removing permission(${config.permission}) from role(${config.role}) - already removed`);"}, {"line_number": 27, "line_content": "        return;"}, {"line_number": 28, "line_content": "    }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    logging.info(`Removing permission(${config.permission}) from role(${config.role})`);"}, {"line_number": 31, "line_content": "    await connection('permissions_roles').where({"}, {"line_number": 32, "line_content": "        permission_id: permission.id,"}, {"line_number": 33, "line_content": "        role_id: role.id"}, {"line_number": 34, "line_content": "    }).del();"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function addPermissionWithRoles(config, roles) {"}, {"line_number": 2, "line_content": "    return combineTransactionalMigrations("}, {"line_number": 3, "line_content": "        addPermission(config),"}, {"line_number": 4, "line_content": "        ...roles.map((role => addPermissionToRole({permission: config.name, role})))"}, {"line_number": 5, "line_content": "    );"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createRemovePermissionMigration(config, roles) {"}, {"line_number": 2, "line_content": "    return combineTransactionalMigrations("}, {"line_number": 3, "line_content": "        ...roles.map((role => removePermissionFromRole({permission: config.name, role}))),"}, {"line_number": 4, "line_content": "        removePermission(config)"}, {"line_number": 5, "line_content": "    );"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function addPermissionToRole(config) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            await addPermissionToRoleHelper(connection, config);"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async function down(connection) {"}, {"line_number": 7, "line_content": "            await removePermissionFromRoleHelper(connection, config);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createNonTransactionalMigration(up, down) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        config: {"}, {"line_number": 4, "line_content": "            transaction: false"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async up(config) {"}, {"line_number": 7, "line_content": "            await up(config.connection);"}, {"line_number": 8, "line_content": "        },"}, {"line_number": 9, "line_content": "        async down(config) {"}, {"line_number": 10, "line_content": "            await down(config.connection);"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createIrreversibleMigration(up) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        config: {"}, {"line_number": 4, "line_content": "            irreversible: true"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async up(config) {"}, {"line_number": 7, "line_content": "            await up(config.connection);"}, {"line_number": 8, "line_content": "        },"}, {"line_number": 9, "line_content": "        async down() {"}, {"line_number": 10, "line_content": "            return Promise.reject();"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createTransactionalMigration(up, down) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        config: {"}, {"line_number": 4, "line_content": "            transaction: true"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async up(config) {"}, {"line_number": 7, "line_content": "            await up(config.transacting);"}, {"line_number": 8, "line_content": "        },"}, {"line_number": 9, "line_content": "        async down(config) {"}, {"line_number": 10, "line_content": "            await down(config.transacting);"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function combineTransactionalMigrations(...migrations) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        config: {"}, {"line_number": 4, "line_content": "            transaction: true"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async up(config) {"}, {"line_number": 7, "line_content": "            for (const migration of migrations) {"}, {"line_number": 8, "line_content": "                await migration.up(config);"}, {"line_number": 9, "line_content": "            }"}, {"line_number": 10, "line_content": "        },"}, {"line_number": 11, "line_content": "        async down(config) {"}, {"line_number": 12, "line_content": "            // Down migrations must be run backwards!!"}, {"line_number": 13, "line_content": "            const reverseMigrations = migrations.slice().reverse();"}, {"line_number": 14, "line_content": "            for (const migration of reverseMigrations) {"}, {"line_number": 15, "line_content": "                await migration.down(config);"}, {"line_number": 16, "line_content": "            }"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": "    };"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function combineNonTransactionalMigrations(...migrations) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        config: {"}, {"line_number": 4, "line_content": "            transaction: false"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async up(config) {"}, {"line_number": 7, "line_content": "            for (const migration of migrations) {"}, {"line_number": 8, "line_content": "                await migration.up(config);"}, {"line_number": 9, "line_content": "            }"}, {"line_number": 10, "line_content": "        },"}, {"line_number": 11, "line_content": "        async down(config) {"}, {"line_number": 12, "line_content": "            // Down migrations must be run backwards!!"}, {"line_number": 13, "line_content": "            const reverseMigrations = migrations.slice().reverse();"}, {"line_number": 14, "line_content": "            for (const migration of reverseMigrations) {"}, {"line_number": 15, "line_content": "                await migration.down(config);"}, {"line_number": 16, "line_content": "            }"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": "    };"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createFinalMigration(major) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up() {"}, {"line_number": 4, "line_content": "            throw new errors.InternalServerError({"}, {"line_number": 5, "line_content": "                message: `Unable to run migrations`,"}, {"line_number": 6, "line_content": "                context: `You must be on the latest v${major}.x to update across major versions - https://ghost.org/docs/update/`,"}, {"line_number": 7, "line_content": "                help: `Run 'ghost update v${major}' to get the latest v${major}.x version, then run 'ghost update' to get to the latest.`"}, {"line_number": 8, "line_content": "            });"}, {"line_number": 9, "line_content": "        },"}, {"line_number": 10, "line_content": "        async function down() {"}, {"line_number": 11, "line_content": "            // no-op"}, {"line_number": 12, "line_content": "        });"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function removePermissionFromRole(config) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            await removePermissionFromRoleHelper(connection, config);"}, {"line_number": 5, "line_content": "        },"}, {"line_number": 6, "line_content": "        async function down(connection) {"}, {"line_number": 7, "line_content": "            await addPermissionToRoleHelper(connection, config);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    );"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function addSetting({key, value, type, group}) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            const settingExists = await connection('settings')"}, {"line_number": 5, "line_content": "                .where('key', '=', key)"}, {"line_number": 6, "line_content": "                .first();"}, {"line_number": 7, "line_content": "            if (settingExists) {"}, {"line_number": 8, "line_content": "                logging.warn(`Skipping adding setting: ${key} - setting already exists`);"}, {"line_number": 9, "line_content": "                return;"}, {"line_number": 10, "line_content": "            }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "            logging.info(`Adding setting: ${key}`);"}, {"line_number": 13, "line_content": "            const now = connection.raw('CURRENT_TIMESTAMP');"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "            return connection('settings')"}, {"line_number": 16, "line_content": "                .insert({"}, {"line_number": 17, "line_content": "                    id: ObjectId().toHexString(),"}, {"line_number": 18, "line_content": "                    key,"}, {"line_number": 19, "line_content": "                    value,"}, {"line_number": 20, "line_content": "                    group,"}, {"line_number": 21, "line_content": "                    type,"}, {"line_number": 22, "line_content": "                    created_at: now,"}, {"line_number": 23, "line_content": "                    created_by: MIGRATION_USER,"}, {"line_number": 24, "line_content": "                    updated_at: now,"}, {"line_number": 25, "line_content": "                    updated_by: MIGRATION_USER"}, {"line_number": 26, "line_content": "                });"}, {"line_number": 27, "line_content": "        },"}, {"line_number": 28, "line_content": "        async function down(connection) {"}, {"line_number": 29, "line_content": "            const settingExists = await connection('settings')"}, {"line_number": 30, "line_content": "                .where('key', '=', key)"}, {"line_number": 31, "line_content": "                .first();"}, {"line_number": 32, "line_content": "            if (!settingExists) {"}, {"line_number": 33, "line_content": "                logging.warn(`Skipping dropping setting: ${key} - setting does not exist`);"}, {"line_number": 34, "line_content": "                return;"}, {"line_number": 35, "line_content": "            }"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "            logging.info(`Dropping setting: ${key}`);"}, {"line_number": 38, "line_content": "            return connection('settings')"}, {"line_number": 39, "line_content": "                .where('key', '=', key)"}, {"line_number": 40, "line_content": "                .del();"}, {"line_number": 41, "line_content": "        }"}, {"line_number": 42, "line_content": "    );"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "function addTable(name, tableSpec) {"}, {"line_number": 2, "line_content": "    return createNonTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            const tableExists = await connection.schema.hasTable(name);"}, {"line_number": 5, "line_content": "            if (tableExists) {"}, {"line_number": 6, "line_content": "                logging.warn(`Skipping adding table: ${name} - table already exists`);"}, {"line_number": 7, "line_content": "                return;"}, {"line_number": 8, "line_content": "            }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "            logging.info(`Adding table: ${name}`);"}, {"line_number": 11, "line_content": "            return commands.createTable(name, connection, tableSpec);"}, {"line_number": 12, "line_content": "        },"}, {"line_number": 13, "line_content": "        async function down(connection) {"}, {"line_number": 14, "line_content": "            const tableExists = await connection.schema.hasTable(name);"}, {"line_number": 15, "line_content": "            if (!tableExists) {"}, {"line_number": 16, "line_content": "                logging.warn(`Skipping dropping table: ${name} - table does not exist`);"}, {"line_number": 17, "line_content": "                return;"}, {"line_number": 18, "line_content": "            }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "            logging.info(`Dropping table: ${name}`);"}, {"line_number": 21, "line_content": "            return commands.deleteTable(name, connection);"}, {"line_number": 22, "line_content": "        }"}, {"line_number": 23, "line_content": "    );"}, {"line_number": 24, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function dropTables(names) {"}, {"line_number": 2, "line_content": "    return createIrreversibleMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            for (const name of names) {"}, {"line_number": 5, "line_content": "                const exists = await connection.schema.hasTable(name);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "                if (!exists) {"}, {"line_number": 8, "line_content": "                    logging.warn(`Skipping dropping table: ${name} - table does not exist`);"}, {"line_number": 9, "line_content": "                } else {"}, {"line_number": 10, "line_content": "                    logging.info(`Dropping table: ${name}`);"}, {"line_number": 11, "line_content": "                    await commands.deleteTable(name, connection);"}, {"line_number": 12, "line_content": "                }"}, {"line_number": 13, "line_content": "            }"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": "    );"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function recreateTable(name, tableSpec) {"}, {"line_number": 2, "line_content": "    return createNonTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(connection) {"}, {"line_number": 4, "line_content": "            const exists = await connection.schema.hasTable(name);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "            if (!exists) {"}, {"line_number": 7, "line_content": "                logging.warn(`Skipping dropping table: ${name} - table does not exist`);"}, {"line_number": 8, "line_content": "            } else {"}, {"line_number": 9, "line_content": "                logging.info(`Dropping table: ${name}`);"}, {"line_number": 10, "line_content": "                await commands.deleteTable(name, connection);"}, {"line_number": 11, "line_content": "                logging.info(`Re-adding table: ${name}`);"}, {"line_number": 12, "line_content": "                await commands.createTable(name, connection, tableSpec);"}, {"line_number": 13, "line_content": "            }"}, {"line_number": 14, "line_content": "        },"}, {"line_number": 15, "line_content": "        async function down() {"}, {"line_number": 16, "line_content": "            // noop: we cannot go back to old table schema"}, {"line_number": 17, "line_content": "            logging.warn(`Ignoring rollback for table recreate: ${name}`);"}, {"line_number": 18, "line_content": "            return Promise.resolve();"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "    );"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function createAddColumnMigration(table, column, columnDefinition) {"}, {"line_number": 2, "line_content": "    return createNonTransactionalMigration("}, {"line_number": 3, "line_content": "        // up"}, {"line_number": 4, "line_content": "        commands.createColumnMigration({"}, {"line_number": 5, "line_content": "            table,"}, {"line_number": 6, "line_content": "            column,"}, {"line_number": 7, "line_content": "            dbIsInCorrectState: hasColumn => hasColumn === true,"}, {"line_number": 8, "line_content": "            operation: commands.addColumn,"}, {"line_number": 9, "line_content": "            operationVerb: 'Adding',"}, {"line_number": 10, "line_content": "            columnDefinition"}, {"line_number": 11, "line_content": "        }),"}, {"line_number": 12, "line_content": "        // down"}, {"line_number": 13, "line_content": "        commands.createColumnMigration({"}, {"line_number": 14, "line_content": "            table,"}, {"line_number": 15, "line_content": "            column,"}, {"line_number": 16, "line_content": "            dbIsInCorrectState: hasColumn => hasColumn === false,"}, {"line_number": 17, "line_content": "            operation: commands.dropColumn,"}, {"line_number": 18, "line_content": "            operationVerb: 'Removing',"}, {"line_number": 19, "line_content": "            columnDefinition"}, {"line_number": 20, "line_content": "        })"}, {"line_number": 21, "line_content": "    );"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function createDropColumnMigration(table, column, columnDefinition) {"}, {"line_number": 2, "line_content": "    return createNonTransactionalMigration("}, {"line_number": 3, "line_content": "        // up"}, {"line_number": 4, "line_content": "        commands.createColumnMigration({"}, {"line_number": 5, "line_content": "            table,"}, {"line_number": 6, "line_content": "            column,"}, {"line_number": 7, "line_content": "            dbIsInCorrectState: hasColumn => hasColumn === false,"}, {"line_number": 8, "line_content": "            operation: commands.dropColumn,"}, {"line_number": 9, "line_content": "            operationVerb: 'Removing'"}, {"line_number": 10, "line_content": "        }),"}, {"line_number": 11, "line_content": "        // down"}, {"line_number": 12, "line_content": "        commands.createColumnMigration({"}, {"line_number": 13, "line_content": "            table,"}, {"line_number": 14, "line_content": "            column,"}, {"line_number": 15, "line_content": "            dbIsInCorrectState: hasColumn => hasColumn === true,"}, {"line_number": 16, "line_content": "            operation: commands.addColumn,"}, {"line_number": 17, "line_content": "            operationVerb: 'Adding',"}, {"line_number": 18, "line_content": "            columnDefinition"}, {"line_number": 19, "line_content": "        })"}, {"line_number": 20, "line_content": "    );"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function createSetNullableMigration(table, column, options = {}) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(knex) {"}, {"line_number": 4, "line_content": "            logging.info(`Setting nullable: ${table}.${column}`);"}, {"line_number": 5, "line_content": "            await commands.setNullable(table, column, knex);"}, {"line_number": 6, "line_content": "        },"}, {"line_number": 7, "line_content": "        async function down(knex) {"}, {"line_number": 8, "line_content": "            if (DatabaseInfo.isSQLite(knex)) {"}, {"line_number": 9, "line_content": "                options.disableForeignKeyChecks = false;"}, {"line_number": 10, "line_content": "            }"}, {"line_number": 11, "line_content": "            logging.info(`Dropping nullable:  ${table}.${column}${options.disableForeignKeyChecks ? ' with foreign keys disabled' : ''}`);"}, {"line_number": 12, "line_content": "            if (options.disableForeignKeyChecks) {"}, {"line_number": 13, "line_content": "                await knex.raw('SET FOREIGN_KEY_CHECKS=0;').transacting(knex);"}, {"line_number": 14, "line_content": "            }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "            try {"}, {"line_number": 17, "line_content": "                await commands.dropNullable(table, column, knex);"}, {"line_number": 18, "line_content": "            } finally {"}, {"line_number": 19, "line_content": "                if (options.disableForeignKeyChecks) {"}, {"line_number": 20, "line_content": "                    await knex.raw('SET FOREIGN_KEY_CHECKS=1;').transacting(knex);"}, {"line_number": 21, "line_content": "                }"}, {"line_number": 22, "line_content": "            }            "}, {"line_number": 23, "line_content": "        }"}, {"line_number": 24, "line_content": "    );"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "function createDropNullableMigration(table, column, options = {}) {"}, {"line_number": 2, "line_content": "    return createTransactionalMigration("}, {"line_number": 3, "line_content": "        async function up(knex) {"}, {"line_number": 4, "line_content": "            if (DatabaseInfo.isSQLite(knex)) {"}, {"line_number": 5, "line_content": "                options.disableForeignKeyChecks = false;"}, {"line_number": 6, "line_content": "            }"}, {"line_number": 7, "line_content": "            logging.info(`Dropping nullable: ${table}.${column}${options.disableForeignKeyChecks ? ' with foreign keys disabled' : ''}`);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "            if (options.disableForeignKeyChecks) {"}, {"line_number": 10, "line_content": "                await knex.raw('SET FOREIGN_KEY_CHECKS=0;').transacting(knex);"}, {"line_number": 11, "line_content": "            }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "            try {"}, {"line_number": 14, "line_content": "                await commands.dropNullable(table, column, knex);"}, {"line_number": 15, "line_content": "            } finally {"}, {"line_number": 16, "line_content": "                if (options.disableForeignKeyChecks) {"}, {"line_number": 17, "line_content": "                    await knex.raw('SET FOREIGN_KEY_CHECKS=1;').transacting(knex);"}, {"line_number": 18, "line_content": "                }"}, {"line_number": 19, "line_content": "            }"}, {"line_number": 20, "line_content": "        },"}, {"line_number": 21, "line_content": "        async function down(knex) {"}, {"line_number": 22, "line_content": "            logging.info(`Setting nullable: ${table}.${column}`);"}, {"line_number": 23, "line_content": "            await commands.setNullable(table, column, knex);"}, {"line_number": 24, "line_content": "        }"}, {"line_number": 25, "line_content": "    );"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function getUnique(exists, requested, attempt = requested, n = 1) {"}, {"line_number": 2, "line_content": "    if (!exists(attempt)) {"}, {"line_number": 3, "line_content": "        return attempt;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    const newAttempt = requested.slice(0, -n.toString().length) + n;"}, {"line_number": 6, "line_content": "    return getUnique(exists, requested, newAttempt, n + 1);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function exists(name) {"}, {"line_number": 2, "line_content": "                return offers.find(offer => offer.name === name) !== undefined;"}, {"line_number": 3, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function storeEventOnMemberId(storage, event) {"}, {"line_number": 2, "line_content": "            return {"}, {"line_number": 3, "line_content": "                ...storage,"}, {"line_number": 4, "line_content": "                [event.member_id]: storage[event.member_id] ? storage[event.member_id].concat(event) : [event]"}, {"line_number": 5, "line_content": "            };"}, {"line_number": 6, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function calculateMRR(subscription, redemption) {"}, {"line_number": 2, "line_content": "            if (redemption && subscription.interval !== redemption.discount_interval) {"}, {"line_number": 3, "line_content": "                logging.error('Found invalid price & redemption pair');"}, {"line_number": 4, "line_content": "                return calculateMRR(subscription);"}, {"line_number": 5, "line_content": "            }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "            if (!redemption) {"}, {"line_number": 8, "line_content": "                return subscription.interval === 'year' ? subscription.amount / 12 : subscription.amount;"}, {"line_number": 9, "line_content": "            }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "            if (redemption.discount_type === 'percent') {"}, {"line_number": 12, "line_content": "                return calculateMRR({"}, {"line_number": 13, "line_content": "                    interval: subscription.interval,"}, {"line_number": 14, "line_content": "                    amount: subscription.amount * (100 - redemption.discount_amount) / 100"}, {"line_number": 15, "line_content": "                });"}, {"line_number": 16, "line_content": "            }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "            return calculateMRR({"}, {"line_number": 19, "line_content": "                interval: subscription.interval,"}, {"line_number": 20, "line_content": "                amount: subscription.amount - redemption.discount_amount"}, {"line_number": 21, "line_content": "            });"}, {"line_number": 22, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function calculateMrrDelta({interval, amount}) {"}, {"line_number": 2, "line_content": "            if (interval === 'year') {"}, {"line_number": 3, "line_content": "                return Math.floor(amount / 12);"}, {"line_number": 4, "line_content": "            }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "            if (interval === 'month') {"}, {"line_number": 7, "line_content": "                return amount;"}, {"line_number": 8, "line_content": "            }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "            if (interval === 'week') {"}, {"line_number": 11, "line_content": "                return amount * 4;"}, {"line_number": 12, "line_content": "            }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "            if (interval === 'day') {"}, {"line_number": 15, "line_content": "                return amount * 30;"}, {"line_number": 16, "line_content": "            }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "            throw new errors.InternalServerError({"}, {"line_number": 19, "line_content": "                message: tpl(messages.unknownSubscriptionIntervalError , {"}, {"line_number": 20, "line_content": "                    interval"}, {"line_number": 21, "line_content": "                })"}, {"line_number": 22, "line_content": "            });"}, {"line_number": 23, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function cancel() {"}, {"line_number": 2, "line_content": "    postParentPortMessage('Update check job cancelled before completion');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (parentPort) {"}, {"line_number": 5, "line_content": "        postParentPortMessage('cancelled');"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "        setTimeout(() => {"}, {"line_number": 8, "line_content": "            process.exit(0);"}, {"line_number": 9, "line_content": "        }, 1000);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function SchedulingBase() {"}, {"line_number": 2, "line_content": "    Object.defineProperty(this, 'requiredFns', {"}, {"line_number": 3, "line_content": "        value: ['schedule', 'unschedule', 'run'],"}, {"line_number": 4, "line_content": "        writable: false"}, {"line_number": 5, "line_content": "    });"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function createAdapter() {"}, {"line_number": 2, "line_content": "    return adapterManager.getAdapter('scheduling');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function SchedulingDefault(options) {"}, {"line_number": 2, "line_content": "    SchedulingBase.call(this, options);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // NOTE: How often should the scheduler wake up?"}, {"line_number": 5, "line_content": "    this.runTimeoutInMs = 1000 * 60 * 5;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // NOTE: An offset between now and past, which helps us choosing jobs which need to be executed soon."}, {"line_number": 8, "line_content": "    this.offsetInMinutes = 10;"}, {"line_number": 9, "line_content": "    this.beforePingInMs = -50;"}, {"line_number": 10, "line_content": "    this.retryTimeoutInMs = 1000 * 5;"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // NOTE: Each scheduler implementation can decide whether to load scheduled posts on bootstrap or not."}, {"line_number": 13, "line_content": "    this.rescheduleOnBoot = true;"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    // NOTE: A sorted list of all scheduled jobs."}, {"line_number": 16, "line_content": "    this.allJobs = {};"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    this.deletedJobs = {};"}, {"line_number": 19, "line_content": "    this.isRunning = false;"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getStorage(feature) {"}, {"line_number": 2, "line_content": "    let adapterName = 'storage';"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (feature) {"}, {"line_number": 5, "line_content": "        adapterName += `:${feature}`;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return adapterManager.getAdapter(adapterName);"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "function generateToken(email, settingsAPI, transaction) {"}, {"line_number": 2, "line_content": "    const options = {context: {internal: true}, transacting: transaction};"}, {"line_number": 3, "line_content": "    let dbHash;"}, {"line_number": 4, "line_content": "    let token;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return settingsAPI.read(_.merge({key: 'db_hash'}, options))"}, {"line_number": 7, "line_content": "        .then((response) => {"}, {"line_number": 8, "line_content": "            dbHash = response.settings[0].value;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "            return models.User.getByEmail(email, options);"}, {"line_number": 11, "line_content": "        })"}, {"line_number": 12, "line_content": "        .then((user) => {"}, {"line_number": 13, "line_content": "            if (!user) {"}, {"line_number": 14, "line_content": "                throw new errors.NotFoundError({message: tpl(messages.userNotFound)});"}, {"line_number": 15, "line_content": "            }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "            token = security.tokens.resetToken.generateHash({"}, {"line_number": 18, "line_content": "                expires: Date.now() + constants.ONE_DAY_MS,"}, {"line_number": 19, "line_content": "                email: email,"}, {"line_number": 20, "line_content": "                dbHash: dbHash,"}, {"line_number": 21, "line_content": "                password: user.get('password')"}, {"line_number": 22, "line_content": "            });"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "            return {"}, {"line_number": 25, "line_content": "                email: email,"}, {"line_number": 26, "line_content": "                resetToken: token"}, {"line_number": 27, "line_content": "            };"}, {"line_number": 28, "line_content": "        });"}, {"line_number": 29, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function extractTokenParts(options) {"}, {"line_number": 2, "line_content": "    options.data.password_reset[0].token = security.url.decodeBase64(options.data.password_reset[0].token);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const tokenParts = security.tokens.resetToken.extract({"}, {"line_number": 5, "line_content": "        token: options.data.password_reset[0].token"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!tokenParts) {"}, {"line_number": 9, "line_content": "        return Promise.reject(new errors.UnauthorizedError({"}, {"line_number": 10, "line_content": "            message: tpl(messages.corruptedToken.message),"}, {"line_number": 11, "line_content": "            context: tpl(messages.corruptedToken.context),"}, {"line_number": 12, "line_content": "            help: tpl(messages.corruptedToken.help)"}, {"line_number": 13, "line_content": "        }));"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    return Promise.resolve({options, tokenParts});"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function protectBruteForce({options, tokenParts}) {"}, {"line_number": 2, "line_content": "    if (tokenSecurity[`${tokenParts.email}+${tokenParts.expires}`] &&"}, {"line_number": 3, "line_content": "        tokenSecurity[`${tokenParts.email}+${tokenParts.expires}`].count >= 10) {"}, {"line_number": 4, "line_content": "        return Promise.reject(new errors.NoPermissionError({"}, {"line_number": 5, "line_content": "            message: tpl(messages.tokenLocked)"}, {"line_number": 6, "line_content": "        }));"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return Promise.resolve({options, tokenParts});"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 64, "lines": [{"line_number": 1, "line_content": "function doReset(options, tokenParts, settingsAPI) {"}, {"line_number": 2, "line_content": "    let dbHash;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const data = options.data.password_reset[0];"}, {"line_number": 5, "line_content": "    const resetToken = data.token;"}, {"line_number": 6, "line_content": "    const oldPassword = data.oldPassword;"}, {"line_number": 7, "line_content": "    const newPassword = data.newPassword;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return settingsAPI.read(_.merge({key: 'db_hash'}, _.omit(options, 'data')))"}, {"line_number": 10, "line_content": "        .then((response) => {"}, {"line_number": 11, "line_content": "            dbHash = response.settings[0].value;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "            return models.User.getByEmail(tokenParts.email, options);"}, {"line_number": 14, "line_content": "        })"}, {"line_number": 15, "line_content": "        .then((user) => {"}, {"line_number": 16, "line_content": "            if (!user) {"}, {"line_number": 17, "line_content": "                throw new errors.NotFoundError({message: tpl(messages.userNotFound)});"}, {"line_number": 18, "line_content": "            }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "            let compareResult = security.tokens.resetToken.compare({"}, {"line_number": 21, "line_content": "                token: resetToken,"}, {"line_number": 22, "line_content": "                dbHash: dbHash,"}, {"line_number": 23, "line_content": "                password: user.get('password')"}, {"line_number": 24, "line_content": "            });"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "            if (!compareResult.correct) {"}, {"line_number": 27, "line_content": "                let error;"}, {"line_number": 28, "line_content": "                if (compareResult.reason === 'expired' || compareResult.reason === 'invalid_expiry') {"}, {"line_number": 29, "line_content": "                    error = new errors.BadRequestError({"}, {"line_number": 30, "line_content": "                        message: tpl(messages.expired.message),"}, {"line_number": 31, "line_content": "                        context: tpl(messages.expired.context),"}, {"line_number": 32, "line_content": "                        help: tpl(messages.expired.help)"}, {"line_number": 33, "line_content": "                    });"}, {"line_number": 34, "line_content": "                } else {"}, {"line_number": 35, "line_content": "                    error = new errors.BadRequestError({"}, {"line_number": 36, "line_content": "                        message: tpl(messages.invalidToken.message),"}, {"line_number": 37, "line_content": "                        context: tpl(messages.invalidToken.context),"}, {"line_number": 38, "line_content": "                        help: tpl(messages.invalidToken.help)"}, {"line_number": 39, "line_content": "                    });"}, {"line_number": 40, "line_content": "                }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "                return Promise.reject(error);"}, {"line_number": 43, "line_content": "            }"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "            return models.User.changePassword({"}, {"line_number": 46, "line_content": "                oldPassword: oldPassword,"}, {"line_number": 47, "line_content": "                newPassword: newPassword,"}, {"line_number": 48, "line_content": "                user_id: user.id"}, {"line_number": 49, "line_content": "            }, options);"}, {"line_number": 50, "line_content": "        })"}, {"line_number": 51, "line_content": "        .then((updatedUser) => {"}, {"line_number": 52, "line_content": "            updatedUser.set('status', 'active');"}, {"line_number": 53, "line_content": "            return updatedUser.save(options);"}, {"line_number": 54, "line_content": "        })"}, {"line_number": 55, "line_content": "        .catch(errors.ValidationError, (err) => {"}, {"line_number": 56, "line_content": "            return Promise.reject(err);"}, {"line_number": 57, "line_content": "        })"}, {"line_number": 58, "line_content": "        .catch((err) => {"}, {"line_number": 59, "line_content": "            if (errors.utils.isGhostError(err)) {"}, {"line_number": 60, "line_content": "                return Promise.reject(err);"}, {"line_number": 61, "line_content": "            }"}, {"line_number": 62, "line_content": "            return Promise.reject(new errors.UnauthorizedError({err: err}));"}, {"line_number": 63, "line_content": "        });"}, {"line_number": 64, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "async function sendResetNotification(data, mailAPI) {"}, {"line_number": 2, "line_content": "    const adminUrl = urlUtils.urlFor('admin', true);"}, {"line_number": 3, "line_content": "    const resetToken = security.url.encodeBase64(data.resetToken);"}, {"line_number": 4, "line_content": "    const resetUrl = urlUtils.urlJoin(adminUrl, 'reset', resetToken, '/');"}, {"line_number": 5, "line_content": "    const emailData = {"}, {"line_number": 6, "line_content": "        resetUrl: resetUrl,"}, {"line_number": 7, "line_content": "        recipientEmail: data.email"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const content = await mail.utils.generateContent({"}, {"line_number": 11, "line_content": "        data: emailData,"}, {"line_number": 12, "line_content": "        template: 'reset-password'"}, {"line_number": 13, "line_content": "    });"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    const payload = {"}, {"line_number": 16, "line_content": "        mail: [{"}, {"line_number": 17, "line_content": "            message: {"}, {"line_number": 18, "line_content": "                to: data.email,"}, {"line_number": 19, "line_content": "                subject: tpl(messages.resetPassword),"}, {"line_number": 20, "line_content": "                html: content.html,"}, {"line_number": 21, "line_content": "                text: content.text"}, {"line_number": 22, "line_content": "            },"}, {"line_number": 23, "line_content": "            options: {}"}, {"line_number": 24, "line_content": "        }]"}, {"line_number": 25, "line_content": "    };"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "    return mailAPI.send(payload, {context: {internal: true}});"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "async function createMiddleware() {"}, {"line_number": 2, "line_content": "    const url = require('url');"}, {"line_number": 3, "line_content": "    const {protocol, host} = url.parse(config.get('url'));"}, {"line_number": 4, "line_content": "    const siteOrigin = `${protocol}//${host}`;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const membersConfig = await membersService.api.getPublicConfig();"}, {"line_number": 7, "line_content": "    return jwt({"}, {"line_number": 8, "line_content": "        credentialsRequired: false,"}, {"line_number": 9, "line_content": "        requestProperty: 'member',"}, {"line_number": 10, "line_content": "        audience: siteOrigin,"}, {"line_number": 11, "line_content": "        issuer: membersConfig.issuer,"}, {"line_number": 12, "line_content": "        algorithms: ['RS512'],"}, {"line_number": 13, "line_content": "        secret: membersConfig.publicKey,"}, {"line_number": 14, "line_content": "        getToken(req) {"}, {"line_number": 15, "line_content": "            if (!req.get('authorization')) {"}, {"line_number": 16, "line_content": "                return null;"}, {"line_number": 17, "line_content": "            }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "            const [scheme, credentials] = req.get('authorization').split(/\\s+/);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "            if (scheme !== 'GhostMembers') {"}, {"line_number": 22, "line_content": "                return null;"}, {"line_number": 23, "line_content": "            }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "            return credentials;"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "    });"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function getExpressSessionMiddleware() {"}, {"line_number": 2, "line_content": "    if (!unoExpressSessionMiddleware) {"}, {"line_number": 3, "line_content": "        unoExpressSessionMiddleware = session({"}, {"line_number": 4, "line_content": "            store: sessionStore,"}, {"line_number": 5, "line_content": "            secret: settingsCache.get('admin_session_secret'),"}, {"line_number": 6, "line_content": "            resave: false,"}, {"line_number": 7, "line_content": "            saveUninitialized: false,"}, {"line_number": 8, "line_content": "            name: 'ghost-admin-api-session',"}, {"line_number": 9, "line_content": "            cookie: {"}, {"line_number": 10, "line_content": "                maxAge: constants.SIX_MONTH_MS,"}, {"line_number": 11, "line_content": "                httpOnly: true,"}, {"line_number": 12, "line_content": "                path: urlUtils.getSubdir() + '/ghost',"}, {"line_number": 13, "line_content": "                sameSite: 'lax',"}, {"line_number": 14, "line_content": "                secure: urlUtils.isSSL(config.get('url'))"}, {"line_number": 15, "line_content": "            }"}, {"line_number": 16, "line_content": "        });"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "    return unoExpressSessionMiddleware;"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function getOriginOfRequest(req) {"}, {"line_number": 2, "line_content": "    const origin = req.get('origin');"}, {"line_number": 3, "line_content": "    const referrer = req.get('referrer') || urlUtils.getAdminUrl() || urlUtils.getSiteUrl();"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (!origin && !referrer || origin === 'null') {"}, {"line_number": 6, "line_content": "        return null;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (origin) {"}, {"line_number": 10, "line_content": "        return origin;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    const {protocol, host} = url.parse(referrer);"}, {"line_number": 14, "line_content": "    if (protocol && host) {"}, {"line_number": 15, "line_content": "        return `${protocol}//${host}`;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    return null;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "function SessionMiddleware({sessionService}) {"}, {"line_number": 2, "line_content": "    async function createSession(req, res, next) {"}, {"line_number": 3, "line_content": "        try {"}, {"line_number": 4, "line_content": "            await sessionService.createSessionForUser(req, res, req.user);"}, {"line_number": 5, "line_content": "            res.sendStatus(201);"}, {"line_number": 6, "line_content": "        } catch (err) {"}, {"line_number": 7, "line_content": "            next(err);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    async function destroySession(req, res, next) {"}, {"line_number": 12, "line_content": "        try {"}, {"line_number": 13, "line_content": "            await sessionService.destroyCurrentSession(req);"}, {"line_number": 14, "line_content": "            res.sendStatus(204);"}, {"line_number": 15, "line_content": "        } catch (err) {"}, {"line_number": 16, "line_content": "            next(err);"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    async function authenticate(req, res, next) {"}, {"line_number": 21, "line_content": "        try {"}, {"line_number": 22, "line_content": "            const user = await sessionService.getUserForSession(req, res);"}, {"line_number": 23, "line_content": "            if (user) {"}, {"line_number": 24, "line_content": "                // Do not nullify `req.user` as it might have been already set"}, {"line_number": 25, "line_content": "                // in a previous middleware (authorize middleware)."}, {"line_number": 26, "line_content": "                req.user = user;"}, {"line_number": 27, "line_content": "            }"}, {"line_number": 28, "line_content": "            next();"}, {"line_number": 29, "line_content": "        } catch (err) {"}, {"line_number": 30, "line_content": "            next(err);"}, {"line_number": 31, "line_content": "        }"}, {"line_number": 32, "line_content": "    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    return {"}, {"line_number": 35, "line_content": "        createSession: createSession,"}, {"line_number": 36, "line_content": "        destroySession: destroySession,"}, {"line_number": 37, "line_content": "        authenticate: authenticate"}, {"line_number": 38, "line_content": "    };"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function createSession(req, res, next) {"}, {"line_number": 2, "line_content": "        try {"}, {"line_number": 3, "line_content": "            await sessionService.createSessionForUser(req, res, req.user);"}, {"line_number": 4, "line_content": "            res.sendStatus(201);"}, {"line_number": 5, "line_content": "        } catch (err) {"}, {"line_number": 6, "line_content": "            next(err);"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function destroySession(req, res, next) {"}, {"line_number": 2, "line_content": "        try {"}, {"line_number": 3, "line_content": "            await sessionService.destroyCurrentSession(req);"}, {"line_number": 4, "line_content": "            res.sendStatus(204);"}, {"line_number": 5, "line_content": "        } catch (err) {"}, {"line_number": 6, "line_content": "            next(err);"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function authenticate(req, res, next) {"}, {"line_number": 2, "line_content": "        try {"}, {"line_number": 3, "line_content": "            const user = await sessionService.getUserForSession(req, res);"}, {"line_number": 4, "line_content": "            if (user) {"}, {"line_number": 5, "line_content": "                // Do not nullify `req.user` as it might have been already set"}, {"line_number": 6, "line_content": "                // in a previous middleware (authorize middleware)."}, {"line_number": 7, "line_content": "                req.user = user;"}, {"line_number": 8, "line_content": "            }"}, {"line_number": 9, "line_content": "            next();"}, {"line_number": 10, "line_content": "        } catch (err) {"}, {"line_number": 11, "line_content": "            next(err);"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function checkIsSetup() {"}, {"line_number": 2, "line_content": "    return models.User.isSetup();"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function assertSetupCompleted(status) {"}, {"line_number": 2, "line_content": "    return async function checkPermission(__) {"}, {"line_number": 3, "line_content": "        const isSetup = await checkIsSetup();"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        if (isSetup === status) {"}, {"line_number": 6, "line_content": "            return __;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        const completed = tpl(messages.setupAlreadyCompleted);"}, {"line_number": 10, "line_content": "        const notCompleted = tpl(messages.setupMustBeCompleted);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        function throwReason(reason) {"}, {"line_number": 13, "line_content": "            throw new errors.NoPermissionError({message: reason});"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        if (isSetup) {"}, {"line_number": 17, "line_content": "            throwReason(completed);"}, {"line_number": 18, "line_content": "        } else {"}, {"line_number": 19, "line_content": "            throwReason(notCompleted);"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "    };"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function throwReason(reason) {"}, {"line_number": 2, "line_content": "            throw new errors.NoPermissionError({message: reason});"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "async function setupUser(userData) {"}, {"line_number": 2, "line_content": "    const context = {context: {internal: true}};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const owner = await models.User.findOne({role: 'Owner', status: 'all'});"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (!owner) {"}, {"line_number": 7, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 8, "line_content": "            message: tpl(messages.setupUnableToRun)"}, {"line_number": 9, "line_content": "        });"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    const user = await models.User.setup(userData, _.extend({id: owner.id}, context));"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    return {"}, {"line_number": 15, "line_content": "        user: user,"}, {"line_number": 16, "line_content": "        userData: userData"}, {"line_number": 17, "line_content": "    };"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "async function doSettings(data, settingsAPI) {"}, {"line_number": 2, "line_content": "    const context = {context: {user: data.user.id}};"}, {"line_number": 3, "line_content": "    const user = data.user;"}, {"line_number": 4, "line_content": "    const blogTitle = data.userData.blogTitle;"}, {"line_number": 5, "line_content": "    const description = data.userData.description ? data.userData.description.trim() : null;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    let userSettings;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (!blogTitle || typeof blogTitle !== 'string') {"}, {"line_number": 10, "line_content": "        return user;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    userSettings = ["}, {"line_number": 14, "line_content": "        {key: 'title', value: blogTitle.trim()},"}, {"line_number": 15, "line_content": "        {key: 'description', value: description || tpl(messages.sampleBlogDescription)}"}, {"line_number": 16, "line_content": "    ];"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    if (data.userData.accentColor) {"}, {"line_number": 19, "line_content": "        userSettings.push({"}, {"line_number": 20, "line_content": "            key: 'accent_color', value: data.userData.accentColor"}, {"line_number": 21, "line_content": "        });"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    await settingsAPI.edit({settings: userSettings}, context);"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    return user;"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "async function doTiersAndNewsletter(data, api) {"}, {"line_number": 2, "line_content": "    const {tiers: tiersAPI, newsletters: newslettersAPI} = api;"}, {"line_number": 3, "line_content": "    const context = {context: {user: data.user.id}};"}, {"line_number": 4, "line_content": "    const user = data.user;"}, {"line_number": 5, "line_content": "    const blogTitle = data.userData.blogTitle;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (!blogTitle || typeof blogTitle !== 'string') {"}, {"line_number": 8, "line_content": "        return user;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    try {"}, {"line_number": 11, "line_content": "        const tierPage = await tiersAPI.browse({limit: 'all'});"}, {"line_number": 12, "line_content": "        const newsletterPage = await newslettersAPI.browse({limit: 'all'});"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "        const defaultTier = tierPage.tiers.find(p => p.slug === 'default-product');"}, {"line_number": 15, "line_content": "        const defaultNewsletter = newsletterPage.newsletters.find(p => p.slug === 'default-newsletter');"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "        if (defaultTier) {"}, {"line_number": 18, "line_content": "            await tiersAPI.edit({tiers: [{"}, {"line_number": 19, "line_content": "                name: blogTitle.trim()"}, {"line_number": 20, "line_content": "            }]}, {context: context.context, id: defaultTier.id});"}, {"line_number": 21, "line_content": "        }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "        if (defaultNewsletter) {"}, {"line_number": 24, "line_content": "            await newslettersAPI.edit({newsletters: [{"}, {"line_number": 25, "line_content": "                name: blogTitle.trim()"}, {"line_number": 26, "line_content": "            }]}, {context: context.context, id: defaultNewsletter.id});"}, {"line_number": 27, "line_content": "        }"}, {"line_number": 28, "line_content": "    } catch (e) {"}, {"line_number": 29, "line_content": "        return data;"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    return data;"}, {"line_number": 33, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "async function doFixtures(data) {"}, {"line_number": 2, "line_content": "    const date = moment().format('MMMM YYYY');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    _.each(postSetupFixtures, async (mobiledoc, key) => {"}, {"line_number": 5, "line_content": "        // Using very simple find and replace because we control the fixtures"}, {"line_number": 6, "line_content": "        mobiledoc = mobiledoc.replace(/{{site.title}}/g, data.userData.blogTitle);"}, {"line_number": 7, "line_content": "        mobiledoc = mobiledoc.replace(/{{author.name}}/g, data.userData.name);"}, {"line_number": 8, "line_content": "        mobiledoc = mobiledoc.replace(/{{date}}/, date);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "        const post = await models.Post.findOne({slug: key});"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        if (post) {"}, {"line_number": 13, "line_content": "            await models.Post.edit({mobiledoc}, {id: post.id});"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": "    });"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return data;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "function sendWelcomeEmail(email, mailAPI) {"}, {"line_number": 2, "line_content": "    if (config.get('sendWelcomeEmail')) {"}, {"line_number": 3, "line_content": "        const data = {"}, {"line_number": 4, "line_content": "            ownerEmail: email"}, {"line_number": 5, "line_content": "        };"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        return mail.utils.generateContent({data: data, template: 'welcome'})"}, {"line_number": 8, "line_content": "            .then((content) => {"}, {"line_number": 9, "line_content": "                const message = {"}, {"line_number": 10, "line_content": "                    to: email,"}, {"line_number": 11, "line_content": "                    subject: tpl(messages.yourNewGhostBlog),"}, {"line_number": 12, "line_content": "                    html: content.html,"}, {"line_number": 13, "line_content": "                    text: content.text"}, {"line_number": 14, "line_content": "                };"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "                const payload = {"}, {"line_number": 17, "line_content": "                    mail: [{"}, {"line_number": 18, "line_content": "                        message: message,"}, {"line_number": 19, "line_content": "                        options: {}"}, {"line_number": 20, "line_content": "                    }]"}, {"line_number": 21, "line_content": "                };"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "                mailAPI.send(payload, {context: {internal: true}})"}, {"line_number": 24, "line_content": "                    .catch((err) => {"}, {"line_number": 25, "line_content": "                        err.context = tpl(messages.unableToSendWelcomeEmail);"}, {"line_number": 26, "line_content": "                        logging.error(err);"}, {"line_number": 27, "line_content": "                    });"}, {"line_number": 28, "line_content": "            });"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": "    return Promise.resolve();"}, {"line_number": 31, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "async function installTheme(data, api) {"}, {"line_number": 2, "line_content": "    const {theme: themeName} = data.userData;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (!themeName) {"}, {"line_number": 5, "line_content": "        return data;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (themeName.toLowerCase() === 'tryghost/casper') {"}, {"line_number": 9, "line_content": "        logging.warn('Skipping theme install as Casper is the default theme.');"}, {"line_number": 10, "line_content": "        return data;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    // Use the api instead of the services as the api performs extra logic"}, {"line_number": 14, "line_content": "    try {"}, {"line_number": 15, "line_content": "        const installResults = await api.themes.install({"}, {"line_number": 16, "line_content": "            source: 'github',"}, {"line_number": 17, "line_content": "            ref: themeName,"}, {"line_number": 18, "line_content": "            context: {internal: true}"}, {"line_number": 19, "line_content": "        });"}, {"line_number": 20, "line_content": "        const theme = installResults.themes[0];"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        await api.themes.activate({"}, {"line_number": 23, "line_content": "            name: theme.name,"}, {"line_number": 24, "line_content": "            context: {internal: true}"}, {"line_number": 25, "line_content": "        });"}, {"line_number": 26, "line_content": "    } catch (error) {"}, {"line_number": 27, "line_content": "        //Fallback to Casper by doing nothing as the theme setting update is the last step"}, {"line_number": 28, "line_content": "        logging.warn(tpl(messages.failedThemeInstall, {themeName, error: error.message}));"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "    return data;"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "async function getStripeConnectOAuthUrl(setSessionProp, mode = 'live') {"}, {"line_number": 2, "line_content": "    checkCanConnect();"}, {"line_number": 3, "line_content": "    const randomState = randomBytes(16).toString('hex');"}, {"line_number": 4, "line_content": "    const state = Buffer.from(JSON.stringify({"}, {"line_number": 5, "line_content": "        mode,"}, {"line_number": 6, "line_content": "        randomState"}, {"line_number": 7, "line_content": "    })).toString('base64');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    await setSessionProp(STATE_PROP, state);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    const clientID = mode === 'live' ? liveClientID : testClientID;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    const authUrl = new URL('https://connect.stripe.com/oauth/authorize');"}, {"line_number": 14, "line_content": "    authUrl.searchParams.set('response_type', 'code');"}, {"line_number": 15, "line_content": "    authUrl.searchParams.set('scope', 'read_write');"}, {"line_number": 16, "line_content": "    authUrl.searchParams.set('client_id', clientID);"}, {"line_number": 17, "line_content": "    authUrl.searchParams.set('redirect_uri', redirectURI);"}, {"line_number": 18, "line_content": "    authUrl.searchParams.set('state', state);"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    return authUrl;"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "async function getStripeConnectTokenData(encodedData, getSessionProp) {"}, {"line_number": 2, "line_content": "    const data = JSON.parse(Buffer.from(encodedData, 'base64').toString());"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const state = await getSessionProp(STATE_PROP);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (state !== data.s) {"}, {"line_number": 7, "line_content": "        throw new errors.NoPermissionError({message: tpl(messages.incorrectState)});"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return {"}, {"line_number": 11, "line_content": "        public_key: data.p,"}, {"line_number": 12, "line_content": "        secret_key: data.a,"}, {"line_number": 13, "line_content": "        livemode: data.l,"}, {"line_number": 14, "line_content": "        display_name: data.n,"}, {"line_number": 15, "line_content": "        account_id: data.i"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function checkCanConnect() {"}, {"line_number": 2, "line_content": "    const siteUrl = urlUtils.getSiteUrl();"}, {"line_number": 3, "line_content": "    const productionMode = config.get('env') === 'production';"}, {"line_number": 4, "line_content": "    const siteUrlUsingSSL = /^https/.test(siteUrl);"}, {"line_number": 5, "line_content": "    const cannotConnectToStripe = productionMode && !siteUrlUsingSSL;"}, {"line_number": 6, "line_content": "    if (cannotConnectToStripe) {"}, {"line_number": 7, "line_content": "        throw new errors.BadRequestError({"}, {"line_number": 8, "line_content": "            message: 'Cannot connect to stripe unless site is using https://'"}, {"line_number": 9, "line_content": "        });"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 178, "lines": [{"line_number": 1, "line_content": "function createApiInstance(config) {"}, {"line_number": 2, "line_content": "    const membersApiInstance = MembersApi({"}, {"line_number": 3, "line_content": "        tokenConfig: config.getTokenConfig(),"}, {"line_number": 4, "line_content": "        auth: {"}, {"line_number": 5, "line_content": "            getSigninURL: config.getSigninURL.bind(config),"}, {"line_number": 6, "line_content": "            allowSelfSignup: config.getAllowSelfSignup.bind(config),"}, {"line_number": 7, "line_content": "            tokenProvider: new SingleUseTokenProvider(models.SingleUseToken, MAGIC_LINK_TOKEN_VALIDITY)"}, {"line_number": 8, "line_content": "        },"}, {"line_number": 9, "line_content": "        mail: {"}, {"line_number": 10, "line_content": "            transporter: {"}, {"line_number": 11, "line_content": "                sendMail(message) {"}, {"line_number": 12, "line_content": "                    if (process.env.NODE_ENV !== 'production') {"}, {"line_number": 13, "line_content": "                        logging.warn(message.text);"}, {"line_number": 14, "line_content": "                    }"}, {"line_number": 15, "line_content": "                    let msg = Object.assign({"}, {"line_number": 16, "line_content": "                        from: config.getAuthEmailFromAddress(),"}, {"line_number": 17, "line_content": "                        subject: 'Signin',"}, {"line_number": 18, "line_content": "                        forceTextContent: true"}, {"line_number": 19, "line_content": "                    }, message);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "                    return ghostMailer.send(msg);"}, {"line_number": 22, "line_content": "                }"}, {"line_number": 23, "line_content": "            },"}, {"line_number": 24, "line_content": "            getSubject(type) {"}, {"line_number": 25, "line_content": "                const siteTitle = settingsCache.get('title');"}, {"line_number": 26, "line_content": "                switch (type) {"}, {"line_number": 27, "line_content": "                case 'subscribe':"}, {"line_number": 28, "line_content": "                    return `\ud83d\udceb Confirm your subscription to ${siteTitle}`;"}, {"line_number": 29, "line_content": "                case 'signup':"}, {"line_number": 30, "line_content": "                    return `\ud83d\ude4c Complete your sign up to ${siteTitle}!`;"}, {"line_number": 31, "line_content": "                case 'signup-paid':"}, {"line_number": 32, "line_content": "                    return `\ud83d\ude4c Thank you for signing up to ${siteTitle}!`;"}, {"line_number": 33, "line_content": "                case 'updateEmail':"}, {"line_number": 34, "line_content": "                    return `\ud83d\udceb Confirm your email update for ${siteTitle}!`;"}, {"line_number": 35, "line_content": "                case 'signin':"}, {"line_number": 36, "line_content": "                default:"}, {"line_number": 37, "line_content": "                    return `\ud83d\udd11 Secure sign in link for ${siteTitle}`;"}, {"line_number": 38, "line_content": "                }"}, {"line_number": 39, "line_content": "            },"}, {"line_number": 40, "line_content": "            getText(url, type, email) {"}, {"line_number": 41, "line_content": "                const siteTitle = settingsCache.get('title');"}, {"line_number": 42, "line_content": "                switch (type) {"}, {"line_number": 43, "line_content": "                case 'subscribe':"}, {"line_number": 44, "line_content": "                    return `"}, {"line_number": 45, "line_content": "                        Hey there,"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "                        You're one tap away from subscribing to ${siteTitle} \u2014 please confirm your email address with this link:"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "                        ${url}"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "                        For your security, the link will expire in 24 hours time."}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "                        All the best!"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "                        ---"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "                        Sent to ${email}"}, {"line_number": 58, "line_content": "                        If you did not make this request, you can simply delete this message. You will not be subscribed."}, {"line_number": 59, "line_content": "                        `;"}, {"line_number": 60, "line_content": "                case 'signup':"}, {"line_number": 61, "line_content": "                    return `"}, {"line_number": 62, "line_content": "                        Hey there!"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "                        Tap the link below to complete the signup process for ${siteTitle}, and be automatically signed in:"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "                        ${url}"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "                        For your security, the link will expire in 24 hours time."}, {"line_number": 69, "line_content": ""}, {"line_number": 70, "line_content": "                        See you soon!"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "                        ---"}, {"line_number": 73, "line_content": ""}, {"line_number": 74, "line_content": "                        Sent to ${email}"}, {"line_number": 75, "line_content": "                        If you did not make this request, you can simply delete this message. You will not be signed up, and no account will be created for you."}, {"line_number": 76, "line_content": "                        `;"}, {"line_number": 77, "line_content": "                case 'signup-paid':"}, {"line_number": 78, "line_content": "                    return `"}, {"line_number": 79, "line_content": "                        Hey there!"}, {"line_number": 80, "line_content": ""}, {"line_number": 81, "line_content": "                        Thank you for subscribing to ${siteTitle}. Tap the link below to be automatically signed in:"}, {"line_number": 82, "line_content": ""}, {"line_number": 83, "line_content": "                        ${url}"}, {"line_number": 84, "line_content": ""}, {"line_number": 85, "line_content": "                        For your security, the link will expire in 24 hours time."}, {"line_number": 86, "line_content": ""}, {"line_number": 87, "line_content": "                        See you soon!"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "                        ---"}, {"line_number": 90, "line_content": ""}, {"line_number": 91, "line_content": "                        Sent to ${email}"}, {"line_number": 92, "line_content": "                        Thank you for subscribing to ${siteTitle}!"}, {"line_number": 93, "line_content": "                        `;"}, {"line_number": 94, "line_content": "                case 'updateEmail':"}, {"line_number": 95, "line_content": "                    return `"}, {"line_number": 96, "line_content": "                            Hey there,"}, {"line_number": 97, "line_content": ""}, {"line_number": 98, "line_content": "                            Please confirm your email address with this link:"}, {"line_number": 99, "line_content": ""}, {"line_number": 100, "line_content": "                            ${url}"}, {"line_number": 101, "line_content": ""}, {"line_number": 102, "line_content": "                            For your security, the link will expire in 24 hours time."}, {"line_number": 103, "line_content": ""}, {"line_number": 104, "line_content": "                            ---"}, {"line_number": 105, "line_content": ""}, {"line_number": 106, "line_content": "                            Sent to ${email}"}, {"line_number": 107, "line_content": "                            If you did not make this request, you can simply delete this message. This email address will not be used."}, {"line_number": 108, "line_content": "                            `;"}, {"line_number": 109, "line_content": "                case 'signin':"}, {"line_number": 110, "line_content": "                default:"}, {"line_number": 111, "line_content": "                    return `"}, {"line_number": 112, "line_content": "                        Hey there,"}, {"line_number": 113, "line_content": ""}, {"line_number": 114, "line_content": "                        Welcome back! Use this link to securely sign in to your ${siteTitle} account:"}, {"line_number": 115, "line_content": ""}, {"line_number": 116, "line_content": "                        ${url}"}, {"line_number": 117, "line_content": ""}, {"line_number": 118, "line_content": "                        For your security, the link will expire in 24 hours time."}, {"line_number": 119, "line_content": ""}, {"line_number": 120, "line_content": "                        See you soon!"}, {"line_number": 121, "line_content": ""}, {"line_number": 122, "line_content": "                        ---"}, {"line_number": 123, "line_content": ""}, {"line_number": 124, "line_content": "                        Sent to ${email}"}, {"line_number": 125, "line_content": "                        If you did not make this request, you can safely ignore this email."}, {"line_number": 126, "line_content": "                        `;"}, {"line_number": 127, "line_content": "                }"}, {"line_number": 128, "line_content": "            },"}, {"line_number": 129, "line_content": "            getHTML(url, type, email) {"}, {"line_number": 130, "line_content": "                const siteTitle = settingsCache.get('title');"}, {"line_number": 131, "line_content": "                const siteUrl = urlUtils.urlFor('home', true);"}, {"line_number": 132, "line_content": "                const domain = urlUtils.urlFor('home', true).match(new RegExp('^https?://([^/:?#]+)(?:[/:?#]|$)', 'i'));"}, {"line_number": 133, "line_content": "                const siteDomain = (domain && domain[1]);"}, {"line_number": 134, "line_content": "                const accentColor = settingsCache.get('accent_color');"}, {"line_number": 135, "line_content": "                switch (type) {"}, {"line_number": 136, "line_content": "                case 'subscribe':"}, {"line_number": 137, "line_content": "                    return subscribeEmail({url, email, siteTitle, accentColor, siteDomain, siteUrl});"}, {"line_number": 138, "line_content": "                case 'signup':"}, {"line_number": 139, "line_content": "                    return signupEmail({url, email, siteTitle, accentColor, siteDomain, siteUrl});"}, {"line_number": 140, "line_content": "                case 'signup-paid':"}, {"line_number": 141, "line_content": "                    return signupPaidEmail({url, email, siteTitle, accentColor, siteDomain, siteUrl});"}, {"line_number": 142, "line_content": "                case 'updateEmail':"}, {"line_number": 143, "line_content": "                    return updateEmail({url, email, siteTitle, accentColor, siteDomain, siteUrl});"}, {"line_number": 144, "line_content": "                case 'signin':"}, {"line_number": 145, "line_content": "                default:"}, {"line_number": 146, "line_content": "                    return signinEmail({url, email, siteTitle, accentColor, siteDomain, siteUrl});"}, {"line_number": 147, "line_content": "                }"}, {"line_number": 148, "line_content": "            }"}, {"line_number": 149, "line_content": "        },"}, {"line_number": 150, "line_content": "        models: {"}, {"line_number": 151, "line_content": "            EmailRecipient: models.EmailRecipient,"}, {"line_number": 152, "line_content": "            StripeCustomer: models.MemberStripeCustomer,"}, {"line_number": 153, "line_content": "            StripeCustomerSubscription: models.StripeCustomerSubscription,"}, {"line_number": 154, "line_content": "            Member: models.Member,"}, {"line_number": 155, "line_content": "            MemberCancelEvent: models.MemberCancelEvent,"}, {"line_number": 156, "line_content": "            MemberSubscribeEvent: models.MemberSubscribeEvent,"}, {"line_number": 157, "line_content": "            MemberPaidSubscriptionEvent: models.MemberPaidSubscriptionEvent,"}, {"line_number": 158, "line_content": "            MemberLoginEvent: models.MemberLoginEvent,"}, {"line_number": 159, "line_content": "            MemberEmailChangeEvent: models.MemberEmailChangeEvent,"}, {"line_number": 160, "line_content": "            MemberPaymentEvent: models.MemberPaymentEvent,"}, {"line_number": 161, "line_content": "            MemberStatusEvent: models.MemberStatusEvent,"}, {"line_number": 162, "line_content": "            MemberProductEvent: models.MemberProductEvent,"}, {"line_number": 163, "line_content": "            MemberAnalyticEvent: models.MemberAnalyticEvent,"}, {"line_number": 164, "line_content": "            OfferRedemption: models.OfferRedemption,"}, {"line_number": 165, "line_content": "            Offer: models.Offer,"}, {"line_number": 166, "line_content": "            StripeProduct: models.StripeProduct,"}, {"line_number": 167, "line_content": "            StripePrice: models.StripePrice,"}, {"line_number": 168, "line_content": "            Product: models.Product,"}, {"line_number": 169, "line_content": "            Settings: models.Settings"}, {"line_number": 170, "line_content": "        },"}, {"line_number": 171, "line_content": "        stripeAPIService: stripeService.api,"}, {"line_number": 172, "line_content": "        offersAPI: offersService.api,"}, {"line_number": 173, "line_content": "        labsService: labsService,"}, {"line_number": 174, "line_content": "        newslettersService: newslettersService"}, {"line_number": 175, "line_content": "    });"}, {"line_number": 176, "line_content": ""}, {"line_number": 177, "line_content": "    return membersApiInstance;"}, {"line_number": 178, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function serializeMemberLabels(labels) {"}, {"line_number": 2, "line_content": "    if (_.isString(labels)) {"}, {"line_number": 3, "line_content": "        if (labels === '') {"}, {"line_number": 4, "line_content": "            return [];"}, {"line_number": 5, "line_content": "        }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        return [{"}, {"line_number": 8, "line_content": "            name: labels.trim()"}, {"line_number": 9, "line_content": "        }];"}, {"line_number": 10, "line_content": "    } else if (labels) {"}, {"line_number": 11, "line_content": "        return labels.filter((label) => {"}, {"line_number": 12, "line_content": "            return !!label;"}, {"line_number": 13, "line_content": "        }).map((label) => {"}, {"line_number": 14, "line_content": "            if (_.isString(label)) {"}, {"line_number": 15, "line_content": "                return {"}, {"line_number": 16, "line_content": "                    name: label.trim()"}, {"line_number": 17, "line_content": "                };"}, {"line_number": 18, "line_content": "            }"}, {"line_number": 19, "line_content": "            return label;"}, {"line_number": 20, "line_content": "        });"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": "    return [];"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function formatNewsletterResponse(newsletters) {"}, {"line_number": 2, "line_content": "    return newsletters.map(({id, name, description, sort_order: sortOrder}) => {"}, {"line_number": 3, "line_content": "        return {id, name, description, sort_order: sortOrder};"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "function checkPostAccess(post, member) {"}, {"line_number": 2, "line_content": "    if (post.visibility === 'public') {"}, {"line_number": 3, "line_content": "        return PERMIT_ACCESS;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (!member) {"}, {"line_number": 7, "line_content": "        return BLOCK_ACCESS;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (post.visibility === 'members') {"}, {"line_number": 11, "line_content": "        return PERMIT_ACCESS;"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    let visibility = post.visibility === 'paid' ? 'status:-free' : post.visibility;"}, {"line_number": 15, "line_content": "    if (visibility === 'tiers') {"}, {"line_number": 16, "line_content": "        if (!post.tiers) {"}, {"line_number": 17, "line_content": "            return BLOCK_ACCESS;"}, {"line_number": 18, "line_content": "        }"}, {"line_number": 19, "line_content": "        visibility = post.tiers.map((product) => {"}, {"line_number": 20, "line_content": "            return `product:${product.slug}`;"}, {"line_number": 21, "line_content": "        }).join(',');"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    if (visibility && member.status && nql(visibility, {expansions: MEMBER_NQL_EXPANSIONS}).queryJSON(member)) {"}, {"line_number": 25, "line_content": "        return PERMIT_ACCESS;"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    return BLOCK_ACCESS;"}, {"line_number": 29, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 100, "lines": [{"line_number": 1, "line_content": "function createSettingsInstance(config) {"}, {"line_number": 2, "line_content": "    const {transporter, getSubject, getText, getHTML, getSigninURL} = {"}, {"line_number": 3, "line_content": "        transporter: {"}, {"line_number": 4, "line_content": "            sendMail(message) {"}, {"line_number": 5, "line_content": "                if (process.env.NODE_ENV !== 'production') {"}, {"line_number": 6, "line_content": "                    logging.warn(message.text);"}, {"line_number": 7, "line_content": "                }"}, {"line_number": 8, "line_content": "                let msg = Object.assign({"}, {"line_number": 9, "line_content": "                    from: config.getAuthEmailFromAddress(),"}, {"line_number": 10, "line_content": "                    subject: 'Update email address',"}, {"line_number": 11, "line_content": "                    forceTextContent: true"}, {"line_number": 12, "line_content": "                }, message);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "                return ghostMailer.send(msg);"}, {"line_number": 15, "line_content": "            }"}, {"line_number": 16, "line_content": "        },"}, {"line_number": 17, "line_content": "        getSubject() {"}, {"line_number": 18, "line_content": "            return `Confirm your email address`;"}, {"line_number": 19, "line_content": "        },"}, {"line_number": 20, "line_content": "        getText(url, type, email) {"}, {"line_number": 21, "line_content": "            return `"}, {"line_number": 22, "line_content": "            Hey there,"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "            Please confirm your email address with this link:"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "            ${url}"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "            For your security, the link will expire in 24 hours time."}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "            ---"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "            Sent to ${email}"}, {"line_number": 33, "line_content": "            If you did not make this request, you can simply delete this message. This email address will not be used."}, {"line_number": 34, "line_content": "            `;"}, {"line_number": 35, "line_content": "        },"}, {"line_number": 36, "line_content": "        getHTML(url, type, email) {"}, {"line_number": 37, "line_content": "            const siteTitle = settingsCache.get('title');"}, {"line_number": 38, "line_content": "            return updateEmailTemplate({url, email, siteTitle});"}, {"line_number": 39, "line_content": "        },"}, {"line_number": 40, "line_content": "        getSigninURL(token, type) {"}, {"line_number": 41, "line_content": "            const signinURL = new URL(urlUtils.urlFor('api', {type: 'admin'}, true));"}, {"line_number": 42, "line_content": "            signinURL.pathname = path.join(signinURL.pathname, '/settings/members/email/');"}, {"line_number": 43, "line_content": "            signinURL.searchParams.set('token', token);"}, {"line_number": 44, "line_content": "            signinURL.searchParams.set('action', type);"}, {"line_number": 45, "line_content": "            return signinURL.href;"}, {"line_number": 46, "line_content": "        }"}, {"line_number": 47, "line_content": "    };"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "    const magicLinkService = new MagicLink({"}, {"line_number": 50, "line_content": "        transporter,"}, {"line_number": 51, "line_content": "        tokenProvider: new SingleUseTokenProvider(models.SingleUseToken, MAGIC_LINK_TOKEN_VALIDITY),"}, {"line_number": 52, "line_content": "        getSigninURL,"}, {"line_number": 53, "line_content": "        getText,"}, {"line_number": 54, "line_content": "        getHTML,"}, {"line_number": 55, "line_content": "        getSubject"}, {"line_number": 56, "line_content": "    });"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "    const sendEmailAddressUpdateMagicLink = ({email, type = 'supportAddressUpdate'}) => {"}, {"line_number": 59, "line_content": "        const [,toDomain] = email.split('@');"}, {"line_number": 60, "line_content": "        let fromEmail = `noreply@${toDomain}`;"}, {"line_number": 61, "line_content": "        if (fromEmail === email) {"}, {"line_number": 62, "line_content": "            fromEmail = `no-reply@${toDomain}`;"}, {"line_number": 63, "line_content": "        }"}, {"line_number": 64, "line_content": "        magicLinkService.transporter = {"}, {"line_number": 65, "line_content": "            sendMail(message) {"}, {"line_number": 66, "line_content": "                if (process.env.NODE_ENV !== 'production') {"}, {"line_number": 67, "line_content": "                    logging.warn(message.text);"}, {"line_number": 68, "line_content": "                }"}, {"line_number": 69, "line_content": "                let msg = Object.assign({"}, {"line_number": 70, "line_content": "                    from: fromEmail,"}, {"line_number": 71, "line_content": "                    subject: 'Update email address',"}, {"line_number": 72, "line_content": "                    forceTextContent: true"}, {"line_number": 73, "line_content": "                }, message);"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "                return ghostMailer.send(msg);"}, {"line_number": 76, "line_content": "            }"}, {"line_number": 77, "line_content": "        };"}, {"line_number": 78, "line_content": "        return magicLinkService.sendMagicLink({email, tokenData: {email}, subject: email, type});"}, {"line_number": 79, "line_content": "    };"}, {"line_number": 80, "line_content": ""}, {"line_number": 81, "line_content": "    const getEmailFromToken = async ({token}) => {"}, {"line_number": 82, "line_content": "        const data = await magicLinkService.getDataFromToken(token);"}, {"line_number": 83, "line_content": "        return data.email;"}, {"line_number": 84, "line_content": "    };"}, {"line_number": 85, "line_content": ""}, {"line_number": 86, "line_content": "    const getAdminRedirectLink = ({type}) => {"}, {"line_number": 87, "line_content": "        const adminUrl = urlUtils.urlFor('admin', true);"}, {"line_number": 88, "line_content": "        if (type === 'supportAddressUpdate') {"}, {"line_number": 89, "line_content": "            return urlUtils.urlJoin(adminUrl, `#/settings/members/?${type}=success`);"}, {"line_number": 90, "line_content": "        } else {"}, {"line_number": 91, "line_content": "            return urlUtils.urlJoin(adminUrl, `#/site/`);"}, {"line_number": 92, "line_content": "        }"}, {"line_number": 93, "line_content": "    };"}, {"line_number": 94, "line_content": ""}, {"line_number": 95, "line_content": "    return {"}, {"line_number": 96, "line_content": "        sendEmailAddressUpdateMagicLink,"}, {"line_number": 97, "line_content": "        getEmailFromToken,"}, {"line_number": 98, "line_content": "        getAdminRedirectLink"}, {"line_number": 99, "line_content": "    };"}, {"line_number": 100, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function cancel() {"}, {"line_number": 2, "line_content": "    if (parentPort) {"}, {"line_number": 3, "line_content": "        parentPort.postMessage('Email analytics fetch-latest job cancelled before completion');"}, {"line_number": 4, "line_content": "        parentPort.postMessage('cancelled');"}, {"line_number": 5, "line_content": "    } else {"}, {"line_number": 6, "line_content": "        setTimeout(() => {"}, {"line_number": 7, "line_content": "            process.exit(0);"}, {"line_number": 8, "line_content": "        }, 1000);"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function renderEmailForSegment(email, memberSegment) {"}, {"line_number": 2, "line_content": "    const cheerio = require('cheerio');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const result = {...email};"}, {"line_number": 5, "line_content": "    const $ = cheerio.load(result.html);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    $('[data-gh-segment]').get().forEach((node) => {"}, {"line_number": 8, "line_content": "        if (node.attribs['data-gh-segment'] !== memberSegment) { //TODO: replace with NQL interpretation"}, {"line_number": 9, "line_content": "            $(node).remove();"}, {"line_number": 10, "line_content": "        } else {"}, {"line_number": 11, "line_content": "            // Getting rid of the attribute for a cleaner html output"}, {"line_number": 12, "line_content": "            $(node).removeAttr('data-gh-segment');"}, {"line_number": 13, "line_content": "        }"}, {"line_number": 14, "line_content": "    });"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    result.html = formatHtmlForEmail($.html());"}, {"line_number": 17, "line_content": "    result.plaintext = htmlToPlaintext.email(result.html);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    return result;"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "async function pendingEmailHandler(emailModel, options) {"}, {"line_number": 2, "line_content": "    // CASE: do not send email if we import a database"}, {"line_number": 3, "line_content": "    // TODO: refactor post.published events to never fire on importing"}, {"line_number": 4, "line_content": "    if (options && options.importing) {"}, {"line_number": 5, "line_content": "        return;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (emailModel.get('status') !== 'pending') {"}, {"line_number": 9, "line_content": "        return;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // make sure recurring background analytics jobs are running once we have emails"}, {"line_number": 13, "line_content": "    const emailAnalyticsJobs = require('../email-analytics/jobs');"}, {"line_number": 14, "line_content": "    emailAnalyticsJobs.scheduleRecurringJobs();"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    // @TODO move this into the jobService"}, {"line_number": 17, "line_content": "    if (!process.env.NODE_ENV.startsWith('test')) {"}, {"line_number": 18, "line_content": "        return jobsService.addJob({"}, {"line_number": 19, "line_content": "            job: sendEmailJob,"}, {"line_number": 20, "line_content": "            data: {emailModel},"}, {"line_number": 21, "line_content": "            offloaded: false"}, {"line_number": 22, "line_content": "        });"}, {"line_number": 23, "line_content": "    }"}, {"line_number": 24, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 55, "lines": [{"line_number": 1, "line_content": "async function sendEmailJob({emailModel, options}) {"}, {"line_number": 2, "line_content": "    let startEmailSend = null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    try {"}, {"line_number": 5, "line_content": "        // Check host limit for allowed member count and throw error if over limit"}, {"line_number": 6, "line_content": "        // - do this even if it's a retry so that there's no way around the limit"}, {"line_number": 7, "line_content": "        if (limitService.isLimited('members')) {"}, {"line_number": 8, "line_content": "            await limitService.errorIfIsOverLimit('members');"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        // Check host limit for disabled emails or going over emails limit"}, {"line_number": 12, "line_content": "        if (limitService.isLimited('emails')) {"}, {"line_number": 13, "line_content": "            await limitService.errorIfWouldGoOverLimit('emails');"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        // Create email batch and recipient rows unless this is a retry and they already exist"}, {"line_number": 17, "line_content": "        const existingBatchCount = await emailModel.related('emailBatches').count('id');"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "        if (existingBatchCount === 0) {"}, {"line_number": 20, "line_content": "            let newBatchCount;"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "            await models.Base.transaction(async (transacting) => {"}, {"line_number": 23, "line_content": "                newBatchCount = await createSegmentedEmailBatches({emailModel, options: {transacting}});"}, {"line_number": 24, "line_content": "            });"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "            if (newBatchCount === 0) {"}, {"line_number": 27, "line_content": "                return;"}, {"line_number": 28, "line_content": "            }"}, {"line_number": 29, "line_content": "        }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "        debug('sendEmailJob: sending email');"}, {"line_number": 32, "line_content": "        startEmailSend = Date.now();"}, {"line_number": 33, "line_content": "        await bulkEmailService.processEmail({emailId: emailModel.get('id'), options});"}, {"line_number": 34, "line_content": "        debug(`sendEmailJob: sent email (${Date.now() - startEmailSend}ms)`);"}, {"line_number": 35, "line_content": "    } catch (error) {"}, {"line_number": 36, "line_content": "        if (startEmailSend) {"}, {"line_number": 37, "line_content": "            debug(`sendEmailJob: send email failed (${Date.now() - startEmailSend}ms)`);"}, {"line_number": 38, "line_content": "        }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "        let errorMessage = error.message;"}, {"line_number": 41, "line_content": "        if (errorMessage.length > 2000) {"}, {"line_number": 42, "line_content": "            errorMessage = errorMessage.substring(0, 2000);"}, {"line_number": 43, "line_content": "        }"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "        await emailModel.save({"}, {"line_number": 46, "line_content": "            status: 'failed',"}, {"line_number": 47, "line_content": "            error: errorMessage"}, {"line_number": 48, "line_content": "        }, {patch: true});"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "        throw new errors.InternalServerError({"}, {"line_number": 51, "line_content": "            err: error,"}, {"line_number": 52, "line_content": "            context: tpl(messages.sendEmailRequestFailed)"}, {"line_number": 53, "line_content": "        });"}, {"line_number": 54, "line_content": "    }"}, {"line_number": 55, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "async function getEmailMemberRows({emailModel, memberSegment, options}) {"}, {"line_number": 2, "line_content": "    const knexOptions = _.pick(options, ['transacting', 'forUpdate']);"}, {"line_number": 3, "line_content": "    const sharedOptions = _.pick(options, ['transacting']);"}, {"line_number": 4, "line_content": "    const filterOptions = Object.assign({}, knexOptions);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const newsletter = await emailModel.getLazyRelation('newsletter', {require: true, ...sharedOptions});"}, {"line_number": 7, "line_content": "    const recipientFilter = transformEmailRecipientFilter(newsletter, emailModel.get('recipient_filter'), 'recipient_filter');"}, {"line_number": 8, "line_content": "    filterOptions.filter = recipientFilter;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (memberSegment) {"}, {"line_number": 11, "line_content": "        filterOptions.filter = `${filterOptions.filter}+${memberSegment}`;"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    const startRetrieve = Date.now();"}, {"line_number": 15, "line_content": "    debug('getEmailMemberRows: retrieving members list');"}, {"line_number": 16, "line_content": "    // select('members.*') is necessary here to avoid duplicate `email` columns in the result set"}, {"line_number": 17, "line_content": "    // without it we do `select *` which pulls in the Stripe customer email too which overrides the member email"}, {"line_number": 18, "line_content": "    const memberRows = await models.Member.getFilteredCollectionQuery(filterOptions).select('members.*').distinct();"}, {"line_number": 19, "line_content": "    debug(`getEmailMemberRows: retrieved members list - ${memberRows.length} members (${Date.now() - startRetrieve}ms)`);"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    return memberRows;"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "function partitionMembersBySegment(memberRows, segments) {"}, {"line_number": 2, "line_content": "    const partitions = {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    for (const memberSegment of segments) {"}, {"line_number": 5, "line_content": "        let segmentedMemberRows;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        // NOTE: because we only support two types of segments at the moment the logic was kept dead simple"}, {"line_number": 8, "line_content": "        //       in the future this segmentation should probably be substituted with NQL:"}, {"line_number": 9, "line_content": "        //       memberRows.filter(member => nql(memberSegment).queryJSON(member));"}, {"line_number": 10, "line_content": "        if (memberSegment === 'status:free') {"}, {"line_number": 11, "line_content": "            segmentedMemberRows = memberRows.filter(member => member.status === 'free');"}, {"line_number": 12, "line_content": "            memberRows = memberRows.filter(member => member.status !== 'free');"}, {"line_number": 13, "line_content": "        } else if (memberSegment === 'status:-free') {"}, {"line_number": 14, "line_content": "            segmentedMemberRows = memberRows.filter(member => member.status !== 'free');"}, {"line_number": 15, "line_content": "            memberRows = memberRows.filter(member => member.status === 'free');"}, {"line_number": 16, "line_content": "        } else {"}, {"line_number": 17, "line_content": "            throw new errors.ValidationError({"}, {"line_number": 18, "line_content": "                message: tpl(messages.invalidSegment)"}, {"line_number": 19, "line_content": "            });"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        partitions[memberSegment] = segmentedMemberRows;"}, {"line_number": 23, "line_content": "    }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    if (memberRows.length) {"}, {"line_number": 26, "line_content": "        partitions.unsegmented = memberRows;"}, {"line_number": 27, "line_content": "    }"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    return partitions;"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "async function createSegmentedEmailBatches({emailModel, options}) {"}, {"line_number": 2, "line_content": "    let memberRows = await getEmailMemberRows({emailModel, options});"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (!memberRows.length) {"}, {"line_number": 5, "line_content": "        return [];"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const segments = getSegmentsFromHtml(emailModel.get('html'));"}, {"line_number": 9, "line_content": "    const batchIds = [];"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    if (segments.length) {"}, {"line_number": 12, "line_content": "        const partitionedMembers = partitionMembersBySegment(memberRows, segments);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "        for (const partition in partitionedMembers) {"}, {"line_number": 15, "line_content": "            const emailBatchIds = await createEmailBatches({"}, {"line_number": 16, "line_content": "                emailModel,"}, {"line_number": 17, "line_content": "                memberRows: partitionedMembers[partition],"}, {"line_number": 18, "line_content": "                memberSegment: partition === 'unsegmented' ? null : partition,"}, {"line_number": 19, "line_content": "                options"}, {"line_number": 20, "line_content": "            });"}, {"line_number": 21, "line_content": "            batchIds.push(emailBatchIds);"}, {"line_number": 22, "line_content": "        }"}, {"line_number": 23, "line_content": "    } else {"}, {"line_number": 24, "line_content": "        const emailBatchIds = await createEmailBatches({emailModel, memberRows, options});"}, {"line_number": 25, "line_content": "        batchIds.push(emailBatchIds);"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    return batchIds;"}, {"line_number": 29, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 46, "lines": [{"line_number": 1, "line_content": "async function createEmailBatches({emailModel, memberRows, memberSegment, options}) {"}, {"line_number": 2, "line_content": "    const storeRecipientBatch = async function (recipients) {"}, {"line_number": 3, "line_content": "        const knexOptions = _.pick(options, ['transacting', 'forUpdate']);"}, {"line_number": 4, "line_content": "        const batchModel = await models.EmailBatch.add({"}, {"line_number": 5, "line_content": "            email_id: emailModel.id,"}, {"line_number": 6, "line_content": "            member_segment: memberSegment"}, {"line_number": 7, "line_content": "        }, knexOptions);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        const recipientData = [];"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        recipients.forEach((memberRow) => {"}, {"line_number": 12, "line_content": "            if (!memberRow.id || !memberRow.uuid || !memberRow.email) {"}, {"line_number": 13, "line_content": "                logging.warn(`Member row not included as email recipient due to missing data - id: ${memberRow.id}, uuid: ${memberRow.uuid}, email: ${memberRow.email}`);"}, {"line_number": 14, "line_content": "                return;"}, {"line_number": 15, "line_content": "            }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "            recipientData.push({"}, {"line_number": 18, "line_content": "                id: ObjectID().toHexString(),"}, {"line_number": 19, "line_content": "                email_id: emailModel.id,"}, {"line_number": 20, "line_content": "                member_id: memberRow.id,"}, {"line_number": 21, "line_content": "                batch_id: batchModel.id,"}, {"line_number": 22, "line_content": "                member_uuid: memberRow.uuid,"}, {"line_number": 23, "line_content": "                member_email: memberRow.email,"}, {"line_number": 24, "line_content": "                member_name: memberRow.name"}, {"line_number": 25, "line_content": "            });"}, {"line_number": 26, "line_content": "        });"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "        const insertQuery = db.knex('email_recipients').insert(recipientData);"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "        if (knexOptions.transacting) {"}, {"line_number": 31, "line_content": "            insertQuery.transacting(knexOptions.transacting);"}, {"line_number": 32, "line_content": "        }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "        await insertQuery;"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "        return batchModel.id;"}, {"line_number": 37, "line_content": "    };"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    debug('createEmailBatches: storing recipient list');"}, {"line_number": 40, "line_content": "    const startOfRecipientStorage = Date.now();"}, {"line_number": 41, "line_content": "    const batches = _.chunk(memberRows, bulkEmailService.BATCH_SIZE);"}, {"line_number": 42, "line_content": "    const batchIds = await Promise.mapSeries(batches, storeRecipientBatch);"}, {"line_number": 43, "line_content": "    debug(`createEmailBatches: stored recipient list (${Date.now() - startOfRecipientStorage}ms)`);"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    return batchIds;"}, {"line_number": 46, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function listen() {"}, {"line_number": 2, "line_content": "    events.on('email.added', pendingEmailHandler);"}, {"line_number": 3, "line_content": "    events.on('email.edited', statusChangedHandler);"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isSecretSetting(setting) {"}, {"line_number": 2, "line_content": "    return /secret/.test(setting.key);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function hideValueIfSecret(setting) {"}, {"line_number": 2, "line_content": "    if (setting.value && isSecretSetting(setting)) {"}, {"line_number": 3, "line_content": "        return {...setting, value: obfuscatedSetting};"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    return setting;"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "async function accept(invitation) {"}, {"line_number": 2, "line_content": "    const data = invitation.invitation[0];"}, {"line_number": 3, "line_content": "    const inviteToken = security.url.decodeBase64(data.token);"}, {"line_number": 4, "line_content": "    const options = {context: {internal: true}};"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let invite = await models.Invite.findOne({token: inviteToken, status: 'sent'}, options);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!invite) {"}, {"line_number": 9, "line_content": "        throw new errors.NotFoundError({message: tpl(messages.inviteNotFound)});"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (invite.get('expires') < Date.now()) {"}, {"line_number": 13, "line_content": "        throw new errors.NotFoundError({message: tpl(messages.inviteExpired)});"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    let user = await models.User.findOne({email: data.email});"}, {"line_number": 17, "line_content": "    if (user) {"}, {"line_number": 18, "line_content": "        throw new errors.ValidationError({"}, {"line_number": 19, "line_content": "            message: tpl(messages.inviteEmailAlreadyExist.message),"}, {"line_number": 20, "line_content": "            context: tpl(messages.inviteEmailAlreadyExist.context),"}, {"line_number": 21, "line_content": "            help: tpl(messages.inviteEmailAlreadyExist.help)"}, {"line_number": 22, "line_content": "        });"}, {"line_number": 23, "line_content": "    }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    await models.User.add({"}, {"line_number": 26, "line_content": "        email: data.email,"}, {"line_number": 27, "line_content": "        name: data.name,"}, {"line_number": 28, "line_content": "        password: data.password,"}, {"line_number": 29, "line_content": "        roles: [invite.toJSON().role_id]"}, {"line_number": 30, "line_content": "    }, options);"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    return invite.destroy(options);"}, {"line_number": 33, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function getDomain() {"}, {"line_number": 2, "line_content": "    const domain = urlUtils.urlFor('home', true).match(new RegExp('^https?://([^/:?#]+)(?:[/:?#]|$)', 'i'));"}, {"line_number": 3, "line_content": "    return domain && domain[1];"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function getFromAddress(requestedFromAddress) {"}, {"line_number": 2, "line_content": "    const configAddress = config.get('mail') && config.get('mail').from;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const address = requestedFromAddress || configAddress;"}, {"line_number": 5, "line_content": "    // If we don't have a from address at all"}, {"line_number": 6, "line_content": "    if (!address) {"}, {"line_number": 7, "line_content": "        // Default to noreply@[blog.url]"}, {"line_number": 8, "line_content": "        return getFromAddress(`noreply@${getDomain()}`);"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    // If we do have a from address, and it's just an email"}, {"line_number": 12, "line_content": "    if (validator.isEmail(address, {require_tld: false})) {"}, {"line_number": 13, "line_content": "        const defaultSiteTitle = settingsCache.get('title') ? settingsCache.get('title').replace(/\"/g, '\\\\\"') : tpl(messages.title, {domain: getDomain()});"}, {"line_number": 14, "line_content": "        return `\"${defaultSiteTitle}\" <${address}>`;"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return address;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function createMessage(message) {"}, {"line_number": 2, "line_content": "    const encoding = 'base64';"}, {"line_number": 3, "line_content": "    const generateTextFromHTML = !message.forceTextContent;"}, {"line_number": 4, "line_content": "    return Object.assign({}, message, {"}, {"line_number": 5, "line_content": "        from: getFromAddress(message.from),"}, {"line_number": 6, "line_content": "        generateTextFromHTML,"}, {"line_number": 7, "line_content": "        encoding"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createMailError({message, err, ignoreDefaultMessage} = {message: ''}) {"}, {"line_number": 2, "line_content": "    const helpMessage = tpl(messages.checkEmailConfigInstructions, {url: 'https://ghost.org/docs/config/#mail'});"}, {"line_number": 3, "line_content": "    const defaultErrorMessage = tpl(messages.failedSendingEmailError);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const fullErrorMessage = defaultErrorMessage + message;"}, {"line_number": 6, "line_content": "    let statusCode = (err && err.name === 'RecipientError') ? 400 : 500;"}, {"line_number": 7, "line_content": "    return new errors.EmailError({"}, {"line_number": 8, "line_content": "        message: ignoreDefaultMessage ? message : fullErrorMessage,"}, {"line_number": 9, "line_content": "        err: err,"}, {"line_number": 10, "line_content": "        statusCode,"}, {"line_number": 11, "line_content": "        help: helpMessage"}, {"line_number": 12, "line_content": "    });"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getSlackSettings() {"}, {"line_number": 2, "line_content": "    const username = settingsCache.get('slack_username');"}, {"line_number": 3, "line_content": "    const url = settingsCache.get('slack_url');"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    return {"}, {"line_number": 6, "line_content": "        username,"}, {"line_number": 7, "line_content": "        url"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function hasPostProperties(data) {"}, {"line_number": 2, "line_content": "    return Object.prototype.hasOwnProperty.call(data, 'html') && Object.prototype.hasOwnProperty.call(data, 'title') && Object.prototype.hasOwnProperty.call(data, 'slug');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 107, "lines": [{"line_number": 1, "line_content": "function ping(post) {"}, {"line_number": 2, "line_content": "    let message;"}, {"line_number": 3, "line_content": "    let title;"}, {"line_number": 4, "line_content": "    let author;"}, {"line_number": 5, "line_content": "    let description;"}, {"line_number": 6, "line_content": "    let slackData = {};"}, {"line_number": 7, "line_content": "    let slackSettings = getSlackSettings();"}, {"line_number": 8, "line_content": "    let blogTitle = settingsCache.get('title');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    // If this is a post, we want to send the link of the post"}, {"line_number": 11, "line_content": "    if (hasPostProperties(post)) {"}, {"line_number": 12, "line_content": "        message = urlService.getUrlByResourceId(post.id, {absolute: true});"}, {"line_number": 13, "line_content": "        title = post.title ? post.title : null;"}, {"line_number": 14, "line_content": "        author = post.authors ? post.authors[0] : null;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        if (post.custom_excerpt) {"}, {"line_number": 17, "line_content": "            description = post.custom_excerpt;"}, {"line_number": 18, "line_content": "        } else if (post.html) {"}, {"line_number": 19, "line_content": "            description = `${post.html.replace(/<[^>]+>/g, '').split('.').slice(0, 3).join('.')}.`;"}, {"line_number": 20, "line_content": "        } else {"}, {"line_number": 21, "line_content": "            description = null;"}, {"line_number": 22, "line_content": "        }"}, {"line_number": 23, "line_content": "    } else {"}, {"line_number": 24, "line_content": "        message = post.message;"}, {"line_number": 25, "line_content": "    }"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "    // Quit here if slack integration is not activated"}, {"line_number": 28, "line_content": "    if (slackSettings && slackSettings.url && slackSettings.url !== '') {"}, {"line_number": 29, "line_content": "        slackSettings.username = slackSettings.username ? slackSettings.username : 'Ghost';"}, {"line_number": 30, "line_content": "        // Only ping when not a page"}, {"line_number": 31, "line_content": "        if (post.type === 'page') {"}, {"line_number": 32, "line_content": "            return;"}, {"line_number": 33, "line_content": "        }"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "        // Don't ping for the default posts."}, {"line_number": 36, "line_content": "        // This also handles the case where during ghost's first run"}, {"line_number": 37, "line_content": "        // models.init() inserts this post but permissions.init() hasn't"}, {"line_number": 38, "line_content": "        // (can't) run yet."}, {"line_number": 39, "line_content": "        if (defaultPostSlugs.indexOf(post.slug) > -1) {"}, {"line_number": 40, "line_content": "            return;"}, {"line_number": 41, "line_content": "        }"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "        if (hasPostProperties(post)) {"}, {"line_number": 44, "line_content": "            slackData = {"}, {"line_number": 45, "line_content": "                // We are handling the case of test notification here by checking"}, {"line_number": 46, "line_content": "                // if it is a post or a test message to check webhook working."}, {"line_number": 47, "line_content": "                text: `Notification from *${blogTitle}* :ghost:`,"}, {"line_number": 48, "line_content": "                unfurl_links: true,"}, {"line_number": 49, "line_content": "                icon_url: blogIcon.getIconUrl(true),"}, {"line_number": 50, "line_content": "                username: slackSettings.username,"}, {"line_number": 51, "line_content": "                // We don't want to send attachment if it is a test notification."}, {"line_number": 52, "line_content": "                attachments: ["}, {"line_number": 53, "line_content": "                    {"}, {"line_number": 54, "line_content": "                        fallback: 'Sorry, content cannot be shown.',"}, {"line_number": 55, "line_content": "                        title: title,"}, {"line_number": 56, "line_content": "                        title_link: message,"}, {"line_number": 57, "line_content": "                        author_name: blogTitle,"}, {"line_number": 58, "line_content": "                        image_url: post ? urlUtils.urlFor('image', {image: post.feature_image}, true) : null,"}, {"line_number": 59, "line_content": "                        color: '#008952',"}, {"line_number": 60, "line_content": "                        fields: ["}, {"line_number": 61, "line_content": "                            {"}, {"line_number": 62, "line_content": "                                title: 'Description',"}, {"line_number": 63, "line_content": "                                value: description,"}, {"line_number": 64, "line_content": "                                short: false"}, {"line_number": 65, "line_content": "                            }"}, {"line_number": 66, "line_content": "                        ]"}, {"line_number": 67, "line_content": "                    },"}, {"line_number": 68, "line_content": "                    {"}, {"line_number": 69, "line_content": "                        fallback: 'Sorry, content cannot be shown.',"}, {"line_number": 70, "line_content": "                        color: '#008952',"}, {"line_number": 71, "line_content": "                        thumb_url: author ? urlUtils.urlFor('image', {image: author.profile_image}, true) : null,"}, {"line_number": 72, "line_content": "                        fields: ["}, {"line_number": 73, "line_content": "                            {"}, {"line_number": 74, "line_content": "                                title: 'Author',"}, {"line_number": 75, "line_content": "                                value: author ? `<${urlService.getUrlByResourceId(author.id, {absolute: true})} | ${author.name}>` : null,"}, {"line_number": 76, "line_content": "                                short: true"}, {"line_number": 77, "line_content": "                            }"}, {"line_number": 78, "line_content": "                        ],"}, {"line_number": 79, "line_content": "                        footer: blogTitle,"}, {"line_number": 80, "line_content": "                        footer_icon: blogIcon.getIconUrl(true),"}, {"line_number": 81, "line_content": "                        ts: moment().unix()"}, {"line_number": 82, "line_content": "                    }"}, {"line_number": 83, "line_content": "                ]"}, {"line_number": 84, "line_content": "            };"}, {"line_number": 85, "line_content": "        } else {"}, {"line_number": 86, "line_content": "            slackData = {"}, {"line_number": 87, "line_content": "                text: message,"}, {"line_number": 88, "line_content": "                unfurl_links: true,"}, {"line_number": 89, "line_content": "                icon_url: blogIcon.getIconUrl(true),"}, {"line_number": 90, "line_content": "                username: slackSettings.username"}, {"line_number": 91, "line_content": "            };"}, {"line_number": 92, "line_content": "        }"}, {"line_number": 93, "line_content": ""}, {"line_number": 94, "line_content": "        return request(slackSettings.url, {"}, {"line_number": 95, "line_content": "            body: JSON.stringify(slackData),"}, {"line_number": 96, "line_content": "            headers: {"}, {"line_number": 97, "line_content": "                'Content-type': 'application/json'"}, {"line_number": 98, "line_content": "            }"}, {"line_number": 99, "line_content": "        }).catch(function (err) {"}, {"line_number": 100, "line_content": "            logging.error(new errors.InternalServerError({"}, {"line_number": 101, "line_content": "                err: err,"}, {"line_number": 102, "line_content": "                context: tpl(messages.requestFailedError, {service: 'slack'}),"}, {"line_number": 103, "line_content": "                help: tpl(messages.requestFailedHelp, {url: 'https://ghost.org/docs/'})"}, {"line_number": 104, "line_content": "            }));"}, {"line_number": 105, "line_content": "        });"}, {"line_number": 106, "line_content": "    }"}, {"line_number": 107, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function listener(model, options) {"}, {"line_number": 2, "line_content": "    // CASE: do not ping slack if we import a database"}, {"line_number": 3, "line_content": "    // TODO: refactor post.published events to never fire on importing"}, {"line_number": 4, "line_content": "    if (options && options.importing) {"}, {"line_number": 5, "line_content": "        return;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    ping(model.toJSON());"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function testPing() {"}, {"line_number": 2, "line_content": "    ping({"}, {"line_number": 3, "line_content": "        message: 'Heya! This is a test notification from your Ghost blog :smile:. Seems to work fine!'"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function listen() {"}, {"line_number": 2, "line_content": "    events.on('post.published', listener);"}, {"line_number": 3, "line_content": "    events.on('slack.test', testPing);"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "function getStripeUrlConfig() {"}, {"line_number": 2, "line_content": "            const siteUrl = urlUtils.getSiteUrl();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            const checkoutSuccessUrl = new URL(siteUrl);"}, {"line_number": 5, "line_content": "            checkoutSuccessUrl.searchParams.set('stripe', 'success');"}, {"line_number": 6, "line_content": "            const checkoutCancelUrl = new URL(siteUrl);"}, {"line_number": 7, "line_content": "            checkoutCancelUrl.searchParams.set('stripe', 'cancel');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "            const billingSuccessUrl = new URL(siteUrl);"}, {"line_number": 10, "line_content": "            billingSuccessUrl.searchParams.set('stripe', 'billing-update-success');"}, {"line_number": 11, "line_content": "            const billingCancelUrl = new URL(siteUrl);"}, {"line_number": 12, "line_content": "            billingCancelUrl.searchParams.set('stripe', 'billing-update-cancel');"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "            return {"}, {"line_number": 15, "line_content": "                checkoutSessionSuccessUrl: checkoutSuccessUrl.href,"}, {"line_number": 16, "line_content": "                checkoutSessionCancelUrl: checkoutCancelUrl.href,"}, {"line_number": 17, "line_content": "                checkoutSetupSessionSuccessUrl: billingSuccessUrl.href,"}, {"line_number": 18, "line_content": "                checkoutSetupSessionCancelUrl: billingCancelUrl.href"}, {"line_number": 19, "line_content": "            };"}, {"line_number": 20, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getStripeKeys(type) {"}, {"line_number": 2, "line_content": "            const secretKey = settings.get(`stripe_${type === 'connect' ? 'connect_' : ''}secret_key`);"}, {"line_number": 3, "line_content": "            const publicKey = settings.get(`stripe_${type === 'connect' ? 'connect_' : ''}publishable_key`);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "            if (!secretKey || !publicKey) {"}, {"line_number": 6, "line_content": "                return null;"}, {"line_number": 7, "line_content": "            }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "            return {"}, {"line_number": 10, "line_content": "                secretKey,"}, {"line_number": 11, "line_content": "                publicKey"}, {"line_number": 12, "line_content": "            };"}, {"line_number": 13, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getActiveStripeKeys() {"}, {"line_number": 2, "line_content": "            const stripeDirect = config.get('stripeDirect');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            if (stripeDirect) {"}, {"line_number": 5, "line_content": "                return getStripeKeys('direct');"}, {"line_number": 6, "line_content": "            }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "            const connectKeys = getStripeKeys('connect');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "            if (!connectKeys) {"}, {"line_number": 11, "line_content": "                return getStripeKeys('direct');"}, {"line_number": 12, "line_content": "            }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "            return connectKeys;"}, {"line_number": 15, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "async function configureApi() {"}, {"line_number": 2, "line_content": "    const cfg = getConfig(settings, config, urlUtils);"}, {"line_number": 3, "line_content": "    if (cfg) {"}, {"line_number": 4, "line_content": "        cfg.testEnv = process.env.NODE_ENV.startsWith('test');"}, {"line_number": 5, "line_content": "        await module.exports.configure(cfg);"}, {"line_number": 6, "line_content": "        return true;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return false;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function createMailgun(config) {"}, {"line_number": 2, "line_content": "    const mailgun = require('mailgun-js');"}, {"line_number": 3, "line_content": "    const baseUrl = new URL(config.baseUrl);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    return mailgun({"}, {"line_number": 6, "line_content": "        apiKey: config.apiKey,"}, {"line_number": 7, "line_content": "        domain: config.domain,"}, {"line_number": 8, "line_content": "        protocol: baseUrl.protocol,"}, {"line_number": 9, "line_content": "        host: baseUrl.hostname,"}, {"line_number": 10, "line_content": "        port: baseUrl.port,"}, {"line_number": 11, "line_content": "        endpoint: baseUrl.pathname,"}, {"line_number": 12, "line_content": "        retry: 5"}, {"line_number": 13, "line_content": "    });"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function getInstance() {"}, {"line_number": 2, "line_content": "    const bulkEmailConfig = configService.get('bulkEmail');"}, {"line_number": 3, "line_content": "    const bulkEmailSetting = {"}, {"line_number": 4, "line_content": "        apiKey: settingsCache.get('mailgun_api_key'),"}, {"line_number": 5, "line_content": "        domain: settingsCache.get('mailgun_domain'),"}, {"line_number": 6, "line_content": "        baseUrl: settingsCache.get('mailgun_base_url')"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": "    const hasMailgunConfig = !!(bulkEmailConfig && bulkEmailConfig.mailgun);"}, {"line_number": 9, "line_content": "    const hasMailgunSetting = !!(bulkEmailSetting && bulkEmailSetting.apiKey && bulkEmailSetting.baseUrl && bulkEmailSetting.domain);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    if (!hasMailgunConfig && !hasMailgunSetting) {"}, {"line_number": 12, "line_content": "        logging.warn(`Bulk email service is not configured`);"}, {"line_number": 13, "line_content": "    } else {"}, {"line_number": 14, "line_content": "        let mailgunConfig = hasMailgunConfig ? bulkEmailConfig.mailgun : bulkEmailSetting;"}, {"line_number": 15, "line_content": "        return createMailgun(mailgunConfig);"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": "    return null;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 66, "lines": [{"line_number": 1, "line_content": "function send(message, recipientData, replacements) {"}, {"line_number": 2, "line_content": "    if (recipientData.length > BATCH_SIZE) {"}, {"line_number": 3, "line_content": "        // err - too many recipients"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let messageData = {};"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    try {"}, {"line_number": 9, "line_content": "        const bulkEmailConfig = configService.get('bulkEmail');"}, {"line_number": 10, "line_content": "        const mailgunInstance = getInstance();"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        const messageContent = _.pick(message, 'subject', 'html', 'plaintext');"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "        // update content to use Mailgun variable syntax for replacements"}, {"line_number": 15, "line_content": "        replacements.forEach((replacement) => {"}, {"line_number": 16, "line_content": "            messageContent[replacement.format] = messageContent[replacement.format].replace("}, {"line_number": 17, "line_content": "                replacement.match,"}, {"line_number": 18, "line_content": "                `%recipient.${replacement.id}%`"}, {"line_number": 19, "line_content": "            );"}, {"line_number": 20, "line_content": "        });"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        messageData = {"}, {"line_number": 23, "line_content": "            to: Object.keys(recipientData),"}, {"line_number": 24, "line_content": "            from: message.from,"}, {"line_number": 25, "line_content": "            'h:Reply-To': message.replyTo || message.reply_to,"}, {"line_number": 26, "line_content": "            subject: messageContent.subject,"}, {"line_number": 27, "line_content": "            html: messageContent.html,"}, {"line_number": 28, "line_content": "            text: messageContent.plaintext,"}, {"line_number": 29, "line_content": "            'recipient-variables': recipientData"}, {"line_number": 30, "line_content": "        };"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "        // add a reference to the original email record for easier mapping of mailgun event -> email"}, {"line_number": 33, "line_content": "        if (message.id) {"}, {"line_number": 34, "line_content": "            messageData['v:email-id'] = message.id;"}, {"line_number": 35, "line_content": "        }"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "        const tags = ['bulk-email'];"}, {"line_number": 38, "line_content": "        if (bulkEmailConfig && bulkEmailConfig.mailgun && bulkEmailConfig.mailgun.tag) {"}, {"line_number": 39, "line_content": "            tags.push(bulkEmailConfig.mailgun.tag);"}, {"line_number": 40, "line_content": "        }"}, {"line_number": 41, "line_content": "        messageData['o:tag'] = tags;"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "        if (bulkEmailConfig && bulkEmailConfig.mailgun && bulkEmailConfig.mailgun.testmode) {"}, {"line_number": 44, "line_content": "            messageData['o:testmode'] = true;"}, {"line_number": 45, "line_content": "        }"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "        // enable tracking if turned on for this email"}, {"line_number": 48, "line_content": "        if (message.track_opens) {"}, {"line_number": 49, "line_content": "            messageData['o:tracking-opens'] = true;"}, {"line_number": 50, "line_content": "        }"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "        return new Promise((resolve, reject) => {"}, {"line_number": 53, "line_content": "            mailgunInstance.messages().send(messageData, (error, body) => {"}, {"line_number": 54, "line_content": "                if (error || !body) {"}, {"line_number": 55, "line_content": "                    return reject(error);"}, {"line_number": 56, "line_content": "                }"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "                return resolve({"}, {"line_number": 59, "line_content": "                    id: body.id"}, {"line_number": 60, "line_content": "                });"}, {"line_number": 61, "line_content": "            });"}, {"line_number": 62, "line_content": "        });"}, {"line_number": 63, "line_content": "    } catch (error) {"}, {"line_number": 64, "line_content": "        return Promise.reject({error, messageData});"}, {"line_number": 65, "line_content": "    }"}, {"line_number": 66, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 78, "lines": [{"line_number": 1, "line_content": "function ping(post) {"}, {"line_number": 2, "line_content": "    let pingXML;"}, {"line_number": 3, "line_content": "    const title = post.title;"}, {"line_number": 4, "line_content": "    const url = urlService.getUrlByResourceId(post.id, {absolute: true});"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (post.type === 'page' || config.isPrivacyDisabled('useRpcPing') || settingsCache.get('is_private')) {"}, {"line_number": 7, "line_content": "        return;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    // Don't ping for the default posts."}, {"line_number": 11, "line_content": "    // This also handles the case where during ghost's first run"}, {"line_number": 12, "line_content": "    // models.init() inserts this post but permissions.init() hasn't"}, {"line_number": 13, "line_content": "    // (can't) run yet."}, {"line_number": 14, "line_content": "    if (defaultPostSlugs.indexOf(post.slug) > -1) {"}, {"line_number": 15, "line_content": "        return;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    // Build XML object."}, {"line_number": 19, "line_content": "    pingXML = xml({"}, {"line_number": 20, "line_content": "        methodCall: [{"}, {"line_number": 21, "line_content": "            methodName: 'weblogUpdates.ping'"}, {"line_number": 22, "line_content": "        }, {"}, {"line_number": 23, "line_content": "            params: [{"}, {"line_number": 24, "line_content": "                param: [{"}, {"line_number": 25, "line_content": "                    value: [{"}, {"line_number": 26, "line_content": "                        string: title"}, {"line_number": 27, "line_content": "                    }]"}, {"line_number": 28, "line_content": "                }]"}, {"line_number": 29, "line_content": "            }, {"}, {"line_number": 30, "line_content": "                param: [{"}, {"line_number": 31, "line_content": "                    value: [{"}, {"line_number": 32, "line_content": "                        string: url"}, {"line_number": 33, "line_content": "                    }]"}, {"line_number": 34, "line_content": "                }]"}, {"line_number": 35, "line_content": "            }]"}, {"line_number": 36, "line_content": "        }]"}, {"line_number": 37, "line_content": "    }, {declaration: true});"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    // Ping each of the defined services."}, {"line_number": 40, "line_content": "    _.each(pingList, function (pingHost) {"}, {"line_number": 41, "line_content": "        const options = {"}, {"line_number": 42, "line_content": "            body: pingXML,"}, {"line_number": 43, "line_content": "            timeout: 2 * 1000"}, {"line_number": 44, "line_content": "        };"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "        const goodResponse = /<member>[\\s]*<name>flerror<\\/name>[\\s]*<value>[\\s]*<boolean>0<\\/boolean><\\/value><\\/member>/;"}, {"line_number": 47, "line_content": "        const errorMessage = /<name>(?:faultString|message)<\\/name>[\\s]*<value>[\\s]*<string>([^<]+)/;"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "        request(pingHost.url, options)"}, {"line_number": 50, "line_content": "            .then(function (res) {"}, {"line_number": 51, "line_content": "                if (!goodResponse.test(res.body)) {"}, {"line_number": 52, "line_content": "                    const matches = res.body.match(errorMessage);"}, {"line_number": 53, "line_content": "                    const message = matches ? matches[1] : res.body;"}, {"line_number": 54, "line_content": "                    throw new errors.InternalServerError({message});"}, {"line_number": 55, "line_content": "                }"}, {"line_number": 56, "line_content": "            })"}, {"line_number": 57, "line_content": "            .catch(function (err) {"}, {"line_number": 58, "line_content": "                let error;"}, {"line_number": 59, "line_content": "                if (err.statusCode === 429) {"}, {"line_number": 60, "line_content": "                    error = new errors.TooManyRequestsError({"}, {"line_number": 61, "line_content": "                        err,"}, {"line_number": 62, "line_content": "                        message: err.message,"}, {"line_number": 63, "line_content": "                        context: tpl(messages.requestFailedError, {service: 'xmlrpc'}),"}, {"line_number": 64, "line_content": "                        help: tpl(messages.requestFailedHelp, {url: 'https://ghost.org/docs/'})"}, {"line_number": 65, "line_content": "                    });"}, {"line_number": 66, "line_content": "                } else {"}, {"line_number": 67, "line_content": "                    error = new errors.InternalServerError({"}, {"line_number": 68, "line_content": "                        err: err,"}, {"line_number": 69, "line_content": "                        message: err.message,"}, {"line_number": 70, "line_content": "                        context: tpl(messages.requestFailedError, {service: 'xmlrpc'}),"}, {"line_number": 71, "line_content": "                        help: tpl(messages.requestFailedHelp, {url: 'https://ghost.org/docs/'})"}, {"line_number": 72, "line_content": "                    });"}, {"line_number": 73, "line_content": "                }"}, {"line_number": 74, "line_content": "                logging.error(error);"}, {"line_number": 75, "line_content": "                sentry.captureException(error);"}, {"line_number": 76, "line_content": "            });"}, {"line_number": 77, "line_content": "    });"}, {"line_number": 78, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function listener(model, options) {"}, {"line_number": 2, "line_content": "    // CASE: do not rpc ping if we import a database"}, {"line_number": 3, "line_content": "    // TODO: refactor post.published events to never fire on importing"}, {"line_number": 4, "line_content": "    if (options && options.importing) {"}, {"line_number": 5, "line_content": "        return;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    ping(model.toJSON());"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function listen() {"}, {"line_number": 2, "line_content": "    events.on('post.published', listener);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function isBlogRunning() {"}, {"line_number": 2, "line_content": "            debug('waiting for blog running');"}, {"line_number": 3, "line_content": "            return Promise.delay(1000)"}, {"line_number": 4, "line_content": "                .then(() => {"}, {"line_number": 5, "line_content": "                    debug('waited for blog running');"}, {"line_number": 6, "line_content": "                    if (!urlService.hasFinished()) {"}, {"line_number": 7, "line_content": "                        if (tries > 5) {"}, {"line_number": 8, "line_content": "                            throw new errors.InternalServerError({"}, {"line_number": 9, "line_content": "                                message: tpl(messages.loadError)"}, {"line_number": 10, "line_content": "                            });"}, {"line_number": 11, "line_content": "                        }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "                        tries = tries + 1;"}, {"line_number": 14, "line_content": "                        return isBlogRunning();"}, {"line_number": 15, "line_content": "                    }"}, {"line_number": 16, "line_content": "                });"}, {"line_number": 17, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "async function getUnsplashSize(url) {"}, {"line_number": 2, "line_content": "            const parsedUrl = new URL(url);"}, {"line_number": 3, "line_content": "            parsedUrl.searchParams.delete('w');"}, {"line_number": 4, "line_content": "            parsedUrl.searchParams.delete('fit');"}, {"line_number": 5, "line_content": "            parsedUrl.searchParams.delete('crop');"}, {"line_number": 6, "line_content": "            parsedUrl.searchParams.delete('dpr');"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "            return await imageSize.getImageSizeFromUrl(parsedUrl.href);"}, {"line_number": 9, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function isPrivateIp(addr) {"}, {"line_number": 2, "line_content": "    return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||"}, {"line_number": 3, "line_content": "      /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||"}, {"line_number": 4, "line_content": "      /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||"}, {"line_number": 5, "line_content": "      /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||"}, {"line_number": 6, "line_content": "      /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||"}, {"line_number": 7, "line_content": "      /^f[cd][0-9a-f]{2}:/i.test(addr) ||"}, {"line_number": 8, "line_content": "      /^fe80:/i.test(addr) ||"}, {"line_number": 9, "line_content": "      /^::[10]$/.test(addr) ||"}, {"line_number": 10, "line_content": "      /^::$/.test(addr) ||"}, {"line_number": 11, "line_content": "      /^0/.test(addr);"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "async function errorIfHostnameResolvesToPrivateIp(options) {"}, {"line_number": 2, "line_content": "    // allow requests through to local Ghost instance"}, {"line_number": 3, "line_content": "    const siteUrl = new URL(config.get('url'));"}, {"line_number": 4, "line_content": "    const requestUrl = new URL(options.href);"}, {"line_number": 5, "line_content": "    if (requestUrl.host === siteUrl.host) {"}, {"line_number": 6, "line_content": "        return Promise.resolve();"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    const result = await dnsPromises.lookup(options.hostname);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    if (isPrivateIp(result.address)) {"}, {"line_number": 12, "line_content": "        return Promise.reject(new errors.InternalServerError({"}, {"line_number": 13, "line_content": "            message: 'URL resolves to a non-permitted private IP block',"}, {"line_number": 14, "line_content": "            code: 'URL_PRIVATE_INVALID',"}, {"line_number": 15, "line_content": "            context: options.href"}, {"line_number": 16, "line_content": "        }));"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function characterOccurance(stringToTest) {"}, {"line_number": 2, "line_content": "    const chars = {};"}, {"line_number": 3, "line_content": "    let allowedOccurancy;"}, {"line_number": 4, "line_content": "    let valid = true;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    stringToTest = _.toString(stringToTest);"}, {"line_number": 7, "line_content": "    allowedOccurancy = stringToTest.length / 2;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // Loop through string and accumulate character counts"}, {"line_number": 10, "line_content": "    _.each(stringToTest, function (char) {"}, {"line_number": 11, "line_content": "        if (!chars[char]) {"}, {"line_number": 12, "line_content": "            chars[char] = 1;"}, {"line_number": 13, "line_content": "        } else {"}, {"line_number": 14, "line_content": "            chars[char] += 1;"}, {"line_number": 15, "line_content": "        }"}, {"line_number": 16, "line_content": "    });"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    // check if any of the accumulated chars exceed the allowed occurancy"}, {"line_number": 19, "line_content": "    // of 50% of the words' length."}, {"line_number": 20, "line_content": "    _.forIn(chars, function (charCount) {"}, {"line_number": 21, "line_content": "        if (charCount >= allowedOccurancy) {"}, {"line_number": 22, "line_content": "            valid = false;"}, {"line_number": 23, "line_content": "        }"}, {"line_number": 24, "line_content": "    });"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    return valid;"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 68, "lines": [{"line_number": 1, "line_content": "function validatePassword(password, email, blogTitle) {"}, {"line_number": 2, "line_content": "    const validationResult = {isValid: true};"}, {"line_number": 3, "line_content": "    const disallowedPasswords = ['password', 'ghost', 'passw0rd'];"}, {"line_number": 4, "line_content": "    let blogUrl = urlUtils.urlFor('home', true);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const badPasswords = ["}, {"line_number": 7, "line_content": "        '1234567890',"}, {"line_number": 8, "line_content": "        'qwertyuiop',"}, {"line_number": 9, "line_content": "        'qwertzuiop',"}, {"line_number": 10, "line_content": "        'asdfghjkl;',"}, {"line_number": 11, "line_content": "        'abcdefghij',"}, {"line_number": 12, "line_content": "        '0987654321',"}, {"line_number": 13, "line_content": "        '1q2w3e4r5t',"}, {"line_number": 14, "line_content": "        '12345asdfg'"}, {"line_number": 15, "line_content": "    ];"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    blogTitle = blogTitle ? blogTitle : settingsCache.get('title');"}, {"line_number": 18, "line_content": "    blogUrl = blogUrl.replace(/^http(s?):\\/\\//, '');"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    // password must be longer than 10 characters"}, {"line_number": 21, "line_content": "    if (!validator.isLength(password, 10)) {"}, {"line_number": 22, "line_content": "        validationResult.isValid = false;"}, {"line_number": 23, "line_content": "        validationResult.message = tpl(messages.passwordDoesNotComplyLength, {minLength: 10});"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "        return validationResult;"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // dissallow password from badPasswords list (e. g. '1234567890')"}, {"line_number": 29, "line_content": "    _.each(badPasswords, function (badPassword) {"}, {"line_number": 30, "line_content": "        if (badPassword === password) {"}, {"line_number": 31, "line_content": "            validationResult.isValid = false;"}, {"line_number": 32, "line_content": "        }"}, {"line_number": 33, "line_content": "    });"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    // password must not match with users' email"}, {"line_number": 36, "line_content": "    if (email && email.toLowerCase() === password.toLowerCase()) {"}, {"line_number": 37, "line_content": "        validationResult.isValid = false;"}, {"line_number": 38, "line_content": "    }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "    // password must not contain the words 'ghost', 'password', or 'passw0rd'"}, {"line_number": 41, "line_content": "    _.each(disallowedPasswords, function (disallowedPassword) {"}, {"line_number": 42, "line_content": "        if (password.toLowerCase().indexOf(disallowedPassword) >= 0) {"}, {"line_number": 43, "line_content": "            validationResult.isValid = false;"}, {"line_number": 44, "line_content": "        }"}, {"line_number": 45, "line_content": "    });"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "    // password must not match with blog title"}, {"line_number": 48, "line_content": "    if (blogTitle && blogTitle.toLowerCase() === password.toLowerCase()) {"}, {"line_number": 49, "line_content": "        validationResult.isValid = false;"}, {"line_number": 50, "line_content": "    }"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "    // password must not match with blog URL (without protocol, with or without trailing slash)"}, {"line_number": 53, "line_content": "    if (blogUrl && (blogUrl.toLowerCase() === password.toLowerCase() || blogUrl.toLowerCase().replace(/\\/$/, '') === password.toLowerCase())) {"}, {"line_number": 54, "line_content": "        validationResult.isValid = false;"}, {"line_number": 55, "line_content": "    }"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "    // dissallow passwords where 50% or more of characters are the same"}, {"line_number": 58, "line_content": "    if (!characterOccurance(password)) {"}, {"line_number": 59, "line_content": "        validationResult.isValid = false;"}, {"line_number": 60, "line_content": "    }"}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "    // Generic error message for the rules where no dedicated error massage is set"}, {"line_number": 63, "line_content": "    if (!validationResult.isValid && !validationResult.message) {"}, {"line_number": 64, "line_content": "        validationResult.message = tpl(messages.passwordDoesNotComplySecurity);"}, {"line_number": 65, "line_content": "    }"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "    return validationResult;"}, {"line_number": 68, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "async function notify(type, error = null) {"}, {"line_number": 2, "line_content": "    // If we already sent this notification, we should not do it again"}, {"line_number": 3, "line_content": "    if (notified[type]) {"}, {"line_number": 4, "line_content": "        return;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // Mark this function as called"}, {"line_number": 8, "line_content": "    notified[type] = true;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    // Build our message"}, {"line_number": 11, "line_content": "    // - if there's an error then the server is not ready, include the errors"}, {"line_number": 12, "line_content": "    // - if there's no error then the server has started"}, {"line_number": 13, "line_content": "    let message = {};"}, {"line_number": 14, "line_content": "    if (error) {"}, {"line_number": 15, "line_content": "        message[type] = false;"}, {"line_number": 16, "line_content": "        message.error = error;"}, {"line_number": 17, "line_content": "    } else {"}, {"line_number": 18, "line_content": "        message[type] = true;"}, {"line_number": 19, "line_content": "    }"}, {"line_number": 20, "line_content": "    // Add debug info to the message"}, {"line_number": 21, "line_content": "    message.debug = debugInfo;"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    // CASE: IPC communication to the CLI for local process manager"}, {"line_number": 24, "line_content": "    if (process.send) {"}, {"line_number": 25, "line_content": "        process.send(message);"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // CASE: use bootstrap socket to communicate with CLI for systemd"}, {"line_number": 29, "line_content": "    let socketAddress = config.get('bootstrap-socket');"}, {"line_number": 30, "line_content": "    if (socketAddress) {"}, {"line_number": 31, "line_content": "        const bootstrapSocket = require('@tryghost/bootstrap-socket');"}, {"line_number": 32, "line_content": "        return bootstrapSocket.connectAndSend(socketAddress, message);"}, {"line_number": 33, "line_content": "    }"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    return Promise.resolve();"}, {"line_number": 36, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function setSessionProp(prop, val) {"}, {"line_number": 2, "line_content": "                    req.session[prop] = val;"}, {"line_number": 3, "line_content": "                }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "function deleteContent() {"}, {"line_number": 2, "line_content": "                return models.Base.transaction((transacting) => {"}, {"line_number": 3, "line_content": "                    const queryOpts = {"}, {"line_number": 4, "line_content": "                        columns: 'id',"}, {"line_number": 5, "line_content": "                        context: {internal: true},"}, {"line_number": 6, "line_content": "                        destroyAll: true,"}, {"line_number": 7, "line_content": "                        transacting: transacting"}, {"line_number": 8, "line_content": "                    };"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "                    return models.Post.findAll(queryOpts)"}, {"line_number": 11, "line_content": "                        .then((response) => {"}, {"line_number": 12, "line_content": "                            return Promise.map(response.models, (post) => {"}, {"line_number": 13, "line_content": "                                return models.Post.destroy(Object.assign({id: post.id}, queryOpts));"}, {"line_number": 14, "line_content": "                            }, {concurrency: 100});"}, {"line_number": 15, "line_content": "                        })"}, {"line_number": 16, "line_content": "                        .then(() => models.Tag.findAll(queryOpts))"}, {"line_number": 17, "line_content": "                        .then((response) => {"}, {"line_number": 18, "line_content": "                            return Promise.map(response.models, (tag) => {"}, {"line_number": 19, "line_content": "                                return models.Tag.destroy(Object.assign({id: tag.id}, queryOpts));"}, {"line_number": 20, "line_content": "                            }, {concurrency: 100});"}, {"line_number": 21, "line_content": "                        })"}, {"line_number": 22, "line_content": "                        .catch((err) => {"}, {"line_number": 23, "line_content": "                            throw new errors.InternalServerError({"}, {"line_number": 24, "line_content": "                                err: err"}, {"line_number": 25, "line_content": "                            });"}, {"line_number": 26, "line_content": "                        });"}, {"line_number": 27, "line_content": "                });"}, {"line_number": 28, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function removeMobiledocFormat(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.formats && frame.options.formats.includes('mobiledoc')) {"}, {"line_number": 3, "line_content": "        frame.options.formats = frame.options.formats.filter((format) => {"}, {"line_number": 4, "line_content": "            return (format !== 'mobiledoc');"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function defaultRelations(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.withRelated) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (frame.options.columns && !frame.options.withRelated) {"}, {"line_number": 7, "line_content": "        return false;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    frame.options.withRelated = ['tags', 'authors', 'authors.roles', 'email', 'tiers', 'newsletter'];"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function setDefaultOrder(frame) {"}, {"line_number": 2, "line_content": "    let includesOrderedRelations = false;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (frame.options.withRelated) {"}, {"line_number": 5, "line_content": "        const orderedRelations = ['author', 'authors', 'tag', 'tags'];"}, {"line_number": 6, "line_content": "        includesOrderedRelations = _.intersection(orderedRelations, frame.options.withRelated).length > 0;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (!frame.options.order && !includesOrderedRelations && frame.options.filter) {"}, {"line_number": 10, "line_content": "        frame.options.autoOrder = slugFilterOrder('posts', frame.options.filter);"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    if (!frame.options.order && !frame.options.autoOrder && !includesOrderedRelations) {"}, {"line_number": 14, "line_content": "        frame.options.order = 'published_at desc';"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function forceVisibilityColumn(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.columns && !frame.options.columns.includes('visibility')) {"}, {"line_number": 3, "line_content": "        frame.options.columns.push('visibility');"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function defaultFormat(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.formats) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    frame.options.formats = 'mobiledoc';"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function handlePostsMeta(frame) {"}, {"line_number": 2, "line_content": "    let metaAttrs = _.keys(_.omit(postsMetaSchema, ['id', 'post_id']));"}, {"line_number": 3, "line_content": "    let meta = _.pick(frame.data.posts[0], metaAttrs);"}, {"line_number": 4, "line_content": "    frame.data.posts[0].posts_meta = meta;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function setDefaultOrder(frame) {"}, {"line_number": 2, "line_content": "    let defaultOrder = 'name asc';"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (!frame.options.order && frame.options.filter) {"}, {"line_number": 5, "line_content": "        frame.options.autoOrder = slugFilterOrder('tags', frame.options.filter);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!frame.options.order && !frame.options.autoOrder) {"}, {"line_number": 9, "line_content": "        frame.options.order = defaultOrder;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function removeMobiledocFormat(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.formats && frame.options.formats.includes('mobiledoc')) {"}, {"line_number": 3, "line_content": "        frame.options.formats = frame.options.formats.filter((format) => {"}, {"line_number": 4, "line_content": "            return (format !== 'mobiledoc');"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function defaultRelations(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.withRelated) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (frame.options.columns && !frame.options.withRelated) {"}, {"line_number": 7, "line_content": "        return false;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    frame.options.withRelated = ['tags', 'authors', 'authors.roles', 'tiers'];"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function setDefaultOrder(frame) {"}, {"line_number": 2, "line_content": "    let includesOrderedRelations = false;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (frame.options.withRelated) {"}, {"line_number": 5, "line_content": "        const orderedRelations = ['author', 'authors', 'tag', 'tags'];"}, {"line_number": 6, "line_content": "        includesOrderedRelations = _.intersection(orderedRelations, frame.options.withRelated).length > 0;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (!frame.options.order && !includesOrderedRelations && frame.options.filter) {"}, {"line_number": 10, "line_content": "        frame.options.autoOrder = slugFilterOrder('posts', frame.options.filter);"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    if (!frame.options.order && !frame.options.autoOrder && !includesOrderedRelations) {"}, {"line_number": 14, "line_content": "        frame.options.order = 'title asc';"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function forceVisibilityColumn(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.columns && !frame.options.columns.includes('visibility')) {"}, {"line_number": 3, "line_content": "        frame.options.columns.push('visibility');"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function defaultFormat(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.formats) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    frame.options.formats = 'mobiledoc';"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function handlePostsMeta(frame) {"}, {"line_number": 2, "line_content": "    let metaAttrs = _.keys(_.omit(postsMetaSchema, ['id', 'post_id']));"}, {"line_number": 3, "line_content": "    let meta = _.pick(frame.data.pages[0], metaAttrs);"}, {"line_number": 4, "line_content": "    frame.data.pages[0].posts_meta = meta;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function setDefaultFilter(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.filter) {"}, {"line_number": 3, "line_content": "        frame.options.filter = `(${frame.options.filter})+type:[custom,builtin]`;"}, {"line_number": 4, "line_content": "    } else {"}, {"line_number": 5, "line_content": "        frame.options.filter = 'type:[custom,builtin]';"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function defaultRelations(frame) {"}, {"line_number": 2, "line_content": "    if (frame.options.withRelated) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (frame.options.columns && !frame.options.withRelated) {"}, {"line_number": 7, "line_content": "        return false;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    frame.options.withRelated = ['labels'];"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function mapSubscribedFlagToNewsletterRelation(frame) {"}, {"line_number": 2, "line_content": "    frame.options.mongoTransformer = mapNQLKeyValues({"}, {"line_number": 3, "line_content": "        key: {"}, {"line_number": 4, "line_content": "            from: 'subscribed',"}, {"line_number": 5, "line_content": "            to: 'newsletters.status'"}, {"line_number": 6, "line_content": "        },"}, {"line_number": 7, "line_content": "        values: [{"}, {"line_number": 8, "line_content": "            from: true,"}, {"line_number": 9, "line_content": "            to: 'active'"}, {"line_number": 10, "line_content": "        }, {"}, {"line_number": 11, "line_content": "            from: false,"}, {"line_number": 12, "line_content": "            to: {$ne: 'active'}"}, {"line_number": 13, "line_content": "        }]"}, {"line_number": 14, "line_content": "    });"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function setDefaultOrder(frame) {"}, {"line_number": 2, "line_content": "    if (!frame.options.order && frame.options.filter) {"}, {"line_number": 3, "line_content": "        frame.options.autoOrder = slugFilterOrder('users', frame.options.filter);"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (!frame.options.order && !frame.options.autoOrder) {"}, {"line_number": 7, "line_content": "        frame.options.order = 'name asc';"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "function convertTierInput(input) {"}, {"line_number": 2, "line_content": "    const converted = {"}, {"line_number": 3, "line_content": "        id: input.id,"}, {"line_number": 4, "line_content": "        name: input.name,"}, {"line_number": 5, "line_content": "        description: input.description,"}, {"line_number": 6, "line_content": "        slug: input.slug,"}, {"line_number": 7, "line_content": "        active: input.active,"}, {"line_number": 8, "line_content": "        type: input.type,"}, {"line_number": 9, "line_content": "        welcome_page_url: input.welcome_page_url,"}, {"line_number": 10, "line_content": "        created_at: input.created_at,"}, {"line_number": 11, "line_content": "        updated_at: input.updated_at,"}, {"line_number": 12, "line_content": "        visibility: input.visibility"}, {"line_number": 13, "line_content": "    };"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    if (input.monthly_price && input.currency) {"}, {"line_number": 16, "line_content": "        converted.monthly_price = {"}, {"line_number": 17, "line_content": "            amount: input.monthly_price,"}, {"line_number": 18, "line_content": "            currency: input.currency"}, {"line_number": 19, "line_content": "        };"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    if (input.yearly_price && input.currency) {"}, {"line_number": 23, "line_content": "        converted.yearly_price = {"}, {"line_number": 24, "line_content": "            amount: input.yearly_price,"}, {"line_number": 25, "line_content": "            currency: input.currency"}, {"line_number": 26, "line_content": "        };"}, {"line_number": 27, "line_content": "    }"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    if (input.benefits) {"}, {"line_number": 30, "line_content": "        converted.benefits = input.benefits.map(name => ({name}));"}, {"line_number": 31, "line_content": "    }"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    return converted;"}, {"line_number": 34, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getURL(urlPath) {"}, {"line_number": 2, "line_content": "    const media = new RegExp('^' + config.getSubdir() + '/' + STATIC_MEDIA_URL_PREFIX);"}, {"line_number": 3, "line_content": "    const absolute = media.test(urlPath) ? true : false;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (absolute) {"}, {"line_number": 6, "line_content": "        // Remove the sub-directory from the URL because ghostConfig will add it back."}, {"line_number": 7, "line_content": "        urlPath = urlPath.replace(new RegExp('^' + config.getSubdir()), '');"}, {"line_number": 8, "line_content": "        const baseUrl = config.getSiteUrl().replace(/\\/$/, '');"}, {"line_number": 9, "line_content": "        urlPath = baseUrl + urlPath;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return urlPath;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function paginatedMembers(page, _apiConfig, frame) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        members: page.data.map(model => serializeMember(model, frame.options)),"}, {"line_number": 4, "line_content": "        meta: page.meta"}, {"line_number": 5, "line_content": "    };"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function bulkAction(bulkActionResult, _apiConfig, frame) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        bulk: {"}, {"line_number": 4, "line_content": "            action: frame.data.action,"}, {"line_number": 5, "line_content": "            meta: {"}, {"line_number": 6, "line_content": "                stats: {"}, {"line_number": 7, "line_content": "                    successful: bulkActionResult.successful,"}, {"line_number": 8, "line_content": "                    unsuccessful: bulkActionResult.unsuccessful"}, {"line_number": 9, "line_content": "                },"}, {"line_number": 10, "line_content": "                errors: bulkActionResult.errors,"}, {"line_number": 11, "line_content": "                unsuccessfulData: bulkActionResult.unsuccessfulData"}, {"line_number": 12, "line_content": "            }"}, {"line_number": 13, "line_content": "        }"}, {"line_number": 14, "line_content": "    };"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function singleMember(model, _apiConfig, frame) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        members: [serializeMember(model, frame.options)]"}, {"line_number": 4, "line_content": "    };"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function exportCSV(data) {"}, {"line_number": 2, "line_content": "    debug('exportCSV');"}, {"line_number": 3, "line_content": "    return unparse(data.data);"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 65, "lines": [{"line_number": 1, "line_content": "function serializeMember(member, options) {"}, {"line_number": 2, "line_content": "    const json = member.toJSON ? member.toJSON(options) : member;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const comped = json.status === 'comped';"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const subscriptions = json.subscriptions || [];"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const serialized = {"}, {"line_number": 9, "line_content": "        id: json.id,"}, {"line_number": 10, "line_content": "        uuid: json.uuid,"}, {"line_number": 11, "line_content": "        email: json.email,"}, {"line_number": 12, "line_content": "        name: json.name,"}, {"line_number": 13, "line_content": "        note: json.note,"}, {"line_number": 14, "line_content": "        geolocation: json.geolocation,"}, {"line_number": 15, "line_content": "        subscribed: json.subscribed,"}, {"line_number": 16, "line_content": "        created_at: json.created_at,"}, {"line_number": 17, "line_content": "        updated_at: json.updated_at,"}, {"line_number": 18, "line_content": "        labels: json.labels,"}, {"line_number": 19, "line_content": "        subscriptions: subscriptions,"}, {"line_number": 20, "line_content": "        avatar_image: json.avatar_image,"}, {"line_number": 21, "line_content": "        comped: comped,"}, {"line_number": 22, "line_content": "        email_count: json.email_count,"}, {"line_number": 23, "line_content": "        email_opened_count: json.email_opened_count,"}, {"line_number": 24, "line_content": "        email_open_rate: json.email_open_rate,"}, {"line_number": 25, "line_content": "        email_recipients: json.email_recipients,"}, {"line_number": 26, "line_content": "        status: json.status,"}, {"line_number": 27, "line_content": "        last_seen_at: json.last_seen_at"}, {"line_number": 28, "line_content": "    };"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    if (json.products) {"}, {"line_number": 31, "line_content": "        serialized.tiers = json.products;"}, {"line_number": 32, "line_content": "    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    // Rename subscriptions.price.product to subscriptions.price.tier"}, {"line_number": 35, "line_content": "    for (const subscription of serialized.subscriptions) {"}, {"line_number": 36, "line_content": "        if (!subscription.price) {"}, {"line_number": 37, "line_content": "            continue;"}, {"line_number": 38, "line_content": "        }"}, {"line_number": 39, "line_content": "        "}, {"line_number": 40, "line_content": "        if (!subscription.price.tier && subscription.price.product) {"}, {"line_number": 41, "line_content": "            subscription.price.tier = subscription.price.product;"}, {"line_number": 42, "line_content": "            "}, {"line_number": 43, "line_content": "            if (!subscription.price.tier.tier_id) {"}, {"line_number": 44, "line_content": "                subscription.price.tier.tier_id = subscription.price.tier.product_id;"}, {"line_number": 45, "line_content": "            }"}, {"line_number": 46, "line_content": "            delete subscription.price.tier.product_id;"}, {"line_number": 47, "line_content": "        }"}, {"line_number": 48, "line_content": "        delete subscription.price.product;"}, {"line_number": 49, "line_content": "    }"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "    if (json.newsletters) {"}, {"line_number": 52, "line_content": "        serialized.newsletters = json.newsletters"}, {"line_number": 53, "line_content": "            .filter(newsletter => newsletter.status === 'active')"}, {"line_number": 54, "line_content": "            .sort((a, b) => {"}, {"line_number": 55, "line_content": "                return a.sort_order - b.sort_order;"}, {"line_number": 56, "line_content": "            });"}, {"line_number": 57, "line_content": "    }"}, {"line_number": 58, "line_content": "    // override the `subscribed` param to mean \"subscribed to any active newsletter\""}, {"line_number": 59, "line_content": "    serialized.subscribed = false;"}, {"line_number": 60, "line_content": "    if (Array.isArray(serialized.newsletters) && serialized.newsletters.length > 0) {"}, {"line_number": 61, "line_content": "        serialized.subscribed = true;"}, {"line_number": 62, "line_content": "    }"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "    return serialized;"}, {"line_number": 65, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function passthrough(data) {"}, {"line_number": 2, "line_content": "    return data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createSerializer(debugString, serialize) {"}, {"line_number": 2, "line_content": "    return function serializer(data, apiConfig, frame) {"}, {"line_number": 3, "line_content": "        debug(debugString);"}, {"line_number": 4, "line_content": "        const response = serialize(data, apiConfig, frame);"}, {"line_number": 5, "line_content": "        frame.response = response;"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function settingsFilter(settings, filter) {"}, {"line_number": 2, "line_content": "    let filteredGroups = filter ? filter.split(',') : [];"}, {"line_number": 3, "line_content": "    return _.filter(settings, (setting) => {"}, {"line_number": 4, "line_content": "        if (filteredGroups.length > 0) {"}, {"line_number": 5, "line_content": "            return _.includes(filteredGroups, setting.group);"}, {"line_number": 6, "line_content": "        }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "        return true;"}, {"line_number": 9, "line_content": "    });"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "function serializeSettings(models, apiConfig, frame) {"}, {"line_number": 2, "line_content": "    let filteredSettings;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // If this is public, we already have the right data, we just need to add an Array wrapper"}, {"line_number": 5, "line_content": "    if (utils.isContentAPI(frame)) {"}, {"line_number": 6, "line_content": "        filteredSettings = models;"}, {"line_number": 7, "line_content": "        "}, {"line_number": 8, "line_content": "        // Change the returned icon location to use a resized version, to prevent serving giant icon files"}, {"line_number": 9, "line_content": "        const icon = filteredSettings.icon;"}, {"line_number": 10, "line_content": "        if (icon) {"}, {"line_number": 11, "line_content": "            filteredSettings.icon = filteredSettings.icon.replace(/\\/content\\/images\\//, '/content/images/size/w256h256/');"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    } else {"}, {"line_number": 14, "line_content": "        filteredSettings = _.values(settingsFilter(models, frame.options.group));"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        // Change the returned icon location to use a resized version, to prevent serving giant icon files"}, {"line_number": 17, "line_content": "        // in admin"}, {"line_number": 18, "line_content": "        const icon = filteredSettings.find(setting => setting.key === 'icon');"}, {"line_number": 19, "line_content": "        if (icon && icon.value) {"}, {"line_number": 20, "line_content": "            icon.value = icon.value.replace(/\\/content\\/images\\//, '/content/images/size/w256h256/');"}, {"line_number": 21, "line_content": "        }"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    frame.response = {"}, {"line_number": 25, "line_content": "        settings: mappers.settings(filteredSettings),"}, {"line_number": 26, "line_content": "        meta: {}"}, {"line_number": 27, "line_content": "    };"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    if (frame.options.group) {"}, {"line_number": 30, "line_content": "        frame.response.meta.filters = {"}, {"line_number": 31, "line_content": "            group: frame.options.group"}, {"line_number": 32, "line_content": "        };"}, {"line_number": 33, "line_content": "    }"}, {"line_number": 34, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function passthrough(data) {"}, {"line_number": 2, "line_content": "    return data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function serializeData(data, apiConfig, frame) {"}, {"line_number": 2, "line_content": "    frame.response = data;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function paginatedTiers(page, _apiConfig, frame) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        tiers: page.data.map((model) => {"}, {"line_number": 4, "line_content": "            return serializeTier(model, frame.options, frame);"}, {"line_number": 5, "line_content": "        }),"}, {"line_number": 6, "line_content": "        meta: page.meta"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function singleTier(model, _apiConfig, frame) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        tiers: ["}, {"line_number": 4, "line_content": "            serializeTier(model, frame.options, frame)"}, {"line_number": 5, "line_content": "        ]"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 42, "lines": [{"line_number": 1, "line_content": "function serializeTier(tier, options, frame) {"}, {"line_number": 2, "line_content": "    const json = tier.toJSON(options);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const serialized = {"}, {"line_number": 5, "line_content": "        id: json.id,"}, {"line_number": 6, "line_content": "        name: json.name,"}, {"line_number": 7, "line_content": "        description: json.description,"}, {"line_number": 8, "line_content": "        slug: json.slug,"}, {"line_number": 9, "line_content": "        active: json.active,"}, {"line_number": 10, "line_content": "        type: json.type,"}, {"line_number": 11, "line_content": "        welcome_page_url: json.welcome_page_url,"}, {"line_number": 12, "line_content": "        created_at: json.created_at,"}, {"line_number": 13, "line_content": "        updated_at: json.updated_at,"}, {"line_number": 14, "line_content": "        visibility: json.visibility,"}, {"line_number": 15, "line_content": "        benefits: null"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    if (Array.isArray(json.benefits)) {"}, {"line_number": 19, "line_content": "        serialized.benefits = json.benefits.map(benefit => benefit.name);"}, {"line_number": 20, "line_content": "    } else {"}, {"line_number": 21, "line_content": "        serialized.benefits = null;"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    if (serialized.type === 'paid') {"}, {"line_number": 25, "line_content": "        serialized.currency = json.monthlyPrice?.currency;"}, {"line_number": 26, "line_content": "        serialized.monthly_price = json.monthlyPrice?.amount;"}, {"line_number": 27, "line_content": "        serialized.yearly_price = json.yearlyPrice?.amount;"}, {"line_number": 28, "line_content": "    }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    if (!localUtils.isContentAPI(frame)) {"}, {"line_number": 31, "line_content": "        const requestedQueryIncludes = frame.original && frame.original.query && frame.original.query.include && frame.original.query.include.split(',') || [];"}, {"line_number": 32, "line_content": "        const requestedOptionsIncludes = utils.options.trimAndLowerCase(frame.original && frame.original.options && frame.original.options.include || []);"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "        return cleanIncludes("}, {"line_number": 35, "line_content": "            allowedIncludes,"}, {"line_number": 36, "line_content": "            requestedQueryIncludes.concat(requestedOptionsIncludes),"}, {"line_number": 37, "line_content": "            serialized"}, {"line_number": 38, "line_content": "        );"}, {"line_number": 39, "line_content": "    }"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "    return serialized;"}, {"line_number": 42, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function cleanIncludes(allowed, requested, data) {"}, {"line_number": 2, "line_content": "    const cleaned = {"}, {"line_number": 3, "line_content": "        ...data"}, {"line_number": 4, "line_content": "    };"}, {"line_number": 5, "line_content": "    for (const include of allowed) {"}, {"line_number": 6, "line_content": "        if (!requested.includes(include)) {"}, {"line_number": 7, "line_content": "            delete cleaned[include];"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    return cleaned;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createSerializer(debugString, serialize) {"}, {"line_number": 2, "line_content": "    return function serializer(data, apiConfig, frame) {"}, {"line_number": 3, "line_content": "        debug(debugString);"}, {"line_number": 4, "line_content": "        const response = serialize(data, apiConfig, frame);"}, {"line_number": 5, "line_content": "        frame.response = response;"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getURL(urlPath) {"}, {"line_number": 2, "line_content": "    const media = new RegExp('^' + config.getSubdir() + '/' + STATIC_FILES_URL_PREFIX);"}, {"line_number": 3, "line_content": "    const absolute = media.test(urlPath) ? true : false;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (absolute) {"}, {"line_number": 6, "line_content": "        // Remove the sub-directory from the URL because ghostConfig will add it back."}, {"line_number": 7, "line_content": "        urlPath = urlPath.replace(new RegExp('^' + config.getSubdir()), '');"}, {"line_number": 8, "line_content": "        const baseUrl = config.getSiteUrl().replace(/\\/$/, '');"}, {"line_number": 9, "line_content": "        urlPath = baseUrl + urlPath;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return urlPath;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function getStripeConnectData(frame) {"}, {"line_number": 2, "line_content": "    const stripeConnectIntegrationToken = frame.data.settings.find(setting => setting.key === 'stripe_connect_integration_token');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (stripeConnectIntegrationToken && stripeConnectIntegrationToken.value) {"}, {"line_number": 5, "line_content": "        const getSessionProp = prop => frame.original.session[prop];"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        return await settingsBREADService.getStripeConnectData("}, {"line_number": 8, "line_content": "            stripeConnectIntegrationToken,"}, {"line_number": 9, "line_content": "            getSessionProp,"}, {"line_number": 10, "line_content": "            membersService.stripeConnect.getStripeConnectTokenData"}, {"line_number": 11, "line_content": "        );"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function permissionOnlySelf(frame) {"}, {"line_number": 2, "line_content": "    const targetId = getTargetId(frame);"}, {"line_number": 3, "line_content": "    const userId = frame.user.id;"}, {"line_number": 4, "line_content": "    if (targetId !== userId) {"}, {"line_number": 5, "line_content": "        return Promise.reject(new errors.NoPermissionError({message: tpl(messages.noPermissionToAction)}));"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    return Promise.resolve();"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getTargetId(frame) {"}, {"line_number": 2, "line_content": "    return frame.options.id === 'me' ? frame.user.id : frame.options.id;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function fetchOrCreatePersonalToken(userId) {"}, {"line_number": 2, "line_content": "    const token = await models.ApiKey.findOne({user_id: userId}, {});"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (!token) {"}, {"line_number": 5, "line_content": "        const newToken = await models.ApiKey.add({user_id: userId, type: 'admin'});"}, {"line_number": 6, "line_content": "        return newToken;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return token;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isChanging(attr) {"}, {"line_number": 2, "line_content": "            return unsafeAttrs[attr] && unsafeAttrs[attr] !== postModel.get(attr);"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isPublished() {"}, {"line_number": 2, "line_content": "            return unsafeAttrs.status && unsafeAttrs.status !== 'draft';"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isDraft() {"}, {"line_number": 2, "line_content": "            return postModel.get('status') === 'draft';"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function init() {"}, {"line_number": 2, "line_content": "    exports.Base = require('./base');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    let modelsFiles = glob.sync('!(index).js', {cwd: __dirname});"}, {"line_number": 5, "line_content": "    modelsFiles.forEach((model) => {"}, {"line_number": 6, "line_content": "        const name = model.replace(/.js$/, '');"}, {"line_number": 7, "line_content": "        _.extend(exports, require('./' + name));"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "function createBulkOperation(singular, multiple) {"}, {"line_number": 2, "line_content": "    return async function (knex, table, data, options) {"}, {"line_number": 3, "line_content": "        const result = {"}, {"line_number": 4, "line_content": "            successful: 0,"}, {"line_number": 5, "line_content": "            unsuccessful: 0,"}, {"line_number": 6, "line_content": "            unsuccessfulData: [],"}, {"line_number": 7, "line_content": "            errors: []"}, {"line_number": 8, "line_content": "        };"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "        for (const chunkedData of _.chunk(data, CHUNK_SIZE)) {"}, {"line_number": 11, "line_content": "            try {"}, {"line_number": 12, "line_content": "                await multiple(knex, table, chunkedData, options);"}, {"line_number": 13, "line_content": "                result.successful += chunkedData.length;"}, {"line_number": 14, "line_content": "            } catch (errToIgnore) {"}, {"line_number": 15, "line_content": "                for (const singularData of chunkedData) {"}, {"line_number": 16, "line_content": "                    try {"}, {"line_number": 17, "line_content": "                        await singular(knex, table, singularData, options);"}, {"line_number": 18, "line_content": "                        result.successful += 1;"}, {"line_number": 19, "line_content": "                    } catch (err) {"}, {"line_number": 20, "line_content": "                        err.errorDetails = singularData;"}, {"line_number": 21, "line_content": "                        result.errors.push(err);"}, {"line_number": 22, "line_content": "                        result.unsuccessfulData.push(singularData);"}, {"line_number": 23, "line_content": "                        result.unsuccessful += 1;"}, {"line_number": 24, "line_content": "                    }"}, {"line_number": 25, "line_content": "                }"}, {"line_number": 26, "line_content": "            }"}, {"line_number": 27, "line_content": "        }"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "        return result;"}, {"line_number": 30, "line_content": "    };"}, {"line_number": 31, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function insertSingle(knex, table, record) {"}, {"line_number": 2, "line_content": "    await knex(table).insert(record);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function insertMultiple(knex, table, chunk) {"}, {"line_number": 2, "line_content": "    await knex(table).insert(chunk);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function editSingle(knex, table, id, options) {"}, {"line_number": 2, "line_content": "    await knex(table).where('id', id).update(options.data);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function editMultiple(knex, table, chunk, options) {"}, {"line_number": 2, "line_content": "    await knex(table).whereIn('id', chunk).update(options.data);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function delSingle(knex, table, id, options) {"}, {"line_number": 2, "line_content": "    try {"}, {"line_number": 3, "line_content": "        await knex(table).where(options.column ?? 'id', id).del();"}, {"line_number": 4, "line_content": "    } catch (err) {"}, {"line_number": 5, "line_content": "        const importError = new errors.DataImportError({"}, {"line_number": 6, "line_content": "            message: `Failed to remove entry from ${table}`,"}, {"line_number": 7, "line_content": "            context: `Entry id: ${id}`,"}, {"line_number": 8, "line_content": "            err: err"}, {"line_number": 9, "line_content": "        });"}, {"line_number": 10, "line_content": "        logging.error(importError);"}, {"line_number": 11, "line_content": "        throw importError;"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function delMultiple(knex, table, chunk, options) {"}, {"line_number": 2, "line_content": "    await knex(table).whereIn(options.column ?? 'id', chunk).del();"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "function parseDefaultSettings() {"}, {"line_number": 2, "line_content": "    const defaultSettingsInCategories = require('../data/schema/').defaultSettings;"}, {"line_number": 3, "line_content": "    const defaultSettingsFlattened = {};"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const dynamicDefault = {"}, {"line_number": 6, "line_content": "        db_hash: () => uuid.v4(),"}, {"line_number": 7, "line_content": "        public_hash: () => crypto.randomBytes(15).toString('hex'),"}, {"line_number": 8, "line_content": "        admin_session_secret: () => crypto.randomBytes(32).toString('hex'),"}, {"line_number": 9, "line_content": "        theme_session_secret: () => crypto.randomBytes(32).toString('hex'),"}, {"line_number": 10, "line_content": "        members_public_key: () => getMembersKey('public'),"}, {"line_number": 11, "line_content": "        members_private_key: () => getMembersKey('private'),"}, {"line_number": 12, "line_content": "        members_email_auth_secret: () => crypto.randomBytes(64).toString('hex'),"}, {"line_number": 13, "line_content": "        ghost_public_key: () => getGhostKey('public'),"}, {"line_number": 14, "line_content": "        ghost_private_key: () => getGhostKey('private')"}, {"line_number": 15, "line_content": "    };"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    _.each(defaultSettingsInCategories, function each(settings, categoryName) {"}, {"line_number": 18, "line_content": "        _.each(settings, function eachSetting(setting, settingName) {"}, {"line_number": 19, "line_content": "            setting.group = categoryName;"}, {"line_number": 20, "line_content": "            setting.key = settingName;"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "            setting.getDefaultValue = function getDefaultValue() {"}, {"line_number": 23, "line_content": "                const getDynamicDefault = dynamicDefault[setting.key];"}, {"line_number": 24, "line_content": "                if (getDynamicDefault) {"}, {"line_number": 25, "line_content": "                    return getDynamicDefault();"}, {"line_number": 26, "line_content": "                } else {"}, {"line_number": 27, "line_content": "                    return setting.defaultValue;"}, {"line_number": 28, "line_content": "                }"}, {"line_number": 29, "line_content": "            };"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "            defaultSettingsFlattened[settingName] = setting;"}, {"line_number": 32, "line_content": "        });"}, {"line_number": 33, "line_content": "    });"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    return defaultSettingsFlattened;"}, {"line_number": 36, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function getDefaultSettings() {"}, {"line_number": 2, "line_content": "    if (!defaultSettings) {"}, {"line_number": 3, "line_content": "        defaultSettings = parseDefaultSettings();"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return defaultSettings;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function isChangingAuthors() {"}, {"line_number": 2, "line_content": "                if (!unsafeAttrs.authors) {"}, {"line_number": 3, "line_content": "                    return false;"}, {"line_number": 4, "line_content": "                }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "                if (!unsafeAttrs.authors.length) {"}, {"line_number": 7, "line_content": "                    return true;"}, {"line_number": 8, "line_content": "                }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "                return unsafeAttrs.authors[0].id !== postModel.related('authors').models[0].id;"}, {"line_number": 11, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isPrimaryAuthor() {"}, {"line_number": 2, "line_content": "                return (context.user === postModel.related('authors').models[0].id);"}, {"line_number": 3, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function isOwner() {"}, {"line_number": 2, "line_content": "                let isCorrectOwner = true;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "                if (!unsafeAttrs.authors) {"}, {"line_number": 5, "line_content": "                    return false;"}, {"line_number": 6, "line_content": "                }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "                if (unsafeAttrs.authors) {"}, {"line_number": 9, "line_content": "                    isCorrectOwner = isCorrectOwner && unsafeAttrs.authors.length && unsafeAttrs.authors[0].id === context.user;"}, {"line_number": 10, "line_content": "                }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "                return isCorrectOwner;"}, {"line_number": 13, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isCoAuthor() {"}, {"line_number": 2, "line_content": "                return postModel.related('authors').models.map(author => author.id).includes(context.user);"}, {"line_number": 3, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function getAuthorRole() {"}, {"line_number": 2, "line_content": "            return ghostBookshelf.model('Role').findOne({name: 'Author'}, _.pick(options, 'transacting'))"}, {"line_number": 3, "line_content": "                .then(function then(authorRole) {"}, {"line_number": 4, "line_content": "                    return [authorRole.get('id')];"}, {"line_number": 5, "line_content": "                });"}, {"line_number": 6, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function notifyServerReady(error) {"}, {"line_number": 2, "line_content": "    const notify = require('./server/notify');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (error) {"}, {"line_number": 5, "line_content": "        debug('Notifying server ready (error)');"}, {"line_number": 6, "line_content": "        notify.notifyServerReady(error);"}, {"line_number": 7, "line_content": "    } else {"}, {"line_number": 8, "line_content": "        debug('Notifying server ready (success)');"}, {"line_number": 9, "line_content": "        notify.notifyServerReady();"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "async function initDatabase({config}) {"}, {"line_number": 2, "line_content": "    const DatabaseStateManager = require('./server/data/db/state-manager');"}, {"line_number": 3, "line_content": "    const dbStateManager = new DatabaseStateManager({knexMigratorFilePath: config.get('paths:appRoot')});"}, {"line_number": 4, "line_content": "    await dbStateManager.makeReady();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const databaseInfo = require('./server/data/db/info');"}, {"line_number": 7, "line_content": "    await databaseInfo.init();"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 51, "lines": [{"line_number": 1, "line_content": "async function initCore({ghostServer, config, bootLogger, frontend}) {"}, {"line_number": 2, "line_content": "    debug('Begin: initCore');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // URL Utils is a bit slow, put it here so the timing is visible separate from models"}, {"line_number": 5, "line_content": "    debug('Begin: Load urlUtils');"}, {"line_number": 6, "line_content": "    require('./shared/url-utils');"}, {"line_number": 7, "line_content": "    debug('End: Load urlUtils');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // Models are the heart of Ghost - this is a syncronous operation"}, {"line_number": 10, "line_content": "    debug('Begin: models');"}, {"line_number": 11, "line_content": "    const models = require('./server/models');"}, {"line_number": 12, "line_content": "    models.init();"}, {"line_number": 13, "line_content": "    debug('End: models');"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    // Settings are a core concept we use settings to store key-value pairs used in critical pathways as well as public data like the site title"}, {"line_number": 16, "line_content": "    debug('Begin: settings');"}, {"line_number": 17, "line_content": "    const settings = require('./server/services/settings/settings-service');"}, {"line_number": 18, "line_content": "    await settings.init();"}, {"line_number": 19, "line_content": "    await settings.syncEmailSettings(config.get('hostSettings:emailVerification:verified'));"}, {"line_number": 20, "line_content": "    debug('End: settings');"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    // The URLService is a core part of Ghost, which depends on models."}, {"line_number": 23, "line_content": "    debug('Begin: Url Service');"}, {"line_number": 24, "line_content": "    const urlService = require('./server/services/url');"}, {"line_number": 25, "line_content": "    // Note: there is no await here, we do not wait for the url service to finish"}, {"line_number": 26, "line_content": "    // We can return, but the site will remain in maintenance mode until this finishes"}, {"line_number": 27, "line_content": "    // This is managed on request: https://github.com/TryGhost/Ghost/blob/main/core/app.js#L10"}, {"line_number": 28, "line_content": "    urlService.init({"}, {"line_number": 29, "line_content": "        onFinished: () => {"}, {"line_number": 30, "line_content": "            bootLogger.log('URL Service Ready');"}, {"line_number": 31, "line_content": "        },"}, {"line_number": 32, "line_content": "        urlCache: !frontend // hacky parameter to make the cache initialization kick in as we can't initialize labs before the boot"}, {"line_number": 33, "line_content": "    });"}, {"line_number": 34, "line_content": "    debug('End: Url Service');"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    if (ghostServer) {"}, {"line_number": 37, "line_content": "        // Job Service allows parts of Ghost to run in the background"}, {"line_number": 38, "line_content": "        debug('Begin: Job Service');"}, {"line_number": 39, "line_content": "        const jobService = require('./server/services/jobs');"}, {"line_number": 40, "line_content": "        ghostServer.registerCleanupTask(async () => {"}, {"line_number": 41, "line_content": "            await jobService.shutdown();"}, {"line_number": 42, "line_content": "        });"}, {"line_number": 43, "line_content": "        debug('End: Job Service');"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "        ghostServer.registerCleanupTask(async () => {"}, {"line_number": 46, "line_content": "            await urlService.shutdown();"}, {"line_number": 47, "line_content": "        });"}, {"line_number": 48, "line_content": "    }"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "    debug('End: initCore');"}, {"line_number": 51, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "async function initServicesForFrontend({bootLogger}) {"}, {"line_number": 2, "line_content": "    debug('Begin: initServicesForFrontend');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    debug('Begin: Routing Settings');"}, {"line_number": 5, "line_content": "    const routeSettings = require('./server/services/route-settings');"}, {"line_number": 6, "line_content": "    await routeSettings.init();"}, {"line_number": 7, "line_content": "    debug('End: Routing Settings');"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    debug('Begin: Redirects');"}, {"line_number": 10, "line_content": "    const customRedirects = require('./server/services/redirects');"}, {"line_number": 11, "line_content": "    await customRedirects.init(),"}, {"line_number": 12, "line_content": "    debug('End: Redirects');"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    debug('Begin: Themes');"}, {"line_number": 15, "line_content": "    // customThemSettingsService.api must be initialized before any theme activation occurs"}, {"line_number": 16, "line_content": "    const customThemeSettingsService = require('./server/services/custom-theme-settings');"}, {"line_number": 17, "line_content": "    customThemeSettingsService.init();"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const themeService = require('./server/services/themes');"}, {"line_number": 20, "line_content": "    const themeServiceStart = Date.now();"}, {"line_number": 21, "line_content": "    await themeService.init();"}, {"line_number": 22, "line_content": "    bootLogger.metric('theme-service-init', themeServiceStart);"}, {"line_number": 23, "line_content": "    debug('End: Themes');"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    debug('Begin: Offers');"}, {"line_number": 26, "line_content": "    const offers = require('./server/services/offers');"}, {"line_number": 27, "line_content": "    await offers.init();"}, {"line_number": 28, "line_content": "    debug('End: Offers');"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    const frontendDataService = require('./server/services/frontend-data-service');"}, {"line_number": 31, "line_content": "    let dataService = await frontendDataService.init();"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    debug('End: initServicesForFrontend');"}, {"line_number": 34, "line_content": "    return {dataService};"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "async function initFrontend(dataService) {"}, {"line_number": 2, "line_content": "    debug('Begin: initFrontend');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const proxyService = require('./frontend/services/proxy');"}, {"line_number": 5, "line_content": "    proxyService.init({dataService});"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    const helperService = require('./frontend/services/helpers');"}, {"line_number": 8, "line_content": "    await helperService.init();"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    debug('End: initFrontend');"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function initExpressApps({frontend, backend, config}) {"}, {"line_number": 2, "line_content": "    debug('Begin: initExpressApps');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const parentApp = require('./server/web/parent/app')();"}, {"line_number": 5, "line_content": "    const vhost = require('@tryghost/vhost-middleware');"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // Mount the express apps on the parentApp"}, {"line_number": 8, "line_content": "    if (backend) {"}, {"line_number": 9, "line_content": "        // ADMIN + API"}, {"line_number": 10, "line_content": "        const backendApp = require('./server/web/parent/backend')();"}, {"line_number": 11, "line_content": "        parentApp.use(vhost(config.getBackendMountPath(), backendApp));"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    if (frontend) {"}, {"line_number": 15, "line_content": "        // SITE + MEMBERS"}, {"line_number": 16, "line_content": "        const urlService = require('./server/services/url');"}, {"line_number": 17, "line_content": "        const frontendApp = require('./server/web/parent/frontend')({urlService});"}, {"line_number": 18, "line_content": "        parentApp.use(vhost(config.getFrontendMountPath(), frontendApp));"}, {"line_number": 19, "line_content": "    }"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    debug('End: initExpressApps');"}, {"line_number": 22, "line_content": "    return parentApp;"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "async function initDynamicRouting() {"}, {"line_number": 2, "line_content": "    debug('Begin: Dynamic Routing');"}, {"line_number": 3, "line_content": "    const routing = require('./frontend/services/routing');"}, {"line_number": 4, "line_content": "    const routeSettingsService = require('./server/services/route-settings');"}, {"line_number": 5, "line_content": "    const bridge = require('./bridge');"}, {"line_number": 6, "line_content": "    bridge.init();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // We pass the dynamic routes here, so that the frontend services are slightly less tightly-coupled"}, {"line_number": 9, "line_content": "    const routeSettings = await routeSettingsService.loadRouteSettings();"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    routing.routerManager.start(routeSettings);"}, {"line_number": 12, "line_content": "    const getRoutesHash = () => routeSettingsService.api.getCurrentHash();"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    const settings = require('./server/services/settings/settings-service');"}, {"line_number": 15, "line_content": "    await settings.syncRoutesHash(getRoutesHash);"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    debug('End: Dynamic Routing');"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 48, "lines": [{"line_number": 1, "line_content": "async function initServices({config}) {"}, {"line_number": 2, "line_content": "    debug('Begin: initServices');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    debug('Begin: Services');"}, {"line_number": 5, "line_content": "    const stripe = require('./server/services/stripe');"}, {"line_number": 6, "line_content": "    const members = require('./server/services/members');"}, {"line_number": 7, "line_content": "    const permissions = require('./server/services/permissions');"}, {"line_number": 8, "line_content": "    const xmlrpc = require('./server/services/xmlrpc');"}, {"line_number": 9, "line_content": "    const slack = require('./server/services/slack');"}, {"line_number": 10, "line_content": "    const {mega} = require('./server/services/mega');"}, {"line_number": 11, "line_content": "    const webhooks = require('./server/services/webhooks');"}, {"line_number": 12, "line_content": "    const appService = require('./frontend/services/apps');"}, {"line_number": 13, "line_content": "    const limits = require('./server/services/limits');"}, {"line_number": 14, "line_content": "    const apiVersionCompatibility = require('./server/services/api-version-compatibility');"}, {"line_number": 15, "line_content": "    const scheduling = require('./server/adapters/scheduling');"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    const urlUtils = require('./shared/url-utils');"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    // NOTE: limits service has to be initialized first"}, {"line_number": 20, "line_content": "    // in case it limits initialization of any other service (e.g. webhooks)"}, {"line_number": 21, "line_content": "    await limits.init();"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    // NOTE: Members service depends on these"}, {"line_number": 24, "line_content": "    //       so they are initialized before it."}, {"line_number": 25, "line_content": "    await stripe.init();"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "    await Promise.all(["}, {"line_number": 28, "line_content": "        members.init(),"}, {"line_number": 29, "line_content": "        permissions.init(),"}, {"line_number": 30, "line_content": "        xmlrpc.listen(),"}, {"line_number": 31, "line_content": "        slack.listen(),"}, {"line_number": 32, "line_content": "        mega.listen(),"}, {"line_number": 33, "line_content": "        webhooks.listen(),"}, {"line_number": 34, "line_content": "        appService.init(),"}, {"line_number": 35, "line_content": "        apiVersionCompatibility.init(),"}, {"line_number": 36, "line_content": "        scheduling.init({"}, {"line_number": 37, "line_content": "            apiUrl: urlUtils.urlFor('api', {type: 'admin'}, true)"}, {"line_number": 38, "line_content": "        })"}, {"line_number": 39, "line_content": "    ]);"}, {"line_number": 40, "line_content": "    debug('End: Services');"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    // Initialize analytics events"}, {"line_number": 43, "line_content": "    if (config.get('segment:key')) {"}, {"line_number": 44, "line_content": "        require('./server/analytics-events').init();"}, {"line_number": 45, "line_content": "    }"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "    debug('End: initServices');"}, {"line_number": 48, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function initBackgroundServices({config}) {"}, {"line_number": 2, "line_content": "    debug('Begin: initBackgroundServices');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // Load all inactive themes"}, {"line_number": 5, "line_content": "    const themeService = require('./server/services/themes');"}, {"line_number": 6, "line_content": "    themeService.loadInactiveThemes();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // we don't want to kick off background services that will interfere with tests"}, {"line_number": 9, "line_content": "    if (process.env.NODE_ENV.startsWith('test')) {"}, {"line_number": 10, "line_content": "        return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    // Load email analytics recurring jobs"}, {"line_number": 14, "line_content": "    if (config.get('backgroundJobs:emailAnalytics')) {"}, {"line_number": 15, "line_content": "        const emailAnalyticsJobs = require('./server/services/email-analytics/jobs');"}, {"line_number": 16, "line_content": "        await emailAnalyticsJobs.scheduleRecurringJobs();"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const updateCheck = require('./server/update-check');"}, {"line_number": 20, "line_content": "    updateCheck.scheduleRecurringJobs();"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    debug('End: initBackgroundServices');"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 133, "lines": [{"line_number": 1, "line_content": "async function bootGhost({backend = true, frontend = true, server = true} = {}) {"}, {"line_number": 2, "line_content": "    // Metrics"}, {"line_number": 3, "line_content": "    const startTime = Date.now();"}, {"line_number": 4, "line_content": "    debug('Begin Boot');"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // We need access to these variables in both the try and catch block"}, {"line_number": 7, "line_content": "    let bootLogger;"}, {"line_number": 8, "line_content": "    let config;"}, {"line_number": 9, "line_content": "    let ghostServer;"}, {"line_number": 10, "line_content": "    let logging;"}, {"line_number": 11, "line_content": "    let metrics;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    // These require their own try-catch block and error format, because we can't log an error if logging isn't working"}, {"line_number": 14, "line_content": "    try {"}, {"line_number": 15, "line_content": "        // Step 0 - Load config and logging - fundamental required components"}, {"line_number": 16, "line_content": "        // Version is required by logging, sentry & Migration config & so is fundamental to booting"}, {"line_number": 17, "line_content": "        // However, it involves reading package.json so its slow & it's here for visibility on that slowness"}, {"line_number": 18, "line_content": "        debug('Begin: Load version info');"}, {"line_number": 19, "line_content": "        require('@tryghost/version');"}, {"line_number": 20, "line_content": "        debug('End: Load version info');"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "        // Loading config must be the first thing we do, because it is required for absolutely everything"}, {"line_number": 23, "line_content": "        debug('Begin: Load config');"}, {"line_number": 24, "line_content": "        config = require('./shared/config');"}, {"line_number": 25, "line_content": "        debug('End: Load config');"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "        // Logging is also used absolutely everywhere"}, {"line_number": 28, "line_content": "        debug('Begin: Load logging');"}, {"line_number": 29, "line_content": "        logging = require('@tryghost/logging');"}, {"line_number": 30, "line_content": "        metrics = require('@tryghost/metrics');"}, {"line_number": 31, "line_content": "        bootLogger = new BootLogger(logging, metrics, startTime);"}, {"line_number": 32, "line_content": "        debug('End: Load logging');"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "        // At this point logging is required, so we can handle errors better"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "        // Add a process handler to capture and log unhandled rejections"}, {"line_number": 37, "line_content": "        debug('Begin: Add unhandled rejection handler');"}, {"line_number": 38, "line_content": "        process.on('unhandledRejection', (error) => {"}, {"line_number": 39, "line_content": "            logging.error('Unhandled rejection:', error);"}, {"line_number": 40, "line_content": "        });"}, {"line_number": 41, "line_content": "        debug('End: Add unhandled rejection handler');"}, {"line_number": 42, "line_content": "    } catch (error) {"}, {"line_number": 43, "line_content": "        console.error(error); // eslint-disable-line no-console"}, {"line_number": 44, "line_content": "        process.exit(1);"}, {"line_number": 45, "line_content": "    }"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "    try {"}, {"line_number": 48, "line_content": "        // Step 1 - require more fundamental components"}, {"line_number": 49, "line_content": "        // Sentry must be initialized early, but requires config"}, {"line_number": 50, "line_content": "        debug('Begin: Load sentry');"}, {"line_number": 51, "line_content": "        require('./shared/sentry');"}, {"line_number": 52, "line_content": "        debug('End: Load sentry');"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "        // Step 2 - Start server with minimal app in global maintenance mode"}, {"line_number": 55, "line_content": "        debug('Begin: load server + minimal app');"}, {"line_number": 56, "line_content": "        const rootApp = require('./app')();"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "        if (server) {"}, {"line_number": 59, "line_content": "            const GhostServer = require('./server/ghost-server');"}, {"line_number": 60, "line_content": "            ghostServer = new GhostServer({url: config.getSiteUrl(), env: config.get('env'), serverConfig: config.get('server')});"}, {"line_number": 61, "line_content": "            await ghostServer.start(rootApp);"}, {"line_number": 62, "line_content": "            bootLogger.log('server started');"}, {"line_number": 63, "line_content": "            debug('End: load server + minimal app');"}, {"line_number": 64, "line_content": "        }"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "        // Step 3 - Get the DB ready"}, {"line_number": 67, "line_content": "        debug('Begin: Get DB ready');"}, {"line_number": 68, "line_content": "        await initDatabase({config});"}, {"line_number": 69, "line_content": "        bootLogger.log('database ready');"}, {"line_number": 70, "line_content": "        debug('End: Get DB ready');"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "        // Step 4 - Load Ghost with all its services"}, {"line_number": 73, "line_content": "        debug('Begin: Load Ghost Services & Apps');"}, {"line_number": 74, "line_content": "        await initCore({ghostServer, config, bootLogger, frontend});"}, {"line_number": 75, "line_content": "        const {dataService} = await initServicesForFrontend({bootLogger});"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "        if (frontend) {"}, {"line_number": 78, "line_content": "            await initFrontend(dataService);"}, {"line_number": 79, "line_content": "        }"}, {"line_number": 80, "line_content": "        const ghostApp = await initExpressApps({frontend, backend, config});"}, {"line_number": 81, "line_content": ""}, {"line_number": 82, "line_content": "        if (frontend) {"}, {"line_number": 83, "line_content": "            await initDynamicRouting();"}, {"line_number": 84, "line_content": "        }"}, {"line_number": 85, "line_content": ""}, {"line_number": 86, "line_content": "        await initServices({config});"}, {"line_number": 87, "line_content": "        debug('End: Load Ghost Services & Apps');"}, {"line_number": 88, "line_content": ""}, {"line_number": 89, "line_content": "        // Step 5 - Mount the full Ghost app onto the minimal root app & disable maintenance mode"}, {"line_number": 90, "line_content": "        debug('Begin: mountGhost');"}, {"line_number": 91, "line_content": "        rootApp.disable('maintenance');"}, {"line_number": 92, "line_content": "        rootApp.use(config.getSubdir(), ghostApp);"}, {"line_number": 93, "line_content": "        debug('End: mountGhost');"}, {"line_number": 94, "line_content": ""}, {"line_number": 95, "line_content": "        // Step 6 - We are technically done here - let everyone know!"}, {"line_number": 96, "line_content": "        bootLogger.log('booted');"}, {"line_number": 97, "line_content": "        bootLogger.metric('boot-time');"}, {"line_number": 98, "line_content": "        notifyServerReady();"}, {"line_number": 99, "line_content": ""}, {"line_number": 100, "line_content": "        // Step 7 - Init our background services, we don't wait for this to finish"}, {"line_number": 101, "line_content": "        initBackgroundServices({config});"}, {"line_number": 102, "line_content": ""}, {"line_number": 103, "line_content": "        // We return the server purely for testing purposes"}, {"line_number": 104, "line_content": "        if (server) {"}, {"line_number": 105, "line_content": "            debug('End Boot: Returning Ghost Server');"}, {"line_number": 106, "line_content": "            return ghostServer;"}, {"line_number": 107, "line_content": "        } else {"}, {"line_number": 108, "line_content": "            debug('End boot: Returning Root App');"}, {"line_number": 109, "line_content": "            return rootApp;"}, {"line_number": 110, "line_content": "        }"}, {"line_number": 111, "line_content": "    } catch (error) {"}, {"line_number": 112, "line_content": "        const errors = require('@tryghost/errors');"}, {"line_number": 113, "line_content": ""}, {"line_number": 114, "line_content": "        // Ensure the error we have is an ignition error"}, {"line_number": 115, "line_content": "        let serverStartError = error;"}, {"line_number": 116, "line_content": "        if (!errors.utils.isGhostError(serverStartError)) {"}, {"line_number": 117, "line_content": "            serverStartError = new errors.InternalServerError({message: serverStartError.message, err: serverStartError});"}, {"line_number": 118, "line_content": "        }"}, {"line_number": 119, "line_content": ""}, {"line_number": 120, "line_content": "        logging.error(serverStartError);"}, {"line_number": 121, "line_content": ""}, {"line_number": 122, "line_content": "        // If ghost was started and something else went wrong, we shut it down"}, {"line_number": 123, "line_content": "        if (ghostServer) {"}, {"line_number": 124, "line_content": "            notifyServerReady(serverStartError);"}, {"line_number": 125, "line_content": "            ghostServer.shutdown(2);"}, {"line_number": 126, "line_content": "        } else {"}, {"line_number": 127, "line_content": "            // Ghost server failed to start, set a timeout to give logging a chance to flush"}, {"line_number": 128, "line_content": "            setTimeout(() => {"}, {"line_number": 129, "line_content": "                process.exit(2);"}, {"line_number": 130, "line_content": "            }, 100);"}, {"line_number": 131, "line_content": "        }"}, {"line_number": 132, "line_content": "    }"}, {"line_number": 133, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function SiteRouter(req, res, next) {"}, {"line_number": 2, "line_content": "    router(req, res, next);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function corsOptionsDelegate(req, callback) {"}, {"line_number": 2, "line_content": "    const origin = req.header('Origin');"}, {"line_number": 3, "line_content": "    const corsOptions = {"}, {"line_number": 4, "line_content": "        origin: false, // disallow cross-origin requests by default"}, {"line_number": 5, "line_content": "        credentials: true // required to allow admin-client to login to private sites"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!origin || origin === 'null') {"}, {"line_number": 9, "line_content": "        return callback(null, corsOptions);"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    let originUrl;"}, {"line_number": 13, "line_content": "    try {"}, {"line_number": 14, "line_content": "        originUrl = new URL(origin);"}, {"line_number": 15, "line_content": "    } catch (err) {"}, {"line_number": 16, "line_content": "        return callback(new errors.BadRequestError({err}));"}, {"line_number": 17, "line_content": "    }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    // originUrl will definitely exist here because according to WHATWG URL spec"}, {"line_number": 20, "line_content": "    // The class constructor will either throw a TypeError or return a URL object"}, {"line_number": 21, "line_content": "    // https://url.spec.whatwg.org/#url-class"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    // allow all localhost and 127.0.0.1 requests no matter the port"}, {"line_number": 24, "line_content": "    if (originUrl.hostname === 'localhost' || originUrl.hostname === '127.0.0.1') {"}, {"line_number": 25, "line_content": "        corsOptions.origin = true;"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // allow the configured host through on any protocol"}, {"line_number": 29, "line_content": "    const siteUrl = new URL(config.get('url'));"}, {"line_number": 30, "line_content": "    if (originUrl.host === siteUrl.host) {"}, {"line_number": 31, "line_content": "        corsOptions.origin = true;"}, {"line_number": 32, "line_content": "    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    // allow the configured admin:url host through on any protocol"}, {"line_number": 35, "line_content": "    if (config.get('admin:url')) {"}, {"line_number": 36, "line_content": "        const adminUrl = new URL(config.get('admin:url'));"}, {"line_number": 37, "line_content": "        if (originUrl.host === adminUrl.host) {"}, {"line_number": 38, "line_content": "            corsOptions.origin = true;"}, {"line_number": 39, "line_content": "        }"}, {"line_number": 40, "line_content": "    }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    callback(null, corsOptions);"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 44, "lines": [{"line_number": 1, "line_content": "function serveFavicon() {"}, {"line_number": 2, "line_content": "    let filePath;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    return function serveFaviconMiddleware(req, res, next) {"}, {"line_number": 5, "line_content": "        if (req.path.match(/^\\/favicon\\.(ico|png|jpe?g)/i)) {"}, {"line_number": 6, "line_content": "            // CASE: favicon is default"}, {"line_number": 7, "line_content": "            // confusing: if you upload an icon, it's same logic as storing images"}, {"line_number": 8, "line_content": "            // we store as /content/images, because this is the url path images get requested via the browser"}, {"line_number": 9, "line_content": "            // we are using an express route to skip /content/images and the result is a image path"}, {"line_number": 10, "line_content": "            // based on config.getContentPath('images') + req.path"}, {"line_number": 11, "line_content": "            // in this case we don't use path rewrite, that's why we have to make it manually"}, {"line_number": 12, "line_content": "            filePath = blogIcon.getIconPath();"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "            let originalExtension = path.extname(filePath).toLowerCase();"}, {"line_number": 15, "line_content": "            const requestedExtension = path.extname(req.path).toLowerCase();"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "            // CASE: custom favicon exists, load it from local file storage"}, {"line_number": 18, "line_content": "            if (settingsCache.get('icon')) {"}, {"line_number": 19, "line_content": "                // Always redirect to the icon path, which is never favicon.xxx"}, {"line_number": 20, "line_content": "                return res.redirect(302, blogIcon.getIconUrl());"}, {"line_number": 21, "line_content": "            } else {"}, {"line_number": 22, "line_content": "                originalExtension = path.extname(filePath).toLowerCase();"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "                // CASE: always redirect to .ico for default icon"}, {"line_number": 25, "line_content": "                if (originalExtension !== requestedExtension) {"}, {"line_number": 26, "line_content": "                    return res.redirect(302, urlUtils.urlFor({relativeUrl: '/favicon.ico'}));"}, {"line_number": 27, "line_content": "                }"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "                fs.readFile(filePath, (err, buf) => {"}, {"line_number": 30, "line_content": "                    if (err) {"}, {"line_number": 31, "line_content": "                        return next(err);"}, {"line_number": 32, "line_content": "                    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "                    content = buildContentResponse('x-icon', buf);"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "                    res.writeHead(200, content.headers);"}, {"line_number": 37, "line_content": "                    res.end(content.body);"}, {"line_number": 38, "line_content": "                });"}, {"line_number": 39, "line_content": "            }"}, {"line_number": 40, "line_content": "        } else {"}, {"line_number": 41, "line_content": "            return next();"}, {"line_number": 42, "line_content": "        }"}, {"line_number": 43, "line_content": "    };"}, {"line_number": 44, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function isDeniedFile(file) {"}, {"line_number": 2, "line_content": "    const deniedFileTypes = ['.hbs', '.md', '.json', '.lock', '.log'];"}, {"line_number": 3, "line_content": "    const deniedFiles = ['gulpfile.js', 'gruntfile.js'];"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const ext = path.extname(file);"}, {"line_number": 6, "line_content": "    const base = path.basename(file);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return deniedFiles.includes(base) || deniedFileTypes.includes(ext);"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function isAllowedFile(file) {"}, {"line_number": 2, "line_content": "    const allowedFiles = ['manifest.json'];"}, {"line_number": 3, "line_content": "    const allowedPath = '/assets/';"}, {"line_number": 4, "line_content": "    const alwaysDeny = ['.hbs'];"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const ext = path.extname(file);"}, {"line_number": 7, "line_content": "    const base = path.basename(file);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return allowedFiles.includes(base) || (file.startsWith(allowedPath) && !alwaysDeny.includes(ext));"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function forwardToExpressStatic(req, res, next) {"}, {"line_number": 2, "line_content": "    if (!themeEngine.getActive()) {"}, {"line_number": 3, "line_content": "        return next();"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const configMaxAge = config.get('caching:theme:maxAge');"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    express.static(themeEngine.getActive().path, {"}, {"line_number": 9, "line_content": "        maxAge: (configMaxAge || configMaxAge === 0) ? configMaxAge : constants.ONE_YEAR_MS"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": "    )(req, res, next);"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function staticTheme() {"}, {"line_number": 2, "line_content": "    return function denyStatic(req, res, next) {"}, {"line_number": 3, "line_content": "        if (!isAllowedFile(req.path.toLowerCase()) && isDeniedFile(req.path.toLowerCase())) {"}, {"line_number": 4, "line_content": "            return next();"}, {"line_number": 5, "line_content": "        }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        return forwardToExpressStatic(req, res, next);"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function matchCacheKey(req, cache) {"}, {"line_number": 2, "line_content": "    if (req.query && req.query.v && cache && cache.key) {"}, {"line_number": 3, "line_content": "        return req.query.v === cache.key;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return true;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 72, "lines": [{"line_number": 1, "line_content": "function createPublicFileMiddleware(location, file, mime, maxAge) {"}, {"line_number": 2, "line_content": "    let cache;"}, {"line_number": 3, "line_content": "    // These files are provided by Ghost, and therefore live inside of the core folder"}, {"line_number": 4, "line_content": "    const staticFilePath = config.get('paths').publicFilePath;"}, {"line_number": 5, "line_content": "    // These files are built on the fly, and must be saved in the content folder"}, {"line_number": 6, "line_content": "    const builtFilePath = config.getContentPath('public');"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    let locationPath = location === 'static' ? staticFilePath : builtFilePath;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const filePath = file.match(/^public/) ? path.join(locationPath, file.replace(/^public/, '')) : path.join(locationPath, file);"}, {"line_number": 11, "line_content": "    const blogRegex = /(\\{\\{blog-url\\}\\})/g;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    return function servePublicFileMiddleware(req, res, next) {"}, {"line_number": 14, "line_content": "        if (cache && matchCacheKey(req, cache)) {"}, {"line_number": 15, "line_content": "            res.writeHead(200, cache.headers);"}, {"line_number": 16, "line_content": "            return res.end(cache.body);"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "        // send image files directly and let express handle content-length, etag, etc"}, {"line_number": 20, "line_content": "        if (mime.match(/^image/)) {"}, {"line_number": 21, "line_content": "            return res.sendFile(filePath, (err) => {"}, {"line_number": 22, "line_content": "                if (err && err.status === 404) {"}, {"line_number": 23, "line_content": "                    // ensure we're triggering basic asset 404 and not a templated 404"}, {"line_number": 24, "line_content": "                    return next(new errors.NotFoundError({"}, {"line_number": 25, "line_content": "                        message: tpl(messages.imageNotFound),"}, {"line_number": 26, "line_content": "                        code: 'STATIC_FILE_NOT_FOUND',"}, {"line_number": 27, "line_content": "                        property: err.path"}, {"line_number": 28, "line_content": "                    }));"}, {"line_number": 29, "line_content": "                }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "                if (err) {"}, {"line_number": 32, "line_content": "                    return next(err);"}, {"line_number": 33, "line_content": "                }"}, {"line_number": 34, "line_content": "            });"}, {"line_number": 35, "line_content": "        }"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "        // modify text files before caching+serving to ensure URL placeholders are transformed"}, {"line_number": 38, "line_content": "        fs.readFile(filePath, (err, buf) => {"}, {"line_number": 39, "line_content": "            if (err) {"}, {"line_number": 40, "line_content": "                // Downgrade to a simple 404 if the file didn't exist"}, {"line_number": 41, "line_content": "                if (err.code === 'ENOENT') {"}, {"line_number": 42, "line_content": "                    err = new errors.NotFoundError({"}, {"line_number": 43, "line_content": "                        message: tpl(messages.fileNotFound),"}, {"line_number": 44, "line_content": "                        code: 'PUBLIC_FILE_NOT_FOUND',"}, {"line_number": 45, "line_content": "                        property: err.path"}, {"line_number": 46, "line_content": "                    });"}, {"line_number": 47, "line_content": "                }"}, {"line_number": 48, "line_content": "                return next(err);"}, {"line_number": 49, "line_content": "            }"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "            let str = buf.toString();"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "            if (mime === 'text/xsl' || mime === 'text/plain' || mime === 'application/javascript') {"}, {"line_number": 54, "line_content": "                str = str.replace(blogRegex, urlUtils.urlFor('home', true).replace(/\\/$/, ''));"}, {"line_number": 55, "line_content": "            }"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "            cache = {"}, {"line_number": 58, "line_content": "                headers: {"}, {"line_number": 59, "line_content": "                    'Content-Type': mime,"}, {"line_number": 60, "line_content": "                    'Content-Length': Buffer.from(str).length,"}, {"line_number": 61, "line_content": "                    ETag: `\"${crypto.createHash('md5').update(str, 'utf8').digest('hex')}\"`,"}, {"line_number": 62, "line_content": "                    'Cache-Control': `public, max-age=${maxAge}`"}, {"line_number": 63, "line_content": "                },"}, {"line_number": 64, "line_content": "                body: str,"}, {"line_number": 65, "line_content": "                key: req.query && req.query.v ? req.query.v : null"}, {"line_number": 66, "line_content": "            };"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "            res.writeHead(200, cache.headers);"}, {"line_number": 69, "line_content": "            res.end(cache.body);"}, {"line_number": 70, "line_content": "        });"}, {"line_number": 71, "line_content": "    };"}, {"line_number": 72, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function servePublicFile(location, file, type, maxAge) {"}, {"line_number": 2, "line_content": "    const publicFileMiddleware = createPublicFileMiddleware(location, file, type, maxAge);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    return function servePublicFileMiddleware(req, res, next) {"}, {"line_number": 5, "line_content": "        if (req.path === '/' + file) {"}, {"line_number": 6, "line_content": "            return publicFileMiddleware(req, res, next);"}, {"line_number": 7, "line_content": "        } else {"}, {"line_number": 8, "line_content": "            return next();"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": "    };"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function execIteration(field, index, last) {"}, {"line_number": 2, "line_content": "        if (frame) {"}, {"line_number": 3, "line_content": "            frame.key = field;"}, {"line_number": 4, "line_content": "            frame.index = index;"}, {"line_number": 5, "line_content": "            frame.number = index + 1;"}, {"line_number": 6, "line_content": "            frame.first = index === from - 1; // From uses 1-indexed, but array uses 0-indexed"}, {"line_number": 7, "line_content": "            frame.last = !!last;"}, {"line_number": 8, "line_content": "            frame.even = index % 2 === 1;"}, {"line_number": 9, "line_content": "            frame.odd = !frame.even;"}, {"line_number": 10, "line_content": "            frame.rowStart = index % columns === 0;"}, {"line_number": 11, "line_content": "            frame.rowEnd = index % columns === (columns - 1);"}, {"line_number": 12, "line_content": "            if (contextPath) {"}, {"line_number": 13, "line_content": "                frame.contextPath = contextPath + field;"}, {"line_number": 14, "line_content": "            }"}, {"line_number": 15, "line_content": "        }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "        output = output + fn(items[field], {"}, {"line_number": 18, "line_content": "            data: frame,"}, {"line_number": 19, "line_content": "            blockParams: hbsUtils.blockParams([items[field], field], [contextPath + field, null])"}, {"line_number": 20, "line_content": "        });"}, {"line_number": 21, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function iterateCollection(context) {"}, {"line_number": 2, "line_content": "        // Context is all posts on the blog"}, {"line_number": 3, "line_content": "        let current = 1;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        // For each post, if it is a post number that fits within the from and to"}, {"line_number": 6, "line_content": "        // send the key to execIteration to set to be added to the page"}, {"line_number": 7, "line_content": "        _.each(context, (value, key) => {"}, {"line_number": 8, "line_content": "            if (current < from) {"}, {"line_number": 9, "line_content": "                current += 1;"}, {"line_number": 10, "line_content": "                return;"}, {"line_number": 11, "line_content": "            }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "            if (current <= to) {"}, {"line_number": 14, "line_content": "                execIteration(key, current - 1, current === to);"}, {"line_number": 15, "line_content": "            }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "            current += 1;"}, {"line_number": 18, "line_content": "        });"}, {"line_number": 19, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function createTagList(tagsList) {"}, {"line_number": 2, "line_content": "        function processTag(tag) {"}, {"line_number": 3, "line_content": "            return autolink ? templates.link({"}, {"line_number": 4, "line_content": "                url: urlService.getUrlByResourceId(tag.id, {withSubdirectory: true}),"}, {"line_number": 5, "line_content": "                text: escapeExpression(tag.name)"}, {"line_number": 6, "line_content": "            }) : escapeExpression(tag.name);"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        return ghostHelperUtils.visibility.filter(tagsList, options.hash.visibility, processTag);"}, {"line_number": 10, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function processTag(tag) {"}, {"line_number": 2, "line_content": "            return autolink ? templates.link({"}, {"line_number": 3, "line_content": "                url: urlService.getUrlByResourceId(tag.id, {withSubdirectory: true}),"}, {"line_number": 4, "line_content": "                text: escapeExpression(tag.name)"}, {"line_number": 5, "line_content": "            }) : escapeExpression(tag.name);"}, {"line_number": 6, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function restrictedCta(options) {"}, {"line_number": 2, "line_content": "    options = options || {};"}, {"line_number": 3, "line_content": "    options.data = options.data || {};"}, {"line_number": 4, "line_content": "    _.merge(this, {"}, {"line_number": 5, "line_content": "        accentColor: (options.data.site && options.data.site.accent_color)"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": "    const data = createFrame(options.data);"}, {"line_number": 8, "line_content": "    return templates.execute('content-cta', this, {data});"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function isBrowse(options) {"}, {"line_number": 2, "line_content": "    let browse = true;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (options.id || options.slug) {"}, {"line_number": 5, "line_content": "        browse = false;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return browse;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function parseOptions(globals, data, options) {"}, {"line_number": 2, "line_content": "    if (_.isString(options.filter)) {"}, {"line_number": 3, "line_content": "        options.filter = resolvePaths(globals, data, options.filter);"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (options.limit === 'all' && config.get('getHelperLimitAllMax')) {"}, {"line_number": 7, "line_content": "        options.limit = config.get('getHelperLimitAllMax');"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return options;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "function resolvePaths(globals, data, value) {"}, {"line_number": 2, "line_content": "    const regex = /\\{\\{(.*?)\\}\\}/g;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    value = value.replace(regex, function (match, path) {"}, {"line_number": 5, "line_content": "        let result;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        // Handle aliases"}, {"line_number": 8, "line_content": "        path = pathAliases[path] ? pathAliases[path] : path;"}, {"line_number": 9, "line_content": "        // Handle Handlebars .[] style arrays"}, {"line_number": 10, "line_content": "        path = path.replace(/\\.\\[/g, '[');"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        if (path.charAt(0) === '@') {"}, {"line_number": 13, "line_content": "            result = jsonpath.query(globals, path.slice(1));"}, {"line_number": 14, "line_content": "        } else {"}, {"line_number": 15, "line_content": "            // Do the query, which always returns an array of matches"}, {"line_number": 16, "line_content": "            result = jsonpath.query(data, path);"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "        // Handle the case where the single data property we return is a Date"}, {"line_number": 20, "line_content": "        // Data.toString() is not DB compatible, so use `toISOString()` instead"}, {"line_number": 21, "line_content": "        if (_.isDate(result[0])) {"}, {"line_number": 22, "line_content": "            result[0] = result[0].toISOString();"}, {"line_number": 23, "line_content": "        }"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "        // Concatenate the results with a comma, handles common case of multiple tag slugs"}, {"line_number": 26, "line_content": "        return result.join(',');"}, {"line_number": 27, "line_content": "    });"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    return value;"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function _isCurrentUrl(href, url) {"}, {"line_number": 2, "line_content": "        if (!url) {"}, {"line_number": 3, "line_content": "            return false;"}, {"line_number": 4, "line_content": "        }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        const strippedHref = href.replace(/\\/+$/, '');"}, {"line_number": 7, "line_content": "        const strippedCurrentUrl = url.replace(/\\/+$/, '');"}, {"line_number": 8, "line_content": "        return strippedHref === strippedCurrentUrl;"}, {"line_number": 9, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function cancel_link(options) { // eslint-disable-line camelcase"}, {"line_number": 2, "line_content": "    let truncateOptions = (options || {}).hash || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (this.id === undefined || this.cancel_at_period_end === undefined) {"}, {"line_number": 5, "line_content": "        throw new errors.IncorrectUsageError({message: tpl(messages.invalidData)});"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const data = {"}, {"line_number": 9, "line_content": "        id: this.id,"}, {"line_number": 10, "line_content": "        cancel_at_period_end: this.cancel_at_period_end,"}, {"line_number": 11, "line_content": "        class: truncateOptions.class || 'gh-subscription-cancel',"}, {"line_number": 12, "line_content": "        errorClass: truncateOptions.errorClass || 'gh-error gh-error-subscription-cancel',"}, {"line_number": 13, "line_content": "        cancelLabel: truncateOptions.cancelLabel || 'Cancel subscription',"}, {"line_number": 14, "line_content": "        continueLabel: truncateOptions.continueLabel || 'Continue subscription'"}, {"line_number": 15, "line_content": "    };"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return templates.execute('cancel_link', data);"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function evaluateContext(expr) {"}, {"line_number": 2, "line_content": "        return expr.split(',').map(function (v) {"}, {"line_number": 3, "line_content": "            return v.trim();"}, {"line_number": 4, "line_content": "        }).reduce(function (p, c) {"}, {"line_number": 5, "line_content": "            return p || _.includes(currentContext, c);"}, {"line_number": 6, "line_content": "        }, false);"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function handleCount(ctxAttr, data) {"}, {"line_number": 2, "line_content": "    if (!data || !_.isFinite(data.length)) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    let count;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (ctxAttr.match(/count:\\d+/)) {"}, {"line_number": 8, "line_content": "        count = Number(ctxAttr.match(/count:(\\d+)/)[1]);"}, {"line_number": 9, "line_content": "        return count === data.length;"}, {"line_number": 10, "line_content": "    } else if (ctxAttr.match(/count:>\\d/)) {"}, {"line_number": 11, "line_content": "        count = Number(ctxAttr.match(/count:>(\\d+)/)[1]);"}, {"line_number": 12, "line_content": "        return count < data.length;"}, {"line_number": 13, "line_content": "    } else if (ctxAttr.match(/count:<\\d/)) {"}, {"line_number": 14, "line_content": "        count = Number(ctxAttr.match(/count:<(\\d+)/)[1]);"}, {"line_number": 15, "line_content": "        return count > data.length;"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    return false;"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function handleTag(data, attrs) {"}, {"line_number": 2, "line_content": "    if (!attrs.tag) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (attrs.tag.match(/count:/)) {"}, {"line_number": 7, "line_content": "        return handleCount(attrs.tag, data.tags);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return evaluateTagList(attrs.tag, _.map(data.tags, 'name')) || false;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function evaluateAuthorList(expr, authors) {"}, {"line_number": 2, "line_content": "    const authorList = expr.split(',').map(function (v) {"}, {"line_number": 3, "line_content": "        return v.trim().toLocaleLowerCase();"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return _.filter(authors, (author) => {"}, {"line_number": 7, "line_content": "        return _.includes(authorList, author.name.toLocaleLowerCase());"}, {"line_number": 8, "line_content": "    }).length;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function handleAuthor(data, attrs) {"}, {"line_number": 2, "line_content": "    if (!attrs.author) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (attrs.author.match(/count:/)) {"}, {"line_number": 7, "line_content": "        return handleCount(attrs.author, data.authors);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return evaluateAuthorList(attrs.author, data.authors) || false;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function evaluateTagList(expr, tags) {"}, {"line_number": 2, "line_content": "    return expr.split(',').map(function (v) {"}, {"line_number": 3, "line_content": "        return v.trim();"}, {"line_number": 4, "line_content": "    }).reduce(function (p, c) {"}, {"line_number": 5, "line_content": "        return p || (_.findIndex(tags, function (item) {"}, {"line_number": 6, "line_content": "            // Escape regex special characters"}, {"line_number": 7, "line_content": "            item = item.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');"}, {"line_number": 8, "line_content": "            item = new RegExp('^' + item + '$', 'i');"}, {"line_number": 9, "line_content": "            return item.test(c);"}, {"line_number": 10, "line_content": "        }) !== -1);"}, {"line_number": 11, "line_content": "    }, false);"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function evaluateIntegerMatch(expr, integer) {"}, {"line_number": 2, "line_content": "    const nthMatch = expr.match(/^nth:(\\d+)/);"}, {"line_number": 3, "line_content": "    if (nthMatch) {"}, {"line_number": 4, "line_content": "        return integer % parseInt(nthMatch[1], 10) === 0;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    return expr.split(',').reduce(function (bool, _integer) {"}, {"line_number": 8, "line_content": "        return bool || parseInt(_integer, 10) === integer;"}, {"line_number": 9, "line_content": "    }, false);"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function evaluateStringMatch(expr, str, ci) {"}, {"line_number": 2, "line_content": "    if (ci) {"}, {"line_number": 3, "line_content": "        return expr && str && expr.toLocaleLowerCase() === str.toLocaleLowerCase();"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return expr === str;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function evaluateList(type, expr, obj, data) {"}, {"line_number": 2, "line_content": "    return expr.split(',').map(function (prop) {"}, {"line_number": 3, "line_content": "        return prop.trim().toLocaleLowerCase();"}, {"line_number": 4, "line_content": "    })[type](function (prop) {"}, {"line_number": 5, "line_content": "        if (prop.match(/^@/)) {"}, {"line_number": 6, "line_content": "            return _.has(data, prop.replace(/@/, '')) && !_.isEmpty(_.get(data, prop.replace(/@/, '')));"}, {"line_number": 7, "line_content": "        } else {"}, {"line_number": 8, "line_content": "            return _.has(obj, prop) && !_.isEmpty(_.get(obj, prop));"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": "    });"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function applyImageSizes(image) {"}, {"line_number": 2, "line_content": "        return getImageWithSize(image, requestedSize, imageSizes);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getImageUrl(image) {"}, {"line_number": 2, "line_content": "        return urlUtils.urlFor('image', {image}, absoluteUrlRequested);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function ensureRelativePath(image) {"}, {"line_number": 2, "line_content": "        return urlUtils.absoluteToRelative(image);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getAbsoluteOption(options) {"}, {"line_number": 2, "line_content": "    const absoluteOption = options && options.hash && options.hash.absolute;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    return absoluteOption ? !!absoluteOption && absoluteOption !== 'false' : false;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getImageSizeOptions(options) {"}, {"line_number": 2, "line_content": "    const requestedSize = options && options.hash && options.hash.size;"}, {"line_number": 3, "line_content": "    const imageSizes = options && options.data && options.data.config && options.data.config.image_sizes;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    return {"}, {"line_number": 6, "line_content": "        requestedSize,"}, {"line_number": 7, "line_content": "        imageSizes"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function detectInternalImage(requestedImageUrl) {"}, {"line_number": 2, "line_content": "    const siteUrl = urlUtils.getSiteUrl();"}, {"line_number": 3, "line_content": "    const isAbsoluteImage = /https?:\\/\\//.test(requestedImageUrl);"}, {"line_number": 4, "line_content": "    const isAbsoluteInternalImage = isAbsoluteImage && requestedImageUrl.startsWith(siteUrl);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // CASE: imagePath is a \"protocol relative\" url e.g. \"//www.gravatar.com/ava...\""}, {"line_number": 7, "line_content": "    //       by resolving the the imagePath relative to the blog url, we can then"}, {"line_number": 8, "line_content": "    //       detect if the imagePath is external, or internal."}, {"line_number": 9, "line_content": "    const isRelativeInternalImage = !isAbsoluteImage && url.resolve(siteUrl, requestedImageUrl).startsWith(siteUrl);"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    return isAbsoluteInternalImage || isRelativeInternalImage;"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function getImageWithSize(imagePath, requestedSize, imageSizes) {"}, {"line_number": 2, "line_content": "    const hasLeadingSlash = imagePath[0] === '/';"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (hasLeadingSlash) {"}, {"line_number": 5, "line_content": "        return '/' + getImageWithSize(imagePath.slice(1), requestedSize, imageSizes);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (!requestedSize) {"}, {"line_number": 9, "line_content": "        return imagePath;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (!imageSizes || !imageSizes[requestedSize]) {"}, {"line_number": 13, "line_content": "        return imagePath;"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    const {width, height} = imageSizes[requestedSize];"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    if (!width && !height) {"}, {"line_number": 19, "line_content": "        return imagePath;"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    const [imgBlogUrl, imageName] = imagePath.split(STATIC_IMAGE_URL_PREFIX);"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    const sizeDirectoryName = prefixIfPresent('w', width) + prefixIfPresent('h', height);"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    return [imgBlogUrl, STATIC_IMAGE_URL_PREFIX, `/size/${sizeDirectoryName}`, imageName].join('');"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function prefixIfPresent(prefix, string) {"}, {"line_number": 2, "line_content": "    return string ? prefix + string : '';"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function createAuthorsList(authorsList) {"}, {"line_number": 2, "line_content": "        function processAuthor(author) {"}, {"line_number": 3, "line_content": "            return autolink ? templates.link({"}, {"line_number": 4, "line_content": "                url: urlService.getUrlByResourceId(author.id, {withSubdirectory: true}),"}, {"line_number": 5, "line_content": "                text: escapeExpression(author.name)"}, {"line_number": 6, "line_content": "            }) : escapeExpression(author.name);"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        return utils.visibility.filter(authorsList, visibility, processAuthor);"}, {"line_number": 10, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function processAuthor(author) {"}, {"line_number": 2, "line_content": "            return autolink ? templates.link({"}, {"line_number": 3, "line_content": "                url: urlService.getUrlByResourceId(author.id, {withSubdirectory: true}),"}, {"line_number": 4, "line_content": "                text: escapeExpression(author.name)"}, {"line_number": 5, "line_content": "            }) : escapeExpression(author.name);"}, {"line_number": 6, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function _formatAttrs(attributes) {"}, {"line_number": 2, "line_content": "    let attributeString = '';"}, {"line_number": 3, "line_content": "    Object.keys(attributes).forEach((key) => {"}, {"line_number": 4, "line_content": "        let value = attributes[key];"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        // @TODO handle non-string attributes?"}, {"line_number": 7, "line_content": "        attributeString += `${key}=\"${value}\"`;"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return attributeString;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function isEmptyValue(value) {"}, {"line_number": 2, "line_content": "    if (!value && value !== 0) {"}, {"line_number": 3, "line_content": "        return true;"}, {"line_number": 4, "line_content": "    } else if (Array.isArray(value) && value.length === 0) {"}, {"line_number": 5, "line_content": "        return true;"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "        return false;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function formatter({amount, currency, numberFormat = 'short', currencyFormat = 'symbol', locale}) {"}, {"line_number": 2, "line_content": "    const formatterOptions = {"}, {"line_number": 3, "line_content": "        style: 'currency',"}, {"line_number": 4, "line_content": "        currency: currency,"}, {"line_number": 5, "line_content": "        currencyDisplay: currencyFormat"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": "    if (numberFormat === 'short') {"}, {"line_number": 8, "line_content": "        formatterOptions.minimumFractionDigits = 0;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    if (_.isNumber(amount)) {"}, {"line_number": 11, "line_content": "        return new Intl.NumberFormat(locale, formatterOptions).format(amount);"}, {"line_number": 12, "line_content": "    } else {"}, {"line_number": 13, "line_content": "        const val = new Intl.NumberFormat('en', {"}, {"line_number": 14, "line_content": "            style: 'currency',"}, {"line_number": 15, "line_content": "            currency,"}, {"line_number": 16, "line_content": "            currencyDisplay: 'symbol',"}, {"line_number": 17, "line_content": "            minimumFractionDigits: 0,"}, {"line_number": 18, "line_content": "            maximumFractionDigits: 0"}, {"line_number": 19, "line_content": "        }).format(0);"}, {"line_number": 20, "line_content": "        return val.replace(/[\\d\\s.,]/g, '');"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function writeMetaTag(property, content, type) {"}, {"line_number": 2, "line_content": "    type = type || property.substring(0, 7) === 'twitter' ? 'name' : 'property';"}, {"line_number": 3, "line_content": "    return '<meta ' + type + '=\"' + property + '\" content=\"' + content + '\" />';"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function finaliseStructuredData(meta) {"}, {"line_number": 2, "line_content": "    const head = [];"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    _.each(meta.structuredData, function (content, property) {"}, {"line_number": 5, "line_content": "        if (property === 'article:tag') {"}, {"line_number": 6, "line_content": "            _.each(meta.keywords, function (keyword) {"}, {"line_number": 7, "line_content": "                if (keyword !== '') {"}, {"line_number": 8, "line_content": "                    keyword = escapeExpression(keyword);"}, {"line_number": 9, "line_content": "                    head.push(writeMetaTag(property,"}, {"line_number": 10, "line_content": "                        escapeExpression(keyword)));"}, {"line_number": 11, "line_content": "                }"}, {"line_number": 12, "line_content": "            });"}, {"line_number": 13, "line_content": "            head.push('');"}, {"line_number": 14, "line_content": "        } else if (content !== null && content !== undefined) {"}, {"line_number": 15, "line_content": "            head.push(writeMetaTag(property,"}, {"line_number": 16, "line_content": "                escapeExpression(content)));"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": "    });"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    return head;"}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getMembersHelper(data, frontendKey) {"}, {"line_number": 2, "line_content": "    if (!settingsCache.get('members_enabled')) {"}, {"line_number": 3, "line_content": "        return '';"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const colorString = _.has(data, 'site._preview') && data.site.accent_color ? ` data-accent-color=\"${data.site.accent_color}\"` : '';"}, {"line_number": 7, "line_content": "    let membersHelper = `<script defer src=\"${config.get('portal:url')}\" data-ghost=\"${urlUtils.getSiteUrl()}\"${colorString} data-key=\"${frontendKey}\" data-api=\"${urlUtils.urlFor('api', {type: 'content'}, true)}\" crossorigin=\"anonymous\"></script>`;"}, {"line_number": 8, "line_content": "    membersHelper += (`<style id=\"gh-members-styles\">${templateStyles}</style>`);"}, {"line_number": 9, "line_content": "    if (settingsCache.get('paid_members_enabled')) {"}, {"line_number": 10, "line_content": "        membersHelper += '<script async src=\"https://js.stripe.com/v3/\"></script>';"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "    return membersHelper;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function updateSlider() {"}, {"line_number": 2, "line_content": "            overlay.setAttribute('style', `width: ${input.value}%`);"}, {"line_number": 3, "line_content": "            button.setAttribute('style', `left: calc(${input.value}% - 18px`);"}, {"line_number": 4, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function updateDimensions() {"}, {"line_number": 2, "line_content": "            const imageWidth = getComputedStyle(images[0]).getPropertyValue('width');"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            images[1].setAttribute('style', `width: ${imageWidth}`);"}, {"line_number": 5, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function ampRouter(req, res) {"}, {"line_number": 2, "line_content": "    if (settingsCache.get('amp') === true) {"}, {"line_number": 3, "line_content": "        return router.apply(this, arguments);"}, {"line_number": 4, "line_content": "    } else {"}, {"line_number": 5, "line_content": "        // routeKeywords.amp: 'amp'"}, {"line_number": 6, "line_content": "        let redirectUrl = req.originalUrl.replace(/\\/amp\\//, '/');"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "        urlUtils.redirect301(res, redirectUrl);"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "function ampComponents() {"}, {"line_number": 2, "line_content": "    let components = [];"}, {"line_number": 3, "line_content": "    let html = this.post && this.post.html || this.html;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (!html) {"}, {"line_number": 6, "line_content": "        return;"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (html.indexOf('.gif') !== -1) {"}, {"line_number": 10, "line_content": "        components.push('<script async custom-element=\"amp-anim\" src=\"https://cdn.ampproject.org/v0/amp-anim-0.1.js\"></script>');"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    let iframeCount = (html.match(/(<iframe)(.*?\\s*?)(<\\/iframe>)/gi) || []).length;"}, {"line_number": 14, "line_content": "    let youtubeCount = (html.match(/(<iframe)(.*?\\s*?)(youtu.be\\/|youtube(-nocookie)?.com\\/(v\\/|.*u\\/\\w\\/|embed\\/|.*v=))(.*?\\s*?)(<\\/iframe>)/gi) || []).length;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    if (youtubeCount) {"}, {"line_number": 17, "line_content": "        components.push('<script async custom-element=\"amp-youtube\" src=\"https://cdn.ampproject.org/v0/amp-youtube-0.1.js\"></script>');"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    if (iframeCount > youtubeCount) {"}, {"line_number": 21, "line_content": "        components.push('<script async custom-element=\"amp-iframe\" src=\"https://cdn.ampproject.org/v0/amp-iframe-0.1.js\"></script>');"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    if (html.indexOf('<audio') !== -1) {"}, {"line_number": 25, "line_content": "        components.push('<script async custom-element=\"amp-audio\" src=\"https://cdn.ampproject.org/v0/amp-audio-0.1.js\"></script>');"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    if (settingsCache.get('amp_gtag_id')) {"}, {"line_number": 29, "line_content": "        components.push('<script async custom-element=\"amp-analytics\" src=\"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"></script>');"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    return new SafeString(components.join('\\n'));"}, {"line_number": 33, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "function ampComponents() {"}, {"line_number": 2, "line_content": "    let components = [];"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const ampGtagId = settingsCache.get('amp_gtag_id');"}, {"line_number": 5, "line_content": "    if (ampGtagId) {"}, {"line_number": 6, "line_content": "        components.push(`"}, {"line_number": 7, "line_content": "            <amp-analytics type=\"gtag\" data-credentials=\"include\">"}, {"line_number": 8, "line_content": "                <script type=\"application/json\">"}, {"line_number": 9, "line_content": "                    {"}, {"line_number": 10, "line_content": "                        \"vars\" : {"}, {"line_number": 11, "line_content": "                            \"gtag_id\": \"${ampGtagId}\","}, {"line_number": 12, "line_content": "                            \"config\" : {"}, {"line_number": 13, "line_content": "                                \"${ampGtagId}\": { \"groups\": \"default\" }"}, {"line_number": 14, "line_content": "                            }"}, {"line_number": 15, "line_content": "                        }"}, {"line_number": 16, "line_content": "                    }"}, {"line_number": 17, "line_content": "                </script>"}, {"line_number": 18, "line_content": "            </amp-analytics>"}, {"line_number": 19, "line_content": "        `);"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    return new SafeString(components.join('\\n'));"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 56, "lines": [{"line_number": 1, "line_content": "function getAmperizeHTML(html, post) {"}, {"line_number": 2, "line_content": "    if (!html) {"}, {"line_number": 3, "line_content": "        return;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let Amperize = require('amperize');"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    amperize = amperize || new Amperize();"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    const startedAtMoment = DateTime.now();"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    let cacheDateTime;"}, {"line_number": 13, "line_content": "    let postDateTime;"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    if (amperizeCache[post.id]) {"}, {"line_number": 16, "line_content": "        const {updated_at: ampCacheUpdatedAt} = amperizeCache[post.id];"}, {"line_number": 17, "line_content": "        const {updated_at: postUpdatedAt} = post;"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "        cacheDateTime = DateTime.fromJSDate(new Date(ampCacheUpdatedAt));"}, {"line_number": 20, "line_content": "        postDateTime = DateTime.fromJSDate(new Date(postUpdatedAt));"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    if (!amperizeCache[post.id] || cacheDateTime.diff(postDateTime).valueOf() < 0) {"}, {"line_number": 24, "line_content": "        return new Promise((resolve) => {"}, {"line_number": 25, "line_content": "            amperize.parse(html, (err, res) => {"}, {"line_number": 26, "line_content": "                logging.info('amp.parse', post.url, Interval.fromDateTimes(startedAtMoment, DateTime.now()).length('milliseconds') + 'ms');"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "                if (err) {"}, {"line_number": 29, "line_content": "                    if (err.src) {"}, {"line_number": 30, "line_content": "                        // This is a valid 500 GhostError because it means the amperize parser is unable to handle some Ghost HTML."}, {"line_number": 31, "line_content": "                        logging.error(new errors.InternalServerError({"}, {"line_number": 32, "line_content": "                            message: `AMP HTML couldn't be parsed: ${err.src}`,"}, {"line_number": 33, "line_content": "                            code: 'AMP_PARSER_ERROR',"}, {"line_number": 34, "line_content": "                            err: err,"}, {"line_number": 35, "line_content": "                            context: post.url,"}, {"line_number": 36, "line_content": "                            help: 'Please share this error on GitHub or https://forum.ghost.org'"}, {"line_number": 37, "line_content": "                        }));"}, {"line_number": 38, "line_content": "                    } else {"}, {"line_number": 39, "line_content": "                        logging.error(new errors.InternalServerError({err, code: 'AMP_PARSER_ERROR'}));"}, {"line_number": 40, "line_content": "                    }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "                    // save it in cache to prevent multiple calls to Amperize until"}, {"line_number": 43, "line_content": "                    // content is updated."}, {"line_number": 44, "line_content": "                    amperizeCache[post.id] = {updated_at: post.updated_at, amp: html};"}, {"line_number": 45, "line_content": "                    // return the original html on an error"}, {"line_number": 46, "line_content": "                    return resolve(html);"}, {"line_number": 47, "line_content": "                }"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "                amperizeCache[post.id] = {updated_at: post.updated_at, amp: res};"}, {"line_number": 50, "line_content": "                return resolve(amperizeCache[post.id].amp);"}, {"line_number": 51, "line_content": "            });"}, {"line_number": 52, "line_content": "        });"}, {"line_number": 53, "line_content": "    }"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "    return Promise.resolve(amperizeCache[post.id].amp);"}, {"line_number": 56, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function _renderer(req, res, next) {"}, {"line_number": 2, "line_content": "    res.routerOptions = {"}, {"line_number": 3, "line_content": "        type: 'custom',"}, {"line_number": 4, "line_content": "        templates: templateName,"}, {"line_number": 5, "line_content": "        defaultTemplate: path.resolve(__dirname, 'views', `${templateName}.hbs`)"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // Renderer begin"}, {"line_number": 9, "line_content": "    // Format data"}, {"line_number": 10, "line_content": "    let body = req.body || {};"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (!body.post) {"}, {"line_number": 13, "line_content": "        return next(new errors.NotFoundError({message: tpl(messages.pageNotFound)}));"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    // Render Call"}, {"line_number": 17, "line_content": "    return renderer.renderer(req, res, body);"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 45, "lines": [{"line_number": 1, "line_content": "function getPostData(req, res, next) {"}, {"line_number": 2, "line_content": "    req.body = req.body || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const urlWithoutSubdirectoryWithoutAmp = res.locals.relativeUrl.match(/(.*?\\/)amp\\/?$/)[1];"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    /**"}, {"line_number": 7, "line_content": "     * @NOTE"}, {"line_number": 8, "line_content": "     *"}, {"line_number": 9, "line_content": "     * We have to figure out the target permalink, otherwise it would be possible to serve a post"}, {"line_number": 10, "line_content": "     * which lives in two collections."}, {"line_number": 11, "line_content": "     *"}, {"line_number": 12, "line_content": "     * @TODO:"}, {"line_number": 13, "line_content": "     *"}, {"line_number": 14, "line_content": "     * This is not optimal and caused by the fact how apps currently work. But apps weren't designed"}, {"line_number": 15, "line_content": "     * for dynamic routing."}, {"line_number": 16, "line_content": "     *"}, {"line_number": 17, "line_content": "     * I think if the responsible, target router would first take care fetching/determining the post, the"}, {"line_number": 18, "line_content": "     * request could then be forwarded to this app. Then we don't have to:"}, {"line_number": 19, "line_content": "     *"}, {"line_number": 20, "line_content": "     * 1. care about fetching the post"}, {"line_number": 21, "line_content": "     * 2. care about if the post can be served"}, {"line_number": 22, "line_content": "     * 3. then this app would act like an extension"}, {"line_number": 23, "line_content": "     *"}, {"line_number": 24, "line_content": "     * The challenge is to design different types of apps e.g. extensions of routers, standalone pages etc."}, {"line_number": 25, "line_content": "     */"}, {"line_number": 26, "line_content": "    const permalinks = urlService.getPermalinkByUrl(urlWithoutSubdirectoryWithoutAmp, {withUrlOptions: true});"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    if (!permalinks) {"}, {"line_number": 29, "line_content": "        return next(new errors.NotFoundError({"}, {"line_number": 30, "line_content": "            message: tpl(messages.pageNotFound)"}, {"line_number": 31, "line_content": "        }));"}, {"line_number": 32, "line_content": "    }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    // @NOTE: amp is not supported for \"page\" resource"}, {"line_number": 35, "line_content": "    // @TODO: https://github.com/TryGhost/Ghost/issues/10548"}, {"line_number": 36, "line_content": "    dataService.entryLookup(urlWithoutSubdirectoryWithoutAmp, {permalinks, query: {controller: 'postsPublic', resource: 'posts'}}, res.locals)"}, {"line_number": 37, "line_content": "        .then((result) => {"}, {"line_number": 38, "line_content": "            if (result && result.entry) {"}, {"line_number": 39, "line_content": "                req.body.post = result.entry;"}, {"line_number": 40, "line_content": "            }"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "            next();"}, {"line_number": 43, "line_content": "        })"}, {"line_number": 44, "line_content": "        .catch(next);"}, {"line_number": 45, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function verifySessionHash(salt, hash) {"}, {"line_number": 2, "line_content": "    if (!salt || !hash) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let hasher = crypto.createHash('sha256');"}, {"line_number": 7, "line_content": "    hasher.update(settingsCache.get('password') + salt, 'utf8');"}, {"line_number": 8, "line_content": "    return hasher.digest('hex') === hash;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getRedirectUrl(query) {"}, {"line_number": 2, "line_content": "    try {"}, {"line_number": 3, "line_content": "        const redirect = decodeURIComponent(query.r || '/');"}, {"line_number": 4, "line_content": "        const pathname = new URL(redirect, config.get('url')).pathname;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        const base = new URL(config.get('url'));"}, {"line_number": 7, "line_content": "        const target = new URL(pathname, config.get('url'));"}, {"line_number": 8, "line_content": "        // Make sure we don't redirect outside of the instance"}, {"line_number": 9, "line_content": "        return target.host === base.host ? pathname : '/';"}, {"line_number": 10, "line_content": "    } catch (e) {"}, {"line_number": 11, "line_content": "        return '/';"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function _renderer(req, res) {"}, {"line_number": 2, "line_content": "    res.routerOptions = {"}, {"line_number": 3, "line_content": "        type: 'custom',"}, {"line_number": 4, "line_content": "        templates: templateName,"}, {"line_number": 5, "line_content": "        defaultTemplate: path.resolve(__dirname, 'views', `${templateName}.hbs`)"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // Renderer begin"}, {"line_number": 9, "line_content": "    // Format data"}, {"line_number": 10, "line_content": "    let data = {};"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (res.error) {"}, {"line_number": 13, "line_content": "        data.error = res.error;"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    // Render Call"}, {"line_number": 17, "line_content": "    return renderer.renderer(req, res, data);"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "function asyncHelperWrapper(hbsInstance, name, fn) {"}, {"line_number": 2, "line_content": "    hbsInstance.registerAsyncHelper(name, async function returnAsync(context, options, cb) {"}, {"line_number": 3, "line_content": "        // Handle the case where we only get context and cb"}, {"line_number": 4, "line_content": "        if (!cb) {"}, {"line_number": 5, "line_content": "            cb = options;"}, {"line_number": 6, "line_content": "            options = undefined;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        try {"}, {"line_number": 10, "line_content": "            const response = await fn.call(this, context, options);"}, {"line_number": 11, "line_content": "            cb(response);"}, {"line_number": 12, "line_content": "        } catch (error) {"}, {"line_number": 13, "line_content": "            const wrappedErr = errors.utils.isGhostError(error) ? error : new errors.IncorrectUsageError({"}, {"line_number": 14, "line_content": "                err: error,"}, {"line_number": 15, "line_content": "                context: 'registerAsyncThemeHelper: ' + name,"}, {"line_number": 16, "line_content": "                errorDetails: {"}, {"line_number": 17, "line_content": "                    originalError: error"}, {"line_number": 18, "line_content": "                }"}, {"line_number": 19, "line_content": "            });"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "            const response = process.env.NODE_ENV === 'development' ? wrappedErr : '';"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "            logging.error(wrappedErr);"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "            cb(new hbsInstance.SafeString(response));"}, {"line_number": 26, "line_content": "        }"}, {"line_number": 27, "line_content": "    });"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function isPost(jsonData) {"}, {"line_number": 2, "line_content": "    return Object.prototype.hasOwnProperty.call(jsonData, 'html') &&"}, {"line_number": 3, "line_content": "        Object.prototype.hasOwnProperty.call(jsonData, 'title') && Object.prototype.hasOwnProperty.call(jsonData, 'slug');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function isTag(jsonData) {"}, {"line_number": 2, "line_content": "    return Object.prototype.hasOwnProperty.call(jsonData, 'name') && Object.prototype.hasOwnProperty.call(jsonData, 'slug') &&"}, {"line_number": 3, "line_content": "        Object.prototype.hasOwnProperty.call(jsonData, 'description') && Object.prototype.hasOwnProperty.call(jsonData, 'feature_image');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function isNav(jsonData) {"}, {"line_number": 2, "line_content": "    return Object.prototype.hasOwnProperty.call(jsonData, 'label') && Object.prototype.hasOwnProperty.call(jsonData, 'url') &&"}, {"line_number": 3, "line_content": "    Object.prototype.hasOwnProperty.call(jsonData, 'slug') && Object.prototype.hasOwnProperty.call(jsonData, 'current');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function isUser(jsonData) {"}, {"line_number": 2, "line_content": "    return Object.prototype.hasOwnProperty.call(jsonData, 'bio') && Object.prototype.hasOwnProperty.call(jsonData, 'website') &&"}, {"line_number": 3, "line_content": "    Object.prototype.hasOwnProperty.call(jsonData, 'profile_image') && Object.prototype.hasOwnProperty.call(jsonData, 'location');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function processQuery(query, slugParam, locals) {"}, {"line_number": 2, "line_content": "    const api = require('../proxy').api;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    query = _.cloneDeep(query);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    _.defaultsDeep(query, queryDefaults);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // Replace any slugs, see TaxonomyRouter. We replace any '%s' by the slug"}, {"line_number": 9, "line_content": "    _.each(query.options, function (option, name) {"}, {"line_number": 10, "line_content": "        query.options[name] = _.isString(option) ? option.replace(/%s/g, slugParam) : option;"}, {"line_number": 11, "line_content": "    });"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    query.options.context = {member: locals.member};"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    return (api[query.controller] || api[query.resource])[query.type](query.options);"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 52, "lines": [{"line_number": 1, "line_content": "function fetchData(pathOptions, routerOptions, locals) {"}, {"line_number": 2, "line_content": "    pathOptions = pathOptions || {};"}, {"line_number": 3, "line_content": "    routerOptions = routerOptions || {};"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    let postQuery = _.cloneDeep(defaultPostQuery);"}, {"line_number": 6, "line_content": "    let props = {};"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    if (routerOptions.filter) {"}, {"line_number": 9, "line_content": "        postQuery.options.filter = routerOptions.filter;"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (routerOptions.order) {"}, {"line_number": 13, "line_content": "        postQuery.options.order = routerOptions.order;"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    if (Object.prototype.hasOwnProperty.call(pathOptions, 'page')) {"}, {"line_number": 17, "line_content": "        postQuery.options.page = pathOptions.page;"}, {"line_number": 18, "line_content": "    }"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    if (Object.prototype.hasOwnProperty.call(pathOptions, 'limit')) {"}, {"line_number": 21, "line_content": "        postQuery.options.limit = pathOptions.limit;"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    // CASE: always fetch post entries"}, {"line_number": 25, "line_content": "    // The filter can in theory contain a \"%s\" e.g. filter=\"primary_tag:%s\""}, {"line_number": 26, "line_content": "    props.posts = processQuery(postQuery, pathOptions.slug, locals);"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // CASE: fetch more data defined by the router e.g. tags, authors - see TaxonomyRouter"}, {"line_number": 29, "line_content": "    _.each(routerOptions.data, function (query, name) {"}, {"line_number": 30, "line_content": "        const dataQueryOptions = _.merge(query, defaultDataQueryOptions[name]);"}, {"line_number": 31, "line_content": "        props[name] = processQuery(dataQueryOptions, pathOptions.slug, locals);"}, {"line_number": 32, "line_content": "    });"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    return Promise.props(props)"}, {"line_number": 35, "line_content": "        .then(function formatResponse(results) {"}, {"line_number": 36, "line_content": "            const response = _.cloneDeep(results.posts);"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "            if (routerOptions.data) {"}, {"line_number": 39, "line_content": "                response.data = {};"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "                _.each(routerOptions.data, function (config, name) {"}, {"line_number": 42, "line_content": "                    response.data[name] = results[name][config.resource];"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "                    if (config.type === 'browse') {"}, {"line_number": 45, "line_content": "                        response.data[name].meta = results[name].meta;"}, {"line_number": 46, "line_content": "                    }"}, {"line_number": 47, "line_content": "                });"}, {"line_number": 48, "line_content": "            }"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "            return response;"}, {"line_number": 51, "line_content": "        });"}, {"line_number": 52, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 49, "lines": [{"line_number": 1, "line_content": "function entryLookup(postUrl, routerOptions, locals) {"}, {"line_number": 2, "line_content": "    debug(postUrl);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const api = require('../proxy').api;"}, {"line_number": 5, "line_content": "    const targetPath = url.parse(postUrl).path;"}, {"line_number": 6, "line_content": "    const permalinks = routerOptions.permalinks;"}, {"line_number": 7, "line_content": "    let isEditURL = false;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // CASE: e.g. /:slug/ -> { slug: 'value' }"}, {"line_number": 10, "line_content": "    const matchFunc = routeMatch(permalinks);"}, {"line_number": 11, "line_content": "    const params = matchFunc(targetPath);"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    debug(targetPath);"}, {"line_number": 14, "line_content": "    debug(params);"}, {"line_number": 15, "line_content": "    debug(permalinks);"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    // CASE 1: no matches, resolve"}, {"line_number": 18, "line_content": "    // CASE 2: params can be empty e.g. permalink is /featured/:options(edit)?/ and path is /featured/"}, {"line_number": 19, "line_content": "    if (params === false || !Object.keys(params).length) {"}, {"line_number": 20, "line_content": "        return Promise.resolve();"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    // CASE: redirect if url contains `/edit/` at the end"}, {"line_number": 24, "line_content": "    if (params.options && params.options.toLowerCase() === 'edit') {"}, {"line_number": 25, "line_content": "        isEditURL = true;"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    let options = {"}, {"line_number": 29, "line_content": "        include: 'authors,tags,tiers'"}, {"line_number": 30, "line_content": "    };"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    options.context = {member: locals.member};"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    return (api[routerOptions.query.controller] || api[routerOptions.query.resource])"}, {"line_number": 35, "line_content": "        .read(_.extend(_.pick(params, 'slug', 'id'), options))"}, {"line_number": 36, "line_content": "        .then(function then(result) {"}, {"line_number": 37, "line_content": "            const entry = result[routerOptions.query.resource][0];"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "            if (!entry) {"}, {"line_number": 40, "line_content": "                return Promise.resolve();"}, {"line_number": 41, "line_content": "            }"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "            return {"}, {"line_number": 44, "line_content": "                entry: entry,"}, {"line_number": 45, "line_content": "                isEditURL: isEditURL,"}, {"line_number": 46, "line_content": "                isUnknownOption: isEditURL ? false : !!params.options"}, {"line_number": 47, "line_content": "            };"}, {"line_number": 48, "line_content": "        });"}, {"line_number": 49, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function GhostRouter(options) {"}, {"line_number": 2, "line_content": "    const router = express.Router('Parent', options);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    function innerRouter(req, res, next) {"}, {"line_number": 5, "line_content": "        return innerRouter.handle(req, res, next);"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    Object.setPrototypeOf(innerRouter, router);"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    Object.defineProperty(innerRouter, 'name', {"}, {"line_number": 11, "line_content": "        value: options.parent.name,"}, {"line_number": 12, "line_content": "        writable: false"}, {"line_number": 13, "line_content": "    });"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    innerRouter.parent = options.parent;"}, {"line_number": 16, "line_content": "    return innerRouter;"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function innerRouter(req, res, next) {"}, {"line_number": 2, "line_content": "        return innerRouter.handle(req, res, next);"}, {"line_number": 3, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "function processQuery(query, locals) {"}, {"line_number": 2, "line_content": "    const api = require('../../proxy').api;"}, {"line_number": 3, "line_content": "    query = _.cloneDeep(query);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // CASE: If you define a single data key for a static route (e.g. data: page.team), this static route will represent"}, {"line_number": 6, "line_content": "    //       the target resource. That means this static route has to behave the same way than the original resource url."}, {"line_number": 7, "line_content": "    //       e.g. the meta data package needs access to the full resource including relations."}, {"line_number": 8, "line_content": "    //       We override the `include` property for now, because the full data set is required anyway."}, {"line_number": 9, "line_content": "    if (_.get(query, 'resource') === 'posts' || _.get(query, 'resource') === 'pages') {"}, {"line_number": 10, "line_content": "        _.extend(query.options, {"}, {"line_number": 11, "line_content": "            include: 'authors,tags,tiers'"}, {"line_number": 12, "line_content": "        });"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    Object.assign(query.options, {"}, {"line_number": 16, "line_content": "        context: {"}, {"line_number": 17, "line_content": "            member: locals.member"}, {"line_number": 18, "line_content": "        }"}, {"line_number": 19, "line_content": "    });"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    return api[query.controller][query.type](query.options);"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function getTitle(relatedData) {"}, {"line_number": 2, "line_content": "    relatedData = relatedData || {};"}, {"line_number": 3, "line_content": "    let titleStart = _.get(relatedData, 'author[0].name') || _.get(relatedData, 'tag[0].name') || '';"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    titleStart += titleStart ? ' - ' : '';"}, {"line_number": 6, "line_content": "    return titleStart + settingsCache.get('title');"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getAppAbsolutePath(name) {"}, {"line_number": 2, "line_content": "    return path.join(config.get('paths').internalAppPath, name);"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getAppByName(name) {"}, {"line_number": 2, "line_content": "    // Grab the app class to instantiate"}, {"line_number": 3, "line_content": "    const AppClass = loadApp(name);"}, {"line_number": 4, "line_content": "    const proxy = Proxy.getInstance();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // Check for an actual class, otherwise just use whatever was returned"}, {"line_number": 7, "line_content": "    const app = _.isFunction(AppClass) ? new AppClass(proxy) : AppClass;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return {"}, {"line_number": 10, "line_content": "        app,"}, {"line_number": 11, "line_content": "        proxy"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function loadApp(name) {"}, {"line_number": 2, "line_content": "    return require(getAppAbsolutePath(name));"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function handleError(next) {"}, {"line_number": 2, "line_content": "    return function handleErrorClosure(err) {"}, {"line_number": 3, "line_content": "        // CASE: if we've thrown an error message of type: 'NotFound' then we found no path match, try next router!"}, {"line_number": 4, "line_content": "        if (err.errorType === 'NotFoundError') {"}, {"line_number": 5, "line_content": "            return next();"}, {"line_number": 6, "line_content": "        }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "        // CASE: the site should not output validation errors e.g. you ask for /feed.xml/ and it tries to fetch"}, {"line_number": 9, "line_content": "        //       this post from Content API (by slug), but this is not a valid slug. With dynamic routing we cannot"}, {"line_number": 10, "line_content": "        //       add a regex to the target express route, because we don't know if people use /:slug/ or not. It's dynamic."}, {"line_number": 11, "line_content": "        if (err.errorType === 'ValidationError') {"}, {"line_number": 12, "line_content": "            // @NOTE: Just try next router, it will end in a 404 if no router can resolve the request."}, {"line_number": 13, "line_content": "            return next();"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        return next(err);"}, {"line_number": 17, "line_content": "    };"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 52, "lines": [{"line_number": 1, "line_content": "function setResponseContext(req, res, data) {"}, {"line_number": 2, "line_content": "    const pageParam = req.params && req.params.page !== undefined ? parseInt(req.params.page, 10) : 1;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    res.locals = res.locals || {};"}, {"line_number": 5, "line_content": "    res.locals.context = [];"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // If we don't have a relativeUrl, we can't detect the context, so return"}, {"line_number": 8, "line_content": "    // See web/parent/middleware/ghost-locals"}, {"line_number": 9, "line_content": "    if (!res.locals.relativeUrl) {"}, {"line_number": 10, "line_content": "        return;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    // Paged context - special rule"}, {"line_number": 14, "line_content": "    if (!isNaN(pageParam) && pageParam > 1) {"}, {"line_number": 15, "line_content": "        res.locals.context.push('paged');"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    // Home context - special rule"}, {"line_number": 19, "line_content": "    if (homePattern.test(res.locals.relativeUrl)) {"}, {"line_number": 20, "line_content": "        res.locals.context.push('home');"}, {"line_number": 21, "line_content": "    }"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    // Add context 'amp' to either post or page, if we have an `*/amp` route"}, {"line_number": 24, "line_content": "    if (ampPattern.test(res.locals.relativeUrl) && (data.post || data.page)) {"}, {"line_number": 25, "line_content": "        res.locals.context.push('amp');"}, {"line_number": 26, "line_content": "    }"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // Each page can only have at most one of these"}, {"line_number": 29, "line_content": "    if (res.routerOptions && res.routerOptions.context) {"}, {"line_number": 30, "line_content": "        res.locals.context = res.locals.context.concat(res.routerOptions.context);"}, {"line_number": 31, "line_content": "    }"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "    if (privatePattern.test(res.locals.relativeUrl)) {"}, {"line_number": 34, "line_content": "        if (!res.locals.context.includes('private')) {"}, {"line_number": 35, "line_content": "            res.locals.context.push('private');"}, {"line_number": 36, "line_content": "        }"}, {"line_number": 37, "line_content": "    }"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    if (data && data.page) {"}, {"line_number": 40, "line_content": "        if (!res.locals.context.includes('page')) {"}, {"line_number": 41, "line_content": "            res.locals.context.push('page');"}, {"line_number": 42, "line_content": "        }"}, {"line_number": 43, "line_content": "    } else if (data && data.post) {"}, {"line_number": 44, "line_content": "        if (!res.locals.context.includes('post')) {"}, {"line_number": 45, "line_content": "            res.locals.context.push('post');"}, {"line_number": 46, "line_content": "        }"}, {"line_number": 47, "line_content": "    } else if (data && data.tag) {"}, {"line_number": 48, "line_content": "        if (!res.locals.context.includes('tag')) {"}, {"line_number": 49, "line_content": "            res.locals.context.push('tag');"}, {"line_number": 50, "line_content": "        }"}, {"line_number": 51, "line_content": "    }"}, {"line_number": 52, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "function formatPageResponse(result, pageAsPost = false) {"}, {"line_number": 2, "line_content": "    const response = {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (result.posts) {"}, {"line_number": 5, "line_content": "        response.posts = result.posts;"}, {"line_number": 6, "line_content": "        prepareContextResource(response.posts);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    if (result.meta && result.meta.pagination) {"}, {"line_number": 10, "line_content": "        response.pagination = result.meta.pagination;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    _.each(result.data, function (data, name) {"}, {"line_number": 14, "line_content": "        prepareContextResource(data);"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        if (data.meta) {"}, {"line_number": 17, "line_content": "            // Move pagination to be a top level key"}, {"line_number": 18, "line_content": "            response[name] = data;"}, {"line_number": 19, "line_content": "            response[name].pagination = data.meta.pagination;"}, {"line_number": 20, "line_content": "            delete response[name].meta;"}, {"line_number": 21, "line_content": "        } else {"}, {"line_number": 22, "line_content": "            // This is a single object, don't wrap it in an array"}, {"line_number": 23, "line_content": "            response[name] = data[0];"}, {"line_number": 24, "line_content": "        }"}, {"line_number": 25, "line_content": "    });"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "    if (pageAsPost && response.page) {"}, {"line_number": 28, "line_content": "        response.post = response.page;"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "    return response;"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function formatResponse(post, context) {"}, {"line_number": 2, "line_content": "    prepareContextResource(post);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    let entry = {"}, {"line_number": 5, "line_content": "        post: post"}, {"line_number": 6, "line_content": "    };"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // NOTE: preview context is a special case where the internal preview api returns the post model's type field"}, {"line_number": 9, "line_content": "    if (context?.includes('page') || (context?.includes('preview') && post.type === 'page')) {"}, {"line_number": 10, "line_content": "        entry.page = post;"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    return entry;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function updateLocalTemplateOptions(req, res, next) {"}, {"line_number": 2, "line_content": "    const localTemplateOptions = hbs.getLocalTemplateOptions(res.locals);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // adjust @site.url for http/https based on the incoming request"}, {"line_number": 5, "line_content": "    const siteData = {"}, {"line_number": 6, "line_content": "        url: urlUtils.urlFor('home', {trailingSlash: false}, true)"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // @TODO: it would be nicer if this was proper middleware somehow..."}, {"line_number": 10, "line_content": "    const previewData = preview.handle(req, Object.keys(customThemeSettingsCache.getAll()));"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // strip custom off of preview data so it doesn't get merged into @site"}, {"line_number": 13, "line_content": "    const customData = previewData.custom;"}, {"line_number": 14, "line_content": "    delete previewData.custom;"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    // update site data with any preview values from the request"}, {"line_number": 17, "line_content": "    Object.assign(siteData, previewData);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const member = req.member ? {"}, {"line_number": 20, "line_content": "        uuid: req.member.uuid,"}, {"line_number": 21, "line_content": "        email: req.member.email,"}, {"line_number": 22, "line_content": "        name: req.member.name,"}, {"line_number": 23, "line_content": "        firstname: req.member.name && req.member.name.split(' ')[0],"}, {"line_number": 24, "line_content": "        avatar_image: req.member.avatar_image,"}, {"line_number": 25, "line_content": "        subscriptions: req.member.subscriptions && req.member.subscriptions.map((sub) => {"}, {"line_number": 26, "line_content": "            return Object.assign({}, sub, {"}, {"line_number": 27, "line_content": "                default_payment_card_last4: sub.default_payment_card_last4 || '****'"}, {"line_number": 28, "line_content": "            });"}, {"line_number": 29, "line_content": "        }),"}, {"line_number": 30, "line_content": "        paid: req.member.status !== 'free',"}, {"line_number": 31, "line_content": "        status: req.member.status"}, {"line_number": 32, "line_content": "    } : null;"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    hbs.updateLocalTemplateOptions(res.locals, _.merge({}, localTemplateOptions, {"}, {"line_number": 35, "line_content": "        data: {"}, {"line_number": 36, "line_content": "            member: member,"}, {"line_number": 37, "line_content": "            site: siteData,"}, {"line_number": 38, "line_content": "            custom: customData"}, {"line_number": 39, "line_content": "        }"}, {"line_number": 40, "line_content": "    }));"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    next();"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function ensureActiveTheme(req, res, next) {"}, {"line_number": 2, "line_content": "    // CASE: this means that the theme hasn't been loaded yet i.e. there is no active theme"}, {"line_number": 3, "line_content": "    if (!activeTheme.get()) {"}, {"line_number": 4, "line_content": "        // This is the one place we ACTUALLY throw an error for a missing theme as it's a request we cannot serve"}, {"line_number": 5, "line_content": "        return next(new errors.InternalServerError({"}, {"line_number": 6, "line_content": "            // We use the settingsCache here, because the setting will be set,"}, {"line_number": 7, "line_content": "            // even if the theme itself is not usable because it is invalid or missing."}, {"line_number": 8, "line_content": "            message: tpl(messages.missingTheme, {theme: settingsCache.get('active_theme')})"}, {"line_number": 9, "line_content": "        }));"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // If the active theme has not yet been mounted, mount it into express"}, {"line_number": 13, "line_content": "    if (!activeTheme.get().mounted) {"}, {"line_number": 14, "line_content": "        activeTheme.get().mount(req.app);"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    next();"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getSiteData() {"}, {"line_number": 2, "line_content": "    let siteData = settingsCache.getPublic();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    // theme-only computed property added to @site"}, {"line_number": 5, "line_content": "    if (settingsCache.get('members_signup_access') === 'none') {"}, {"line_number": 6, "line_content": "        const escapedUrl = encodeURIComponent(urlUtils.urlFor({relativeUrl: '/rss/'}, true));"}, {"line_number": 7, "line_content": "        siteData.signup_url = `https://feedly.com/i/subscription/feed/${escapedUrl}`;"}, {"line_number": 8, "line_content": "    } else {"}, {"line_number": 9, "line_content": "        siteData.signup_url = '#/portal';"}, {"line_number": 10, "line_content": "    }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    return siteData;"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "async function updateGlobalTemplateOptions(req, res, next) {"}, {"line_number": 2, "line_content": "    // Static information, same for every request unless the settings change"}, {"line_number": 3, "line_content": "    // @TODO: bind this once and then update based on events?"}, {"line_number": 4, "line_content": "    // @TODO: decouple theme layer from settings cache using the Content API"}, {"line_number": 5, "line_content": "    const siteData = getSiteData();"}, {"line_number": 6, "line_content": "    const labsData = labs.getAll();"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const themeData = {"}, {"line_number": 9, "line_content": "        posts_per_page: activeTheme.get().config('posts_per_page'),"}, {"line_number": 10, "line_content": "        image_sizes: activeTheme.get().config('image_sizes')"}, {"line_number": 11, "line_content": "    };"}, {"line_number": 12, "line_content": "    const themeSettingsData = customThemeSettingsCache.getAll();"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    // @TODO: only do this if something changed?"}, {"line_number": 15, "line_content": "    {"}, {"line_number": 16, "line_content": "        hbs.updateTemplateOptions({"}, {"line_number": 17, "line_content": "            data: {"}, {"line_number": 18, "line_content": "                site: siteData,"}, {"line_number": 19, "line_content": "                labs: labsData,"}, {"line_number": 20, "line_content": "                config: themeData,"}, {"line_number": 21, "line_content": "                custom: themeSettingsData"}, {"line_number": 22, "line_content": "            }"}, {"line_number": 23, "line_content": "        });"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    next();"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function decodeValue(value) {"}, {"line_number": 2, "line_content": "    if (value === '' || value === 'null' || value === 'undefined') {"}, {"line_number": 3, "line_content": "        return null;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    return value;"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 43, "lines": [{"line_number": 1, "line_content": "function getPreviewData(previewHeader, customThemeSettingKeys = []) {"}, {"line_number": 2, "line_content": "    // Keep the string shorter with short codes for certain parameters"}, {"line_number": 3, "line_content": "    const supportedSettings = {"}, {"line_number": 4, "line_content": "        c: 'accent_color',"}, {"line_number": 5, "line_content": "        icon: 'icon',"}, {"line_number": 6, "line_content": "        logo: 'logo',"}, {"line_number": 7, "line_content": "        cover: 'cover_image',"}, {"line_number": 8, "line_content": "        custom: 'custom',"}, {"line_number": 9, "line_content": "        d: 'description'"}, {"line_number": 10, "line_content": "    };"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    let opts = new URLSearchParams(previewHeader);"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    const previewData = {};"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    opts.forEach((value, key) => {"}, {"line_number": 17, "line_content": "        value = decodeValue(value);"}, {"line_number": 18, "line_content": "        if (supportedSettings[key]) {"}, {"line_number": 19, "line_content": "            _.set(previewData, supportedSettings[key], value);"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "    });"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "    if (previewData.custom) {"}, {"line_number": 24, "line_content": "        try {"}, {"line_number": 25, "line_content": "            const custom = {};"}, {"line_number": 26, "line_content": "            const previewCustom = JSON.parse(previewData.custom);"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "            if (typeof previewCustom === 'object') {"}, {"line_number": 29, "line_content": "                customThemeSettingKeys.forEach((key) => {"}, {"line_number": 30, "line_content": "                    custom[key] = previewCustom[key];"}, {"line_number": 31, "line_content": "                });"}, {"line_number": 32, "line_content": "            }"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "            previewData.custom = custom;"}, {"line_number": 35, "line_content": "        } catch (e) {"}, {"line_number": 36, "line_content": "            previewData.custom = {};"}, {"line_number": 37, "line_content": "        }"}, {"line_number": 38, "line_content": "    }"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "    previewData._preview = previewHeader;"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    return previewData;"}, {"line_number": 43, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "function _urlClean(url) {"}, {"line_number": 2, "line_content": "    // Strips anchors and leading and trailing slashes"}, {"line_number": 3, "line_content": "    return url.replace(/#.*?$/, '').replace(/^\\/|\\/$/g, '');"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function _urlParentMatch(href, location) {"}, {"line_number": 2, "line_content": "    if (!location) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let parent = false;"}, {"line_number": 7, "line_content": "    let locParts = _urlClean(location).split('/');"}, {"line_number": 8, "line_content": "    let hrefParts = _urlClean(href).split('/');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (locParts.length <= hrefParts.length) {"}, {"line_number": 11, "line_content": "        return false;"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    for (let i = 0; i < hrefParts.length; i += 1) {"}, {"line_number": 15, "line_content": "        parent = hrefParts[i] === locParts[i];"}, {"line_number": 16, "line_content": "    }"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    return parent;"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function _urlMatch(href, location) {"}, {"line_number": 2, "line_content": "    if (!location) {"}, {"line_number": 3, "line_content": "        return false;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    const strippedHref = _urlClean(href);"}, {"line_number": 7, "line_content": "    const strippedLocation = _urlClean(location);"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return strippedHref === strippedLocation;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getCoverImage(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (_.includes(context, 'home') || _.includes(context, 'author')) {"}, {"line_number": 6, "line_content": "        if (contextObject.cover_image) {"}, {"line_number": 7, "line_content": "            return urlUtils.urlFor('image', {image: contextObject.cover_image}, true);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": "    } else {"}, {"line_number": 10, "line_content": "        if (contextObject.feature_image) {"}, {"line_number": 11, "line_content": "            return urlUtils.urlFor('image', {image: contextObject.feature_image}, true);"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "    return null;"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 53, "lines": [{"line_number": 1, "line_content": "function getStructuredData(metaData) {"}, {"line_number": 2, "line_content": "    let structuredData;"}, {"line_number": 3, "line_content": "    let card = 'summary';"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (metaData.twitterImage || metaData.coverImage.url) {"}, {"line_number": 6, "line_content": "        card = 'summary_large_image';"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    structuredData = {"}, {"line_number": 10, "line_content": "        'og:site_name': metaData.site.title,"}, {"line_number": 11, "line_content": "        'og:type': metaData.ogType,"}, {"line_number": 12, "line_content": "        'og:title': metaData.ogTitle,"}, {"line_number": 13, "line_content": "        // CASE: metaData.excerpt for post context is populated by either the custom excerpt,"}, {"line_number": 14, "line_content": "        // the meta description, or the automated excerpt of 50 words. It is empty for any"}, {"line_number": 15, "line_content": "        // other context and *always* uses the provided meta description fields."}, {"line_number": 16, "line_content": "        'og:description': metaData.ogDescription,"}, {"line_number": 17, "line_content": "        'og:url': metaData.canonicalUrl,"}, {"line_number": 18, "line_content": "        'og:image': metaData.ogImage.url || metaData.coverImage.url,"}, {"line_number": 19, "line_content": "        'article:published_time': metaData.publishedDate,"}, {"line_number": 20, "line_content": "        'article:modified_time': metaData.modifiedDate,"}, {"line_number": 21, "line_content": "        'article:tag': metaData.keywords,"}, {"line_number": 22, "line_content": "        'article:publisher': metaData.site.facebook ? socialUrls.facebook(metaData.site.facebook) : undefined,"}, {"line_number": 23, "line_content": "        'article:author': metaData.authorFacebook ? socialUrls.facebook(metaData.authorFacebook) : undefined,"}, {"line_number": 24, "line_content": "        'twitter:card': card,"}, {"line_number": 25, "line_content": "        'twitter:title': metaData.twitterTitle,"}, {"line_number": 26, "line_content": "        'twitter:description': metaData.twitterDescription,"}, {"line_number": 27, "line_content": "        'twitter:url': metaData.canonicalUrl,"}, {"line_number": 28, "line_content": "        'twitter:image': metaData.twitterImage || metaData.coverImage.url,"}, {"line_number": 29, "line_content": "        'twitter:label1': metaData.authorName ? 'Written by' : undefined,"}, {"line_number": 30, "line_content": "        'twitter:data1': metaData.authorName,"}, {"line_number": 31, "line_content": "        'twitter:label2': metaData.keywords ? 'Filed under' : undefined,"}, {"line_number": 32, "line_content": "        'twitter:data2': metaData.keywords ? metaData.keywords.join(', ') : undefined,"}, {"line_number": 33, "line_content": "        'twitter:site': metaData.site.twitter || undefined,"}, {"line_number": 34, "line_content": "        'twitter:creator': metaData.creatorTwitter || undefined"}, {"line_number": 35, "line_content": "    };"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "    if (metaData.ogImage.dimensions) {"}, {"line_number": 38, "line_content": "        structuredData['og:image:width'] = metaData.ogImage.dimensions.width;"}, {"line_number": 39, "line_content": "        structuredData['og:image:height'] = metaData.ogImage.dimensions.height;"}, {"line_number": 40, "line_content": "    } else if (metaData.coverImage.dimensions) {"}, {"line_number": 41, "line_content": "        structuredData['og:image:width'] = metaData.coverImage.dimensions.width;"}, {"line_number": 42, "line_content": "        structuredData['og:image:height'] = metaData.coverImage.dimensions.height;"}, {"line_number": 43, "line_content": "    }"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    // return structured data removing null or undefined keys"}, {"line_number": 46, "line_content": "    return Object.keys(structuredData).reduce(function (data, key) {"}, {"line_number": 47, "line_content": "        const content = structuredData[key];"}, {"line_number": 48, "line_content": "        if (content !== null && typeof content !== 'undefined') {"}, {"line_number": 49, "line_content": "            data[key] = content;"}, {"line_number": 50, "line_content": "        }"}, {"line_number": 51, "line_content": "        return data;"}, {"line_number": 52, "line_content": "    }, {});"}, {"line_number": 53, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function getPublishedDate(data) {"}, {"line_number": 2, "line_content": "    let context = data.context ? data.context[0] : null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (contextObject && contextObject.published_at) {"}, {"line_number": 7, "line_content": "        return new Date(contextObject.published_at).toISOString();"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    return null;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "function getContextObject(data, context) {"}, {"line_number": 2, "line_content": "    /**"}, {"line_number": 3, "line_content": "     * If the data object does not contain the requested context, we return the fallback object."}, {"line_number": 4, "line_content": "     */"}, {"line_number": 5, "line_content": "    const blog = {"}, {"line_number": 6, "line_content": "        cover_image: settingsCache.get('cover_image'),"}, {"line_number": 7, "line_content": "        twitter: settingsCache.get('twitter'),"}, {"line_number": 8, "line_content": "        facebook: settingsCache.get('facebook')"}, {"line_number": 9, "line_content": "    };"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    let chosenContext;"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    // @TODO: meta layer is very broken, it's really hard to understand what it's doing"}, {"line_number": 14, "line_content": "    // The problem is that handlebars root object is structured differently. Sometimes the object is flat on data"}, {"line_number": 15, "line_content": "    // and sometimes the object is part of a key e.g. data.post. This needs to be prepared at the very first stage and not in each helper."}, {"line_number": 16, "line_content": "    if ((_.includes(context, 'page') || _.includes(context, 'amp')) && data.post) {"}, {"line_number": 17, "line_content": "        chosenContext = data.post;"}, {"line_number": 18, "line_content": "    } else if (_.includes(context, 'post') && data.post) {"}, {"line_number": 19, "line_content": "        chosenContext = data.post;"}, {"line_number": 20, "line_content": "    } else if (_.includes(context, 'page') && data.page) {"}, {"line_number": 21, "line_content": "        chosenContext = data.page;"}, {"line_number": 22, "line_content": "    } else if (_.includes(context, 'tag') && data.tag) {"}, {"line_number": 23, "line_content": "        chosenContext = data.tag;"}, {"line_number": 24, "line_content": "    } else if (_.includes(context, 'author') && data.author) {"}, {"line_number": 25, "line_content": "        chosenContext = data.author;"}, {"line_number": 26, "line_content": "    } else if (data[context]) {"}, {"line_number": 27, "line_content": "        // @NOTE: This is confusing as hell. It tries to get data[['author']], which works, but coincidence?"}, {"line_number": 28, "line_content": "        chosenContext = data[context];"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "    // Super fallback."}, {"line_number": 32, "line_content": "    if (!chosenContext) {"}, {"line_number": 33, "line_content": "        chosenContext = blog;"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    return chosenContext;"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getCreatorTwitterUrl(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if ((_.includes(context, 'post') || _.includes(context, 'page')) && contextObject.primary_author && contextObject.primary_author.twitter) {"}, {"line_number": 6, "line_content": "        return contextObject.primary_author.twitter;"}, {"line_number": 7, "line_content": "    } else if (_.includes(context, 'author') && contextObject.twitter) {"}, {"line_number": 8, "line_content": "        return contextObject.twitter;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    return null;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function getRssUrl(data, absolute) {"}, {"line_number": 2, "line_content": "    return routingService.registry.getRssUrl({"}, {"line_number": 3, "line_content": "        absolute: absolute"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function getOgType(data) {"}, {"line_number": 2, "line_content": "    let context = data.context ? data.context[0] : null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    context = context === 'amp' ? 'post' : context;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (context === 'author') {"}, {"line_number": 7, "line_content": "        return 'profile';"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    if (context === 'post') {"}, {"line_number": 10, "line_content": "        return 'article';"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": "    return 'website';"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getKeywords(data) {"}, {"line_number": 2, "line_content": "    if (data.post && data.post.tags && data.post.tags.length > 0) {"}, {"line_number": 3, "line_content": "        return ghostHelperUtils.visibility.filter(data.post.tags, ['public'], function processItem(item) {"}, {"line_number": 4, "line_content": "            return item.name;"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    return null;"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 48, "lines": [{"line_number": 1, "line_content": "function getImageDimensions(metaData) {"}, {"line_number": 2, "line_content": "    const fetch = {"}, {"line_number": 3, "line_content": "        coverImage: imageSizeCache.getCachedImageSizeFromUrl(metaData.coverImage.url),"}, {"line_number": 4, "line_content": "        authorImage: imageSizeCache.getCachedImageSizeFromUrl(metaData.authorImage.url),"}, {"line_number": 5, "line_content": "        ogImage: imageSizeCache.getCachedImageSizeFromUrl(metaData.ogImage.url),"}, {"line_number": 6, "line_content": "        logo: imageSizeCache.getCachedImageSizeFromUrl(metaData.site.logo.url)"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return Promise"}, {"line_number": 10, "line_content": "        .props(fetch)"}, {"line_number": 11, "line_content": "        .then(function (imageObj) {"}, {"line_number": 12, "line_content": "            _.forEach(imageObj, function (key, value) {"}, {"line_number": 13, "line_content": "                if (_.has(key, 'width') && _.has(key, 'height')) {"}, {"line_number": 14, "line_content": "                    // We have some restrictions for publisher.logo:"}, {"line_number": 15, "line_content": "                    // The image needs to be <=600px wide and <=60px high (ideally exactly 600px x 60px)."}, {"line_number": 16, "line_content": "                    // Unless we have proper image-handling (see https://github.com/TryGhost/Ghost/issues/4453),"}, {"line_number": 17, "line_content": "                    // we will fake it in some cases or not produce an imageObject at all."}, {"line_number": 18, "line_content": "                    if (value === 'logo') {"}, {"line_number": 19, "line_content": "                        if (key.height <= 60 && key.width <= 600) {"}, {"line_number": 20, "line_content": "                            _.assign(metaData.site[value], {"}, {"line_number": 21, "line_content": "                                dimensions: {"}, {"line_number": 22, "line_content": "                                    width: key.width,"}, {"line_number": 23, "line_content": "                                    height: key.height"}, {"line_number": 24, "line_content": "                                }"}, {"line_number": 25, "line_content": "                            });"}, {"line_number": 26, "line_content": "                        } else if (key.width === key.height) {"}, {"line_number": 27, "line_content": "                            // CASE: the logo is too large, but it is a square. We fake it..."}, {"line_number": 28, "line_content": "                            _.assign(metaData.site[value], {"}, {"line_number": 29, "line_content": "                                dimensions: {"}, {"line_number": 30, "line_content": "                                    width: 60,"}, {"line_number": 31, "line_content": "                                    height: 60"}, {"line_number": 32, "line_content": "                                }"}, {"line_number": 33, "line_content": "                            });"}, {"line_number": 34, "line_content": "                        }"}, {"line_number": 35, "line_content": "                    } else {"}, {"line_number": 36, "line_content": "                        _.assign(metaData[value], {"}, {"line_number": 37, "line_content": "                            dimensions: {"}, {"line_number": 38, "line_content": "                                width: key.width,"}, {"line_number": 39, "line_content": "                                height: key.height"}, {"line_number": 40, "line_content": "                            }"}, {"line_number": 41, "line_content": "                        });"}, {"line_number": 42, "line_content": "                    }"}, {"line_number": 43, "line_content": "                }"}, {"line_number": 44, "line_content": "            });"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "            return metaData;"}, {"line_number": 47, "line_content": "        });"}, {"line_number": 48, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getBlogLogo() {"}, {"line_number": 2, "line_content": "    const logo = {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (settingsCache.get('logo')) {"}, {"line_number": 5, "line_content": "        logo.url = urlUtils.urlFor('image', {image: settingsCache.get('logo')}, true);"}, {"line_number": 6, "line_content": "    } else {"}, {"line_number": 7, "line_content": "        // CASE: no publication logo is updated. We can try to use either an uploaded publication icon"}, {"line_number": 8, "line_content": "        // or use the default one to make"}, {"line_number": 9, "line_content": "        // Google happy with it. See https://github.com/TryGhost/Ghost/issues/7558"}, {"line_number": 10, "line_content": "        logo.url = blogIcon.getIconUrl(true);"}, {"line_number": 11, "line_content": "    }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    return logo;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function optionalString(test, string) {"}, {"line_number": 2, "line_content": "    if (test) {"}, {"line_number": 3, "line_content": "        return string;"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    return '';"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 56, "lines": [{"line_number": 1, "line_content": "function getTitle(data, root, options = {}) {"}, {"line_number": 2, "line_content": "    const context = root ? root.context : null;"}, {"line_number": 3, "line_content": "    const siteTitle = settingsCache.get('title') || '';"}, {"line_number": 4, "line_content": "    const pagination = root ? root.pagination : null;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // options.property = null/'og'/'twitter'"}, {"line_number": 7, "line_content": "    const optionsPropertyName = `${options.property || 'meta'}_title`;"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    let title = '';"}, {"line_number": 10, "line_content": "    let pageString = '';"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (pagination && pagination.total > 1) {"}, {"line_number": 13, "line_content": "        pageString = _.has(options.hash, 'page') ? options.hash.page.replace('%', pagination.page) : ' (Page ' + pagination.page + ')';"}, {"line_number": 14, "line_content": "    }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    const dashSiteTitle = optionalString(siteTitle, ' - ' + siteTitle);"}, {"line_number": 17, "line_content": "    const dashSiteTitlePage = optionalString(siteTitle || pageString, ' -' + optionalString(siteTitle, ' ' + siteTitle) + pageString);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    // If there's a specific meta title"}, {"line_number": 20, "line_content": "    if (data.meta_title) {"}, {"line_number": 21, "line_content": "        title = data.meta_title;"}, {"line_number": 22, "line_content": "    // Home title"}, {"line_number": 23, "line_content": "    } else if (_.includes(context, 'home')) {"}, {"line_number": 24, "line_content": "        if (options.property) {"}, {"line_number": 25, "line_content": "            title = settingsCache.get(optionsPropertyName) || siteTitle;"}, {"line_number": 26, "line_content": "        } else {"}, {"line_number": 27, "line_content": "            title = settingsCache.get('meta_title') || siteTitle;"}, {"line_number": 28, "line_content": "        }"}, {"line_number": 29, "line_content": "    // Author title, paged"}, {"line_number": 30, "line_content": "    } else if (_.includes(context, 'author') && data.author && _.includes(context, 'paged')) {"}, {"line_number": 31, "line_content": "        title = data.author.name + dashSiteTitlePage;"}, {"line_number": 32, "line_content": "    // Author title, index"}, {"line_number": 33, "line_content": "    } else if (_.includes(context, 'author') && data.author) {"}, {"line_number": 34, "line_content": "        title = data.author.name + dashSiteTitle;"}, {"line_number": 35, "line_content": "    // Tag title, paged"}, {"line_number": 36, "line_content": "    } else if (_.includes(context, 'tag') && data.tag && _.includes(context, 'paged')) {"}, {"line_number": 37, "line_content": "        title = data.tag.meta_title || data.tag.name + dashSiteTitlePage;"}, {"line_number": 38, "line_content": "    // Tag title, index"}, {"line_number": 39, "line_content": "    } else if (_.includes(context, 'tag') && data.tag) {"}, {"line_number": 40, "line_content": "        title = data.tag[optionsPropertyName] || data.tag.meta_title || data.tag.name + dashSiteTitle;"}, {"line_number": 41, "line_content": "    // Post title"}, {"line_number": 42, "line_content": "    } else if (_.includes(context, 'post') && data.post) {"}, {"line_number": 43, "line_content": "        title = data.post[optionsPropertyName] || data.post.meta_title || data.post.title;"}, {"line_number": 44, "line_content": "    // Page title dependent on legacy object formatting (https://github.com/TryGhost/Ghost/issues/10042)"}, {"line_number": 45, "line_content": "    } else if (_.includes(context, 'page') && data.post) {"}, {"line_number": 46, "line_content": "        title = data.post[optionsPropertyName] || data.post.meta_title || data.post.title;"}, {"line_number": 47, "line_content": "    // Page title v2"}, {"line_number": 48, "line_content": "    } else if (_.includes(context, 'page') && data.page) {"}, {"line_number": 49, "line_content": "        title = data.page[optionsPropertyName] || data.page.meta_title || data.page.title;"}, {"line_number": 50, "line_content": "    // Fallback"}, {"line_number": 51, "line_content": "    } else {"}, {"line_number": 52, "line_content": "        title = siteTitle + pageString;"}, {"line_number": 53, "line_content": "    }"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "    return (title || '').trim();"}, {"line_number": 56, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 63, "lines": [{"line_number": 1, "line_content": "function getMetaData(data, root) {"}, {"line_number": 2, "line_content": "    const metaData = {"}, {"line_number": 3, "line_content": "        url: getUrl(data, true),"}, {"line_number": 4, "line_content": "        canonicalUrl: getCanonicalUrl(data),"}, {"line_number": 5, "line_content": "        ampUrl: getAmpUrl(data),"}, {"line_number": 6, "line_content": "        previousUrl: getPaginatedUrl('prev', data, true),"}, {"line_number": 7, "line_content": "        nextUrl: getPaginatedUrl('next', data, true),"}, {"line_number": 8, "line_content": "        authorUrl: getAuthorUrl(data, true),"}, {"line_number": 9, "line_content": "        rssUrl: getRssUrl(data, true),"}, {"line_number": 10, "line_content": "        metaTitle: getTitle(data, root),"}, {"line_number": 11, "line_content": "        metaDescription: getDescription(data, root) || null,"}, {"line_number": 12, "line_content": "        excerpt: getExcerpt(data),"}, {"line_number": 13, "line_content": "        coverImage: {"}, {"line_number": 14, "line_content": "            url: getCoverImage(data)"}, {"line_number": 15, "line_content": "        },"}, {"line_number": 16, "line_content": "        authorImage: {"}, {"line_number": 17, "line_content": "            url: getAuthorImage(data, true)"}, {"line_number": 18, "line_content": "        },"}, {"line_number": 19, "line_content": "        ogImage: {"}, {"line_number": 20, "line_content": "            url: getOgImage(data)"}, {"line_number": 21, "line_content": "        },"}, {"line_number": 22, "line_content": "        ogTitle: getTitle(data, root, {property: 'og'}),"}, {"line_number": 23, "line_content": "        ogDescription: getDescription(data, root, {property: 'og'}),"}, {"line_number": 24, "line_content": "        twitterImage: getTwitterImage(data),"}, {"line_number": 25, "line_content": "        twitterTitle: getTitle(data, root, {property: 'twitter'}),"}, {"line_number": 26, "line_content": "        twitterDescription: getDescription(data, root, {property: 'twitter'}),"}, {"line_number": 27, "line_content": "        authorFacebook: getAuthorFacebook(data),"}, {"line_number": 28, "line_content": "        creatorTwitter: getCreatorTwitter(data),"}, {"line_number": 29, "line_content": "        keywords: getKeywords(data),"}, {"line_number": 30, "line_content": "        publishedDate: getPublishedDate(data),"}, {"line_number": 31, "line_content": "        modifiedDate: getModifiedDate(data),"}, {"line_number": 32, "line_content": "        ogType: getOgType(data),"}, {"line_number": 33, "line_content": "        // @TODO: pass into each meta helper - wrap each helper"}, {"line_number": 34, "line_content": "        site: {"}, {"line_number": 35, "line_content": "            title: settingsCache.get('title'),"}, {"line_number": 36, "line_content": "            description: settingsCache.get('description'),"}, {"line_number": 37, "line_content": "            url: urlUtils.urlFor('home', true),"}, {"line_number": 38, "line_content": "            facebook: settingsCache.get('facebook'),"}, {"line_number": 39, "line_content": "            twitter: settingsCache.get('twitter'),"}, {"line_number": 40, "line_content": "            timezone: settingsCache.get('timezone'),"}, {"line_number": 41, "line_content": "            navigation: settingsCache.get('navigation'),"}, {"line_number": 42, "line_content": "            icon: settingsCache.get('icon'),"}, {"line_number": 43, "line_content": "            cover_image: settingsCache.get('cover_image'),"}, {"line_number": 44, "line_content": "            logo: getBlogLogo(),"}, {"line_number": 45, "line_content": "            amp: settingsCache.get('amp')"}, {"line_number": 46, "line_content": "        }"}, {"line_number": 47, "line_content": "    };"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "    if (data.post && data.post.primary_author && data.post.primary_author.name) {"}, {"line_number": 50, "line_content": "        metaData.authorName = data.post.primary_author.name;"}, {"line_number": 51, "line_content": "    }"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "    // @TODO: wrap this in a utility function"}, {"line_number": 54, "line_content": "    return Promise.props(getImageDimensions(metaData)).then(function () {"}, {"line_number": 55, "line_content": "        metaData.structuredData = getStructuredData(metaData);"}, {"line_number": 56, "line_content": "        metaData.schema = getSchema(metaData, data);"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "        return metaData;"}, {"line_number": 59, "line_content": "    }).catch(function (err) {"}, {"line_number": 60, "line_content": "        logging.error(err);"}, {"line_number": 61, "line_content": "        return metaData;"}, {"line_number": 62, "line_content": "    });"}, {"line_number": 63, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function getAuthorImage(data, absolute) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if ((_.includes(context, 'post') || _.includes(context, 'page')) && contextObject.primary_author && contextObject.primary_author.profile_image) {"}, {"line_number": 6, "line_content": "        return urlUtils.urlFor('image', {image: contextObject.primary_author.profile_image}, absolute);"}, {"line_number": 7, "line_content": "    }"}, {"line_number": 8, "line_content": "    return null;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function getCanonicalUrl(data) {"}, {"line_number": 2, "line_content": "    if ((_.includes(data.context, 'post') || _.includes(data.context, 'page'))"}, {"line_number": 3, "line_content": "        && data.post && data.post.canonical_url) {"}, {"line_number": 4, "line_content": "        return data.post.canonical_url;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (_.includes(data.context, 'tag') && data.tag && data.tag.canonical_url) {"}, {"line_number": 8, "line_content": "        return data.tag.canonical_url;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    let url = urlUtils.urlJoin(urlUtils.urlFor('home', true), getUrl(data, false));"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    if (url.indexOf('/amp/')) {"}, {"line_number": 14, "line_content": "        url = url.replace(/\\/amp\\/$/i, '/');"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return url;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getAuthorUrl(data, absolute) {"}, {"line_number": 2, "line_content": "    let context = data.context ? data.context[0] : null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    if (data.author) {"}, {"line_number": 7, "line_content": "        return urlService.getUrlByResourceId(data.author.id, {absolute: absolute, withSubdirectory: true});"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (contextObject && contextObject.primary_author) {"}, {"line_number": 11, "line_content": "        return urlService.getUrlByResourceId(contextObject.primary_author.id, {absolute: absolute, withSubdirectory: true});"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    return null;"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "function getOgImage(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context, false);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (_.includes(context, 'home')) {"}, {"line_number": 6, "line_content": "        const imgUrl = settingsCache.get('og_image') || settingsCache.get('cover_image');"}, {"line_number": 7, "line_content": "        return (imgUrl && urlUtils.relativeToAbsolute(imgUrl)) || null;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (_.includes(context, 'post') || _.includes(context, 'page') || _.includes(context, 'amp')) {"}, {"line_number": 11, "line_content": "        if (contextObject.og_image) {"}, {"line_number": 12, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.og_image);"}, {"line_number": 13, "line_content": "        } else if (contextObject.feature_image) {"}, {"line_number": 14, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.feature_image);"}, {"line_number": 15, "line_content": "        } else if (settingsCache.get('og_image')) {"}, {"line_number": 16, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('og_image'));"}, {"line_number": 17, "line_content": "        } else if (settingsCache.get('cover_image')) {"}, {"line_number": 18, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('cover_image'));"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    if (_.includes(context, 'author') && contextObject.cover_image) {"}, {"line_number": 23, "line_content": "        return urlUtils.relativeToAbsolute(contextObject.cover_image);"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    if (_.includes(context, 'tag')) {"}, {"line_number": 27, "line_content": "        if (contextObject.og_image) {"}, {"line_number": 28, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.og_image);"}, {"line_number": 29, "line_content": "        } else if (contextObject.feature_image) {"}, {"line_number": 30, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.feature_image);"}, {"line_number": 31, "line_content": "        } else if (settingsCache.get('cover_image')) {"}, {"line_number": 32, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('cover_image'));"}, {"line_number": 33, "line_content": "        }"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    return null;"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function generateExcerpt(excerpt, truncateOptions) {"}, {"line_number": 2, "line_content": "    truncateOptions = truncateOptions || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (!truncateOptions.words && !truncateOptions.characters) {"}, {"line_number": 5, "line_content": "        truncateOptions.words = 50;"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // Just uses downsize to truncate, not format"}, {"line_number": 9, "line_content": "    return downsize(excerpt, truncateOptions);"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "function getUrl(data, absolute) {"}, {"line_number": 2, "line_content": "    if (checks.isPost(data)) {"}, {"line_number": 3, "line_content": "        /**"}, {"line_number": 4, "line_content": "         * @NOTE"}, {"line_number": 5, "line_content": "         *"}, {"line_number": 6, "line_content": "         * We return the post preview url if you are making use of the `{{url}}` helper and the post is not published."}, {"line_number": 7, "line_content": "         * If we don't do it, we can break Disqus a bit. See https://github.com/TryGhost/Ghost/issues/9727."}, {"line_number": 8, "line_content": "         *"}, {"line_number": 9, "line_content": "         * This short term fix needs a better solution than this, because this is inconsistent with our private API. The"}, {"line_number": 10, "line_content": "         * private API would still return /404/ for drafts. The public API doesn't serve any drafts - nothing we have to"}, {"line_number": 11, "line_content": "         * worry about. We first would like to see if this resolves the Disqus bug when commenting on preview pages."}, {"line_number": 12, "line_content": "         *"}, {"line_number": 13, "line_content": "         * A long term solution should be part of the final version of Dynamic Routing."}, {"line_number": 14, "line_content": "         */"}, {"line_number": 15, "line_content": "        if (data.status !== 'published' && urlService.getUrlByResourceId(data.id) === '/404/') {"}, {"line_number": 16, "line_content": "            return urlUtils.urlFor({relativeUrl: urlUtils.urlJoin('/p', data.uuid, '/')}, null, absolute);"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "        return urlService.getUrlByResourceId(data.id, {absolute: absolute, withSubdirectory: true});"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    if (checks.isTag(data) || checks.isUser(data)) {"}, {"line_number": 23, "line_content": "        return urlService.getUrlByResourceId(data.id, {absolute: absolute, withSubdirectory: true});"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    if (checks.isNav(data)) {"}, {"line_number": 27, "line_content": "        return urlUtils.urlFor('nav', {nav: data}, absolute);"}, {"line_number": 28, "line_content": "    }"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    // sanitize any trailing `/amp` in the url"}, {"line_number": 31, "line_content": "    return sanitizeAmpUrl(urlUtils.urlFor(data, {}, absolute));"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function sanitizeAmpUrl(url) {"}, {"line_number": 2, "line_content": "    if (url.indexOf('/amp/') !== -1) {"}, {"line_number": 3, "line_content": "        url = url.replace(/\\/amp\\/$/i, '/');"}, {"line_number": 4, "line_content": "    }"}, {"line_number": 5, "line_content": "    return url;"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function getAmplUrl(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (_.includes(context, 'post') && !_.includes(context, 'amp')) {"}, {"line_number": 5, "line_content": "        return urlUtils.urlJoin(urlUtils.urlFor('home', true), getUrl(data, false), 'amp/');"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": "    return null;"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getFaviconUrl() {"}, {"line_number": 2, "line_content": "    return blogIcon.getIconUrl();"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 46, "lines": [{"line_number": 1, "line_content": "function getAssetUrl(path, hasMinFile) {"}, {"line_number": 2, "line_content": "    // CASE: favicon - this is special path with its own functionality"}, {"line_number": 3, "line_content": "    if (path.match(/\\/?favicon\\.(ico|png)$/)) {"}, {"line_number": 4, "line_content": "        // @TODO, resolve this - we should only be resolving subdirectory and extension."}, {"line_number": 5, "line_content": "        return getFaviconUrl();"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    // CASE: Build the output URL"}, {"line_number": 9, "line_content": "    // Add subdirectory..."}, {"line_number": 10, "line_content": "    let output = urlUtils.urlJoin(urlUtils.getSubdir(), '/');"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    // Optionally add /assets/"}, {"line_number": 13, "line_content": "    if (!path.match(/^public/) && !path.match(/^asset/)) {"}, {"line_number": 14, "line_content": "        output = urlUtils.urlJoin(output, 'assets/');"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    // replace \".foo\" with \".min.foo\" if configured"}, {"line_number": 18, "line_content": "    if (hasMinFile && config.get('useMinFiles') !== false) {"}, {"line_number": 19, "line_content": "        path = path.replace(/\\.([^.]*)$/, '.min.$1');"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    // Add the path for the requested asset"}, {"line_number": 23, "line_content": "    output = urlUtils.urlJoin(output, path);"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    // Ensure we have an assetHash"}, {"line_number": 26, "line_content": "    // @TODO rework this!"}, {"line_number": 27, "line_content": "    if (!config.get('assetHash')) {"}, {"line_number": 28, "line_content": "        config.set('assetHash', (crypto.createHash('md5').update(Date.now().toString()).digest('hex')).substring(0, 10));"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "    // if url has # make sure the hash is at th right place"}, {"line_number": 32, "line_content": "    let anchor;"}, {"line_number": 33, "line_content": "    if (path.match('#')) {"}, {"line_number": 34, "line_content": "        const index = output.indexOf('#');"}, {"line_number": 35, "line_content": "        anchor = output.substring(index);"}, {"line_number": 36, "line_content": "        output = output.slice(0, index);"}, {"line_number": 37, "line_content": "    }"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    // Finally add the asset hash to the output URL"}, {"line_number": 40, "line_content": "    output += '?v=' + config.get('assetHash');"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    if (anchor) {"}, {"line_number": 43, "line_content": "        output += anchor;"}, {"line_number": 44, "line_content": "    }"}, {"line_number": 45, "line_content": "    return output;"}, {"line_number": 46, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 78, "lines": [{"line_number": 1, "line_content": "function getDescription(data, root, options = {}) {"}, {"line_number": 2, "line_content": "    const context = root ? root.context : null;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    let description = '';"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // We only return meta_description if provided"}, {"line_number": 7, "line_content": "    if (data.meta_description) {"}, {"line_number": 8, "line_content": "        description = data.meta_description;"}, {"line_number": 9, "line_content": "    } else if (_.includes(context, 'home')) {"}, {"line_number": 10, "line_content": "        const siteDescription = settingsCache.get('meta_description') || settingsCache.get('description');"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        if (options.property) {"}, {"line_number": 13, "line_content": "            // options.property = null/'og'/'twitter'"}, {"line_number": 14, "line_content": "            const optionsPropertyName = `${options.property || 'meta'}_description`;"}, {"line_number": 15, "line_content": "            description = settingsCache.get(optionsPropertyName) || siteDescription || '';"}, {"line_number": 16, "line_content": "        } else {"}, {"line_number": 17, "line_content": "            description = siteDescription;"}, {"line_number": 18, "line_content": "        }"}, {"line_number": 19, "line_content": "    } else if (_.includes(context, 'author') && data.author) {"}, {"line_number": 20, "line_content": "        if (!options.property && _.includes(context, 'paged')) {"}, {"line_number": 21, "line_content": "            description = '';"}, {"line_number": 22, "line_content": "        } else {"}, {"line_number": 23, "line_content": "            // The usage of meta data fields for author is currently not implemented."}, {"line_number": 24, "line_content": "            // We do have meta_description and meta_title fields"}, {"line_number": 25, "line_content": "            // in the users table, but there's no UI to populate those."}, {"line_number": 26, "line_content": "            description = data.author.meta_description"}, {"line_number": 27, "line_content": "                || data.author.bio"}, {"line_number": 28, "line_content": "                || (options.property ? settingsCache.get('meta_description') : '')"}, {"line_number": 29, "line_content": "                || '';"}, {"line_number": 30, "line_content": "        }"}, {"line_number": 31, "line_content": "    } else if (_.includes(context, 'tag') && data.tag) {"}, {"line_number": 32, "line_content": "        if (!options.property && _.includes(context, 'paged')) {"}, {"line_number": 33, "line_content": "            description = '';"}, {"line_number": 34, "line_content": "        } else {"}, {"line_number": 35, "line_content": "            description = data.tag[`${options.property}_description`]"}, {"line_number": 36, "line_content": "                || data.tag.meta_description"}, {"line_number": 37, "line_content": "                || data.tag.description"}, {"line_number": 38, "line_content": "                || (options.property ? settingsCache.get('meta_description') : '')"}, {"line_number": 39, "line_content": "                || '';"}, {"line_number": 40, "line_content": "        }"}, {"line_number": 41, "line_content": "    } else if (_.includes(context, 'post') && data.post) {"}, {"line_number": 42, "line_content": "        if (options.property) {"}, {"line_number": 43, "line_content": "            description = data.post[`${options.property}_description`]"}, {"line_number": 44, "line_content": "                || data.post.custom_excerpt"}, {"line_number": 45, "line_content": "                || data.post.meta_description"}, {"line_number": 46, "line_content": "                || generateExcerpt(data.post.excerpt || '', {words: 50})"}, {"line_number": 47, "line_content": "                || settingsCache.get('description')"}, {"line_number": 48, "line_content": "                || '';"}, {"line_number": 49, "line_content": "        } else {"}, {"line_number": 50, "line_content": "            description = data.post.meta_description || data.post.custom_excerpt || '';"}, {"line_number": 51, "line_content": "        }"}, {"line_number": 52, "line_content": "    } else if (_.includes(context, 'page') && data.post) {"}, {"line_number": 53, "line_content": "        // Page description dependent on legacy object formatting (https://github.com/TryGhost/Ghost/issues/10042)"}, {"line_number": 54, "line_content": "        if (options.property) {"}, {"line_number": 55, "line_content": "            description = data.post[`${options.property}_description`]"}, {"line_number": 56, "line_content": "                || data.post.custom_excerpt"}, {"line_number": 57, "line_content": "                || data.post.meta_description"}, {"line_number": 58, "line_content": "                || generateExcerpt(data.post.excerpt || '', {words: 50})"}, {"line_number": 59, "line_content": "                || settingsCache.get('description')"}, {"line_number": 60, "line_content": "                || '';"}, {"line_number": 61, "line_content": "        } else {"}, {"line_number": 62, "line_content": "            description = data.post.meta_description || data.post.custom_excerpt || '';"}, {"line_number": 63, "line_content": "        }"}, {"line_number": 64, "line_content": "    } else if (_.includes(context, 'page') && data.page) {"}, {"line_number": 65, "line_content": "        if (options.property) {"}, {"line_number": 66, "line_content": "            description = data.page[`${options.property}_description`]"}, {"line_number": 67, "line_content": "                || data.page.custom_excerpt"}, {"line_number": 68, "line_content": "                || data.page.meta_description"}, {"line_number": 69, "line_content": "                || generateExcerpt(data.page.excerpt || '', {words: 50})"}, {"line_number": 70, "line_content": "                || settingsCache.get('description')"}, {"line_number": 71, "line_content": "                || '';"}, {"line_number": 72, "line_content": "        } else {"}, {"line_number": 73, "line_content": "            description = data.page.meta_description || data.page.custom_excerpt || '';"}, {"line_number": 74, "line_content": "        }"}, {"line_number": 75, "line_content": "    }"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "    return (description || '').trim() || null;"}, {"line_number": 78, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "function getTwitterImage(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context, false);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if (_.includes(context, 'home')) {"}, {"line_number": 6, "line_content": "        const imgUrl = settingsCache.get('twitter_image') || settingsCache.get('cover_image');"}, {"line_number": 7, "line_content": "        return (imgUrl && urlUtils.relativeToAbsolute(imgUrl)) || null;"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    if (_.includes(context, 'post') || _.includes(context, 'page') || _.includes(context, 'amp')) {"}, {"line_number": 11, "line_content": "        if (contextObject.twitter_image) {"}, {"line_number": 12, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.twitter_image);"}, {"line_number": 13, "line_content": "        } else if (contextObject.feature_image) {"}, {"line_number": 14, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.feature_image);"}, {"line_number": 15, "line_content": "        } else if (settingsCache.get('twitter_image')) {"}, {"line_number": 16, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('twitter_image'));"}, {"line_number": 17, "line_content": "        } else if (settingsCache.get('cover_image')) {"}, {"line_number": 18, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('cover_image'));"}, {"line_number": 19, "line_content": "        }"}, {"line_number": 20, "line_content": "    }"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "    if (_.includes(context, 'author') && contextObject.cover_image) {"}, {"line_number": 23, "line_content": "        return urlUtils.relativeToAbsolute(contextObject.cover_image);"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    if (_.includes(context, 'tag')) {"}, {"line_number": 27, "line_content": "        if (contextObject.twitter_image) {"}, {"line_number": 28, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.twitter_image);"}, {"line_number": 29, "line_content": "        } else if (contextObject.feature_image) {"}, {"line_number": 30, "line_content": "            return urlUtils.relativeToAbsolute(contextObject.feature_image);"}, {"line_number": 31, "line_content": "        } else if (settingsCache.get('cover_image')) {"}, {"line_number": 32, "line_content": "            return urlUtils.relativeToAbsolute(settingsCache.get('cover_image'));"}, {"line_number": 33, "line_content": "        }"}, {"line_number": 34, "line_content": "    }"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    return null;"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "function getPaginatedUrl(page, data, absolute) {"}, {"line_number": 2, "line_content": "    // If we don't have enough information, return null right away"}, {"line_number": 3, "line_content": "    if (!data || !data.relativeUrl || !data.pagination) {"}, {"line_number": 4, "line_content": "        return null;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // routeKeywords.page: 'page'"}, {"line_number": 8, "line_content": "    const pagePath = urlUtils.urlJoin('/page/');"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    // Try to match the base url, as whatever precedes the pagePath"}, {"line_number": 11, "line_content": "    // routeKeywords.page: 'page'"}, {"line_number": 12, "line_content": "    const baseUrlPattern = new RegExp('(.+)?(/page/\\\\d+/)');"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    const baseUrlMatch = data.relativeUrl.match(baseUrlPattern);"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "    // If there is no match for pagePath, use the original url, without the trailing slash"}, {"line_number": 17, "line_content": "    const baseUrl = baseUrlMatch ? baseUrlMatch[1] : data.relativeUrl.slice(0, -1);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    let newRelativeUrl;"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "    if (page === 'next' && data.pagination.next) {"}, {"line_number": 22, "line_content": "        newRelativeUrl = urlUtils.urlJoin(pagePath, data.pagination.next, '/');"}, {"line_number": 23, "line_content": "    } else if (page === 'prev' && data.pagination.prev) {"}, {"line_number": 24, "line_content": "        newRelativeUrl = data.pagination.prev > 1 ? urlUtils.urlJoin(pagePath, data.pagination.prev, '/') : '/';"}, {"line_number": 25, "line_content": "    } else if (_.isNumber(page)) {"}, {"line_number": 26, "line_content": "        newRelativeUrl = page > 1 ? urlUtils.urlJoin(pagePath, page, '/') : '/';"}, {"line_number": 27, "line_content": "    } else {"}, {"line_number": 28, "line_content": "        // If none of the cases match, return null right away"}, {"line_number": 29, "line_content": "        return null;"}, {"line_number": 30, "line_content": "    }"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    // baseUrl can be undefined, if there was nothing preceding the pagePath (e.g. first page of the index channel)"}, {"line_number": 33, "line_content": "    newRelativeUrl = baseUrl ? urlUtils.urlJoin(baseUrl, newRelativeUrl) : newRelativeUrl;"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "    return urlUtils.urlFor({relativeUrl: newRelativeUrl}, absolute);"}, {"line_number": 36, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function schemaImageObject(metaDataVal) {"}, {"line_number": 2, "line_content": "    let imageObject;"}, {"line_number": 3, "line_content": "    if (!metaDataVal || !metaDataVal.url) {"}, {"line_number": 4, "line_content": "        return null;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    imageObject = {"}, {"line_number": 8, "line_content": "        '@type': 'ImageObject',"}, {"line_number": 9, "line_content": "        url: metaDataVal.url"}, {"line_number": 10, "line_content": "    };"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "    if (metaDataVal.dimensions) {"}, {"line_number": 13, "line_content": "        imageObject.width = metaDataVal.dimensions.width;"}, {"line_number": 14, "line_content": "        imageObject.height = metaDataVal.dimensions.height;"}, {"line_number": 15, "line_content": "    }"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    return imageObject;"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function schemaPublisherObject(metaDataVal) {"}, {"line_number": 2, "line_content": "    let publisherObject;"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    publisherObject = {"}, {"line_number": 5, "line_content": "        '@type': 'Organization',"}, {"line_number": 6, "line_content": "        name: escapeExpression(metaDataVal.site.title),"}, {"line_number": 7, "line_content": "        url: metaDataVal.site.url || null,"}, {"line_number": 8, "line_content": "        logo: schemaImageObject(metaDataVal.site.logo) || null"}, {"line_number": 9, "line_content": "    };"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    return publisherObject;"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function trimSchema(schema) {"}, {"line_number": 2, "line_content": "    const schemaObject = {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    _.each(schema, function (value, key) {"}, {"line_number": 5, "line_content": "        if (value !== null && typeof value !== 'undefined') {"}, {"line_number": 6, "line_content": "            schemaObject[key] = value;"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    return schemaObject;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function trimSameAs(data, context) {"}, {"line_number": 2, "line_content": "    const sameAs = [];"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    if (context === 'post' || context === 'page') {"}, {"line_number": 5, "line_content": "        if (data[context].primary_author.website) {"}, {"line_number": 6, "line_content": "            sameAs.push(escapeExpression(data[context].primary_author.website));"}, {"line_number": 7, "line_content": "        }"}, {"line_number": 8, "line_content": "        if (data[context].primary_author.facebook) {"}, {"line_number": 9, "line_content": "            sameAs.push(socialUrls.facebook(data[context].primary_author.facebook));"}, {"line_number": 10, "line_content": "        }"}, {"line_number": 11, "line_content": "        if (data[context].primary_author.twitter) {"}, {"line_number": 12, "line_content": "            sameAs.push(socialUrls.twitter(data[context].primary_author.twitter));"}, {"line_number": 13, "line_content": "        }"}, {"line_number": 14, "line_content": "    } else if (context === 'author') {"}, {"line_number": 15, "line_content": "        if (data.author.website) {"}, {"line_number": 16, "line_content": "            sameAs.push(escapeExpression(data.author.website));"}, {"line_number": 17, "line_content": "        }"}, {"line_number": 18, "line_content": "        if (data.author.facebook) {"}, {"line_number": 19, "line_content": "            sameAs.push(socialUrls.facebook(data.author.facebook));"}, {"line_number": 20, "line_content": "        }"}, {"line_number": 21, "line_content": "        if (data.author.twitter) {"}, {"line_number": 22, "line_content": "            sameAs.push(socialUrls.twitter(data.author.twitter));"}, {"line_number": 23, "line_content": "        }"}, {"line_number": 24, "line_content": "    }"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "    return sameAs;"}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "function getPostSchema(metaData, data) {"}, {"line_number": 2, "line_content": "    // CASE: metaData.excerpt for post context is populated by either the custom excerpt, the meta description,"}, {"line_number": 3, "line_content": "    // or the automated excerpt of 50 words. It is empty for any other context."}, {"line_number": 4, "line_content": "    const description = metaData.excerpt ? escapeExpression(metaData.excerpt) : null;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    let schema;"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    const context = data.page ? 'page' : 'post';"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    schema = {"}, {"line_number": 11, "line_content": "        '@context': 'https://schema.org',"}, {"line_number": 12, "line_content": "        '@type': 'Article',"}, {"line_number": 13, "line_content": "        publisher: schemaPublisherObject(metaData),"}, {"line_number": 14, "line_content": "        author: {"}, {"line_number": 15, "line_content": "            '@type': 'Person',"}, {"line_number": 16, "line_content": "            name: escapeExpression(data[context].primary_author.name),"}, {"line_number": 17, "line_content": "            image: schemaImageObject(metaData.authorImage),"}, {"line_number": 18, "line_content": "            url: metaData.authorUrl,"}, {"line_number": 19, "line_content": "            sameAs: trimSameAs(data, context),"}, {"line_number": 20, "line_content": "            description: data[context].primary_author.metaDescription ?"}, {"line_number": 21, "line_content": "                escapeExpression(data[context].primary_author.metaDescription) :"}, {"line_number": 22, "line_content": "                null"}, {"line_number": 23, "line_content": "        },"}, {"line_number": 24, "line_content": "        headline: escapeExpression(metaData.metaTitle),"}, {"line_number": 25, "line_content": "        url: metaData.url,"}, {"line_number": 26, "line_content": "        datePublished: metaData.publishedDate,"}, {"line_number": 27, "line_content": "        dateModified: metaData.modifiedDate,"}, {"line_number": 28, "line_content": "        image: schemaImageObject(metaData.coverImage),"}, {"line_number": 29, "line_content": "        keywords: metaData.keywords && metaData.keywords.length > 0 ?"}, {"line_number": 30, "line_content": "            metaData.keywords.join(', ') : null,"}, {"line_number": 31, "line_content": "        description: description,"}, {"line_number": 32, "line_content": "        mainEntityOfPage: {"}, {"line_number": 33, "line_content": "            '@type': 'WebPage',"}, {"line_number": 34, "line_content": "            '@id': metaData.site.url || null"}, {"line_number": 35, "line_content": "        }"}, {"line_number": 36, "line_content": "    };"}, {"line_number": 37, "line_content": "    schema.author = trimSchema(schema.author);"}, {"line_number": 38, "line_content": "    return trimSchema(schema);"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function getHomeSchema(metaData) {"}, {"line_number": 2, "line_content": "    const schema = {"}, {"line_number": 3, "line_content": "        '@context': 'https://schema.org',"}, {"line_number": 4, "line_content": "        '@type': 'WebSite',"}, {"line_number": 5, "line_content": "        publisher: schemaPublisherObject(metaData),"}, {"line_number": 6, "line_content": "        url: metaData.url,"}, {"line_number": 7, "line_content": "        image: schemaImageObject(metaData.coverImage),"}, {"line_number": 8, "line_content": "        mainEntityOfPage: {"}, {"line_number": 9, "line_content": "            '@type': 'WebPage',"}, {"line_number": 10, "line_content": "            '@id': metaData.site.url || null"}, {"line_number": 11, "line_content": "        },"}, {"line_number": 12, "line_content": "        description: metaData.metaDescription ?"}, {"line_number": 13, "line_content": "            escapeExpression(metaData.metaDescription) :"}, {"line_number": 14, "line_content": "            null"}, {"line_number": 15, "line_content": "    };"}, {"line_number": 16, "line_content": "    return trimSchema(schema);"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function getTagSchema(metaData, data) {"}, {"line_number": 2, "line_content": "    const schema = {"}, {"line_number": 3, "line_content": "        '@context': 'https://schema.org',"}, {"line_number": 4, "line_content": "        '@type': 'Series',"}, {"line_number": 5, "line_content": "        publisher: schemaPublisherObject(metaData),"}, {"line_number": 6, "line_content": "        url: metaData.url,"}, {"line_number": 7, "line_content": "        image: schemaImageObject(metaData.coverImage),"}, {"line_number": 8, "line_content": "        name: data.tag.name,"}, {"line_number": 9, "line_content": "        mainEntityOfPage: {"}, {"line_number": 10, "line_content": "            '@type': 'WebPage',"}, {"line_number": 11, "line_content": "            '@id': metaData.site.url || null"}, {"line_number": 12, "line_content": "        },"}, {"line_number": 13, "line_content": "        description: metaData.metaDescription ?"}, {"line_number": 14, "line_content": "            escapeExpression(metaData.metaDescription) :"}, {"line_number": 15, "line_content": "            null"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    return trimSchema(schema);"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function getAuthorSchema(metaData, data) {"}, {"line_number": 2, "line_content": "    const schema = {"}, {"line_number": 3, "line_content": "        '@context': 'https://schema.org',"}, {"line_number": 4, "line_content": "        '@type': 'Person',"}, {"line_number": 5, "line_content": "        sameAs: trimSameAs(data, 'author'),"}, {"line_number": 6, "line_content": "        name: escapeExpression(data.author.name),"}, {"line_number": 7, "line_content": "        url: metaData.authorUrl,"}, {"line_number": 8, "line_content": "        image: schemaImageObject(metaData.coverImage),"}, {"line_number": 9, "line_content": "        mainEntityOfPage: {"}, {"line_number": 10, "line_content": "            '@type': 'WebPage',"}, {"line_number": 11, "line_content": "            '@id': metaData.site.url || null"}, {"line_number": 12, "line_content": "        },"}, {"line_number": 13, "line_content": "        description: metaData.metaDescription ?"}, {"line_number": 14, "line_content": "            escapeExpression(metaData.metaDescription) :"}, {"line_number": 15, "line_content": "            null"}, {"line_number": 16, "line_content": "    };"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    return trimSchema(schema);"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function getSchema(metaData, data) {"}, {"line_number": 2, "line_content": "    if (!config.isPrivacyDisabled('useStructuredData')) {"}, {"line_number": 3, "line_content": "        const context = data.context ? data.context : null;"}, {"line_number": 4, "line_content": "        if (_.includes(context, 'post') || _.includes(context, 'page') || _.includes(context, 'amp')) {"}, {"line_number": 5, "line_content": "            return getPostSchema(metaData, data);"}, {"line_number": 6, "line_content": "        } else if (_.includes(context, 'home')) {"}, {"line_number": 7, "line_content": "            return getHomeSchema(metaData);"}, {"line_number": 8, "line_content": "        } else if (_.includes(context, 'tag')) {"}, {"line_number": 9, "line_content": "            return getTagSchema(metaData, data);"}, {"line_number": 10, "line_content": "        } else if (_.includes(context, 'author')) {"}, {"line_number": 11, "line_content": "            return getAuthorSchema(metaData, data);"}, {"line_number": 12, "line_content": "        }"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "    return null;"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function getExcerpt(data) {"}, {"line_number": 2, "line_content": "    // NOTE: should use 'post' OR 'page' once https://github.com/TryGhost/Ghost/issues/10042 is resolved"}, {"line_number": 3, "line_content": "    if (!data.post) {"}, {"line_number": 4, "line_content": "        return;"}, {"line_number": 5, "line_content": "    }"}, {"line_number": 6, "line_content": "    // There's a specific order for description fields (not <meta name=\"description\" /> !!) in structured data"}, {"line_number": 7, "line_content": "    // and schema.org which is used the description fields (see https://github.com/TryGhost/Ghost/issues/8793):"}, {"line_number": 8, "line_content": "    // 1. CASE: custom_excerpt is populated via the UI"}, {"line_number": 9, "line_content": "    // 2. CASE: no custom_excerpt, but meta_description is poplated via the UI"}, {"line_number": 10, "line_content": "    // 3. CASE: fall back to automated excerpt of 50 words if neither custom_excerpt nor meta_description is provided"}, {"line_number": 11, "line_content": "    const customExcerpt = data.post.excerpt || data.post.custom_excerpt;"}, {"line_number": 12, "line_content": "    const metaDescription = data.post.meta_description;"}, {"line_number": 13, "line_content": "    const fallbackExcerpt = data.post.excerpt ? generateExcerpt(data.post.excerpt, {words: 50}) : '';"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "    return customExcerpt ? customExcerpt : metaDescription ? metaDescription : fallbackExcerpt;"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function getModifiedDate(data) {"}, {"line_number": 2, "line_content": "    let context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    let modDate;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    if (contextObject) {"}, {"line_number": 8, "line_content": "        modDate = contextObject.updated_at || null;"}, {"line_number": 9, "line_content": "        if (modDate) {"}, {"line_number": 10, "line_content": "            return new Date(modDate).toISOString();"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": "    }"}, {"line_number": 13, "line_content": "    return null;"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function getAuthorFacebookUrl(data) {"}, {"line_number": 2, "line_content": "    const context = data.context ? data.context : null;"}, {"line_number": 3, "line_content": "    const contextObject = getContextObject(data, context);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    if ((_.includes(context, 'post') || _.includes(context, 'page')) && contextObject.primary_author && contextObject.primary_author.facebook) {"}, {"line_number": 6, "line_content": "        return contextObject.primary_author.facebook;"}, {"line_number": 7, "line_content": "    } else if (_.includes(context, 'author') && contextObject.facebook) {"}, {"line_number": 8, "line_content": "        return contextObject.facebook;"}, {"line_number": 9, "line_content": "    }"}, {"line_number": 10, "line_content": "    return null;"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 61, "lines": [{"line_number": 1, "line_content": "function loadNconf(options) {"}, {"line_number": 2, "line_content": "    debug('config start');"}, {"line_number": 3, "line_content": "    options = options || {};"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    const baseConfigPath = options.baseConfigPath || __dirname;"}, {"line_number": 6, "line_content": "    const customConfigPath = options.customConfigPath || process.cwd();"}, {"line_number": 7, "line_content": "    const nconf = new Nconf.Provider();"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    // ## Load Config"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    // no channel can override the overrides"}, {"line_number": 12, "line_content": "    nconf.file('overrides', path.join(baseConfigPath, 'overrides.json'));"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    // command line arguments take precedence, then environment variables"}, {"line_number": 15, "line_content": "    nconf.argv();"}, {"line_number": 16, "line_content": "    nconf.env({separator: '__', parseValues: true});"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "    // Now load various config json files"}, {"line_number": 19, "line_content": "    nconf.file('custom-env', path.join(customConfigPath, 'config.' + env + '.json'));"}, {"line_number": 20, "line_content": "    if (env !== 'testing') {"}, {"line_number": 21, "line_content": "        nconf.file('local-env', path.join(customConfigPath, 'config.local.json'));"}, {"line_number": 22, "line_content": "    }"}, {"line_number": 23, "line_content": "    nconf.file('default-env', path.join(baseConfigPath, 'env', 'config.' + env + '.json'));"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    // Finally, we load defaults, if nothing else has a value this will"}, {"line_number": 26, "line_content": "    nconf.file('defaults', path.join(baseConfigPath, 'defaults.json'));"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    // ## Config Methods"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "    // Expose dynamic utility methods"}, {"line_number": 31, "line_content": "    urlHelpers.bindAll(nconf);"}, {"line_number": 32, "line_content": "    helpers.bindAll(nconf);"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    // ## Sanitization"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    // transform all relative paths to absolute paths"}, {"line_number": 37, "line_content": "    localUtils.makePathsAbsolute(nconf, nconf.get('paths'), 'paths');"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "    // transform sqlite filename path for Ghost-CLI"}, {"line_number": 40, "line_content": "    localUtils.sanitizeDatabaseProperties(nconf);"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "    // Check if the URL in config has a protocol"}, {"line_number": 43, "line_content": "    localUtils.checkUrlProtocol(nconf.get('url'));"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "    // Ensure that the content path exists"}, {"line_number": 46, "line_content": "    localUtils.doesContentPathExist(nconf.get('paths:contentPath'));"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "    // ## Other Stuff!"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "    // Manually set values"}, {"line_number": 51, "line_content": "    nconf.set('env', env);"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "    // Wrap this in a check, because else nconf.get() is executed unnecessarily"}, {"line_number": 54, "line_content": "    // To output this, use DEBUG=ghost:*,ghost-config"}, {"line_number": 55, "line_content": "    if (_debug.enabled('ghost-config')) {"}, {"line_number": 56, "line_content": "        debug(nconf.get());"}, {"line_number": 57, "line_content": "    }"}, {"line_number": 58, "line_content": ""}, {"line_number": 59, "line_content": "    debug('config end');"}, {"line_number": 60, "line_content": "    return nconf;"}, {"line_number": 61, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "async function createPost(data) {"}, {"line_number": 2, "line_content": "    const post = testUtils.DataGenerator.forKnex.createPost(data);"}, {"line_number": 3, "line_content": "    await models.Post.add(post, {context: {internal: true}});"}, {"line_number": 4, "line_content": "    return post;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function buildMember(status, products = []) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        uuid: '1234',"}, {"line_number": 4, "line_content": "        email: 'test@example.com',"}, {"line_number": 5, "line_content": "        name: 'John Doe',"}, {"line_number": 6, "line_content": "        firstname: 'John',"}, {"line_number": 7, "line_content": "        avatar_image: null,"}, {"line_number": 8, "line_content": "        subscriptions: [],"}, {"line_number": 9, "line_content": "        paid: status !== 'free',"}, {"line_number": 10, "line_content": "        status: status,"}, {"line_number": 11, "line_content": "        products"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "async function createPost(data) {"}, {"line_number": 2, "line_content": "    const post = testUtils.DataGenerator.forKnex.createPost(data);"}, {"line_number": 3, "line_content": "    await models.Post.add(post, {context: {internal: true}});"}, {"line_number": 4, "line_content": "    return post;"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function buildMember(status, products = []) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        uuid: '1234',"}, {"line_number": 4, "line_content": "        email: 'test@example.com',"}, {"line_number": 5, "line_content": "        name: 'John Doe',"}, {"line_number": 6, "line_content": "        firstname: 'John',"}, {"line_number": 7, "line_content": "        avatar_image: null,"}, {"line_number": 8, "line_content": "        subscriptions: [],"}, {"line_number": 9, "line_content": "        paid: status !== 'free',"}, {"line_number": 10, "line_content": "        status: status,"}, {"line_number": 11, "line_content": "        products"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function testPosts(posts, map) {"}, {"line_number": 2, "line_content": "    posts.should.be.an.Array();"}, {"line_number": 3, "line_content": "    posts.length.should.eql(DEFAULT_POST_FIXTURE_COUNT + Object.keys(map).length);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // Free post"}, {"line_number": 6, "line_content": "    for (const postID in map) {"}, {"line_number": 7, "line_content": "        const expectData = map[postID];"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        const post = posts.find(p => p.id === postID);"}, {"line_number": 10, "line_content": "        should.exist(post);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        post.should.match(expectData);"}, {"line_number": 13, "line_content": "    }"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function assertCorrectFrontendHeaders(res) {"}, {"line_number": 2, "line_content": "    should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 3, "line_content": "    should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 4, "line_content": "    should.not.exist(res.headers['set-cookie']);"}, {"line_number": 5, "line_content": "    should.exist(res.headers.date);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function assertContentIsPresent(res) {"}, {"line_number": 2, "line_content": "    res.text.should.containEql('<h2 id=\"markdown\">markdown</h2>');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function assertContentIsAbsent(res) {"}, {"line_number": 2, "line_content": "    res.text.should.not.containEql('<h2 id=\"markdown\">markdown</h2>');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "async function loginAsMember(email) {"}, {"line_number": 2, "line_content": "        // membersService needs to be required after Ghost start so that settings"}, {"line_number": 3, "line_content": "        // are pre-populated with defaults"}, {"line_number": 4, "line_content": "        const membersService = require('../../core/server/services/members');"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        const signinLink = await membersService.api.getMagicLink(email);"}, {"line_number": 7, "line_content": "        const signinURL = new URL(signinLink);"}, {"line_number": 8, "line_content": "        // request needs a relative path rather than full url with host"}, {"line_number": 9, "line_content": "        const signinPath = `${signinURL.pathname}${signinURL.search}`;"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        // perform a sign-in request to set members cookies on superagent"}, {"line_number": 12, "line_content": "        await request.get(signinPath)"}, {"line_number": 13, "line_content": "            .expect(302)"}, {"line_number": 14, "line_content": "            .expect((res) => {"}, {"line_number": 15, "line_content": "                const redirectUrl = new URL(res.headers.location, testUtils.API.getURL());"}, {"line_number": 16, "line_content": "                should.exist(redirectUrl.searchParams.get('success'));"}, {"line_number": 17, "line_content": "                redirectUrl.searchParams.get('success').should.eql('true');"}, {"line_number": 18, "line_content": "            });"}, {"line_number": 19, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function assertCorrectFrontendHeaders(res) {"}, {"line_number": 2, "line_content": "    should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 3, "line_content": "    should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 4, "line_content": "    should.not.exist(res.headers['set-cookie']);"}, {"line_number": 5, "line_content": "    should.exist(res.headers.date);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function assertCorrectFrontendHeaders(res) {"}, {"line_number": 2, "line_content": "    should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 3, "line_content": "    should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 4, "line_content": "    should.not.exist(res.headers['set-cookie']);"}, {"line_number": 5, "line_content": "    should.exist(res.headers.date);"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "async function addPosts() {"}, {"line_number": 2, "line_content": "        await testUtils.clearData();"}, {"line_number": 3, "line_content": "        await testUtils.initData();"}, {"line_number": 4, "line_content": "        await testUtils.fixtures.insertPostsAndTags();"}, {"line_number": 5, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "async function createPublishedPostEmail() {"}, {"line_number": 2, "line_content": "    const post = {"}, {"line_number": 3, "line_content": "        title: 'A random test post',"}, {"line_number": 4, "line_content": "        status: 'draft',"}, {"line_number": 5, "line_content": "        feature_image_alt: 'Testing sending',"}, {"line_number": 6, "line_content": "        feature_image_caption: 'Testing <b>feature image caption</b>',"}, {"line_number": 7, "line_content": "        created_at: moment().subtract(2, 'days').toISOString(),"}, {"line_number": 8, "line_content": "        updated_at: moment().subtract(2, 'days').toISOString(),"}, {"line_number": 9, "line_content": "        created_by: ObjectId().toHexString(),"}, {"line_number": 10, "line_content": "        updated_by: ObjectId().toHexString()"}, {"line_number": 11, "line_content": "    };"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "    const res = await agent.post('posts/')"}, {"line_number": 14, "line_content": "        .body({posts: [post]})"}, {"line_number": 15, "line_content": "        .expectStatus(201);"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "    const id = res.body.posts[0].id;"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    const updatedPost = {"}, {"line_number": 20, "line_content": "        status: 'published',"}, {"line_number": 21, "line_content": "        updated_at: res.body.posts[0].updated_at"}, {"line_number": 22, "line_content": "    };"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "    const newsletterSlug = fixtureManager.get('newsletters', 0).slug;"}, {"line_number": 25, "line_content": "    await agent.put(`posts/${id}/?newsletter=${newsletterSlug}`)"}, {"line_number": 26, "line_content": "        .body({posts: [updatedPost]})"}, {"line_number": 27, "line_content": "        .expectStatus(200);"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "    const emailModel = await models.Email.findOne({"}, {"line_number": 30, "line_content": "        post_id: id"}, {"line_number": 31, "line_content": "    });"}, {"line_number": 32, "line_content": "    should.exist(emailModel);"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "    return emailModel;"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getURL() {"}, {"line_number": 2, "line_content": "    return protocol + host;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getSigninURL() {"}, {"line_number": 2, "line_content": "    return url.resolve(protocol + host + ':' + port, 'ghost/signin/');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function getAdminURL() {"}, {"line_number": 2, "line_content": "    return url.resolve(protocol + host + ':' + port, 'ghost/');"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function isISO8601(date) {"}, {"line_number": 2, "line_content": "    return moment(date).parsingFlags().iso;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function checkResponseValue(jsonResponse, expectedProperties) {"}, {"line_number": 2, "line_content": "    const providedProperties = _.keys(jsonResponse);"}, {"line_number": 3, "line_content": "    const missing = _.difference(expectedProperties, providedProperties);"}, {"line_number": 4, "line_content": "    const unexpected = _.difference(providedProperties, expectedProperties);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    _.each(missing, function (prop) {"}, {"line_number": 7, "line_content": "        jsonResponse.should.have.property(prop);"}, {"line_number": 8, "line_content": "    });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    _.each(unexpected, function (prop) {"}, {"line_number": 11, "line_content": "        jsonResponse.should.not.have.property(prop);"}, {"line_number": 12, "line_content": "    });"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "    providedProperties.length.should.eql(expectedProperties.length);"}, {"line_number": 15, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function checkResponse(jsonResponse, objectType, additionalProperties, missingProperties, onlyProperties, options) {"}, {"line_number": 2, "line_content": "    options = options || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    let checkProperties = options.public ? (this.expectedProperties[objectType].public || this.expectedProperties[objectType]) : (this.expectedProperties[objectType].default || this.expectedProperties[objectType]);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    checkProperties = onlyProperties ? onlyProperties : checkProperties;"}, {"line_number": 7, "line_content": "    checkProperties = additionalProperties ? checkProperties.concat(additionalProperties) : checkProperties;"}, {"line_number": 8, "line_content": "    checkProperties = missingProperties ? _.xor(checkProperties, missingProperties) : checkProperties;"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "    checkResponseValue(jsonResponse, checkProperties);"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function h(){if(404===this.status)return t.removeEventListener(\"scroll\",p),void t.removeEventListener(\"resize\",f);this.response.querySelectorAll(\"article.post-card\").forEach(function(e){r.appendChild(i.importNode(e,!0))});var e=this.response.querySelector(\"link[rel=next]\");e?l.href=e.href:(t.removeEventListener(\"scroll\",p),t.removeEventListener(\"resize\",f)),c=i.documentElement.scrollHeight,d=o=!1}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function e(){var e;d||(s+a<=c-n?o=!1:(d=!0,(e=new t.XMLHttpRequest).responseType=\"document\",e.addEventListener(\"load\",h),e.open(\"GET\",l.href),e.send(null)))}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function p(){s=t.scrollY,u()}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function u(){o||t.requestAnimationFrame(e),o=!0}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 1, "lines": [{"line_number": 1, "line_content": "function f(){a=t.innerHeight,c=i.documentElement.scrollHeight,u()}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function fixDataIndexes(origData, storedData) {"}, {"line_number": 2, "line_content": "    const indexedData = {};"}, {"line_number": 3, "line_content": "    _.each(origData, function (orig, index) {"}, {"line_number": 4, "line_content": "        indexedData[index + 1] = _.find(storedData, function (stored) {"}, {"line_number": 5, "line_content": "            return stored.slug === orig.slug;"}, {"line_number": 6, "line_content": "        });"}, {"line_number": 7, "line_content": "    });"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return indexedData;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function createUsers(knex, DataGenerator) {"}, {"line_number": 2, "line_content": "    // First, loop through and prep the data"}, {"line_number": 3, "line_content": "    data.users = _.map(data.users, function (user) {"}, {"line_number": 4, "line_content": "        return DataGenerator.forKnex.createUser(user);"}, {"line_number": 5, "line_content": "    });"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    // Next, insert it into the database & return the correctly indexed data"}, {"line_number": 8, "line_content": "    return writeFetchFix(knex, 'users');"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createTags(knex, DataGenerator) {"}, {"line_number": 2, "line_content": "    data.tags = _.map(data.tags, function (tag) {"}, {"line_number": 3, "line_content": "        return DataGenerator.forKnex.createTag(tag);"}, {"line_number": 4, "line_content": "    });"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    // Next, insert it into the database & return the correctly indexed data"}, {"line_number": 7, "line_content": "    return writeFetchFix(knex, 'tags');"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function writeFetchFix(knex, resource) {"}, {"line_number": 2, "line_content": "    return knex(resource).insert(data[resource]).then(function () {"}, {"line_number": 3, "line_content": "        return knex(resource).select();"}, {"line_number": 4, "line_content": "    }).then(function (stored) {"}, {"line_number": 5, "line_content": "        return fixDataIndexes(data[resource], stored);"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 40, "lines": [{"line_number": 1, "line_content": "function createPosts(knex, DataGenerator) {"}, {"line_number": 2, "line_content": "    const postsTags = [];"}, {"line_number": 3, "line_content": "    const postsAuthors = [];"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    data.posts = _.map(data.posts, function (post) {"}, {"line_number": 6, "line_content": "        post = DataGenerator.forKnex.createPost(post);"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "        _.each(post.tags, function (tagId) {"}, {"line_number": 9, "line_content": "            postsTags.push({"}, {"line_number": 10, "line_content": "                id: ObjectId().toHexString(),"}, {"line_number": 11, "line_content": "                post_id: post.id,"}, {"line_number": 12, "line_content": "                tag_id: tagId"}, {"line_number": 13, "line_content": "            });"}, {"line_number": 14, "line_content": "        });"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        delete post.tags;"}, {"line_number": 17, "line_content": "        return post;"}, {"line_number": 18, "line_content": "    });"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "    _.each(data.posts, function (post) {"}, {"line_number": 21, "line_content": "        if (post.authors) {"}, {"line_number": 22, "line_content": "            _.each(post.authors, function (author) {"}, {"line_number": 23, "line_content": "                postsAuthors.push({"}, {"line_number": 24, "line_content": "                    id: ObjectId().toHexString(),"}, {"line_number": 25, "line_content": "                    post_id: post.id,"}, {"line_number": 26, "line_content": "                    author_id: author.id"}, {"line_number": 27, "line_content": "                });"}, {"line_number": 28, "line_content": "            });"}, {"line_number": 29, "line_content": "        }"}, {"line_number": 30, "line_content": "    });"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "    // Next, insert it into the database & return the correctly indexed data"}, {"line_number": 33, "line_content": "    return writeFetchFix(knex, 'posts').then(function (createdPosts) {"}, {"line_number": 34, "line_content": "        return knex('posts_tags').insert(postsTags).then(function () {"}, {"line_number": 35, "line_content": "            return createdPosts;"}, {"line_number": 36, "line_content": "        }).then(function () {"}, {"line_number": 37, "line_content": "            return knex('posts_authors').insert(postsAuthors);"}, {"line_number": 38, "line_content": "        });"}, {"line_number": 39, "line_content": "    });"}, {"line_number": 40, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function createBasic(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 7, "line_content": "            created_at: new Date(),"}, {"line_number": 8, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 9, "line_content": "            updated_at: new Date()"}, {"line_number": 10, "line_content": "        });"}, {"line_number": 11, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function createTag(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            name: 'tag',"}, {"line_number": 7, "line_content": "            slug: 'slug',"}, {"line_number": 8, "line_content": "            feature_image: null,"}, {"line_number": 9, "line_content": "            meta_title: null,"}, {"line_number": 10, "line_content": "            meta_description: null,"}, {"line_number": 11, "line_content": "            description: 'description',"}, {"line_number": 12, "line_content": "            visibility: 'public',"}, {"line_number": 13, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 14, "line_content": "            created_at: new Date(),"}, {"line_number": 15, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 16, "line_content": "            updated_at: new Date()"}, {"line_number": 17, "line_content": "        });"}, {"line_number": 18, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "function createPost(overrides) {"}, {"line_number": 2, "line_content": "        overrides = overrides || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 5, "line_content": "        let mobiledocObj;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        if (!newObj.mobiledoc) {"}, {"line_number": 8, "line_content": "            newObj.mobiledoc = DataGenerator.markdownToMobiledoc('## markdown');"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        if (!newObj.html) {"}, {"line_number": 12, "line_content": "            mobiledocObj = JSON.parse(newObj.mobiledoc);"}, {"line_number": 13, "line_content": "            newObj.html = mobiledocObj.cards && mobiledocObj.cards[0][1].markdown;"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 17, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 18, "line_content": "            uuid: uuid.v4(),"}, {"line_number": 19, "line_content": "            title: 'title',"}, {"line_number": 20, "line_content": "            status: 'published',"}, {"line_number": 21, "line_content": "            feature_image: null,"}, {"line_number": 22, "line_content": "            featured: false,"}, {"line_number": 23, "line_content": "            type: 'post',"}, {"line_number": 24, "line_content": "            slug: 'slug',"}, {"line_number": 25, "line_content": "            updated_at: new Date(),"}, {"line_number": 26, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 27, "line_content": "            created_at: new Date(),"}, {"line_number": 28, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 29, "line_content": "            published_at: new Date(),"}, {"line_number": 30, "line_content": "            published_by: DataGenerator.Content.users[0].id,"}, {"line_number": 31, "line_content": "            visibility: 'public'"}, {"line_number": 32, "line_content": "        });"}, {"line_number": 33, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "function createGenericPost(uniqueInteger, status, locale, authors) {"}, {"line_number": 2, "line_content": "        status = status || 'draft';"}, {"line_number": 3, "line_content": "        locale = locale || null;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        return createPost({"}, {"line_number": 6, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 7, "line_content": "            title: 'Test Post ' + uniqueInteger,"}, {"line_number": 8, "line_content": "            slug: 'ghost-from-fiction-to-function-' + uniqueInteger,"}, {"line_number": 9, "line_content": "            mobiledoc: DataGenerator.markdownToMobiledoc('Three days ago I released a <a title=\"Ghost\" href=\"http:\\/\\/john.onolan.org\\/ghost\\/\">concept page<\\/a> for a lite version of WordPress that I\\'ve been thinking about for a long time, called Ghost. I think it\\'s fair to say that I didn\\'t quite anticipate how strong the reaction would be - and I\\'ve hardly had time to catch my breath in the last 72 hours.\\n\\nThe response was overwhelming, and overwhelmingly positive. In the first 6 hours my site got 35,000 page views after hitting the number 1 slot on <a href=\"http:\\/\\/news.ycombinator.com\\/item?id=4743245\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/news.ycombinator.com\\']);\">Hacker News<\\/a>.&nbsp;As of right now, the traffic count is just over <a href=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/Screen-Shot-2012-11-09-at-17.51.21.png\" rel=\"lightbox\" class=\"cboxElement\">91,000 page views<\\/a>&nbsp;- and Ghost has been featured all over the place. Notable mentions so far include Christina Warren from Mashable, who <a href=\"http:\\/\\/christina.is\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/christina.is\\']);\">wrote about it<\\/a>. Michael Carney from PandoDaily <a href=\"http:\\/\\/pandodaily.com\\/2012\\/11\\/07\\/wordpress-guru-designs-a-concept-blogging-platform-that-doesnt-suck-gets-rave-reviews\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/pandodaily.com\\']);\">interviewed me about it<\\/a>. Someone even <a href=\"http:\\/\\/www.voicens.com\\/web\\/?p=4425\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/www.voicens.com\\']);\">wrote about it in Chinese<\\/a>. That\\'s pretty cool.\\n\\n\\nThe feedback has been amazing, and while it\\'s impossible to reply to all of the messages individually, I\\'m getting to as many of them as I can and I want to thank each and every one of you who took the time to send me a message or share the concept because you liked it. Now that the initial storm has died down a bit, I wanted to take some time to answer some of the more common questions and talk about what\\'s next.\\n<h2>FAQ - Continued...<\\/h2>\\n\\nThe most common question, bizarrely:\\n<h5><em><strong>Oh my god, why is that whole page made of images? What\\'s wrong with you? \\/\\/ I can\\'t take you seriously \\/\\/ Don\\'t you know anything about the web? \\/\\/ You are literally Satan re-incarnate.<\\/strong><\\/em><\\/h5>\\n\\nThis was really the only negativity I got in response to the post, and it surprised me. I put together the concept page as... just that... a concept. It was a way for me to get the ideas out of my head and \"down on paper\" - or so to speak. I used photoshop as a <em>tool<\\/em> to write down my idea with text and images. If I used a sketchbook as a <em>tool&nbsp;<\\/em>to create images and handwritten notes, then uploaded scans of it, I doubt anyone would complain. The concept page was never supposed to be a finished product because I had no idea if there would be any interest in it. I had no motivation to waste hours coding a custom layout for something might only ever be read by a few people and then forgotten.\\n\\nHardware manufacturers make hundreds of foam cutout prototypes of products before they build one with working buttons and screens. I\\'m aware of all the usability problems with a web page made of images, and equally, foam cutouts without buttons or screens aren\\'t particularly user friendly either. They\\'re not supposed to be.\\n\\nLet\\'s move on.\\n<h5><em><strong>What? Why no comments? I need comments.<\\/strong><\\/em><\\/h5>\\n\\nBecause comments add a layer of complexity that is beyond the core focus of this platform, which is publishing. Again, that\\'s not to say you couldn\\'t have any comments. This could easily be added with a dedicated plugin where you own the data or (as mentioned) there are third party providers such as Disqus, IntenseDebate, Livefyre and Facebook who all have great platforms. The point of this isn\\'t to say \"you can\\'t have comments\" - it\\'s to say \"comments aren\\'t on by default\". It\\'s about simplicity, more than anything else.\\n<h5><em><strong>Yeah, but WordPress are already going to revise their dashboard, WordPress.com is experimenting with a potential simplified version... so why bother with this?<\\/strong><\\/em><\\/h5>\\n\\n<a href=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/newwp.png\" rel=\"lightbox[2102]\" title=\"newwp\" class=\"cboxElement\"><img class=\"alignnone size-large wp-image-2117\" title=\"newwp\" src=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/newwp-550x210.png\" alt=\"\" width=\"550\" height=\"210\"><\\/a>\\n\\nSorry, but Tumblr already did this - it\\'s not the future of blogging, it\\'s the past.\\n\\nGhost isn\\'t about sharing \"Fuck Yeah [<a href=\"http:\\/\\/fuckyeahdogs.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahdogs.tumblr.com\\']);\">Dogs<\\/a>\\/<a href=\"http:\\/\\/fuckyeahsharks.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahsharks.tumblr.com\\']);\" rel=\"lightbox\" class=\"cboxElement\">Sharks<\\/a>\\/<a href=\"http:\\/\\/fuckyeahgirlswithtattoos.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahgirlswithtattoos.tumblr.com\\']);\">Girls with Tattoos<\\/a>]\" - it\\'s about publishing - which means writing - rather than mashing a few buttons to make sure that everyone can see and appreciate your latest funny picture\\/status, which is surely the most funny picture\\/status you\\'ve ever posted.\\n\\nTumblr, Pinterest and Facebook already have this locked down.&nbsp;It\\'s not the future.\\n<h5><em><strong>So... are you actually going to build this thing?<\\/strong><\\/em><\\/h5>\\n\\nThe concept page was a way for me to test demand and interest. To see if anyone actually agreed with my frustrations and, more importantly, my solutions. I plucked a random figure of \"10,000 pageviews\" out of the air before I hit the publish button. If it got less than 10,000 pageviews, I would surrender to the fact that it would only ever be an idea. I\\'ve now exceeded that goal 9 times over, so yes, I\\'m looking at how Ghost can now be made into a reality.\\n<h5><em><strong>How can I find out when it\\'s done? \\/\\/ SHUT UP AND TAKE MY MONEY<\\/strong><\\/em><\\/h5>\\n\\nOk, ok - there\\'s a holding page up on <a href=\"http:\\/\\/tryghost.org\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/tryghost.org\\']);\">http:\\/\\/TryGhost.org<\\/a> - put your email address in.\\n<hr>\\n<h3>How are you going to do this?<\\/h3>\\n\\nThere\\'s three main ways of going about this, each has merits as well as drawbacks.\\n\\n<em><strong>1.) Build it from scratch<\\/strong><\\/em> - Many people (particularly the Hacker News crowd) expressed the sentiment that there was little point in forking WordPress. When you\\'re going to strip out so much, you get to a point where you might as well start from scratch anyway. Take away the crutches of being stuck with older technologies and put together something which is as sophisticated in code as it is in UI\\/UX.\\n<ul>\\n<li><em>Pros:<\\/em> The idea of something completely new is exciting, opportunity to build something very sophisticated, complete control over everything.<\\/li>\\n<li><em>Cons:<\\/em> Lose the &nbsp;WordPress ecosystem which includes millions of users and thousands of developers, potentially spend the next 6 months fighting over whether to use PHP\\/RoR\\/Django\\/Python\\/Node\\/Whateverthefuck because everyone loves to evangelise the technology they know best.<\\/li>\\n<\\/ul>\\n\\n<em><strong>2.) Fork WordPress<\\/strong><\\/em> - This was the original idea I put out. Take the WordPress codebase, as is, and modify it to turn it into something new. Initially the codebase is practically the same, which means developers already know it. Then it can change over time and evolve into its own thing.\\n<ul>\\n<li><em>Pros:<\\/em> Easy start with existing codebase, potential to evolve, doesn\\'t lose WordPress ecosystem initially.<\\/li>\\n<li><em>Cons:<\\/em> Stuck with existing codebase - the good as well as the bad, &nbsp;eventually needs to be rewritten completely, less control, loses the WordPress ecosystem after a while anyway, makes it complicated to transition from legacy code to new code.<\\/li>\\n<\\/ul>\\n\\n<em><strong>3.) Make it a plugin\\/extension<\\/strong><\\/em> - Lots of people asked why Ghost couldn\\'t just be a WordPress plugin. It would certainly be the easiest route of the 3, it\\'s possible to completely remove \\/wp-admin\\/ and replace with with \\/ghost\\/ ... but I feel like it kind of misses the point. This route bolts Ghost on, but it\\'s still WordPress under the hood. From a UI\\/UX standpoint it would function - but it wouldn\\'t revolutionise anything else. It makes WordPress itself about blogging again, rather than creating something new.\\n<ul>\\n<li><em>Pros:<\\/em> Very easy development, very easy deployment, keeps WordPress ecosystem forever, doesn\\'t force anyone to change.<\\/li>\\n<li><em>Cons:<\\/em> The least exciting (for me, personally), much less control, it would be much harder to maintain something like this on a non-profit basis - which loses a piece of what Ghost is about.<\\/li>\\n<\\/ul>\\n<h3>What\\'s the answer?<\\/h3>\\n\\nI\\'ve spoken to a lot of smart people over the last few days. The one thing that everyone seems to agree on is that a fork is the worst of both worlds. So the one thing that I suggested as a way of making this happen, is the least likely to work in reality. Remember the foam prototype metaphor earlier? Learning and iterating - that\\'s what happening now.\\n\\nThat leaves a choice between WordPress plugin or fresh build. The answer? Both.\\n\\nA WordPress plugin will act as a proof of concept and a working prototype, initially, because it\\'s easier to leverage the existing WordPress ecosystem to create it than to go into a cave for 6 months trying to build this amazing thing that everyone will have forgotten about.\\n\\nThe plugin will not be perfect. It will add the Ghost UI\\/UX and as much functionality as we can cram into it. It will completely remove \\/wp-admin\\/ and replace it with \\/ghost\\/ - effectively using WordPress core as a basic foundation to build on top of. It will give people who don\\'t want to switch away from WordPress access to the Ghost UX which they want to have, and it will give people who want the full Ghost platform a taste of what\\'s to come.\\n\\nIt will allow us to develop and learn and iterate on the concept pretty rapidly, which has a great deal of value.\\n\\nThis is step one. Assuming the plugin is actually used by people - it would then justify exploring building the standalone version of Ghost from the ground up. The plugin would subsequently serve as a great marketing tool for the platform. Think of it as an upgrade path. But that\\'s a long way away. Having the idea is the easy part. Making it happen is what counts.\\n\\nHappily - amongst the thousands of people talking about Ghost for the last few days - several have been talking about how they\\'ve already built some working prototypes of my mockups and turned them into WordPress plugins or just local development sites. These will likely go on to be the starting point of the first Ghost plugin.<\\/p>\\n\\nThere\\'s a lot to do, and I\\'m amazed by the number of people who have offered their help with this. In the next few days I\\'ll be kicking off work on the plugin properly and start putting together a more organised structure which explains how you can get involved and contribute to the project if you\\'re interested. So... watch this space - and thanks for all your support so far.\\n\\n<a href=\"http:\\/\\/twitter.com\\/TryGhost\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/twitter.com\\']);\" class=\"twitter-follow-button\">Follow @TryGhost<\\/a>'),"}, {"line_number": 10, "line_content": "            html: '<p>Three days ago I released a <a title=\"Ghost\" href=\"http:\\/\\/john.onolan.org\\/ghost\\/\">concept page<\\/a> for a lite version of WordPress that I\\'ve been thinking about for a long time, called Ghost. I think it\\'s fair to say that I didn\\'t quite anticipate how strong the reaction would be - and I\\'ve hardly had time to catch my breath in the last 72 hours.<\\/p>\\n<p>The response was overwhelming, and overwhelmingly positive. In the first 6 hours my site got 35,000 page views after hitting the number 1 slot on <a href=\"http:\\/\\/news.ycombinator.com\\/item?id=4743245\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/news.ycombinator.com\\']);\">Hacker News<\\/a>.&nbsp;As of right now, the traffic count is just over <a href=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/Screen-Shot-2012-11-09-at-17.51.21.png\" rel=\"lightbox\" class=\"cboxElement\">91,000 page views<\\/a>&nbsp;- and Ghost has been featured all over the place. Notable mentions so far include Christina Warren from Mashable, who <a href=\"http:\\/\\/christina.is\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/christina.is\\']);\">wrote about it<\\/a>. Michael Carney from PandoDaily <a href=\"http:\\/\\/pandodaily.com\\/2012\\/11\\/07\\/wordpress-guru-designs-a-concept-blogging-platform-that-doesnt-suck-gets-rave-reviews\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/pandodaily.com\\']);\">interviewed me about it<\\/a>. Someone even <a href=\"http:\\/\\/www.voicens.com\\/web\\/?p=4425\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/www.voicens.com\\']);\">wrote about it in Chinese<\\/a>. That\\'s pretty cool.\\\\n<p>The feedback has been amazing, and while it\\'s impossible to reply to all of the messages individually, I\\'m getting to as many of them as I can and I want to thank each and every one of you who took the time to send me a message or share the concept because you liked it. Now that the initial storm has died down a bit, I wanted to take some time to answer some of the more common questions and talk about what\\'s next.<\\/p>\\n<h2>FAQ - Continued...<\\/h2>\\n<p>The most common question, bizarrely:<\\/p>\\n<h5><em><strong>Oh my god, why is that whole page made of images? What\\'s wrong with you? \\/\\/ I can\\'t take you seriously \\/\\/ Don\\'t you know anything about the web? \\/\\/ You are literally Satan re-incarnate.<\\/strong><\\/em><\\/h5>\\n<p>This was really the only negativity I got in response to the post, and it surprised me. I put together the concept page as... just that... a concept. It was a way for me to get the ideas out of my head and \"down on paper\" - or so to speak. I used photoshop as a <em>tool<\\/em> to write down my idea with text and images. If I used a sketchbook as a <em>tool&nbsp;<\\/em>to create images and handwritten notes, then uploaded scans of it, I doubt anyone would complain. The concept page was never supposed to be a finished product because I had no idea if there would be any interest in it. I had no motivation to waste hours coding a custom layout for something might only ever be read by a few people and then forgotten.<\\/p>\\n<p>Hardware manufacturers make hundreds of foam cutout prototypes of products before they build one with working buttons and screens. I\\'m aware of all the usability problems with a web page made of images, and equally, foam cutouts without buttons or screens aren\\'t particularly user friendly either. They\\'re not supposed to be.<\\/p>\\n<p>Let\\'s move on.<\\/p>\\n<h5><em><strong>What? Why no comments? I need comments.<\\/strong><\\/em><\\/h5>\\n<p>Because comments add a layer of complexity that is beyond the core focus of this platform, which is publishing. Again, that\\'s not to say you couldn\\'t have any comments. This could easily be added with a dedicated plugin where you own the data or (as mentioned) there are third party providers such as Disqus, IntenseDebate, Livefyre and Facebook who all have great platforms. The point of this isn\\'t to say \"you can\\'t have comments\" - it\\'s to say \"comments aren\\'t on by default\". It\\'s about simplicity, more than anything else.<\\/p>\\n<h5><em><strong>Yeah, but WordPress are already going to revise their dashboard, WordPress.com is experimenting with a potential simplified version... so why bother with this?<\\/strong><\\/em><\\/h5>\\n<p><a href=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/newwp.png\" rel=\"lightbox[2102]\" title=\"newwp\" class=\"cboxElement\"><img class=\"alignnone size-large wp-image-2117\" title=\"newwp\" src=\"http:\\/\\/john.onolan.org\\/wp-content\\/uploads\\/2012\\/11\\/newwp-550x210.png\" alt=\"\" width=\"550\" height=\"210\"><\\/a><\\/p>\\n<p>Sorry, but Tumblr already did this - it\\'s not the future of blogging, it\\'s the past.<\\/p>\\n<p>Ghost isn\\'t about sharing \"Fuck Yeah [<a href=\"http:\\/\\/fuckyeahdogs.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahdogs.tumblr.com\\']);\">Dogs<\\/a>\\/<a href=\"http:\\/\\/fuckyeahsharks.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahsharks.tumblr.com\\']);\" rel=\"lightbox\" class=\"cboxElement\">Sharks<\\/a>\\/<a href=\"http:\\/\\/fuckyeahgirlswithtattoos.tumblr.com\\/\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/fuckyeahgirlswithtattoos.tumblr.com\\']);\">Girls with Tattoos<\\/a>]\" - it\\'s about publishing - which means writing - rather than mashing a few buttons to make sure that everyone can see and appreciate your latest funny picture\\/status, which is surely the most funny picture\\/status you\\'ve ever posted.<\\/p>\\n<p>Tumblr, Pinterest and Facebook already have this locked down.&nbsp;It\\'s not the future.<\\/p>\\n<h5><em><strong>So... are you actually going to build this thing?<\\/strong><\\/em><\\/h5>\\n<p>The concept page was a way for me to test demand and interest. To see if anyone actually agreed with my frustrations and, more importantly, my solutions. I plucked a random figure of \"10,000 pageviews\" out of the air before I hit the publish button. If it got less than 10,000 pageviews, I would surrender to the fact that it would only ever be an idea. I\\'ve now exceeded that goal 9 times over, so yes, I\\'m looking at how Ghost can now be made into a reality.<\\/p>\\n<h5><em><strong>How can I find out when it\\'s done? \\/\\/ SHUT UP AND TAKE MY MONEY<\\/strong><\\/em><\\/h5>\\n<p>Ok, ok - there\\'s a holding page up on <a href=\"http:\\/\\/tryghost.org\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/tryghost.org\\']);\">http:\\/\\/TryGhost.org<\\/a> - put your email address in.<\\/p>\\n<hr>\\n<h3>How are you going to do this?<\\/h3>\\n<p>There\\'s three main ways of going about this, each has merits as well as drawbacks.<\\/p>\\n<p><em><strong>1.) Build it from scratch<\\/strong><\\/em> - Many people (particularly the Hacker News crowd) expressed the sentiment that there was little point in forking WordPress. When you\\'re going to strip out so much, you get to a point where you might as well start from scratch anyway. Take away the crutches of being stuck with older technologies and put together something which is as sophisticated in code as it is in UI\\/UX.<\\/p>\\n<ul>\\n<li><em>Pros:<\\/em> The idea of something completely new is exciting, opportunity to build something very sophisticated, complete control over everything.<\\/li>\\n<li><em>Cons:<\\/em> Lose the &nbsp;WordPress ecosystem which includes millions of users and thousands of developers, potentially spend the next 6 months fighting over whether to use PHP\\/RoR\\/Django\\/Python\\/Node\\/Whateverthefuck because everyone loves to evangelise the technology they know best.<\\/li>\\n<\\/ul>\\n<p><em><strong>2.) Fork WordPress<\\/strong><\\/em> - This was the original idea I put out. Take the WordPress codebase, as is, and modify it to turn it into something new. Initially the codebase is practically the same, which means developers already know it. Then it can change over time and evolve into its own thing.<\\/p>\\n<ul>\\n<li><em>Pros:<\\/em> Easy start with existing codebase, potential to evolve, doesn\\'t lose WordPress ecosystem initially.<\\/li>\\n<li><em>Cons:<\\/em> Stuck with existing codebase - the good as well as the bad, &nbsp;eventually needs to be rewritten completely, less control, loses the WordPress ecosystem after a while anyway, makes it complicated to transition from legacy code to new code.<\\/li>\\n<\\/ul>\\n<p><em><strong>3.) Make it a plugin\\/extension<\\/strong><\\/em> - Lots of people asked why Ghost couldn\\'t just be a WordPress plugin. It would certainly be the easiest route of the 3, it\\'s possible to completely remove \\/wp-admin\\/ and replace with with \\/ghost\\/ ... but I feel like it kind of misses the point. This route bolts Ghost on, but it\\'s still WordPress under the hood. From a UI\\/UX standpoint it would function - but it wouldn\\'t revolutionise anything else. It makes WordPress itself about blogging again, rather than creating something new.<\\/p>\\n<ul>\\n<li><em>Pros:<\\/em> Very easy development, very easy deployment, keeps WordPress ecosystem forever, doesn\\'t force anyone to change.<\\/li>\\n<li><em>Cons:<\\/em> The least exciting (for me, personally), much less control, it would be much harder to maintain something like this on a non-profit basis - which loses a piece of what Ghost is about.<\\/li>\\n<\\/ul>\\n<h3>What\\'s the answer?<\\/h3>\\n<p>I\\'ve spoken to a lot of smart people over the last few days. The one thing that everyone seems to agree on is that a fork is the worst of both worlds. So the one thing that I suggested as a way of making this happen, is the least likely to work in reality. Remember the foam prototype metaphor earlier? Learning and iterating - that\\'s what happening now.<\\/p>\\n<p>That leaves a choice between WordPress plugin or fresh build. The answer? Both.<\\/p>\\n<p>A WordPress plugin will act as a proof of concept and a working prototype, initially, because it\\'s easier to leverage the existing WordPress ecosystem to create it than to go into a cave for 6 months trying to build this amazing thing that everyone will have forgotten about.<\\/p>\\n<p>The plugin will not be perfect. It will add the Ghost UI\\/UX and as much functionality as we can cram into it. It will completely remove \\/wp-admin\\/ and replace it with \\/ghost\\/ - effectively using WordPress core as a basic foundation to build on top of. It will give people who don\\'t want to switch away from WordPress access to the Ghost UX which they want to have, and it will give people who want the full Ghost platform a taste of what\\'s to come.<\\/p>\\n<p>It will allow us to develop and learn and iterate on the concept pretty rapidly, which has a great deal of value.<\\/p>\\n<p>This is step one. Assuming the plugin is actually used by people - it would then justify exploring building the standalone version of Ghost from the ground up. The plugin would subsequently serve as a great marketing tool for the platform. Think of it as an upgrade path. But that\\'s a long way away. Having the idea is the easy part. Making it happen is what counts.<\\/p>\\n<p>Happily - amongst the thousands of people talking about Ghost for the last few days - several have been talking about how they\\'ve already built some working prototypes of my mockups and turned them into WordPress plugins or just local development sites. These will likely go on to be the starting point of the first Ghost plugin.<\\/p>\\n<p>There\\'s a lot to do, and I\\'m amazed by the number of people who have offered their help with this. In the next few days I\\'ll be kicking off work on the plugin properly and start putting together a more organised structure which explains how you can get involved and contribute to the project if you\\'re interested. So... watch this space - and thanks for all your support so far.<\\/p>\\n<p><a href=\"http:\\/\\/twitter.com\\/TryGhost\" onclick=\"javascript:_gaq.push([\\'_trackEvent\\',\\'outbound-article\\',\\'http:\\/\\/twitter.com\\']);\" class=\"twitter-follow-button\">Follow @TryGhost<\\/a><\\/p>',"}, {"line_number": 11, "line_content": "            feature_image: '__GHOST_URL__/ghostpost.jpg',"}, {"line_number": 12, "line_content": "            status: status,"}, {"line_number": 13, "line_content": "            locale: locale,"}, {"line_number": 14, "line_content": "            authors: authors"}, {"line_number": 15, "line_content": "        });"}, {"line_number": 16, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "function createUser(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides || {});"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        if (!newObj.slug) {"}, {"line_number": 5, "line_content": "            newObj.slug = 'slug_' + Date.now();"}, {"line_number": 6, "line_content": "        }"}, {"line_number": 7, "line_content": "        if (!newObj.email) {"}, {"line_number": 8, "line_content": "            newObj.email = `test${newObj.slug}@ghost.org`;"}, {"line_number": 9, "line_content": "        }"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 12, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 13, "line_content": "            name: 'name',"}, {"line_number": 14, "line_content": "            email: 'test@ghost.org',"}, {"line_number": 15, "line_content": "            bio: 'bio',"}, {"line_number": 16, "line_content": "            website: null,"}, {"line_number": 17, "line_content": "            profile_image: null,"}, {"line_number": 18, "line_content": "            status: 'active',"}, {"line_number": 19, "line_content": "            password: 'Sl1m3rson99',"}, {"line_number": 20, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 21, "line_content": "            created_at: new Date(),"}, {"line_number": 22, "line_content": "            updated_at: new Date(),"}, {"line_number": 23, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 24, "line_content": "            visibility: 'public',"}, {"line_number": 25, "line_content": "            location: 'location'"}, {"line_number": 26, "line_content": "        });"}, {"line_number": 27, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function createClient(overrides) {"}, {"line_number": 2, "line_content": "        overrides = overrides || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 5, "line_content": "        const basics = createBasic(newObj);"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 8, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 9, "line_content": "            uuid: uuid.v4(),"}, {"line_number": 10, "line_content": "            secret: 'not_available',"}, {"line_number": 11, "line_content": "            redirection_uri: 'http://localhost:9999',"}, {"line_number": 12, "line_content": "            client_uri: 'http://localhost:9000',"}, {"line_number": 13, "line_content": "            slug: 'client',"}, {"line_number": 14, "line_content": "            name: 'client',"}, {"line_number": 15, "line_content": "            type: 'ua',"}, {"line_number": 16, "line_content": "            status: 'enabled'"}, {"line_number": 17, "line_content": "        }, basics);"}, {"line_number": 18, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createGenericUser(uniqueInteger) {"}, {"line_number": 2, "line_content": "        return createUser({"}, {"line_number": 3, "line_content": "            name: 'Joe Bloggs',"}, {"line_number": 4, "line_content": "            slug: 'joe-blogs',"}, {"line_number": 5, "line_content": "            email: 'joe_' + uniqueInteger + '@example.com',"}, {"line_number": 6, "line_content": "            password: 'Sl1m3rson99'"}, {"line_number": 7, "line_content": "        });"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createPostsTags(postId, tagId) {"}, {"line_number": 2, "line_content": "        return {"}, {"line_number": 3, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 4, "line_content": "            post_id: postId,"}, {"line_number": 5, "line_content": "            tag_id: tagId"}, {"line_number": 6, "line_content": "        };"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createUsersRoles(userId, roleId) {"}, {"line_number": 2, "line_content": "        return {"}, {"line_number": 3, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 4, "line_content": "            user_id: userId,"}, {"line_number": 5, "line_content": "            role_id: roleId"}, {"line_number": 6, "line_content": "        };"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createPostsAuthors(postId, authorId, sort_order = 0) {"}, {"line_number": 2, "line_content": "        return {"}, {"line_number": 3, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 4, "line_content": "            author_id: authorId,"}, {"line_number": 5, "line_content": "            post_id: postId,"}, {"line_number": 6, "line_content": "            sort_order: sort_order"}, {"line_number": 7, "line_content": "        };"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createMember(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            email: 'member@ghost.org'"}, {"line_number": 7, "line_content": "        });"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function createMemberWithNewsletter(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            email: 'member@ghost.org',"}, {"line_number": 7, "line_content": "            newsletters: [{"}, {"line_number": 8, "line_content": "                id: 'newsletter-1'"}, {"line_number": 9, "line_content": "            }]"}, {"line_number": 10, "line_content": "        });"}, {"line_number": 11, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function createMemberWithProducts(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            email: 'member@ghost.org',"}, {"line_number": 7, "line_content": "            products: [{"}, {"line_number": 8, "line_content": "                id: 'product-1'"}, {"line_number": 9, "line_content": "            }]"}, {"line_number": 10, "line_content": "        });"}, {"line_number": 11, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createLabel(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            name: 'label',"}, {"line_number": 7, "line_content": "            slug: 'slug',"}, {"line_number": 8, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 9, "line_content": "            created_at: new Date(),"}, {"line_number": 10, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 11, "line_content": "            updated_at: new Date()"}, {"line_number": 12, "line_content": "        });"}, {"line_number": 13, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "function createProduct(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            name: 'product',"}, {"line_number": 7, "line_content": "            slug: 'gold',"}, {"line_number": 8, "line_content": "            active: true,"}, {"line_number": 9, "line_content": "            type: 'paid',"}, {"line_number": 10, "line_content": "            visibility: 'public',"}, {"line_number": 11, "line_content": "            benefits: [],"}, {"line_number": 12, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 13, "line_content": "            created_at: new Date(),"}, {"line_number": 14, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 15, "line_content": "            updated_at: new Date()"}, {"line_number": 16, "line_content": "        });"}, {"line_number": 17, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createMembersLabels(member_id, label_id, sort_order = 0) {"}, {"line_number": 2, "line_content": "        return {"}, {"line_number": 3, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 4, "line_content": "            member_id,"}, {"line_number": 5, "line_content": "            label_id,"}, {"line_number": 6, "line_content": "            sort_order"}, {"line_number": 7, "line_content": "        };"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createStripeProduct(product_id, stripe_product_id) {"}, {"line_number": 2, "line_content": "        return {"}, {"line_number": 3, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 4, "line_content": "            product_id,"}, {"line_number": 5, "line_content": "            stripe_product_id"}, {"line_number": 6, "line_content": "        };"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "function createSetting(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            uuid: '95ce1c53-69b0-4f5f-be91-d3aeb39046b5',"}, {"line_number": 7, "line_content": "            key: 'title',"}, {"line_number": 8, "line_content": "            value: null,"}, {"line_number": 9, "line_content": "            type: 'site',"}, {"line_number": 10, "line_content": "            created_at: new Date(),"}, {"line_number": 11, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 12, "line_content": "            updated_at: new Date(),"}, {"line_number": 13, "line_content": "            updated_by: DataGenerator.Content.users[0].id"}, {"line_number": 14, "line_content": "        });"}, {"line_number": 15, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function createToken(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            token: uuid.v4(),"}, {"line_number": 7, "line_content": "            expires: Date.now() + constants.ONE_DAY_MS"}, {"line_number": 8, "line_content": "        });"}, {"line_number": 9, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function createInvite(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            token: uuid.v4(),"}, {"line_number": 7, "line_content": "            email: 'test@ghost.org',"}, {"line_number": 8, "line_content": "            role_id: DataGenerator.Content.roles[0].id,"}, {"line_number": 9, "line_content": "            expires: Date.now() + (60 * 1000),"}, {"line_number": 10, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 11, "line_content": "            created_at: new Date(),"}, {"line_number": 12, "line_content": "            status: 'sent'"}, {"line_number": 13, "line_content": "        });"}, {"line_number": 14, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createWebhook(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            event: 'test',"}, {"line_number": 7, "line_content": "            target_url: 'https://example.com/hooks/test',"}, {"line_number": 8, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 9, "line_content": "            created_at: new Date(),"}, {"line_number": 10, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 11, "line_content": "            updated_at: new Date()"}, {"line_number": 12, "line_content": "        });"}, {"line_number": 13, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "function createEmailBatch(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 4, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 5, "line_content": "            created_at: new Date(),"}, {"line_number": 6, "line_content": "            updated_at: new Date()"}, {"line_number": 7, "line_content": "        });"}, {"line_number": 8, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function createEmailRecipient(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 4, "line_content": "            id: ObjectId().toHexString()"}, {"line_number": 5, "line_content": "        });"}, {"line_number": 6, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "function createIntegration(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 5, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 6, "line_content": "            name: 'test integration',"}, {"line_number": 7, "line_content": "            slug: 'test-integration',"}, {"line_number": 8, "line_content": "            created_by: DataGenerator.Content.users[0].id,"}, {"line_number": 9, "line_content": "            created_at: new Date(),"}, {"line_number": 10, "line_content": "            updated_by: DataGenerator.Content.users[0].id,"}, {"line_number": 11, "line_content": "            updated_at: new Date()"}, {"line_number": 12, "line_content": "        });"}, {"line_number": 13, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function createEmail(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        return _.defaults(createBasic(newObj), {"}, {"line_number": 5, "line_content": "            submitted_at: new Date()"}, {"line_number": 6, "line_content": "        });"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "function createNewsletter(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 4, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 5, "line_content": "            uuid: uuid.v4(),"}, {"line_number": 6, "line_content": "            slug: 'daily-newsletter',"}, {"line_number": 7, "line_content": "            name: 'Daily Newsletter',"}, {"line_number": 8, "line_content": "            sender_name: 'Jamie Larsen',"}, {"line_number": 9, "line_content": "            sender_email: 'jamie@example.com',"}, {"line_number": 10, "line_content": "            sender_reply_to: 'newsletter',"}, {"line_number": 11, "line_content": "            status: 'active',"}, {"line_number": 12, "line_content": "            visibility: 'members',"}, {"line_number": 13, "line_content": "            subscribe_on_signup: true,"}, {"line_number": 14, "line_content": "            title_font_category: 'serif',"}, {"line_number": 15, "line_content": "            body_font_category: 'serif',"}, {"line_number": 16, "line_content": "            show_header_icon: true,"}, {"line_number": 17, "line_content": "            show_header_title: true,"}, {"line_number": 18, "line_content": "            show_badge: true,"}, {"line_number": 19, "line_content": "            sort_order: 0"}, {"line_number": 20, "line_content": "        });"}, {"line_number": 21, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function createOffer(overrides) {"}, {"line_number": 2, "line_content": "        const newObj = _.cloneDeep(overrides);"}, {"line_number": 3, "line_content": "        return _.defaults(newObj, {"}, {"line_number": 4, "line_content": "            id: ObjectId().toHexString(),"}, {"line_number": 5, "line_content": "            name: 'Black Friday',"}, {"line_number": 6, "line_content": "            code: 'black-friday',"}, {"line_number": 7, "line_content": "            display_title: 'Black Friday Sale!',"}, {"line_number": 8, "line_content": "            display_description: '10% off on yearly plan',"}, {"line_number": 9, "line_content": "            discount_type: 'percent',"}, {"line_number": 10, "line_content": "            interval: 'year',"}, {"line_number": 11, "line_content": "            discount_amount: 12,"}, {"line_number": 12, "line_content": "            duration: 'once',"}, {"line_number": 13, "line_content": "            duration_in_months: null,"}, {"line_number": 14, "line_content": "            currency_restriction: false,"}, {"line_number": 15, "line_content": "            currency: null,"}, {"line_number": 16, "line_content": "            active: true"}, {"line_number": 17, "line_content": "        });"}, {"line_number": 18, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function doEnd(done) {"}, {"line_number": 2, "line_content": "        return function (err, res) {"}, {"line_number": 3, "line_content": "            if (err) {"}, {"line_number": 4, "line_content": "                return done(err);"}, {"line_number": 5, "line_content": "            }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "            should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 8, "line_content": "            should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 9, "line_content": "            should.not.exist(res.headers['set-cookie']);"}, {"line_number": 10, "line_content": "            should.exist(res.headers.date);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "            done();"}, {"line_number": 13, "line_content": "        };"}, {"line_number": 14, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "function doEnd(done) {"}, {"line_number": 2, "line_content": "        return function (err, res) {"}, {"line_number": 3, "line_content": "            if (err) {"}, {"line_number": 4, "line_content": "                return done(err);"}, {"line_number": 5, "line_content": "            }"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "            should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 8, "line_content": "            should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 9, "line_content": "            should.not.exist(res.headers['set-cookie']);"}, {"line_number": 10, "line_content": "            should.exist(res.headers.date);"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "            done();"}, {"line_number": 13, "line_content": "        };"}, {"line_number": 14, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function assertCorrectFrontendHeaders(res) {"}, {"line_number": 2, "line_content": "        should.not.exist(res.headers['x-cache-invalidate']);"}, {"line_number": 3, "line_content": "        should.not.exist(res.headers['X-CSRF-Token']);"}, {"line_number": 4, "line_content": "        should.not.exist(res.headers['set-cookie']);"}, {"line_number": 5, "line_content": "        should.exist(res.headers.date);"}, {"line_number": 6, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function addPosts(done) {"}, {"line_number": 2, "line_content": "        testUtils.clearData().then(function () {"}, {"line_number": 3, "line_content": "            return testUtils.initData();"}, {"line_number": 4, "line_content": "        }).then(function () {"}, {"line_number": 5, "line_content": "            return testUtils.fixtures.insertPostsAndTags();"}, {"line_number": 6, "line_content": "        }).then(function () {"}, {"line_number": 7, "line_content": "            done();"}, {"line_number": 8, "line_content": "        });"}, {"line_number": 9, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "async function getKey(header, callback) {"}, {"line_number": 2, "line_content": "            const key = await client.getSigningKey(header.kid);"}, {"line_number": 3, "line_content": "            let signingKey = key.publicKey || key.rsaPublicKey;"}, {"line_number": 4, "line_content": "            callback(null, signingKey);"}, {"line_number": 5, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 24, "lines": [{"line_number": 1, "line_content": "async function checkCanEdit(key, value, expectedValue) {"}, {"line_number": 2, "line_content": "        if (!expectedValue) {"}, {"line_number": 3, "line_content": "            expectedValue = value;"}, {"line_number": 4, "line_content": "        }"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        const settingToChange = {"}, {"line_number": 7, "line_content": "            settings: [{key, value}]"}, {"line_number": 8, "line_content": "        };"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "        await request.put(localUtils.API.getApiQuery('settings/'))"}, {"line_number": 11, "line_content": "            .set('Origin', config.get('url'))"}, {"line_number": 12, "line_content": "            .send(settingToChange)"}, {"line_number": 13, "line_content": "            .expect('Content-Type', /json/)"}, {"line_number": 14, "line_content": "            .expect('Cache-Control', testUtils.cacheRules.private)"}, {"line_number": 15, "line_content": "            .expect(200)"}, {"line_number": 16, "line_content": "            .expect((response) => {"}, {"line_number": 17, "line_content": "                should.exist(response.headers['x-cache-invalidate']);"}, {"line_number": 18, "line_content": "                response.headers['x-cache-invalidate'].should.eql('/*');"}, {"line_number": 19, "line_content": "            });"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "        // Check if not changed (also check internal ones)"}, {"line_number": 22, "line_content": "        const afterValue = settingsCache.get(key);"}, {"line_number": 23, "line_content": "        should.deepEqual(afterValue, expectedValue);"}, {"line_number": 24, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "async function checkCantEdit(key, value) {"}, {"line_number": 2, "line_content": "        // Get current value (internal)"}, {"line_number": 3, "line_content": "        const currentValue = settingsCache.get(key);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        const settingToChange = {"}, {"line_number": 6, "line_content": "            settings: [{key, value}]"}, {"line_number": 7, "line_content": "        };"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "        if (currentValue === value) {"}, {"line_number": 10, "line_content": "            throw new Error('This test requires a different value than the current one');"}, {"line_number": 11, "line_content": "        }"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "        await request.put(localUtils.API.getApiQuery('settings/'))"}, {"line_number": 14, "line_content": "            .set('Origin', config.get('url'))"}, {"line_number": 15, "line_content": "            .send(settingToChange)"}, {"line_number": 16, "line_content": "            .expect('Content-Type', /json/)"}, {"line_number": 17, "line_content": "            .expect('Cache-Control', testUtils.cacheRules.private)"}, {"line_number": 18, "line_content": "            .expect(200)"}, {"line_number": 19, "line_content": "            .expect((response) => {"}, {"line_number": 20, "line_content": "                should.not.exist(response.headers['x-cache-invalidate']);"}, {"line_number": 21, "line_content": "            });"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "        // Check if not changed (also check internal ones)"}, {"line_number": 24, "line_content": "        const afterValue = settingsCache.get(key);"}, {"line_number": 25, "line_content": "        should.deepEqual(afterValue, currentValue);"}, {"line_number": 26, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function createFilter(publishedAt, op) {"}, {"line_number": 2, "line_content": "            // This line deliberately uses double quotes because GQL cannot handle either double quotes"}, {"line_number": 3, "line_content": "            // or escaped singles, see TryGhost/GQL#34"}, {"line_number": 4, "line_content": "            return encodeURIComponent('published_at:' + op + '\\'' + publishedAt + '\\'');"}, {"line_number": 5, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function createStripeID(prefix) {"}, {"line_number": 2, "line_content": "    return `${prefix}_${crypto.randomBytes(16).toString('hex')}`;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getPaidProduct() {"}, {"line_number": 2, "line_content": "    return await Product.findOne({type: 'paid'});"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "async function assertMemberEvents({eventType, memberId, asserts}) {"}, {"line_number": 2, "line_content": "    const events = (await models[eventType].where('member_id', memberId).fetchAll()).toJSON();"}, {"line_number": 3, "line_content": "    events.should.match(asserts);"}, {"line_number": 4, "line_content": "    assert.equal(events.length, asserts.length, `Only ${asserts.length} ${eventType} should have been added.`);"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function assertSubscription(subscriptionId, asserts) {"}, {"line_number": 2, "line_content": "    // eslint-disable-next-line dot-notation"}, {"line_number": 3, "line_content": "    const subscription = await models['StripeCustomerSubscription'].where('subscription_id', subscriptionId).fetch({require: true});"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // We use the native toJSON to prevent calling the overriden serialize method"}, {"line_number": 6, "line_content": "    models.Base.Model.prototype.serialize.call(subscription).should.match(asserts);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function set(object, newValues) {"}, {"line_number": 2, "line_content": "            for (const key of Object.keys(object)) {"}, {"line_number": 3, "line_content": "                delete object[key];"}, {"line_number": 4, "line_content": "            }"}, {"line_number": 5, "line_content": "            Object.assign(object, newValues);"}, {"line_number": 6, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "async function createMemberFromStripe() {"}, {"line_number": 2, "line_content": "            const initialMember = {"}, {"line_number": 3, "line_content": "                name: customer.name,"}, {"line_number": 4, "line_content": "                email: customer.email,"}, {"line_number": 5, "line_content": "                subscribed: true,"}, {"line_number": 6, "line_content": "                stripe_customer_id: customer.id"}, {"line_number": 7, "line_content": "            };"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "            const {body} = await adminAgent"}, {"line_number": 10, "line_content": "                .post(`/members/`)"}, {"line_number": 11, "line_content": "                .body({members: [initialMember]})"}, {"line_number": 12, "line_content": "                .expectStatus(201);"}, {"line_number": 13, "line_content": "            assert.equal(body.members.length, 1, 'The member was not created');"}, {"line_number": 14, "line_content": "            const member = body.members[0];"}, {"line_number": 15, "line_content": "            return member;"}, {"line_number": 16, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 170, "lines": [{"line_number": 1, "line_content": "async function testDiscount({discount, interval, unit_amount, assert_mrr, offer_id}) {"}, {"line_number": 2, "line_content": "                const customer_id = createStripeID('cust');"}, {"line_number": 3, "line_content": "                const subscription_id = createStripeID('sub');"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "                discount.customer = customer_id;"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "                set(subscription, {"}, {"line_number": 8, "line_content": "                    id: subscription_id,"}, {"line_number": 9, "line_content": "                    customer: customer_id,"}, {"line_number": 10, "line_content": "                    status: 'active',"}, {"line_number": 11, "line_content": "                    discount,"}, {"line_number": 12, "line_content": "                    items: {"}, {"line_number": 13, "line_content": "                        type: 'list',"}, {"line_number": 14, "line_content": "                        data: [{"}, {"line_number": 15, "line_content": "                            id: 'item_123',"}, {"line_number": 16, "line_content": "                            price: {"}, {"line_number": 17, "line_content": "                                id: 'price_123',"}, {"line_number": 18, "line_content": "                                product: 'product_123',"}, {"line_number": 19, "line_content": "                                active: true,"}, {"line_number": 20, "line_content": "                                nickname: interval,"}, {"line_number": 21, "line_content": "                                currency: 'usd',"}, {"line_number": 22, "line_content": "                                recurring: {"}, {"line_number": 23, "line_content": "                                    interval"}, {"line_number": 24, "line_content": "                                },"}, {"line_number": 25, "line_content": "                                unit_amount,"}, {"line_number": 26, "line_content": "                                type: 'recurring'"}, {"line_number": 27, "line_content": "                            }"}, {"line_number": 28, "line_content": "                        }]"}, {"line_number": 29, "line_content": "                    },"}, {"line_number": 30, "line_content": "                    start_date: beforeNow / 1000,"}, {"line_number": 31, "line_content": "                    current_period_end: Math.floor(beforeNow / 1000) + (60 * 60 * 24 * 31),"}, {"line_number": 32, "line_content": "                    cancel_at_period_end: false,"}, {"line_number": 33, "line_content": "                    metadata: {}"}, {"line_number": 34, "line_content": "                });"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "                set(customer, {"}, {"line_number": 37, "line_content": "                    id: customer_id,"}, {"line_number": 38, "line_content": "                    name: 'Test Member',"}, {"line_number": 39, "line_content": "                    email: `${customer_id}@email.com`,"}, {"line_number": 40, "line_content": "                    subscriptions: {"}, {"line_number": 41, "line_content": "                        type: 'list',"}, {"line_number": 42, "line_content": "                        data: [subscription]"}, {"line_number": 43, "line_content": "                    }"}, {"line_number": 44, "line_content": "                });"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "                let webhookPayload = JSON.stringify({"}, {"line_number": 47, "line_content": "                    type: 'checkout.session.completed',"}, {"line_number": 48, "line_content": "                    data: {"}, {"line_number": 49, "line_content": "                        object: {"}, {"line_number": 50, "line_content": "                            mode: 'subscription',"}, {"line_number": 51, "line_content": "                            customer: customer.id,"}, {"line_number": 52, "line_content": "                            subscription: subscription.id,"}, {"line_number": 53, "line_content": "                            metadata: {}"}, {"line_number": 54, "line_content": "                        }"}, {"line_number": 55, "line_content": "                    }"}, {"line_number": 56, "line_content": "                });"}, {"line_number": 57, "line_content": ""}, {"line_number": 58, "line_content": "                let webhookSignature = stripe.webhooks.generateTestHeaderString({"}, {"line_number": 59, "line_content": "                    payload: webhookPayload,"}, {"line_number": 60, "line_content": "                    secret: process.env.WEBHOOK_SECRET"}, {"line_number": 61, "line_content": "                });"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "                await membersAgent.post('/webhooks/stripe/')"}, {"line_number": 64, "line_content": "                    .body(webhookPayload)"}, {"line_number": 65, "line_content": "                    .header('stripe-signature', webhookSignature)"}, {"line_number": 66, "line_content": "                    .expectStatus(200);"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "                const {body} = await adminAgent.get(`/members/?search=${customer_id}@email.com`);"}, {"line_number": 69, "line_content": "                assert.equal(body.members.length, 1, 'The member was not created');"}, {"line_number": 70, "line_content": "                const member = body.members[0];"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "                assert.equal(member.status, 'paid', 'The member should be \"paid\"');"}, {"line_number": 73, "line_content": "                assert.equal(member.subscriptions.length, 1, 'The member should have a single subscription');"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "                // Check whether MRR and status has been set"}, {"line_number": 76, "line_content": "                await assertSubscription(member.subscriptions[0].id, {"}, {"line_number": 77, "line_content": "                    subscription_id: subscription.id,"}, {"line_number": 78, "line_content": "                    status: 'active',"}, {"line_number": 79, "line_content": "                    cancel_at_period_end: false,"}, {"line_number": 80, "line_content": "                    plan_amount: unit_amount,"}, {"line_number": 81, "line_content": "                    plan_interval: interval,"}, {"line_number": 82, "line_content": "                    plan_currency: 'usd',"}, {"line_number": 83, "line_content": "                    current_period_end: new Date(Math.floor(beforeNow / 1000) * 1000 + (60 * 60 * 24 * 31 * 1000)),"}, {"line_number": 84, "line_content": "                    mrr: assert_mrr,"}, {"line_number": 85, "line_content": "                    offer_id: offer_id"}, {"line_number": 86, "line_content": "                });"}, {"line_number": 87, "line_content": ""}, {"line_number": 88, "line_content": "                // Check whether the offer attribute is passed correctly in the response when fetching a single member"}, {"line_number": 89, "line_content": "                member.subscriptions[0].should.match({"}, {"line_number": 90, "line_content": "                    offer: {"}, {"line_number": 91, "line_content": "                        id: offer_id"}, {"line_number": 92, "line_content": "                    }"}, {"line_number": 93, "line_content": "                });"}, {"line_number": 94, "line_content": ""}, {"line_number": 95, "line_content": "                await assertMemberEvents({"}, {"line_number": 96, "line_content": "                    eventType: 'MemberPaidSubscriptionEvent',"}, {"line_number": 97, "line_content": "                    memberId: member.id,"}, {"line_number": 98, "line_content": "                    asserts: ["}, {"line_number": 99, "line_content": "                        {"}, {"line_number": 100, "line_content": "                            mrr_delta: assert_mrr"}, {"line_number": 101, "line_content": "                        }"}, {"line_number": 102, "line_content": "                    ]"}, {"line_number": 103, "line_content": "                });"}, {"line_number": 104, "line_content": ""}, {"line_number": 105, "line_content": "                // Now cancel, and check if the discount is also applied for the cancellation"}, {"line_number": 106, "line_content": "                set(subscription, {"}, {"line_number": 107, "line_content": "                    ...subscription,"}, {"line_number": 108, "line_content": "                    status: 'canceled'"}, {"line_number": 109, "line_content": "                });"}, {"line_number": 110, "line_content": ""}, {"line_number": 111, "line_content": "                // Send the webhook call to anounce the cancelation"}, {"line_number": 112, "line_content": "                webhookPayload = JSON.stringify({"}, {"line_number": 113, "line_content": "                    type: 'customer.subscription.updated',"}, {"line_number": 114, "line_content": "                    data: {"}, {"line_number": 115, "line_content": "                        object: subscription"}, {"line_number": 116, "line_content": "                    }"}, {"line_number": 117, "line_content": "                });"}, {"line_number": 118, "line_content": ""}, {"line_number": 119, "line_content": "                webhookSignature = stripe.webhooks.generateTestHeaderString({"}, {"line_number": 120, "line_content": "                    payload: webhookPayload,"}, {"line_number": 121, "line_content": "                    secret: process.env.WEBHOOK_SECRET"}, {"line_number": 122, "line_content": "                });"}, {"line_number": 123, "line_content": ""}, {"line_number": 124, "line_content": "                await membersAgent.post('/webhooks/stripe/')"}, {"line_number": 125, "line_content": "                    .body(webhookPayload)"}, {"line_number": 126, "line_content": "                    .header('stripe-signature', webhookSignature)"}, {"line_number": 127, "line_content": "                    .expectStatus(200);"}, {"line_number": 128, "line_content": ""}, {"line_number": 129, "line_content": "                // Check status has been updated to 'free' after cancelling"}, {"line_number": 130, "line_content": "                const {body: body2} = await adminAgent.get('/members/' + member.id + '/');"}, {"line_number": 131, "line_content": "                assert.equal(body2.members.length, 1, 'The member does not exist');"}, {"line_number": 132, "line_content": "                const updatedMember = body2.members[0];"}, {"line_number": 133, "line_content": "                assert.equal(updatedMember.status, 'free');"}, {"line_number": 134, "line_content": "                assert.equal(updatedMember.tiers.length, 0, 'The member should have no products');"}, {"line_number": 135, "line_content": "                should(updatedMember.subscriptions).match(["}, {"line_number": 136, "line_content": "                    {"}, {"line_number": 137, "line_content": "                        status: 'canceled',"}, {"line_number": 138, "line_content": "                        offer: {"}, {"line_number": 139, "line_content": "                            id: offer_id"}, {"line_number": 140, "line_content": "                        }"}, {"line_number": 141, "line_content": "                    }"}, {"line_number": 142, "line_content": "                ]);"}, {"line_number": 143, "line_content": ""}, {"line_number": 144, "line_content": "                // Check whether MRR and status has been set"}, {"line_number": 145, "line_content": "                await assertSubscription(member.subscriptions[0].id, {"}, {"line_number": 146, "line_content": "                    subscription_id: subscription.id,"}, {"line_number": 147, "line_content": "                    status: 'canceled',"}, {"line_number": 148, "line_content": "                    cancel_at_period_end: false,"}, {"line_number": 149, "line_content": "                    plan_amount: unit_amount,"}, {"line_number": 150, "line_content": "                    plan_interval: interval,"}, {"line_number": 151, "line_content": "                    plan_currency: 'usd',"}, {"line_number": 152, "line_content": "                    mrr: 0,"}, {"line_number": 153, "line_content": "                    offer_id: offer_id"}, {"line_number": 154, "line_content": "                });"}, {"line_number": 155, "line_content": ""}, {"line_number": 156, "line_content": "                await assertMemberEvents({"}, {"line_number": 157, "line_content": "                    eventType: 'MemberPaidSubscriptionEvent',"}, {"line_number": 158, "line_content": "                    memberId: updatedMember.id,"}, {"line_number": 159, "line_content": "                    asserts: ["}, {"line_number": 160, "line_content": "                        {"}, {"line_number": 161, "line_content": "                            type: 'created',"}, {"line_number": 162, "line_content": "                            mrr_delta: assert_mrr"}, {"line_number": 163, "line_content": "                        },"}, {"line_number": 164, "line_content": "                        {"}, {"line_number": 165, "line_content": "                            type: 'expired',"}, {"line_number": 166, "line_content": "                            mrr_delta: -assert_mrr"}, {"line_number": 167, "line_content": "                        }"}, {"line_number": 168, "line_content": "                    ]"}, {"line_number": 169, "line_content": "                });"}, {"line_number": 170, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getPaidProduct() {"}, {"line_number": 2, "line_content": "    return await models.Product.findOne({type: 'paid'});"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getFreeProduct() {"}, {"line_number": 2, "line_content": "    return await models.Product.findOne({type: 'free'});"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "async function assertMemberEvents({eventType, memberId, asserts}) {"}, {"line_number": 2, "line_content": "    const events = await models[eventType].where('member_id', memberId).fetchAll();"}, {"line_number": 3, "line_content": "    const eventsJSON = events.map(e => e.toJSON());"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // Order shouldn't matter here"}, {"line_number": 6, "line_content": "    for (const a of asserts) {"}, {"line_number": 7, "line_content": "        eventsJSON.should.matchAny(a);"}, {"line_number": 8, "line_content": "    }"}, {"line_number": 9, "line_content": "    assert.equal(events.length, asserts.length, `Only ${asserts.length} ${eventType} should have been added.`);"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "async function assertSubscription(subscriptionId, asserts) {"}, {"line_number": 2, "line_content": "    // eslint-disable-next-line dot-notation"}, {"line_number": 3, "line_content": "    const subscription = await models['StripeCustomerSubscription'].where('subscription_id', subscriptionId).fetch({require: true});"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "    // We use the native toJSON to prevent calling the overriden serialize method"}, {"line_number": 6, "line_content": "    models.Base.Model.prototype.serialize.call(subscription).should.match(asserts);"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getPaidProduct() {"}, {"line_number": 2, "line_content": "    return await models.Product.findOne({type: 'paid'});"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getNewsletters() {"}, {"line_number": 2, "line_content": "    return (await models.Newsletter.findAll({filter: 'status:active'})).models;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function buildMemberWithoutIncludesSnapshot(options) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        id: anyObjectId,"}, {"line_number": 4, "line_content": "        uuid: anyUuid,"}, {"line_number": 5, "line_content": "        created_at: anyISODateTime,"}, {"line_number": 6, "line_content": "        updated_at: anyISODateTime,"}, {"line_number": 7, "line_content": "        newsletters: new Array(options.newsletters).fill(newsletterSnapshot)"}, {"line_number": 8, "line_content": "    };"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function buildMemberWithIncludesSnapshot(options) {"}, {"line_number": 2, "line_content": "    return {"}, {"line_number": 3, "line_content": "        id: anyObjectId,"}, {"line_number": 4, "line_content": "        uuid: anyUuid,"}, {"line_number": 5, "line_content": "        created_at: anyISODateTime,"}, {"line_number": 6, "line_content": "        updated_at: anyISODateTime,"}, {"line_number": 7, "line_content": "        newsletters: new Array(options.newsletters).fill(newsletterSnapshot),"}, {"line_number": 8, "line_content": "        subscriptions: anyArray,"}, {"line_number": 9, "line_content": "        labels: anyArray"}, {"line_number": 10, "line_content": "    };"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "function nockCallback(method, uri, body) {"}, {"line_number": 2, "line_content": "            const [match, resource, id] = uri.match(/\\/?v1\\/(\\w+)(?:\\/(\\w+))?/) || [null];"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            if (!match) {"}, {"line_number": 5, "line_content": "                return [500];"}, {"line_number": 6, "line_content": "            }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "            if (resource === 'customers') {"}, {"line_number": 9, "line_content": "                return [200, {id: 'cus_123', email: 'member1@test.com'}];"}, {"line_number": 10, "line_content": "            }"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "            if (resource === 'subscriptions') {"}, {"line_number": 13, "line_content": "                const now = Math.floor(Date.now() / 1000);"}, {"line_number": 14, "line_content": "                return [200, {id: 'sub_123', customer: 'cus_123', cancel_at_period_end: false, items: {"}, {"line_number": 15, "line_content": "                    data: [{price: {"}, {"line_number": 16, "line_content": "                        id: price.stripe_price_id,"}, {"line_number": 17, "line_content": "                        recurring: {"}, {"line_number": 18, "line_content": "                            interval: price.interval"}, {"line_number": 19, "line_content": "                        },"}, {"line_number": 20, "line_content": "                        unit_amount: price.amount,"}, {"line_number": 21, "line_content": "                        currency: price.currency.toLowerCase()"}, {"line_number": 22, "line_content": "                    }}]"}, {"line_number": 23, "line_content": "                }, status: 'active', current_period_end: now + 24 * 3600, start_date: now}];"}, {"line_number": 24, "line_content": "            }"}, {"line_number": 25, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "async function createMember(data) {"}, {"line_number": 2, "line_content": "    const member = await models.Member.add({"}, {"line_number": 3, "line_content": "        email: uuid.v4() + '@example.com',"}, {"line_number": 4, "line_content": "        name: '',"}, {"line_number": 5, "line_content": "        ...data"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return member;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function basicAsserts(member, row) {"}, {"line_number": 2, "line_content": "    // Basic checks"}, {"line_number": 3, "line_content": "    should(row.email).eql(member.get('email'));"}, {"line_number": 4, "line_content": "    should(row.name).eql(member.get('name'));"}, {"line_number": 5, "line_content": "    should(row.note).eql(member.get('note') || '');"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "    should(row.deleted_at).eql('');"}, {"line_number": 8, "line_content": "    should(row.created_at).eql(moment(member.get('created_at')).toISOString());"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "async function testOutput(member, asserts, filters = []) {"}, {"line_number": 2, "line_content": "    // Add default filters that always should match"}, {"line_number": 3, "line_content": "    filters.push('limit=all');"}, {"line_number": 4, "line_content": "    filters.push(`filter=id:${member.id}`);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "    for (const filter of filters) {"}, {"line_number": 7, "line_content": "        // Test all"}, {"line_number": 8, "line_content": "        let res = await agent"}, {"line_number": 9, "line_content": "            .get(`/members/upload/?${filter}`)"}, {"line_number": 10, "line_content": "            .expectStatus(200)"}, {"line_number": 11, "line_content": "            .expectEmptyBody()"}, {"line_number": 12, "line_content": "            .matchHeaderSnapshot({"}, {"line_number": 13, "line_content": "                etag: anyEtag,"}, {"line_number": 14, "line_content": "                'content-length': anyString,"}, {"line_number": 15, "line_content": "                'content-disposition': anyString"}, {"line_number": 16, "line_content": "            });"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "        res.text.should.match(/id,email,name,note,subscribed_to_emails,complimentary_plan,stripe_customer_id,created_at,deleted_at,labels,products/);"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "        let csv = Papa.parse(res.text, {header: true});"}, {"line_number": 21, "line_content": "        let row = csv.data.find(r => r.id === member.id);"}, {"line_number": 22, "line_content": "        should.exist(row);"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "        asserts(row);"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "        if (filter === 'filter=id:${member.id}') {"}, {"line_number": 27, "line_content": "            csv.data.length.should.eql(1);"}, {"line_number": 28, "line_content": "        }"}, {"line_number": 29, "line_content": "    }"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "async function getNewsletters() {"}, {"line_number": 2, "line_content": "    return (await models.Newsletter.findAll({filter: 'status:active'})).models;"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "function testVersionMatch(serverVersion, clientVersion) {"}, {"line_number": 2, "line_content": "        // Set the server version"}, {"line_number": 3, "line_content": "        res.locals.version = serverVersion;"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        if (clientVersion) {"}, {"line_number": 6, "line_content": "            // Optionally set the client version"}, {"line_number": 7, "line_content": "            getStub.returns(clientVersion);"}, {"line_number": 8, "line_content": "        }"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "        versionMatch(req, res, nextStub);"}, {"line_number": 11, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "async function runUpMigration(knex, migration) {"}, {"line_number": 2, "line_content": "    {"}, {"line_number": 3, "line_content": "        const transacting = await knex.transaction();"}, {"line_number": 4, "line_content": "        await migration.up({transacting});"}, {"line_number": 5, "line_content": "        transacting.commit();"}, {"line_number": 6, "line_content": "    }"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return async function runDownMigration() {"}, {"line_number": 9, "line_content": "        const transacting = await knex.transaction();"}, {"line_number": 10, "line_content": "        await migration.down({transacting});"}, {"line_number": 11, "line_content": "        transacting.commit();"}, {"line_number": 12, "line_content": "    };"}, {"line_number": 13, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 83, "lines": [{"line_number": 1, "line_content": "async function setupDb() {"}, {"line_number": 2, "line_content": "    const knex = Knex({"}, {"line_number": 3, "line_content": "        client: 'sqlite',"}, {"line_number": 4, "line_content": "        connection: {"}, {"line_number": 5, "line_content": "            filename: ':memory:'"}, {"line_number": 6, "line_content": "        },"}, {"line_number": 7, "line_content": "        // Suppress warnings from knex"}, {"line_number": 8, "line_content": "        useNullAsDefault: true"}, {"line_number": 9, "line_content": "    });"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "    await knex.raw(`"}, {"line_number": 12, "line_content": "        CREATE TABLE \\`permissions\\` ("}, {"line_number": 13, "line_content": "            \\`id\\` varchar(24) not null,"}, {"line_number": 14, "line_content": "            \\`name\\` varchar(50) not null,"}, {"line_number": 15, "line_content": "            \\`object_type\\` varchar(50) not null,"}, {"line_number": 16, "line_content": "            \\`action_type\\` varchar(50) not null,"}, {"line_number": 17, "line_content": "            \\`object_id\\` varchar(24) null,"}, {"line_number": 18, "line_content": "            \\`created_at\\` datetime not null,"}, {"line_number": 19, "line_content": "            \\`created_by\\` varchar(24) not null,"}, {"line_number": 20, "line_content": "            \\`updated_at\\` datetime null,"}, {"line_number": 21, "line_content": "            \\`updated_by\\` varchar(24) null,"}, {"line_number": 22, "line_content": "            primary key (\\`id\\`)"}, {"line_number": 23, "line_content": "        );"}, {"line_number": 24, "line_content": "    `);"}, {"line_number": 25, "line_content": "    await knex.raw(`CREATE UNIQUE INDEX \\`permissions_name_unique\\` on \\`permissions\\` (\\`name\\`);`);"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "    await knex.raw(`"}, {"line_number": 28, "line_content": "        CREATE TABLE \\`permissions_roles\\` ("}, {"line_number": 29, "line_content": "            \\`id\\` varchar(24) not null,"}, {"line_number": 30, "line_content": "            \\`role_id\\` varchar(24) not null,"}, {"line_number": 31, "line_content": "            \\`permission_id\\` varchar(24) not null,"}, {"line_number": 32, "line_content": "            primary key (\\`id\\`)"}, {"line_number": 33, "line_content": "        );"}, {"line_number": 34, "line_content": "    `);"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "    await knex.raw(`"}, {"line_number": 37, "line_content": "        CREATE TABLE \\`roles\\` ("}, {"line_number": 38, "line_content": "            \\`id\\` varchar(24) not null,"}, {"line_number": 39, "line_content": "            \\`name\\` varchar(50) not null,"}, {"line_number": 40, "line_content": "            \\`description\\` varchar(2000) null,"}, {"line_number": 41, "line_content": "            \\`created_at\\` datetime not null,"}, {"line_number": 42, "line_content": "            \\`created_by\\` varchar(24) not null,"}, {"line_number": 43, "line_content": "            \\`updated_at\\` datetime null,"}, {"line_number": 44, "line_content": "            \\`updated_by\\` varchar(24) null,"}, {"line_number": 45, "line_content": "            primary key (\\`id\\`)"}, {"line_number": 46, "line_content": "        );"}, {"line_number": 47, "line_content": "    `);"}, {"line_number": 48, "line_content": "    await knex.raw(`CREATE UNIQUE INDEX \\`roles_name_unique\\` on \\`roles\\` (\\`name\\`);`);"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "    const date = knex.raw('CURRENT_TIMESTAMP');"}, {"line_number": 51, "line_content": "    await knex('roles').insert({"}, {"line_number": 52, "line_content": "        id: ObjectId().toHexString(),"}, {"line_number": 53, "line_content": "        name: 'Role Name',"}, {"line_number": 54, "line_content": "        description: 'Role description',"}, {"line_number": 55, "line_content": "        created_at: date,"}, {"line_number": 56, "line_content": "        created_by: utils.meta.MIGRATION_USER,"}, {"line_number": 57, "line_content": "        updated_at: date,"}, {"line_number": 58, "line_content": "        updated_by: utils.meta.MIGRATION_USER"}, {"line_number": 59, "line_content": "    });"}, {"line_number": 60, "line_content": ""}, {"line_number": 61, "line_content": "    await knex('roles').insert({"}, {"line_number": 62, "line_content": "        id: ObjectId().toHexString(),"}, {"line_number": 63, "line_content": "        name: 'Other Role Name',"}, {"line_number": 64, "line_content": "        description: 'Other Role description',"}, {"line_number": 65, "line_content": "        created_at: date,"}, {"line_number": 66, "line_content": "        created_by: utils.meta.MIGRATION_USER,"}, {"line_number": 67, "line_content": "        updated_at: date,"}, {"line_number": 68, "line_content": "        updated_by: utils.meta.MIGRATION_USER"}, {"line_number": 69, "line_content": "    });"}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "    await knex('permissions').insert({"}, {"line_number": 72, "line_content": "        id: ObjectId().toHexString(),"}, {"line_number": 73, "line_content": "        name: 'Permission Name',"}, {"line_number": 74, "line_content": "        action_type: 'action',"}, {"line_number": 75, "line_content": "        object_type: 'object',"}, {"line_number": 76, "line_content": "        created_at: date,"}, {"line_number": 77, "line_content": "        created_by: utils.meta.MIGRATION_USER,"}, {"line_number": 78, "line_content": "        updated_at: date,"}, {"line_number": 79, "line_content": "        updated_by: utils.meta.MIGRATION_USER"}, {"line_number": 80, "line_content": "    });"}, {"line_number": 81, "line_content": ""}, {"line_number": 82, "line_content": "    return knex;"}, {"line_number": 83, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function fakeDate(mm, yyyy) {"}, {"line_number": 2, "line_content": "        const month = parseInt(mm, 10);"}, {"line_number": 3, "line_content": "        const year = parseInt(yyyy, 10);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        momentStub.withArgs('YYYY').returns(year.toString());"}, {"line_number": 6, "line_content": "        momentStub.withArgs('MM').returns(month < 10 ? '0' + month.toString() : month.toString());"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function loadFakePermissions(options) {"}, {"line_number": 2, "line_content": "        options = options || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        const fixturePermissions = _.cloneDeep(testUtils.DataGenerator.Content.permissions);"}, {"line_number": 5, "line_content": "        const extraPerm = {"}, {"line_number": 6, "line_content": "            name: 'test',"}, {"line_number": 7, "line_content": "            action_type: 'edit',"}, {"line_number": 8, "line_content": "            object_type: 'post'"}, {"line_number": 9, "line_content": "        };"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "        if (options.extra) {"}, {"line_number": 12, "line_content": "            fixturePermissions.push(extraPerm);"}, {"line_number": 13, "line_content": "        }"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "        return _.map(fixturePermissions, function (testPerm) {"}, {"line_number": 16, "line_content": "            return testUtils.DataGenerator.forKnex.createPermission(testPerm);"}, {"line_number": 17, "line_content": "        });"}, {"line_number": 18, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "function loadFakePermissions(options) {"}, {"line_number": 2, "line_content": "        options = options || {};"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "        const fixturePermissions = _.cloneDeep(testUtils.DataGenerator.Content.permissions);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        const extraPerm = {"}, {"line_number": 7, "line_content": "            name: 'test',"}, {"line_number": 8, "line_content": "            action_type: 'edit',"}, {"line_number": 9, "line_content": "            object_type: 'post'"}, {"line_number": 10, "line_content": "        };"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "        if (options.extra) {"}, {"line_number": 13, "line_content": "            fixturePermissions.push(extraPerm);"}, {"line_number": 14, "line_content": "        }"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "        return _.map(fixturePermissions, function (testPerm) {"}, {"line_number": 17, "line_content": "            return testUtils.DataGenerator.forKnex.createPermission(testPerm);"}, {"line_number": 18, "line_content": "        });"}, {"line_number": 19, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "function createSettingsMock({setDirect, setConnect}) {"}, {"line_number": 2, "line_content": "    const getStub = sinon.stub();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    getStub.withArgs('members_signup_access').returns('all');"}, {"line_number": 5, "line_content": "    getStub.withArgs('stripe_secret_key').returns(setDirect ? 'direct_secret' : null);"}, {"line_number": 6, "line_content": "    getStub.withArgs('stripe_publishable_key').returns(setDirect ? 'direct_publishable' : null);"}, {"line_number": 7, "line_content": "    getStub.withArgs('stripe_plans').returns([{"}, {"line_number": 8, "line_content": "        name: 'Monthly',"}, {"line_number": 9, "line_content": "        currency: 'usd',"}, {"line_number": 10, "line_content": "        interval: 'month',"}, {"line_number": 11, "line_content": "        amount: 1000"}, {"line_number": 12, "line_content": "    }, {"}, {"line_number": 13, "line_content": "        name: 'Yearly',"}, {"line_number": 14, "line_content": "        currency: 'usd',"}, {"line_number": 15, "line_content": "        interval: 'year',"}, {"line_number": 16, "line_content": "        amount: 10000"}, {"line_number": 17, "line_content": "    }]);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    getStub.withArgs('stripe_connect_secret_key').returns(setConnect ? 'connect_secret' : null);"}, {"line_number": 20, "line_content": "    getStub.withArgs('stripe_connect_publishable_key').returns(setConnect ? 'connect_publishable' : null);"}, {"line_number": 21, "line_content": "    getStub.withArgs('stripe_connect_livemode').returns(true);"}, {"line_number": 22, "line_content": "    getStub.withArgs('stripe_connect_display_name').returns('Test');"}, {"line_number": 23, "line_content": "    getStub.withArgs('stripe_connect_account_id').returns('ac_XXXXXXXXXXXXX');"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    getStub.withArgs('members_private_key').returns('PRIVATE');"}, {"line_number": 26, "line_content": "    getStub.withArgs('members_public_key').returns('PUBLIC');"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "    return {"}, {"line_number": 29, "line_content": "        get: getStub"}, {"line_number": 30, "line_content": "    };"}, {"line_number": 31, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function assertVersionRewrittenWithHeaders(version, path, done) {"}, {"line_number": 2, "line_content": "        mwVersionRewrites(req, res, (err) => {"}, {"line_number": 3, "line_content": "            assert.deepEqual(req.headers, {'accept-version': `${version}.0`}, 'accept version header was set on req');"}, {"line_number": 4, "line_content": "            sinon.assert.calledTwice(res.header);"}, {"line_number": 5, "line_content": "            sinon.assert.calledWithExactly(res.header.firstCall, 'Deprecation', `version=\"${version}\"`);"}, {"line_number": 6, "line_content": "            sinon.assert.calledWithExactly(res.header.secondCall, 'Link', `<https://admin.mysite.com/ghost/api${path}>; rel=\"latest-version\"`);"}, {"line_number": 7, "line_content": "            done(err);"}, {"line_number": 8, "line_content": "        });"}, {"line_number": 9, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "function createSettingsMock({setDirect, setConnect}) {"}, {"line_number": 2, "line_content": "    const getStub = sinon.stub();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    getStub.withArgs('members_signup_access').returns('all');"}, {"line_number": 5, "line_content": "    getStub.withArgs('stripe_secret_key').returns(setDirect ? 'direct_secret' : null);"}, {"line_number": 6, "line_content": "    getStub.withArgs('stripe_publishable_key').returns(setDirect ? 'direct_publishable' : null);"}, {"line_number": 7, "line_content": "    getStub.withArgs('stripe_plans').returns([{"}, {"line_number": 8, "line_content": "        name: 'Monthly',"}, {"line_number": 9, "line_content": "        currency: 'usd',"}, {"line_number": 10, "line_content": "        interval: 'month',"}, {"line_number": 11, "line_content": "        amount: 1000"}, {"line_number": 12, "line_content": "    }, {"}, {"line_number": 13, "line_content": "        name: 'Yearly',"}, {"line_number": 14, "line_content": "        currency: 'usd',"}, {"line_number": 15, "line_content": "        interval: 'year',"}, {"line_number": 16, "line_content": "        amount: 10000"}, {"line_number": 17, "line_content": "    }]);"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "    getStub.withArgs('stripe_connect_secret_key').returns(setConnect ? 'connect_secret' : null);"}, {"line_number": 20, "line_content": "    getStub.withArgs('stripe_connect_publishable_key').returns(setConnect ? 'connect_publishable' : null);"}, {"line_number": 21, "line_content": "    getStub.withArgs('stripe_connect_livemode').returns(true);"}, {"line_number": 22, "line_content": "    getStub.withArgs('stripe_connect_display_name').returns('Test');"}, {"line_number": 23, "line_content": "    getStub.withArgs('stripe_connect_account_id').returns('ac_XXXXXXXXXXXXX');"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "    return {"}, {"line_number": 26, "line_content": "        get: getStub"}, {"line_number": 27, "line_content": "    };"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "function createUrlUtilsMock() {"}, {"line_number": 2, "line_content": "    return new UrlUtils({"}, {"line_number": 3, "line_content": "        getSubdir: configUtils.config.getSubdir,"}, {"line_number": 4, "line_content": "        getSiteUrl: configUtils.config.getSiteUrl,"}, {"line_number": 5, "line_content": "        getAdminUrl: configUtils.config.getAdminUrl,"}, {"line_number": 6, "line_content": "        apiVersions: {"}, {"line_number": 7, "line_content": "            all: ['canary'],"}, {"line_number": 8, "line_content": "            canary: {"}, {"line_number": 9, "line_content": "                admin: 'admin',"}, {"line_number": 10, "line_content": "                content: 'content'"}, {"line_number": 11, "line_content": "            }"}, {"line_number": 12, "line_content": "        },"}, {"line_number": 13, "line_content": "        defaultApiVersion: 'canary',"}, {"line_number": 14, "line_content": "        slugs: ['ghost', 'rss', 'amp'],"}, {"line_number": 15, "line_content": "        redirectCacheMaxAge: 31536000,"}, {"line_number": 16, "line_content": "        baseApiPath: '/ghost/api'"}, {"line_number": 17, "line_content": "    });"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "function expectedLabsObject(obj) {"}, {"line_number": 2, "line_content": "    const withGA = Object.assign({}, obj);"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "    labs.GA_KEYS.forEach((key) => {"}, {"line_number": 5, "line_content": "        withGA[key] = true;"}, {"line_number": 6, "line_content": "    });"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "    return withGA;"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function getUserModel(id, role, roleId) {"}, {"line_number": 2, "line_content": "            const hasRole = sinon.stub();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            hasRole.withArgs(role).returns(true);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "            return {"}, {"line_number": 7, "line_content": "                id: id,"}, {"line_number": 8, "line_content": "                hasRole: hasRole,"}, {"line_number": 9, "line_content": "                related: sinon.stub().returns([{name: role, id: roleId}]),"}, {"line_number": 10, "line_content": "                get: sinon.stub().returns(id)"}, {"line_number": 11, "line_content": "            };"}, {"line_number": 12, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "function getUserToEdit(id, role) {"}, {"line_number": 2, "line_content": "                const hasRole = sinon.stub();"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "                hasRole.withArgs(role).returns(true);"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "                return {"}, {"line_number": 7, "line_content": "                    id: id,"}, {"line_number": 8, "line_content": "                    hasRole: hasRole,"}, {"line_number": 9, "line_content": "                    related: sinon.stub().returns([role]),"}, {"line_number": 10, "line_content": "                    get: sinon.stub().returns(id)"}, {"line_number": 11, "line_content": "                };"}, {"line_number": 12, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "async function testInvalidSetting({key, value, type, group}) {"}, {"line_number": 2, "line_content": "            const setting = models.Settings.forge({key, value, type, group});"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "            let error;"}, {"line_number": 5, "line_content": "            try {"}, {"line_number": 6, "line_content": "                await setting.save();"}, {"line_number": 7, "line_content": "                error = null;"}, {"line_number": 8, "line_content": "            } catch (err) {"}, {"line_number": 9, "line_content": "                error = err;"}, {"line_number": 10, "line_content": "            } finally {"}, {"line_number": 11, "line_content": "                should.exist(error, `Setting Model should throw when saving invalid ${key}`);"}, {"line_number": 12, "line_content": "                should.ok(error instanceof errors.ValidationError, 'Setting Model should throw ValidationError');"}, {"line_number": 13, "line_content": "            }"}, {"line_number": 14, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "async function testValidSetting({key, value, type, group}) {"}, {"line_number": 2, "line_content": "            mockDb.mock(knex);"}, {"line_number": 3, "line_content": "            const tracker = mockDb.getTracker();"}, {"line_number": 4, "line_content": "            tracker.install();"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "            tracker.on('query', (query) => {"}, {"line_number": 7, "line_content": "                query.response([{}]);"}, {"line_number": 8, "line_content": "            });"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "            const setting = models.Settings.forge({key, value, type, group});"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "            let error;"}, {"line_number": 13, "line_content": "            try {"}, {"line_number": 14, "line_content": "                await setting.save();"}, {"line_number": 15, "line_content": "                error = null;"}, {"line_number": 16, "line_content": "            } catch (err) {"}, {"line_number": 17, "line_content": "                error = err;"}, {"line_number": 18, "line_content": "            } finally {"}, {"line_number": 19, "line_content": "                tracker.uninstall();"}, {"line_number": 20, "line_content": "                mockDb.unmock(knex);"}, {"line_number": 21, "line_content": "                should.not.exist(error, `Setting Model should not throw when saving valid ${key}`);"}, {"line_number": 22, "line_content": "            }"}, {"line_number": 23, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "function shouldCompileToExpected(data, hash, expected) {"}, {"line_number": 2, "line_content": "        const rendered = excerptHelper.call(data, hash);"}, {"line_number": 3, "line_content": "        should.exist(rendered);"}, {"line_number": 4, "line_content": "        rendered.string.should.equal(expected);"}, {"line_number": 5, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "function compile(templateString) {"}, {"line_number": 2, "line_content": "    const template = handlebars.compile(templateString);"}, {"line_number": 3, "line_content": "    template.with = (locals = {}, globals) => {"}, {"line_number": 4, "line_content": "        globals = globals || defaultGlobals;"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "        return template(locals, globals);"}, {"line_number": 7, "line_content": "    };"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "    return template;"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function shouldCompileToExpected(templateString, hash, expected) {"}, {"line_number": 2, "line_content": "        const template = handlebars.compile(templateString);"}, {"line_number": 3, "line_content": "        const result = template(hash);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "        result.should.eql(expected);"}, {"line_number": 6, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function runTests(tests, hash) {"}, {"line_number": 2, "line_content": "        _.each(tests, (expectedString, templateString) => {"}, {"line_number": 3, "line_content": "            it(`${templateString} resolves to '${expectedString}'`, function () {"}, {"line_number": 4, "line_content": "                shouldCompileToExpected(templateString, hash, expectedString);"}, {"line_number": 5, "line_content": "            });"}, {"line_number": 6, "line_content": "        });"}, {"line_number": 7, "line_content": "    }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "function callBodyClassWithContext(context, self) {"}, {"line_number": 2, "line_content": "            options.data.root.context = context;"}, {"line_number": 3, "line_content": "            return body_class.call("}, {"line_number": 4, "line_content": "                self,"}, {"line_number": 5, "line_content": "                options"}, {"line_number": 6, "line_content": "            );"}, {"line_number": 7, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function fn(input, data) {"}, {"line_number": 2, "line_content": "                resultData.push(_.cloneDeep(data));"}, {"line_number": 3, "line_content": "            }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "function runTest(self, _context, _options) {"}, {"line_number": 2, "line_content": "            foreach.call(self, _context, _options);"}, {"line_number": 3, "line_content": "        }"}]}}
{"type": "functions", "project_source": "https://github.com/TryGhost/Ghost", "direct_link_to_file_line": "", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "function shouldCompileToExpected(templateString, hash, expected) {"}, {"line_number": 2, "line_content": "            const template = handlebars.compile(templateString);"}, {"line_number": 3, "line_content": "            const result = template(hash);"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "            result.should.eql(expected);"}, {"line_number": 6, "line_content": "        }"}]}}

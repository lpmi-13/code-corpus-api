{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewAsyncArray() AsyncArray {"}, {"line_number": 2, "line_content": "\treturn newAsyncArray(C.AsyncArray_New())"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (a *AsyncArray) Ptr() C.AsyncArray {"}, {"line_content": "\treturn a.p", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func (m *AsyncArray) Get(mat *Mat) error {"}, {"line_number": 2, "line_content": "\tresult := C.AsyncArray_GetAsync(m.p, mat.p)"}, {"line_number": 3, "line_content": "\terr := C.GoString(result)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tif len(err) > 0 {"}, {"line_number": 6, "line_content": "\t\treturn errors.New(err)"}, {"line_number": 7, "line_content": "\t}"}, {"line_content": "\treturn nil", "line_number": 8}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func newAsyncArray(p C.AsyncArray) AsyncArray {"}, {"line_number": 2, "line_content": "\treturn AsyncArray{p: p}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (a *AsyncArray) Close() error {"}, {"line_number": 2, "line_content": "\tC.AsyncArray_Close(a.p)"}, {"line_number": 3, "line_content": "\ta.p = nil"}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_number": 5, "line_content": "}"}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func TestAsyncArray(t *testing.T) {"}, {"line_content": "\tasyncarray := NewAsyncArray()", "line_number": 2}, {"line_content": "\tdefer asyncarray.Close()", "line_number": 3}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tif asyncarray.Ptr() == nil {"}, {"line_number": 6, "line_content": "\t\tt.Error(\"New AsyncArray should not be nil\")"}, {"line_content": "\t}", "line_number": 7}, {"line_number": 8, "line_content": "}"}], "total_lines": 8}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func FisheyeUndistortImage(distorted Mat, undistorted *Mat, k, d Mat) {"}, {"line_content": "\tC.Fisheye_UndistortImage(distorted.Ptr(), undistorted.Ptr(), k.Ptr(), d.Ptr())", "line_number": 2}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_content": "func FisheyeUndistortImageWithParams(distorted Mat, undistorted *Mat, k, d, knew Mat, size image.Point) {", "line_number": 1}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(size.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(size.Y),"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tC.Fisheye_UndistortImageWithParams(distorted.Ptr(), undistorted.Ptr(), k.Ptr(), d.Ptr(), knew.Ptr(), sz)"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func FisheyeUndistortPoints(distorted Mat, undistorted *Mat, k, d, r, p Mat) {"}, {"line_number": 2, "line_content": "\tC.Fisheye_UndistortPoints(distorted.Ptr(), undistorted.Ptr(), k.Ptr(), d.Ptr(), r.Ptr(), p.Ptr())"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "func EstimateNewCameraMatrixForUndistortRectify(k, d Mat, imgSize image.Point, r Mat, p *Mat, balance float64, newSize image.Point, fovScale float64) {"}, {"line_number": 2, "line_content": "\timgSz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(imgSize.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(imgSize.Y),"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tnewSz := C.struct_Size{"}, {"line_content": "\t\twidth:\tC.int(newSize.X),", "line_number": 7}, {"line_number": 8, "line_content": "\t\theight:\tC.int(newSize.Y),"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tC.Fisheye_EstimateNewCameraMatrixForUndistortRectify(k.Ptr(), d.Ptr(), imgSz, r.Ptr(), p.Ptr(), C.double(balance), newSz, C.double(fovScale))"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func InitUndistortRectifyMap(cameraMatrix Mat, distCoeffs Mat, r Mat, newCameraMatrix Mat, size image.Point, m1type int, map1 Mat, map2 Mat) {"}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(size.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(size.Y),"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": "\tC.InitUndistortRectifyMap(cameraMatrix.Ptr(), distCoeffs.Ptr(), r.Ptr(), newCameraMatrix.Ptr(), sz, C.int(m1type), map1.Ptr(), map2.Ptr())"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "func GetOptimalNewCameraMatrixWithParams(cameraMatrix Mat, distCoeffs Mat, imageSize image.Point, alpha float64, newImgSize image.Point, centerPrincipalPoint bool) (Mat, image.Rectangle) {"}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(imageSize.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(imageSize.Y),"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tnewSize := C.struct_Size{"}, {"line_number": 7, "line_content": "\t\twidth:\tC.int(newImgSize.X),"}, {"line_number": 8, "line_content": "\t\theight:\tC.int(newImgSize.Y),"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\trt := C.struct_Rect{}"}, {"line_number": 11, "line_content": "\treturn newMat(C.GetOptimalNewCameraMatrixWithParams(cameraMatrix.Ptr(), distCoeffs.Ptr(), sz, C.double(alpha), newSize, &rt, C.bool(centerPrincipalPoint))), toRect(rt)"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func CalibrateCamera(objectPoints Points3fVector, imagePoints Points2fVector, imageSize image.Point,"}, {"line_number": 2, "line_content": "\tcameraMatrix *Mat, distCoeffs *Mat, rvecs *Mat, tvecs *Mat, calibFlag CalibFlag) float64 {"}, {"line_number": 3, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 4, "line_content": "\t\twidth:\tC.int(imageSize.X),"}, {"line_number": 5, "line_content": "\t\theight:\tC.int(imageSize.Y),"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tres := C.CalibrateCamera(objectPoints.p, imagePoints.p, sz, cameraMatrix.p, distCoeffs.p, rvecs.p, tvecs.p, C.int(calibFlag))"}, {"line_number": 9, "line_content": "\treturn float64(res)"}, {"line_number": 10, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Undistort(src Mat, dst *Mat, cameraMatrix Mat, distCoeffs Mat, newCameraMatrix Mat) {"}, {"line_number": 2, "line_content": "\tC.Undistort(src.Ptr(), dst.Ptr(), cameraMatrix.Ptr(), distCoeffs.Ptr(), newCameraMatrix.Ptr())"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func UndistortPoints(src Mat, dst *Mat, cameraMatrix, distCoeffs, rectificationTransform, newCameraMatrix Mat) {"}, {"line_number": 2, "line_content": "\tC.UndistortPoints(src.Ptr(), dst.Ptr(), cameraMatrix.Ptr(), distCoeffs.Ptr(), rectificationTransform.Ptr(), newCameraMatrix.Ptr())"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func FindChessboardCorners(image Mat, patternSize image.Point, corners *Mat, flags CalibCBFlag) bool {"}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(patternSize.X),"}, {"line_content": "\t\theight:\tC.int(patternSize.Y),", "line_number": 4}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\treturn bool(C.FindChessboardCorners(image.Ptr(), sz, corners.Ptr(), C.int(flags)))"}, {"line_number": 7, "line_content": "}"}]}}
{"contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func FindChessboardCornersSB(image Mat, patternSize image.Point, corners *Mat, flags CalibCBFlag) bool {"}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_content": "\t\twidth:\tC.int(patternSize.X),", "line_number": 3}, {"line_number": 4, "line_content": "\t\theight:\tC.int(patternSize.Y),"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\treturn bool(C.FindChessboardCornersSB(image.Ptr(), sz, corners.Ptr(), C.int(flags)))"}, {"line_number": 7, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func FindChessboardCornersSBWithMeta(image Mat, patternSize image.Point, corners *Mat, flags CalibCBFlag, meta *Mat) bool {"}, {"line_number": 2, "line_content": "\tsz := C.struct_Size{"}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(patternSize.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(patternSize.Y),"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": "\treturn bool(C.FindChessboardCornersSBWithMeta(image.Ptr(), sz, corners.Ptr(), C.int(flags), meta.Ptr()))"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func DrawChessboardCorners(image *Mat, patternSize image.Point, corners Mat, patternWasFound bool) {"}, {"line_content": "\tsz := C.struct_Size{", "line_number": 2}, {"line_number": 3, "line_content": "\t\twidth:\tC.int(patternSize.X),"}, {"line_number": 4, "line_content": "\t\theight:\tC.int(patternSize.Y),"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": "\tC.DrawChessboardCorners(image.Ptr(), sz, corners.Ptr(), C.bool(patternWasFound))"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func EstimateAffinePartial2D(from, to Point2fVector) Mat {", "line_number": 1}, {"line_content": "\treturn newMat(C.EstimateAffinePartial2D(from.p, to.p))", "line_number": 2}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func EstimateAffine2D(from, to Point2fVector) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.EstimateAffine2D(from.p, to.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func EstimateAffine2DWithParams(from Point2fVector, to Point2fVector, inliers Mat, method int, ransacReprojThreshold float64, maxIters uint, confidence float64, refineIters uint) Mat {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn newMat(C.EstimateAffine2DWithParams(from.p, to.p, inliers.p, C.int(method), C.double(ransacReprojThreshold), C.size_t(maxIters), C.double(confidence), C.size_t(refineIters)))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func (c CalibFlag) String() string {"}, {"line_number": 2, "line_content": "\tswitch c {"}, {"line_number": 3, "line_content": "\tcase CalibUseIntrinsicGuess:"}, {"line_content": "\t\treturn \"calib-use-intrinsec-guess\"", "line_number": 4}, {"line_number": 5, "line_content": "\tcase CalibRecomputeExtrinsic:"}, {"line_content": "\t\treturn \"calib-recompute-extrinsic\"", "line_number": 6}, {"line_content": "\tcase CalibCheckCond:", "line_number": 7}, {"line_number": 8, "line_content": "\t\treturn \"calib-check-cond\""}, {"line_number": 9, "line_content": "\tcase CalibFixSkew:"}, {"line_number": 10, "line_content": "\t\treturn \"calib-fix-skew\""}, {"line_number": 11, "line_content": "\tcase CalibFixK1:"}, {"line_number": 12, "line_content": "\t\treturn \"calib-fix-k1\""}, {"line_number": 13, "line_content": "\tcase CalibFixK2:"}, {"line_number": 14, "line_content": "\t\treturn \"calib-fix-k2\""}, {"line_content": "\tcase CalibFixK3:", "line_number": 15}, {"line_number": 16, "line_content": "\t\treturn \"calib-fix-k3\""}, {"line_number": 17, "line_content": "\tcase CalibFixK4:"}, {"line_content": "\t\treturn \"calib-fix-k4\"", "line_number": 18}, {"line_content": "\tcase CalibFixIntrinsic:", "line_number": 19}, {"line_number": 20, "line_content": "\t\treturn \"calib-fix-intrinsic\""}, {"line_content": "\tcase CalibFixPrincipalPoint:", "line_number": 21}, {"line_number": 22, "line_content": "\t\treturn \"calib-fix-principal-point\""}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": "\treturn \"\""}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 21, "lines": [{"line_number": 1, "line_content": "func (c CalibCBFlag) String() string {"}, {"line_number": 2, "line_content": "\tswitch c {"}, {"line_number": 3, "line_content": "\tcase CalibCBAdaptiveThresh:"}, {"line_number": 4, "line_content": "\t\treturn \"calib-cb-adaptive-thresh\""}, {"line_content": "\tcase CalibCBNormalizeImage:", "line_number": 5}, {"line_number": 6, "line_content": "\t\treturn \"calib-cb-normalize-image\""}, {"line_number": 7, "line_content": "\tcase CalibCBFilterQuads:"}, {"line_number": 8, "line_content": "\t\treturn \"calib-cb-filter-quads\""}, {"line_number": 9, "line_content": "\tcase CalibCBFastCheck:"}, {"line_number": 10, "line_content": "\t\treturn \"calib-cb-fast-check\""}, {"line_content": "\tcase CalibCBExhaustive:", "line_number": 11}, {"line_number": 12, "line_content": "\t\treturn \"calib-cb-exhaustive\""}, {"line_number": 13, "line_content": "\tcase CalibCBAccuracy:"}, {"line_number": 14, "line_content": "\t\treturn \"calib-cb-accuracy\""}, {"line_number": 15, "line_content": "\tcase CalibCBLarger:"}, {"line_number": 16, "line_content": "\t\treturn \"calib-cb-larger\""}, {"line_number": 17, "line_content": "\tcase CalibCBMarker:"}, {"line_number": 18, "line_content": "\t\treturn \"calib-cb-marker\""}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": "\treturn \"\""}, {"line_number": 21, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 42, "lines": [{"line_number": 1, "line_content": "func TestFisheyeUndistorImage(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/fisheye_sample.jpg\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of Mat test\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdest := NewMat()"}, {"line_content": "\tdefer dest.Close()", "line_number": 10}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)"}, {"line_number": 13, "line_content": "\tdefer k.Close()"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tk.SetDoubleAt(0, 0, 689.21)"}, {"line_number": 16, "line_content": "\tk.SetDoubleAt(0, 1, 0)"}, {"line_content": "\tk.SetDoubleAt(0, 2, 1295.56)", "line_number": 17}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_content": "\tk.SetDoubleAt(1, 1, 690.48)", "line_number": 20}, {"line_number": 21, "line_content": "\tk.SetDoubleAt(1, 2, 942.17)"}, {"line_number": 22, "line_content": ""}, {"line_content": "\tk.SetDoubleAt(2, 0, 0)", "line_number": 23}, {"line_number": 24, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 25, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\td := NewMatWithSize(1, 4, MatTypeCV64F)"}, {"line_number": 28, "line_content": "\tdefer d.Close()"}, {"line_content": "", "line_number": 29}, {"line_number": 30, "line_content": "\td.SetDoubleAt(0, 0, 0)"}, {"line_content": "\td.SetDoubleAt(0, 1, 0)", "line_number": 31}, {"line_number": 32, "line_content": "\td.SetDoubleAt(0, 2, 0)"}, {"line_number": 33, "line_content": "\td.SetDoubleAt(0, 3, 0)"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "\tFisheyeUndistortImage(img, &dest, k, d)"}, {"line_content": "", "line_number": 36}, {"line_number": 37, "line_content": "\tif dest.Empty() {"}, {"line_number": 38, "line_content": "\t\tt.Error(\"final image is empty\")"}, {"line_number": 39, "line_content": "\t\treturn"}, {"line_number": 40, "line_content": "\t}"}, {"line_number": 41, "line_content": ""}, {"line_content": "}", "line_number": 42}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 51, "lines": [{"line_number": 1, "line_content": "func TestFisheyeUndistorImageWithParams(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/fisheye_sample.jpg\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of Mat test\")"}, {"line_content": "\t\treturn", "line_number": 5}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdest := NewMat()"}, {"line_number": 10, "line_content": "\tdefer dest.Close()"}, {"line_content": "", "line_number": 11}, {"line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)", "line_number": 12}, {"line_number": 13, "line_content": "\tdefer k.Close()"}, {"line_content": "", "line_number": 14}, {"line_number": 15, "line_content": "\tk.SetDoubleAt(0, 0, 689.21)"}, {"line_content": "\tk.SetDoubleAt(0, 1, 0)", "line_number": 16}, {"line_content": "\tk.SetDoubleAt(0, 2, 1295.56)", "line_number": 17}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_number": 20, "line_content": "\tk.SetDoubleAt(1, 1, 690.48)"}, {"line_number": 21, "line_content": "\tk.SetDoubleAt(1, 2, 942.17)"}, {"line_content": "", "line_number": 22}, {"line_content": "\tk.SetDoubleAt(2, 0, 0)", "line_number": 23}, {"line_number": 24, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 25, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\td := NewMatWithSize(1, 4, MatTypeCV64F)"}, {"line_number": 28, "line_content": "\tdefer d.Close()"}, {"line_number": 29, "line_content": ""}, {"line_content": "\td.SetDoubleAt(0, 0, 0)", "line_number": 30}, {"line_number": 31, "line_content": "\td.SetDoubleAt(0, 1, 0)"}, {"line_number": 32, "line_content": "\td.SetDoubleAt(0, 2, 0)"}, {"line_number": 33, "line_content": "\td.SetDoubleAt(0, 3, 0)"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "\tknew := NewMat()"}, {"line_number": 36, "line_content": "\tdefer knew.Close()"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\tk.CopyTo(&knew)"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "\tknew.SetDoubleAt(0, 0, 0.4*k.GetDoubleAt(0, 0))"}, {"line_number": 41, "line_content": "\tknew.SetDoubleAt(1, 1, 0.4*k.GetDoubleAt(1, 1))"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\tsize := image.Point{dest.Rows(), dest.Cols()}"}, {"line_number": 44, "line_content": "\tFisheyeUndistortImageWithParams(img, &dest, k, d, knew, size)"}, {"line_content": "", "line_number": 45}, {"line_number": 46, "line_content": "\tif dest.Empty() {"}, {"line_number": 47, "line_content": "\t\tt.Error(\"final image is empty\")"}, {"line_number": 48, "line_content": "\t\treturn"}, {"line_number": 49, "line_content": "\t}"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 57, "lines": [{"line_content": "func TestInitUndistortRectifyMap(t *testing.T) {", "line_number": 1}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/distortion.jpg\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of Mat test\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdest := NewMat()"}, {"line_number": 10, "line_content": "\tdefer dest.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)"}, {"line_number": 13, "line_content": "\tdefer k.Close()"}, {"line_number": 14, "line_content": ""}, {"line_content": "\tk.SetDoubleAt(0, 0, 842.0261028)", "line_number": 15}, {"line_number": 16, "line_content": "\tk.SetDoubleAt(0, 1, 0)"}, {"line_number": 17, "line_content": "\tk.SetDoubleAt(0, 2, 667.7569792)"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_number": 20, "line_content": "\tk.SetDoubleAt(1, 1, 707.3668897)"}, {"line_number": 21, "line_content": "\tk.SetDoubleAt(1, 2, 385.56476464)"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\tk.SetDoubleAt(2, 0, 0)"}, {"line_number": 24, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 25, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\td := NewMatWithSize(1, 5, MatTypeCV64F)"}, {"line_number": 28, "line_content": "\tdefer d.Close()"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\td.SetDoubleAt(0, 0, -3.65584802e-01)"}, {"line_number": 31, "line_content": "\td.SetDoubleAt(0, 1, 1.41555815e-01)"}, {"line_number": 32, "line_content": "\td.SetDoubleAt(0, 2, -2.62985819e-03)"}, {"line_number": 33, "line_content": "\td.SetDoubleAt(0, 3, 2.05841873e-04)"}, {"line_number": 34, "line_content": "\td.SetDoubleAt(0, 4, -2.35021914e-02)"}, {"line_content": "", "line_number": 35}, {"line_number": 36, "line_content": "\tnewC, roi := GetOptimalNewCameraMatrixWithParams(k, d, image.Point{X: img.Cols(), Y: img.Rows()}, (float64)(1), image.Point{X: img.Cols(), Y: img.Rows()}, false)"}, {"line_number": 37, "line_content": "\tif newC.Empty() {"}, {"line_number": 38, "line_content": "\t\tt.Error(\"final image is empty\")"}, {"line_number": 39, "line_content": "\t\treturn"}, {"line_number": 40, "line_content": "\t}"}, {"line_content": "\tfmt.Printf(\"roi:%+v\\n\", roi)", "line_number": 41}, {"line_number": 42, "line_content": "\tdefer newC.Close()"}, {"line_number": 43, "line_content": "\tr := NewMat()"}, {"line_number": 44, "line_content": "\tdefer r.Close()"}, {"line_number": 45, "line_content": "\tmapx := NewMat()"}, {"line_number": 46, "line_content": "\tdefer mapx.Close()"}, {"line_number": 47, "line_content": "\tmapy := NewMat()"}, {"line_number": 48, "line_content": "\tdefer mapy.Close()"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "\tInitUndistortRectifyMap(k, d, r, newC, image.Point{X: img.Cols(), Y: img.Rows()}, 5, mapx, mapy)"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "\tRemap(img, &dest, &mapx, &mapy, InterpolationDefault, BorderConstant, color.RGBA{0, 0, 0, 0})"}, {"line_content": "\tflg := IMWrite(\"images/distortion-correct.jpg\", dest)", "line_number": 53}, {"line_number": 54, "line_content": "\tif !flg {"}, {"line_number": 55, "line_content": "\t\tt.Error(\"IMWrite failed\")"}, {"line_content": "\t}", "line_number": 56}, {"line_content": "}", "line_number": 57}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 50, "lines": [{"line_number": 1, "line_content": "func TestUndistort(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/distortion.jpg\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of Mat test\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdest := img.Clone()"}, {"line_number": 10, "line_content": "\tdefer dest.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)"}, {"line_number": 13, "line_content": "\tdefer k.Close()"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tk.SetDoubleAt(0, 0, 689.21)"}, {"line_content": "\tk.SetDoubleAt(0, 1, 0)", "line_number": 16}, {"line_number": 17, "line_content": "\tk.SetDoubleAt(0, 2, 1295.56)"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_number": 20, "line_content": "\tk.SetDoubleAt(1, 1, 690.48)"}, {"line_number": 21, "line_content": "\tk.SetDoubleAt(1, 2, 942.17)"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\tk.SetDoubleAt(2, 0, 0)"}, {"line_number": 24, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 25, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\td := NewMatWithSize(1, 4, MatTypeCV64F)"}, {"line_number": 28, "line_content": "\tdefer d.Close()"}, {"line_number": 29, "line_content": ""}, {"line_content": "\td.SetDoubleAt(0, 0, 0)", "line_number": 30}, {"line_number": 31, "line_content": "\td.SetDoubleAt(0, 1, 0)"}, {"line_content": "\td.SetDoubleAt(0, 2, 0)", "line_number": 32}, {"line_number": 33, "line_content": "\td.SetDoubleAt(0, 3, 0)"}, {"line_content": "", "line_number": 34}, {"line_number": 35, "line_content": "\tknew := NewMat()"}, {"line_number": 36, "line_content": "\tdefer knew.Close()"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\tk.CopyTo(&knew)"}, {"line_number": 39, "line_content": ""}, {"line_content": "\tknew.SetDoubleAt(0, 0, 0.5*k.GetDoubleAt(0, 0))", "line_number": 40}, {"line_number": 41, "line_content": "\tknew.SetDoubleAt(1, 1, 0.5*k.GetDoubleAt(1, 1))"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\tUndistort(img, &dest, k, d, knew)"}, {"line_number": 44, "line_content": ""}, {"line_content": "\tif dest.Empty() {", "line_number": 45}, {"line_number": 46, "line_content": "\t\tt.Error(\"final image is empty\")"}, {"line_content": "\t\treturn", "line_number": 47}, {"line_number": 48, "line_content": "\t}"}, {"line_number": 49, "line_content": ""}, {"line_content": "}", "line_number": 50}]}}
{"contents": {"total_lines": 59, "lines": [{"line_number": 1, "line_content": "func TestUndistortPoint(t *testing.T) {"}, {"line_number": 2, "line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)"}, {"line_number": 3, "line_content": "\tdefer k.Close()"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tk.SetDoubleAt(0, 0, 1094.7249578198823)"}, {"line_number": 6, "line_content": "\tk.SetDoubleAt(0, 1, 0)"}, {"line_number": 7, "line_content": "\tk.SetDoubleAt(0, 2, 959.4907612030962)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_number": 10, "line_content": "\tk.SetDoubleAt(1, 1, 1094.9945708128778)"}, {"line_number": 11, "line_content": "\tk.SetDoubleAt(1, 2, 536.4566143451868)"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tk.SetDoubleAt(2, 0, 0)"}, {"line_number": 14, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 15, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_number": 16, "line_content": ""}, {"line_content": "\td := NewMatWithSize(1, 4, MatTypeCV64F)", "line_number": 17}, {"line_number": 18, "line_content": "\tdefer d.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\td.SetDoubleAt(0, 0, -0.05207412392075069)"}, {"line_number": 21, "line_content": "\td.SetDoubleAt(0, 1, -0.089168300192224)"}, {"line_number": 22, "line_content": "\td.SetDoubleAt(0, 2, 0.10465607695792184)"}, {"line_number": 23, "line_content": "\td.SetDoubleAt(0, 3, -0.045693446831115585)"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tr := NewMat()"}, {"line_number": 26, "line_content": "\tdefer r.Close()"}, {"line_content": "", "line_number": 27}, {"line_number": 28, "line_content": "\tsrc := NewMatWithSize(3, 1, MatTypeCV64FC2)"}, {"line_number": 29, "line_content": "\tdefer src.Close()"}, {"line_number": 30, "line_content": "\tdst := NewMatWithSize(3, 1, MatTypeCV64FC2)"}, {"line_number": 31, "line_content": "\tdefer dst.Close()"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tsrc.SetDoubleAt(0, 0, 480)"}, {"line_number": 34, "line_content": "\tsrc.SetDoubleAt(0, 1, 270)"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "\tsrc.SetDoubleAt(1, 0, 960)"}, {"line_number": 37, "line_content": "\tsrc.SetDoubleAt(1, 1, 540)"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tsrc.SetDoubleAt(2, 0, 1920)"}, {"line_number": 40, "line_content": "\tsrc.SetDoubleAt(2, 1, 1080)"}, {"line_number": 41, "line_content": ""}, {"line_content": "\tUndistortPoints(src, &dst, k, d, r, k)", "line_number": 42}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "\tif dst.GetDoubleAt(0, 0) >= 480 || dst.GetDoubleAt(0, 1) >= 270 {"}, {"line_number": 45, "line_content": "\t\tt.Error(\"undistortion expected top left point to move further up and left\")"}, {"line_content": "\t\treturn", "line_number": 46}, {"line_content": "\t}", "line_number": 47}, {"line_number": 48, "line_content": ""}, {"line_content": "\tif math.Round(dst.GetDoubleAt(1, 0)) != 960 || math.Round(dst.GetDoubleAt(1, 1)) != 540 {", "line_number": 49}, {"line_number": 50, "line_content": "\t\tt.Error(\"undistortion expected centre point to be nearly unchanged\")"}, {"line_number": 51, "line_content": "\t\treturn"}, {"line_number": 52, "line_content": "\t}"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "\tif dst.GetDoubleAt(2, 0) != 1920 || dst.GetDoubleAt(2, 1) != 1080 {"}, {"line_number": 55, "line_content": "\t\tt.Error(\"undistortion expected bottom right corner to be unchanged\")"}, {"line_number": 56, "line_content": "\t\treturn"}, {"line_number": 57, "line_content": "\t}"}, {"line_number": 58, "line_content": ""}, {"line_content": "}", "line_number": 59}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 60, "lines": [{"line_number": 1, "line_content": "func TestFisheyeUndistortPoint(t *testing.T) {"}, {"line_number": 2, "line_content": "\tk := NewMatWithSize(3, 3, MatTypeCV64F)"}, {"line_number": 3, "line_content": "\tdefer k.Close()"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tk.SetDoubleAt(0, 0, 1094.7249578198823)"}, {"line_number": 6, "line_content": "\tk.SetDoubleAt(0, 1, 0)"}, {"line_number": 7, "line_content": "\tk.SetDoubleAt(0, 2, 959.4907612030962)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tk.SetDoubleAt(1, 0, 0)"}, {"line_content": "\tk.SetDoubleAt(1, 1, 1094.9945708128778)", "line_number": 10}, {"line_number": 11, "line_content": "\tk.SetDoubleAt(1, 2, 536.4566143451868)"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tk.SetDoubleAt(2, 0, 0)"}, {"line_number": 14, "line_content": "\tk.SetDoubleAt(2, 1, 0)"}, {"line_number": 15, "line_content": "\tk.SetDoubleAt(2, 2, 1)"}, {"line_content": "", "line_number": 16}, {"line_content": "\td := NewMatWithSize(1, 4, MatTypeCV64F)", "line_number": 17}, {"line_number": 18, "line_content": "\tdefer d.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\td.SetDoubleAt(0, 0, -0.05207412392075069)"}, {"line_number": 21, "line_content": "\td.SetDoubleAt(0, 1, -0.089168300192224)"}, {"line_number": 22, "line_content": "\td.SetDoubleAt(0, 2, 0.10465607695792184)"}, {"line_number": 23, "line_content": "\td.SetDoubleAt(0, 3, -0.045693446831115585)"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tr := NewMat()"}, {"line_number": 26, "line_content": "\tdefer r.Close()"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\tsrc := NewMatWithSize(3, 1, MatTypeCV64FC2)"}, {"line_content": "\tdefer src.Close()", "line_number": 29}, {"line_content": "\tdst := NewMatWithSize(3, 1, MatTypeCV64FC2)", "line_number": 30}, {"line_content": "\tdefer dst.Close()", "line_number": 31}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tsrc.SetDoubleAt(0, 0, 480)"}, {"line_number": 34, "line_content": "\tsrc.SetDoubleAt(0, 1, 270)"}, {"line_number": 35, "line_content": ""}, {"line_content": "\tsrc.SetDoubleAt(1, 0, 960)", "line_number": 36}, {"line_number": 37, "line_content": "\tsrc.SetDoubleAt(1, 1, 540)"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tsrc.SetDoubleAt(2, 0, 1440)"}, {"line_number": 40, "line_content": "\tsrc.SetDoubleAt(2, 1, 810)"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "\tkNew := NewMat()"}, {"line_number": 43, "line_content": "\tdefer kNew.Close()"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "\tk.CopyTo(&kNew)"}, {"line_content": "", "line_number": 46}, {"line_number": 47, "line_content": "\tkNew.SetDoubleAt(0, 0, 0.4*k.GetDoubleAt(0, 0))"}, {"line_number": 48, "line_content": "\tkNew.SetDoubleAt(1, 1, 0.4*k.GetDoubleAt(1, 1))"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "\timgSize := image.Point{X: 1920, Y: 1080}"}, {"line_number": 51, "line_content": ""}, {"line_content": "\tEstimateNewCameraMatrixForUndistortRectify(k, d, imgSize, r, &kNew, 1, imgSize, 1)", "line_number": 52}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "\tFisheyeUndistortPoints(src, &dst, k, d, r, kNew)"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\tif dst.GetDoubleAt(0, 0) == 0 {"}, {"line_number": 57, "line_content": "\t\tt.Error(\"expected destination Mat to be populated\")"}, {"line_content": "\t}", "line_number": 58}, {"line_number": 59, "line_content": ""}, {"line_number": 60, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "func TestFindAndDrawChessboard(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/chessboard_4x6.png\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of chessboard image\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tcorners := NewMat()"}, {"line_number": 10, "line_content": "\tdefer corners.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfound := FindChessboardCorners(img, image.Point{X: 4, Y: 6}, &corners, 0)"}, {"line_content": "\tif found == false {", "line_number": 13}, {"line_number": 14, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 15, "line_content": "\t\treturn"}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "\tif corners.Empty() {"}, {"line_number": 18, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 19, "line_content": "\t\treturn"}, {"line_number": 20, "line_content": "\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\timg2 := NewMatWithSize(150, 150, MatTypeCV8U)"}, {"line_number": 23, "line_content": "\tdefer img2.Close()"}, {"line_number": 24, "line_content": ""}, {"line_content": "\tDrawChessboardCorners(&img2, image.Pt(4, 6), corners, true)", "line_number": 25}, {"line_number": 26, "line_content": "\tif img2.Empty() {"}, {"line_number": 27, "line_content": "\t\tt.Error(\"Error in DrawChessboardCorners test\")"}, {"line_number": 28, "line_content": "\t}"}, {"line_content": "}", "line_number": 29}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 29, "lines": [{"line_number": 1, "line_content": "func TestFindAndDrawChessboardSB(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/chessboard_4x6.png\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of chessboard image\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 6}, {"line_content": "\tdefer img.Close()", "line_number": 7}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tcorners := NewMat()"}, {"line_number": 10, "line_content": "\tdefer corners.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfound := FindChessboardCornersSB(img, image.Point{X: 4, Y: 6}, &corners, 0)"}, {"line_number": 13, "line_content": "\tif found == false {"}, {"line_number": 14, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_content": "\t\treturn", "line_number": 15}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "\tif corners.Empty() {"}, {"line_content": "\t\tt.Error(\"chessboard pattern not found\")", "line_number": 18}, {"line_number": 19, "line_content": "\t\treturn"}, {"line_number": 20, "line_content": "\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\timg2 := NewMatWithSize(150, 150, MatTypeCV8U)"}, {"line_number": 23, "line_content": "\tdefer img2.Close()"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tDrawChessboardCorners(&img2, image.Pt(4, 6), corners, true)"}, {"line_number": 26, "line_content": "\tif img2.Empty() {"}, {"line_number": 27, "line_content": "\t\tt.Error(\"Error in DrawChessboardCorners test\")"}, {"line_content": "\t}", "line_number": 28}, {"line_number": 29, "line_content": "}"}]}}
{"contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "func TestFindChessboardCornersSBWithMeta(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/chessboard_4x6.png\", IMReadUnchanged)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of chessboard image\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_content": "", "line_number": 8}, {"line_content": "\tcorners := NewMat()", "line_number": 9}, {"line_number": 10, "line_content": "\tdefer corners.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tmeta := NewMat()"}, {"line_number": 13, "line_content": "\tdefer meta.Close()"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tfound := FindChessboardCornersSBWithMeta(img, image.Point{X: 4, Y: 6}, &corners, 0, &meta)"}, {"line_number": 16, "line_content": "\tif found == false {"}, {"line_number": 17, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 18, "line_content": "\t\treturn"}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": "\tif corners.Empty() {"}, {"line_number": 21, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 22, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 23}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\timg2 := NewMatWithSize(150, 150, MatTypeCV8U)"}, {"line_number": 26, "line_content": "\tdefer img2.Close()"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\tDrawChessboardCorners(&img2, image.Pt(4, 6), corners, true)"}, {"line_content": "\tif img2.Empty() {", "line_number": 29}, {"line_number": 30, "line_content": "\t\tt.Error(\"Error in DrawChessboardCorners test\")"}, {"line_number": 31, "line_content": "\t}"}, {"line_number": 32, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 77, "lines": [{"line_number": 1, "line_content": "func TestCalibrateCamera(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := IMRead(\"images/chessboard_4x6_distort.png\", IMReadGrayScale)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid read of chessboard image\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_content": "\tdefer img.Close()", "line_number": 7}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tcorners := NewMat()"}, {"line_number": 10, "line_content": "\tdefer corners.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tsize := image.Pt(4, 6)"}, {"line_number": 13, "line_content": "\tfound := FindChessboardCorners(img, size, &corners, 0)"}, {"line_number": 14, "line_content": "\tif !found {"}, {"line_number": 15, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 16, "line_content": "\t\treturn"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": "\tif corners.Empty() {"}, {"line_number": 19, "line_content": "\t\tt.Error(\"chessboard pattern not found\")"}, {"line_number": 20, "line_content": "\t\treturn"}, {"line_number": 21, "line_content": "\t}"}, {"line_number": 22, "line_content": ""}, {"line_content": "\timagePoints := NewPoint2fVectorFromMat(corners)", "line_number": 23}, {"line_content": "\tdefer imagePoints.Close()", "line_number": 24}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "\tobjectPoints := NewPoint3fVector()"}, {"line_number": 27, "line_content": "\tdefer objectPoints.Close()"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "\tfor j := 0; j < size.Y; j++ {"}, {"line_number": 30, "line_content": "\t\tfor i := 0; i < size.X; i++ {"}, {"line_content": "\t\t\tobjectPoints.Append(Point3f{", "line_number": 31}, {"line_number": 32, "line_content": "\t\t\t\tX:\tfloat32(100 * i),"}, {"line_content": "\t\t\t\tY:\tfloat32(100 * j),", "line_number": 33}, {"line_number": 34, "line_content": "\t\t\t\tZ:\t0,"}, {"line_number": 35, "line_content": "\t\t\t})"}, {"line_content": "\t\t}", "line_number": 36}, {"line_number": 37, "line_content": "\t}"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tcameraMatrix := NewMat()"}, {"line_number": 40, "line_content": "\tdefer cameraMatrix.Close()"}, {"line_number": 41, "line_content": "\tdistCoeffs := NewMat()"}, {"line_number": 42, "line_content": "\tdefer distCoeffs.Close()"}, {"line_number": 43, "line_content": "\trvecs := NewMat()"}, {"line_number": 44, "line_content": "\tdefer rvecs.Close()"}, {"line_number": 45, "line_content": "\ttvecs := NewMat()"}, {"line_number": 46, "line_content": "\tdefer tvecs.Close()"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\tobjectPointsVector := NewPoints3fVector()"}, {"line_number": 49, "line_content": "\tobjectPointsVector.Append(objectPoints)"}, {"line_number": 50, "line_content": "\tdefer objectPointsVector.Close()"}, {"line_content": "", "line_number": 51}, {"line_number": 52, "line_content": "\timagePointsVector := NewPoints2fVector()"}, {"line_number": 53, "line_content": "\timagePointsVector.Append(imagePoints)"}, {"line_number": 54, "line_content": "\tdefer imagePointsVector.Close()"}, {"line_content": "", "line_number": 55}, {"line_number": 56, "line_content": "\tCalibrateCamera("}, {"line_number": 57, "line_content": "\t\tobjectPointsVector, imagePointsVector, image.Pt(img.Cols(), img.Rows()),"}, {"line_number": 58, "line_content": "\t\t&cameraMatrix, &distCoeffs, &rvecs, &tvecs, 0,"}, {"line_number": 59, "line_content": "\t)"}, {"line_number": 60, "line_content": ""}, {"line_number": 61, "line_content": "\tdest := NewMat()"}, {"line_number": 62, "line_content": "\tdefer dest.Close()"}, {"line_number": 63, "line_content": "\tUndistort(img, &dest, cameraMatrix, distCoeffs, cameraMatrix)"}, {"line_content": "", "line_number": 64}, {"line_content": "\ttarget := IMRead(\"images/chessboard_4x6_distort_correct.png\", IMReadGrayScale)", "line_number": 65}, {"line_number": 66, "line_content": "\tdefer target.Close()"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "\txor := NewMat()"}, {"line_number": 69, "line_content": "\tdefer xor.Close()"}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "\tBitwiseXor(dest, target, &xor)"}, {"line_number": 72, "line_content": "\tdifferentPixelsNumber := xor.Sum().Val1"}, {"line_number": 73, "line_content": "\tmaxDifferentPixelsNumber := float64(img.Cols()*img.Rows()) * 0.005"}, {"line_number": 74, "line_content": "\tif differentPixelsNumber > maxDifferentPixelsNumber {"}, {"line_number": 75, "line_content": "\t\tt.Error(\"the undisorted image not equal the target one:\", differentPixelsNumber, \"bigger than\", maxDifferentPixelsNumber)"}, {"line_number": 76, "line_content": "\t}"}, {"line_number": 77, "line_content": "}"}]}}
{"contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "func TestEstimateAffinePartial2D(t *testing.T) {"}, {"line_number": 2, "line_content": "\tsrc := []Point2f{"}, {"line_content": "\t\t{0, 0},", "line_number": 3}, {"line_number": 4, "line_content": "\t\t{10, 5},"}, {"line_number": 5, "line_content": "\t\t{10, 10},"}, {"line_content": "\t\t{5, 10},", "line_number": 6}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdst := []Point2f{"}, {"line_number": 10, "line_content": "\t\t{0, 0},"}, {"line_content": "\t\t{10, 0},", "line_number": 11}, {"line_number": 12, "line_content": "\t\t{10, 10},"}, {"line_number": 13, "line_content": "\t\t{0, 10},"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tpvsrc := NewPoint2fVectorFromPoints(src)"}, {"line_number": 17, "line_content": "\tdefer pvsrc.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tpvdst := NewPoint2fVectorFromPoints(dst)"}, {"line_number": 20, "line_content": "\tdefer pvdst.Close()"}, {"line_number": 21, "line_content": ""}, {"line_content": "\tm := EstimateAffinePartial2D(pvsrc, pvdst)", "line_number": 22}, {"line_number": 23, "line_content": "\tdefer m.Close()"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tif m.Cols() != 3 {"}, {"line_number": 26, "line_content": "\t\tt.Errorf(\"TestEstimateAffinePartial2D(): unexpected cols = %v, want = %v\", m.Cols(), 3)"}, {"line_number": 27, "line_content": "\t}"}, {"line_number": 28, "line_content": "\tif m.Rows() != 2 {"}, {"line_number": 29, "line_content": "\t\tt.Errorf(\"TestEstimateAffinePartial2D(): unexpected rows = %v, want = %v\", m.Rows(), 2)"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "func TestEstimateAffine2D(t *testing.T) {"}, {"line_number": 2, "line_content": "\tsrc := []Point2f{"}, {"line_number": 3, "line_content": "\t\t{0, 0},"}, {"line_number": 4, "line_content": "\t\t{10, 5},"}, {"line_number": 5, "line_content": "\t\t{10, 10},"}, {"line_content": "\t\t{5, 10},", "line_number": 6}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdst := []Point2f{"}, {"line_number": 10, "line_content": "\t\t{0, 0},"}, {"line_number": 11, "line_content": "\t\t{10, 0},"}, {"line_content": "\t\t{10, 10},", "line_number": 12}, {"line_number": 13, "line_content": "\t\t{0, 10},"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tpvsrc := NewPoint2fVectorFromPoints(src)"}, {"line_number": 17, "line_content": "\tdefer pvsrc.Close()"}, {"line_content": "", "line_number": 18}, {"line_number": 19, "line_content": "\tpvdst := NewPoint2fVectorFromPoints(dst)"}, {"line_number": 20, "line_content": "\tdefer pvdst.Close()"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tm := EstimateAffine2D(pvsrc, pvdst)"}, {"line_number": 23, "line_content": "\tdefer m.Close()"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tif m.Cols() != 3 {"}, {"line_number": 26, "line_content": "\t\tt.Errorf(\"TestEstimateAffine2D(): unexpected cols = %v, want = %v\", m.Cols(), 3)"}, {"line_number": 27, "line_content": "\t}"}, {"line_number": 28, "line_content": "\tif m.Rows() != 2 {"}, {"line_number": 29, "line_content": "\t\tt.Errorf(\"TestEstimateAffine2D(): unexpected rows = %v, want = %v\", m.Rows(), 2)"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 39, "lines": [{"line_number": 1, "line_content": "func TestEstimateAffine2DWithParams(t *testing.T) {"}, {"line_number": 2, "line_content": "\tsrc := []Point2f{"}, {"line_number": 3, "line_content": "\t\t{0, 0},"}, {"line_number": 4, "line_content": "\t\t{10, 5},"}, {"line_number": 5, "line_content": "\t\t{10, 10},"}, {"line_number": 6, "line_content": "\t\t{5, 10},"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdst := []Point2f{"}, {"line_number": 10, "line_content": "\t\t{0, 0},"}, {"line_number": 11, "line_content": "\t\t{10, 0},"}, {"line_number": 12, "line_content": "\t\t{10, 10},"}, {"line_number": 13, "line_content": "\t\t{0, 10},"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tpvsrc := NewPoint2fVectorFromPoints(src)"}, {"line_number": 17, "line_content": "\tdefer pvsrc.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tpvdst := NewPoint2fVectorFromPoints(dst)"}, {"line_number": 20, "line_content": "\tdefer pvdst.Close()"}, {"line_number": 21, "line_content": ""}, {"line_content": "\tinliers := NewMat()", "line_number": 22}, {"line_number": 23, "line_content": "\tdefer inliers.Close()"}, {"line_number": 24, "line_content": "\tmethod := 8"}, {"line_number": 25, "line_content": "\transacProjThreshold := 3.0"}, {"line_number": 26, "line_content": "\tmaxiters := uint(2000)"}, {"line_number": 27, "line_content": "\tconfidence := 0.99"}, {"line_number": 28, "line_content": "\trefineIters := uint(10)"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\tm := EstimateAffine2DWithParams(pvsrc, pvdst, inliers, method, ransacProjThreshold, maxiters, confidence, refineIters)"}, {"line_number": 31, "line_content": "\tdefer m.Close()"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tif m.Cols() != 3 {"}, {"line_number": 34, "line_content": "\t\tt.Errorf(\"TestEstimateAffine2DWithParams(): unexpected cols = %v, want = %v\", m.Cols(), 3)"}, {"line_number": 35, "line_content": "\t}"}, {"line_content": "\tif m.Rows() != 2 {", "line_number": 36}, {"line_number": 37, "line_content": "\t\tt.Errorf(\"TestEstimateAffine2DWithParams(): unexpected rows = %v, want = %v\", m.Rows(), 2)"}, {"line_number": 38, "line_content": "\t}"}, {"line_number": 39, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 68, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\twindowA := gocv.NewWindow(\"basic drawing: atom\")"}, {"line_number": 3, "line_content": "\twindowR := gocv.NewWindow(\"basic drawing: rook\")"}, {"line_number": 4, "line_content": "\tdefer windowA.Close()"}, {"line_number": 5, "line_content": "\tdefer windowR.Close()"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tatom := gocv.NewMatWithSize(w, w, gocv.MatTypeCV8UC3)"}, {"line_number": 8, "line_content": "\tdefer atom.Close()"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\trook := gocv.NewMatWithSize(w, w, gocv.MatTypeCV8UC3)"}, {"line_number": 11, "line_content": "\tdefer rook.Close()"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tblack := color.RGBA{0, 0, 0, 0}"}, {"line_number": 14, "line_content": "\tblue := color.RGBA{0, 0, 255, 0}"}, {"line_number": 15, "line_content": "\tred := color.RGBA{255, 0, 0, 0}"}, {"line_number": 16, "line_content": "\twhite := color.RGBA{255, 255, 255, 0}"}, {"line_number": 17, "line_content": "\tyellow := color.RGBA{255, 255, 0, 0}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tgocv.Ellipse(&atom, image.Pt(w/2., w/2.), image.Pt(w/4.0, w/16.0), 90., 0, 360, blue, 2)"}, {"line_number": 20, "line_content": "\tgocv.Ellipse(&atom, image.Pt(w/2., w/2.), image.Pt(w/4.0, w/16.0), 0., 0, 360, blue, 2)"}, {"line_number": 21, "line_content": "\tgocv.Ellipse(&atom, image.Pt(w/2., w/2.), image.Pt(w/4.0, w/16.0), 45., 0, 360, blue, 2)"}, {"line_number": 22, "line_content": "\tgocv.Ellipse(&atom, image.Pt(w/2., w/2.), image.Pt(w/4.0, w/16.0), -45., 0, 360, blue, 2)"}, {"line_number": 23, "line_content": "\tgocv.Circle(&atom, image.Pt(w/2., w/2.), w/32., red, -1)"}, {"line_number": 24, "line_content": ""}, {"line_content": "\tpoints := [][]image.Point{", "line_number": 25}, {"line_number": 26, "line_content": "\t\t{"}, {"line_number": 27, "line_content": "\t\t\timage.Pt(w/4., 7*w/8.),"}, {"line_number": 28, "line_content": "\t\t\timage.Pt(3*w/4., 7*w/8.),"}, {"line_content": "\t\t\timage.Pt(3*w/4., 13*w/16.),", "line_number": 29}, {"line_content": "\t\t\timage.Pt(11*w/16., 13*w/16.),", "line_number": 30}, {"line_content": "\t\t\timage.Pt(19*w/32., 3*w/8.),", "line_number": 31}, {"line_number": 32, "line_content": "\t\t\timage.Pt(3*w/4., 3*w/8.),"}, {"line_number": 33, "line_content": "\t\t\timage.Pt(3*w/4., w/8.),"}, {"line_content": "\t\t\timage.Pt(26*w/40., w/8.),", "line_number": 34}, {"line_number": 35, "line_content": "\t\t\timage.Pt(26*w/40., w/4.),"}, {"line_number": 36, "line_content": "\t\t\timage.Pt(22*w/40., w/4.),"}, {"line_number": 37, "line_content": "\t\t\timage.Pt(22*w/40., w/8.),"}, {"line_content": "\t\t\timage.Pt(18*w/40., w/8.),", "line_number": 38}, {"line_number": 39, "line_content": "\t\t\timage.Pt(18*w/40., w/4.),"}, {"line_content": "\t\t\timage.Pt(14*w/40., w/4.),", "line_number": 40}, {"line_number": 41, "line_content": "\t\t\timage.Pt(14*w/40., w/8.),"}, {"line_number": 42, "line_content": "\t\t\timage.Pt(w/4., w/8.),"}, {"line_number": 43, "line_content": "\t\t\timage.Pt(w/4., 3*w/8.),"}, {"line_number": 44, "line_content": "\t\t\timage.Pt(13*w/32., 3*w/8.),"}, {"line_number": 45, "line_content": "\t\t\timage.Pt(5*w/16., 13*w/16.),"}, {"line_content": "\t\t\timage.Pt(w/4., 13*w/16.),", "line_number": 46}, {"line_content": "\t\t},", "line_number": 47}, {"line_content": "\t}", "line_number": 48}, {"line_number": 49, "line_content": ""}, {"line_content": "\tpv := gocv.NewPointsVectorFromPoints(points)", "line_number": 50}, {"line_content": "\tdefer pv.Close()", "line_number": 51}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\tgocv.FillPoly(&rook, pv, white)"}, {"line_content": "\tgocv.Rectangle(&rook, image.Rect(0, 7*w/8.0, w, w), yellow, -1)", "line_number": 54}, {"line_number": 55, "line_content": "\tgocv.Line(&rook, image.Pt(0, 15*w/16), image.Pt(w, 15*w/16), black, 2)"}, {"line_number": 56, "line_content": "\tgocv.Line(&rook, image.Pt(w/4, 7*w/8), image.Pt(w/4, w), black, 2)"}, {"line_content": "\tgocv.Line(&rook, image.Pt(w/2, 7*w/8), image.Pt(w/2, w), black, 2)", "line_number": 57}, {"line_number": 58, "line_content": "\tgocv.Line(&rook, image.Pt(3*w/4, 7*w/8), image.Pt(3*w/4, w), black, 2)"}, {"line_number": 59, "line_content": ""}, {"line_content": "\tfor {", "line_number": 60}, {"line_number": 61, "line_content": "\t\twindowA.IMShow(atom)"}, {"line_number": 62, "line_content": "\t\twindowR.IMShow(rook)"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "\t\tif windowA.WaitKey(10) >= 0 || windowR.WaitKey(10) >= 0 {"}, {"line_number": 65, "line_content": "\t\t\tbreak"}, {"line_content": "\t\t}", "line_number": 66}, {"line_number": 67, "line_content": "\t}"}, {"line_number": 68, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 84, "lines": [{"line_content": "func main() {", "line_number": 1}, {"line_number": 2, "line_content": "\tif len(os.Args) < 5 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\ncaffe-classifier [camera ID] [modelfile] [configfile] [descriptionsfile] ([backend] [device])\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\tmodel := os.Args[2]"}, {"line_number": 9, "line_content": "\tconfig := os.Args[3]"}, {"line_content": "\tdescr := os.Args[4]", "line_number": 10}, {"line_number": 11, "line_content": "\tdescriptions, err := readDescriptions(descr)"}, {"line_number": 12, "line_content": "\tif err != nil {"}, {"line_number": 13, "line_content": "\t\tfmt.Printf(\"Error reading descriptions file: %v\\n\", descr)"}, {"line_number": 14, "line_content": "\t\treturn"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\tbackend := gocv.NetBackendDefault"}, {"line_number": 18, "line_content": "\tif len(os.Args) > 5 {"}, {"line_number": 19, "line_content": "\t\tbackend = gocv.ParseNetBackend(os.Args[5])"}, {"line_number": 20, "line_content": "\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\ttarget := gocv.NetTargetCPU"}, {"line_number": 23, "line_content": "\tif len(os.Args) > 6 {"}, {"line_number": 24, "line_content": "\t\ttarget = gocv.ParseNetTarget(os.Args[6])"}, {"line_number": 25, "line_content": "\t}"}, {"line_content": "", "line_number": 26}, {"line_number": 27, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_content": "\tif err != nil {", "line_number": 28}, {"line_number": 29, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 30, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 31}, {"line_number": 32, "line_content": "\tdefer webcam.Close()"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "\twindow := gocv.NewWindow(\"Caffe Classifier\")"}, {"line_number": 35, "line_content": "\tdefer window.Close()"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 38, "line_content": "\tdefer img.Close()"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "\tnet := gocv.ReadNet(model, config)"}, {"line_number": 41, "line_content": "\tif net.Empty() {"}, {"line_content": "\t\tfmt.Printf(\"Error reading network model from : %v %v\\n\", model, config)", "line_number": 42}, {"line_content": "\t\treturn", "line_number": 43}, {"line_number": 44, "line_content": "\t}"}, {"line_number": 45, "line_content": "\tdefer net.Close()"}, {"line_number": 46, "line_content": "\tnet.SetPreferableBackend(gocv.NetBackendType(backend))"}, {"line_content": "\tnet.SetPreferableTarget(gocv.NetTargetType(target))", "line_number": 47}, {"line_number": 48, "line_content": ""}, {"line_content": "\tstatus := \"Ready\"", "line_number": 49}, {"line_number": 50, "line_content": "\tstatusColor := color.RGBA{0, 255, 0, 0}"}, {"line_number": 51, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\tfor {"}, {"line_number": 54, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 55, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 56, "line_content": "\t\t\treturn"}, {"line_number": 57, "line_content": "\t\t}"}, {"line_number": 58, "line_content": "\t\tif img.Empty() {"}, {"line_number": 59, "line_content": "\t\t\tcontinue"}, {"line_content": "\t\t}", "line_number": 60}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "\t\tblob := gocv.BlobFromImage(img, 1.0, image.Pt(224, 224), gocv.NewScalar(104, 117, 123, 0), false, false)"}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "\t\tnet.SetInput(blob, \"\")"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "\t\tprob := net.Forward(\"\")"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "\t\tprobMat := prob.Reshape(1, 1)"}, {"line_number": 69, "line_content": ""}, {"line_number": 70, "line_content": "\t\t_, maxVal, _, maxLoc := gocv.MinMaxLoc(probMat)"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "\t\tstatus = fmt.Sprintf(\"description: %v, maxVal: %v\\n\", descriptions[maxLoc.X], maxVal)"}, {"line_number": 73, "line_content": "\t\tgocv.PutText(&img, status, image.Pt(10, 20), gocv.FontHersheyPlain, 1.2, statusColor, 2)"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "\t\tblob.Close()"}, {"line_number": 76, "line_content": "\t\tprob.Close()"}, {"line_number": 77, "line_content": "\t\tprobMat.Close()"}, {"line_number": 78, "line_content": ""}, {"line_number": 79, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 80, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 81, "line_content": "\t\t\tbreak"}, {"line_number": 82, "line_content": "\t\t}"}, {"line_number": 83, "line_content": "\t}"}, {"line_number": 84, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func readDescriptions(path string) ([]string, error) {"}, {"line_number": 2, "line_content": "\tfile, err := os.Open(path)"}, {"line_number": 3, "line_content": "\tif err != nil {"}, {"line_number": 4, "line_content": "\t\treturn nil, err"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer file.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tvar lines []string"}, {"line_number": 9, "line_content": "\tscanner := bufio.NewScanner(file)"}, {"line_number": 10, "line_content": "\tfor scanner.Scan() {"}, {"line_content": "\t\tlines = append(lines, scanner.Text())", "line_number": 11}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": "\treturn lines, scanner.Err()"}, {"line_number": 14, "line_content": "}"}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tcaptest [camera ID]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_content": "", "line_number": 8}, {"line_number": 9, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 10, "line_content": "\tif err != nil {"}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_number": 13, "line_content": "\t}"}, {"line_content": "\tdefer webcam.Close()", "line_number": 14}, {"line_content": "", "line_number": 15}, {"line_number": 16, "line_content": "\tbuf := gocv.NewMat()"}, {"line_number": 17, "line_content": "\tdefer buf.Close()"}, {"line_content": "", "line_number": 18}, {"line_number": 19, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 20, "line_content": "\tfor i := 0; i < 100; i++ {"}, {"line_number": 21, "line_content": "\t\tif ok := webcam.Read(&buf); !ok {"}, {"line_number": 22, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 23, "line_content": "\t\t\treturn"}, {"line_number": 24, "line_content": "\t\t}"}, {"line_content": "\t\tif buf.Empty() {", "line_number": 25}, {"line_number": 26, "line_content": "\t\t\tcontinue"}, {"line_number": 27, "line_content": "\t\t}"}, {"line_content": "", "line_number": 28}, {"line_number": 29, "line_content": "\t\tfmt.Printf(\"Read frame %d\\n\", i+1)"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\tfmt.Println(\"Done.\")"}, {"line_content": "}", "line_number": 33}], "total_lines": 33}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 37, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tcapwindow [camera ID]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "", "line_number": 6}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 10, "line_content": "\tif err != nil {"}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 12}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tdefer webcam.Close()"}, {"line_content": "", "line_number": 15}, {"line_number": 16, "line_content": "\twindow := gocv.NewWindow(\"Capture Window\")"}, {"line_number": 17, "line_content": "\tdefer window.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 20, "line_content": "\tdefer img.Close()"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 23, "line_content": "\tfor {"}, {"line_number": 24, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 25, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_content": "\t\t\treturn", "line_number": 26}, {"line_number": 27, "line_content": "\t\t}"}, {"line_number": 28, "line_content": "\t\tif img.Empty() {"}, {"line_number": 29, "line_content": "\t\t\tcontinue"}, {"line_number": 30, "line_content": "\t\t}"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 33, "line_content": "\t\tif window.WaitKey(1) == 27 {"}, {"line_number": 34, "line_content": "\t\t\tbreak"}, {"line_number": 35, "line_content": "\t\t}"}, {"line_number": 36, "line_content": "\t}"}, {"line_number": 37, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 77, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tcounter [filename] [line] [axis (x/y)] [width]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tfile := os.Args[1]"}, {"line_content": "\tline, _ := strconv.Atoi(os.Args[2])", "line_number": 8}, {"line_number": 9, "line_content": "\taxis := os.Args[3]"}, {"line_number": 10, "line_content": "\twidth, _ := strconv.Atoi(os.Args[4])"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tvideo, err := gocv.VideoCaptureFile(file)"}, {"line_number": 13, "line_content": "\tif err != nil {"}, {"line_number": 14, "line_content": "\t\tfmt.Printf(\"Error opening video capture file: %s\\n\", file)"}, {"line_content": "\t\treturn", "line_number": 15}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "\tdefer video.Close()"}, {"line_number": 18, "line_content": ""}, {"line_content": "\twindow := gocv.NewWindow(\"Track Window\")", "line_number": 19}, {"line_number": 20, "line_content": "\tdefer window.Close()"}, {"line_content": "", "line_number": 21}, {"line_number": 22, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 23, "line_content": "\tdefer img.Close()"}, {"line_number": 24, "line_content": ""}, {"line_content": "\timgFG := gocv.NewMat()", "line_number": 25}, {"line_number": 26, "line_content": "\tdefer imgFG.Close()"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\timgCleaned := gocv.NewMat()"}, {"line_number": 29, "line_content": "\tdefer imgCleaned.Close()"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\tmog2 := gocv.NewBackgroundSubtractorMOG2()"}, {"line_number": 32, "line_content": "\tdefer mog2.Close()"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "\tcount := 0"}, {"line_number": 35, "line_content": "\tfor {"}, {"line_number": 36, "line_content": "\t\tif ok := video.Read(&img); !ok {"}, {"line_number": 37, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", file)"}, {"line_number": 38, "line_content": "\t\t\treturn"}, {"line_number": 39, "line_content": "\t\t}"}, {"line_number": 40, "line_content": "\t\tif img.Empty() {"}, {"line_content": "\t\t\tcontinue", "line_number": 41}, {"line_number": 42, "line_content": "\t\t}"}, {"line_content": "", "line_number": 43}, {"line_number": 44, "line_content": "\t\tmog2.Apply(img, &imgFG)"}, {"line_number": 45, "line_content": "\t\tkernel := gocv.GetStructuringElement(gocv.MorphRect, image.Pt(3, 3))"}, {"line_number": 46, "line_content": "\t\tgocv.Erode(imgFG, &imgCleaned, kernel)"}, {"line_content": "\t\tkernel.Close()", "line_number": 47}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\t\tmoments := gocv.Moments(imgCleaned, true)"}, {"line_number": 50, "line_content": "\t\tarea := moments[\"m00\"]"}, {"line_number": 51, "line_content": "\t\tif area >= 1 {"}, {"line_number": 52, "line_content": "\t\t\tx := int(moments[\"m10\"] / area)"}, {"line_number": 53, "line_content": "\t\t\ty := int(moments[\"m01\"] / area)"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "\t\t\tif axis == \"y\" {"}, {"line_number": 56, "line_content": "\t\t\t\tif x > 0 && x < img.Cols() && y > line && y < line+width {"}, {"line_number": 57, "line_content": "\t\t\t\t\tcount++"}, {"line_number": 58, "line_content": "\t\t\t\t}"}, {"line_number": 59, "line_content": "\t\t\t\tgocv.Line(&img, image.Pt(0, line), image.Pt(img.Cols(), line), color.RGBA{255, 0, 0, 0}, 2)"}, {"line_number": 60, "line_content": "\t\t\t}"}, {"line_number": 61, "line_content": "\t\t\tif axis == \"x\" {"}, {"line_number": 62, "line_content": "\t\t\t\tif y > 0 && y < img.Rows() && x > line && x < line+width {"}, {"line_number": 63, "line_content": "\t\t\t\t\tcount++"}, {"line_number": 64, "line_content": "\t\t\t\t}"}, {"line_number": 65, "line_content": "\t\t\t\tgocv.Line(&img, image.Pt(line, 0), image.Pt(line, img.Rows()), color.RGBA{255, 0, 0, 0}, 2)"}, {"line_number": 66, "line_content": "\t\t\t}"}, {"line_number": 67, "line_content": "\t\t}"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "\t\tgocv.PutText(&img, fmt.Sprintf(\"Count: %d\", count), image.Pt(10, 20),"}, {"line_number": 70, "line_content": "\t\t\tgocv.FontHersheyPlain, 1.2, color.RGBA{0, 255, 0, 0}, 2)"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 73, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 74, "line_content": "\t\t\tbreak"}, {"line_number": 75, "line_content": "\t\t}"}, {"line_number": 76, "line_content": "\t}"}, {"line_number": 77, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tfmt.Printf(\"gocv version: %s\\n\", gocv.Version())"}, {"line_number": 3, "line_content": "\tfmt.Println(\"cuda information:\")"}, {"line_number": 4, "line_content": "\tdevices := cuda.GetCudaEnabledDeviceCount()"}, {"line_number": 5, "line_content": "\tfor i := 0; i < devices; i++ {"}, {"line_number": 6, "line_content": "\t\tfmt.Print(\"  \")"}, {"line_number": 7, "line_content": "\t\tcuda.PrintShortCudaDeviceInfo(i)"}, {"line_content": "\t}", "line_number": 8}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 83, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 4 {"}, {"line_content": "\t\tfmt.Println(\"How to run:\\ndnn-detection [videosource] [modelfile] [configfile] ([backend] [device])\")", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "", "line_number": 6}, {"line_content": "\tdeviceID := os.Args[1]", "line_number": 7}, {"line_number": 8, "line_content": "\tmodel := os.Args[2]"}, {"line_number": 9, "line_content": "\tconfig := os.Args[3]"}, {"line_number": 10, "line_content": "\tbackend := gocv.NetBackendDefault"}, {"line_number": 11, "line_content": "\tif len(os.Args) > 4 {"}, {"line_number": 12, "line_content": "\t\tbackend = gocv.ParseNetBackend(os.Args[4])"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\ttarget := gocv.NetTargetCPU"}, {"line_number": 16, "line_content": "\tif len(os.Args) > 5 {"}, {"line_number": 17, "line_content": "\t\ttarget = gocv.ParseNetTarget(os.Args[5])"}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 21, "line_content": "\tif err != nil {"}, {"line_number": 22, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 23, "line_content": "\t\treturn"}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": "\tdefer webcam.Close()"}, {"line_number": 26, "line_content": ""}, {"line_content": "\twindow := gocv.NewWindow(\"DNN Detection\")", "line_number": 27}, {"line_number": 28, "line_content": "\tdefer window.Close()"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 31, "line_content": "\tdefer img.Close()"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tnet := gocv.ReadNet(model, config)"}, {"line_number": 34, "line_content": "\tif net.Empty() {"}, {"line_number": 35, "line_content": "\t\tfmt.Printf(\"Error reading network model from : %v %v\\n\", model, config)"}, {"line_content": "\t\treturn", "line_number": 36}, {"line_content": "\t}", "line_number": 37}, {"line_number": 38, "line_content": "\tdefer net.Close()"}, {"line_number": 39, "line_content": "\tnet.SetPreferableBackend(gocv.NetBackendType(backend))"}, {"line_number": 40, "line_content": "\tnet.SetPreferableTarget(gocv.NetTargetType(target))"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "\tvar ratio float64"}, {"line_number": 43, "line_content": "\tvar mean gocv.Scalar"}, {"line_number": 44, "line_content": "\tvar swapRGB bool"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "\tif filepath.Ext(model) == \".caffemodel\" {"}, {"line_number": 47, "line_content": "\t\tratio = 1.0"}, {"line_number": 48, "line_content": "\t\tmean = gocv.NewScalar(104, 177, 123, 0)"}, {"line_content": "\t\tswapRGB = false", "line_number": 49}, {"line_number": 50, "line_content": "\t} else {"}, {"line_number": 51, "line_content": "\t\tratio = 1.0 / 127.5"}, {"line_content": "\t\tmean = gocv.NewScalar(127.5, 127.5, 127.5, 0)", "line_number": 52}, {"line_number": 53, "line_content": "\t\tswapRGB = true"}, {"line_number": 54, "line_content": "\t}"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 57, "line_content": ""}, {"line_content": "\tfor {", "line_number": 58}, {"line_number": 59, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 60, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 61, "line_content": "\t\t\treturn"}, {"line_number": 62, "line_content": "\t\t}"}, {"line_number": 63, "line_content": "\t\tif img.Empty() {"}, {"line_number": 64, "line_content": "\t\t\tcontinue"}, {"line_number": 65, "line_content": "\t\t}"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "\t\tblob := gocv.BlobFromImage(img, ratio, image.Pt(300, 300), mean, swapRGB, false)"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "\t\tnet.SetInput(blob, \"\")"}, {"line_number": 70, "line_content": ""}, {"line_content": "\t\tprob := net.Forward(\"\")", "line_number": 71}, {"line_number": 72, "line_content": ""}, {"line_number": 73, "line_content": "\t\tperformDetection(&img, prob)"}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "\t\tprob.Close()"}, {"line_number": 76, "line_content": "\t\tblob.Close()"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "\t\twindow.IMShow(img)"}, {"line_content": "\t\tif window.WaitKey(1) >= 0 {", "line_number": 79}, {"line_content": "\t\t\tbreak", "line_number": 80}, {"line_number": 81, "line_content": "\t\t}"}, {"line_number": 82, "line_content": "\t}"}, {"line_number": 83, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 12, "lines": [{"line_content": "func performDetection(frame *gocv.Mat, results gocv.Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tfor i := 0; i < results.Total(); i += 7 {"}, {"line_number": 3, "line_content": "\t\tconfidence := results.GetFloatAt(0, i+2)"}, {"line_content": "\t\tif confidence > 0.5 {", "line_number": 4}, {"line_number": 5, "line_content": "\t\t\tleft := int(results.GetFloatAt(0, i+3) * float32(frame.Cols()))"}, {"line_number": 6, "line_content": "\t\t\ttop := int(results.GetFloatAt(0, i+4) * float32(frame.Rows()))"}, {"line_number": 7, "line_content": "\t\t\tright := int(results.GetFloatAt(0, i+5) * float32(frame.Cols()))"}, {"line_number": 8, "line_content": "\t\t\tbottom := int(results.GetFloatAt(0, i+6) * float32(frame.Rows()))"}, {"line_number": 9, "line_content": "\t\t\tgocv.Rectangle(frame, image.Rect(left, top, right, bottom), color.RGBA{0, 255, 0, 0}, 2)"}, {"line_content": "\t\t}", "line_number": 10}, {"line_number": 11, "line_content": "\t}"}, {"line_number": 12, "line_content": "}"}]}}
{"contents": {"total_lines": 82, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 4 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\ndnn-pose-detection [videosource] [modelfile] [configfile] ([backend] [device])\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_content": "\tdeviceID := os.Args[1]", "line_number": 7}, {"line_content": "\tmodel := os.Args[2]", "line_number": 8}, {"line_number": 9, "line_content": "\tproto := os.Args[3]"}, {"line_number": 10, "line_content": "\tbackend := gocv.NetBackendDefault"}, {"line_number": 11, "line_content": "\tif len(os.Args) > 4 {"}, {"line_number": 12, "line_content": "\t\tbackend = gocv.ParseNetBackend(os.Args[4])"}, {"line_number": 13, "line_content": "\t}"}, {"line_content": "", "line_number": 14}, {"line_number": 15, "line_content": "\ttarget := gocv.NetTargetCPU"}, {"line_number": 16, "line_content": "\tif len(os.Args) > 5 {"}, {"line_number": 17, "line_content": "\t\ttarget = gocv.ParseNetTarget(os.Args[5])"}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_content": "\tif err != nil {", "line_number": 21}, {"line_number": 22, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 23}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": "\tdefer webcam.Close()"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\twindow := gocv.NewWindow(\"DNN Pose Detection\")"}, {"line_number": 28, "line_content": "\tdefer window.Close()"}, {"line_number": 29, "line_content": ""}, {"line_content": "\timg := gocv.NewMat()", "line_number": 30}, {"line_number": 31, "line_content": "\tdefer img.Close()"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tn := gocv.ReadNet(model, proto)"}, {"line_number": 34, "line_content": "\tnet = &n"}, {"line_content": "\tif net.Empty() {", "line_number": 35}, {"line_number": 36, "line_content": "\t\tfmt.Printf(\"Error reading network model from : %v %v\\n\", model, proto)"}, {"line_number": 37, "line_content": "\t\treturn"}, {"line_number": 38, "line_content": "\t}"}, {"line_number": 39, "line_content": "\tdefer net.Close()"}, {"line_number": 40, "line_content": "\tnet.SetPreferableBackend(gocv.NetBackendType(backend))"}, {"line_number": 41, "line_content": "\tnet.SetPreferableTarget(gocv.NetTargetType(target))"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "\timages = make(chan *gocv.Mat, 1)"}, {"line_number": 46, "line_content": "\tposes = make(chan [][]image.Point)"}, {"line_number": 47, "line_content": ""}, {"line_content": "\tif ok := webcam.Read(&img); !ok {", "line_number": 48}, {"line_number": 49, "line_content": "\t\tfmt.Printf(\"Error cannot read device %v\\n\", deviceID)"}, {"line_number": 50, "line_content": "\t\treturn"}, {"line_number": 51, "line_content": "\t}"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\tprocessFrame(&img)"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "\tgo performDetection()"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "\tfor {"}, {"line_number": 58, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 59, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 60, "line_content": "\t\t\treturn"}, {"line_number": 61, "line_content": "\t\t}"}, {"line_number": 62, "line_content": "\t\tif img.Empty() {"}, {"line_number": 63, "line_content": "\t\t\tcontinue"}, {"line_number": 64, "line_content": "\t\t}"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "\t\tselect {"}, {"line_number": 67, "line_content": "\t\tcase pose = <-poses:"}, {"line_number": 68, "line_content": ""}, {"line_content": "\t\t\tprocessFrame(&img)", "line_number": 69}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "\t\tdefault:"}, {"line_number": 72, "line_content": ""}, {"line_content": "\t\t}", "line_number": 73}, {"line_number": 74, "line_content": ""}, {"line_number": 75, "line_content": "\t\tdrawPose(&img)"}, {"line_number": 76, "line_content": ""}, {"line_number": 77, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 78, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 79, "line_content": "\t\t\tbreak"}, {"line_number": 80, "line_content": "\t\t}"}, {"line_number": 81, "line_content": "\t}"}, {"line_number": 82, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func processFrame(i *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tframe := gocv.NewMat()"}, {"line_number": 3, "line_content": "\ti.CopyTo(&frame)"}, {"line_number": 4, "line_content": "\timages <- &frame"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 70, "lines": [{"line_content": "func performDetection() {", "line_number": 1}, {"line_number": 2, "line_content": "\tfor {"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\t\tframe := <-images"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\t\tblob := gocv.BlobFromImage(*frame, 1.0/255.0, image.Pt(368, 368), gocv.NewScalar(0, 0, 0, 0), false, false)"}, {"line_content": "", "line_number": 7}, {"line_number": 8, "line_content": "\t\tnet.SetInput(blob, \"\")"}, {"line_number": 9, "line_content": ""}, {"line_content": "\t\tprob := net.Forward(\"\")", "line_number": 10}, {"line_content": "", "line_number": 11}, {"line_number": 12, "line_content": "\t\tvar midx int"}, {"line_number": 13, "line_content": "\t\ts := prob.Size()"}, {"line_number": 14, "line_content": "\t\tnparts, h, w := s[1], s[2], s[3]"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\t\tswitch nparts {"}, {"line_number": 17, "line_content": "\t\tcase 19:"}, {"line_content": "", "line_number": 18}, {"line_number": 19, "line_content": "\t\t\tmidx = 0"}, {"line_number": 20, "line_content": "\t\t\tnparts = 18"}, {"line_number": 21, "line_content": "\t\tcase 16:"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\t\t\tmidx = 1"}, {"line_number": 24, "line_content": "\t\t\tnparts = 15"}, {"line_content": "\t\tcase 22:", "line_number": 25}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\t\t\tmidx = 2"}, {"line_number": 28, "line_content": "\t\tdefault:"}, {"line_number": 29, "line_content": "\t\t\tfmt.Println(\"there should be 19 parts for the COCO model, 16 for MPI, or 22 for the hand model\")"}, {"line_number": 30, "line_content": "\t\t\treturn"}, {"line_number": 31, "line_content": "\t\t}"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\t\tpts := make([]image.Point, 22)"}, {"line_content": "\t\tfor i := 0; i < nparts; i++ {", "line_number": 34}, {"line_content": "\t\t\tpts[i] = image.Pt(-1, -1)", "line_number": 35}, {"line_number": 36, "line_content": "\t\t\theatmap, _ := prob.FromPtr(h, w, gocv.MatTypeCV32F, 0, i)"}, {"line_number": 37, "line_content": ""}, {"line_content": "\t\t\t_, maxVal, _, maxLoc := gocv.MinMaxLoc(heatmap)", "line_number": 38}, {"line_number": 39, "line_content": "\t\t\tif maxVal > 0.1 {"}, {"line_number": 40, "line_content": "\t\t\t\tpts[i] = maxLoc"}, {"line_content": "\t\t\t}", "line_number": 41}, {"line_number": 42, "line_content": "\t\t\theatmap.Close()"}, {"line_number": 43, "line_content": "\t\t}"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "\t\tsX := int(float32(frame.Cols()) / float32(w))"}, {"line_number": 46, "line_content": "\t\tsY := int(float32(frame.Rows()) / float32(h))"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\t\tresults := [][]image.Point{}"}, {"line_number": 49, "line_content": "\t\tfor _, p := range PosePairs[midx] {"}, {"line_number": 50, "line_content": "\t\t\ta := pts[p[0]]"}, {"line_number": 51, "line_content": "\t\t\tb := pts[p[1]]"}, {"line_number": 52, "line_content": ""}, {"line_content": "\t\t\tif a.X <= 0 || a.Y <= 0 || b.X <= 0 || b.Y <= 0 {", "line_number": 53}, {"line_number": 54, "line_content": "\t\t\t\tcontinue"}, {"line_number": 55, "line_content": "\t\t\t}"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "\t\t\ta.X *= sX"}, {"line_number": 58, "line_content": "\t\t\ta.Y *= sY"}, {"line_number": 59, "line_content": "\t\t\tb.X *= sX"}, {"line_number": 60, "line_content": "\t\t\tb.Y *= sY"}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "\t\t\tresults = append(results, []image.Point{a, b})"}, {"line_number": 63, "line_content": "\t\t}"}, {"line_number": 64, "line_content": "\t\tprob.Close()"}, {"line_number": 65, "line_content": "\t\tblob.Close()"}, {"line_content": "\t\tframe.Close()", "line_number": 66}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "\t\tposes <- results"}, {"line_number": 69, "line_content": "\t}"}, {"line_number": 70, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func drawPose(frame *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tfor _, pts := range pose {"}, {"line_number": 3, "line_content": "\t\tgocv.Line(frame, pts[0], pts[1], color.RGBA{0, 255, 0, 0}, 2)"}, {"line_number": 4, "line_content": "\t\tgocv.Circle(frame, pts[0], 3, color.RGBA{0, 0, 200, 0}, -1)"}, {"line_number": 5, "line_content": "\t\tgocv.Circle(frame, pts[1], 3, color.RGBA{0, 0, 200, 0}, -1)"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 85, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_content": "\tif len(os.Args) < 3 {", "line_number": 2}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\ndnn-style-transfer [videosource] [modelfile] ([backend] [device])\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_content": "\tdeviceID := os.Args[1]", "line_number": 7}, {"line_number": 8, "line_content": "\tmodel := os.Args[2]"}, {"line_number": 9, "line_content": "\tbackend := gocv.NetBackendDefault"}, {"line_number": 10, "line_content": "\tif len(os.Args) > 3 {"}, {"line_number": 11, "line_content": "\t\tbackend = gocv.ParseNetBackend(os.Args[3])"}, {"line_content": "\t}", "line_number": 12}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\ttarget := gocv.NetTargetCPU"}, {"line_number": 15, "line_content": "\tif len(os.Args) > 4 {"}, {"line_number": 16, "line_content": "\t\ttarget = gocv.ParseNetTarget(os.Args[4])"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 20, "line_content": "\tif err != nil {"}, {"line_number": 21, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 22}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": "\tdefer webcam.Close()"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "\twindow := gocv.NewWindow(\"DNN Style Transfer\")"}, {"line_content": "\tdefer window.Close()", "line_number": 27}, {"line_number": 28, "line_content": ""}, {"line_content": "\timg := gocv.NewMat()", "line_number": 29}, {"line_number": 30, "line_content": "\tdefer img.Close()"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\tnet := gocv.ReadNet(model, \"\")"}, {"line_number": 33, "line_content": "\tif net.Empty() {"}, {"line_number": 34, "line_content": "\t\tfmt.Printf(\"Error reading network model from : %v\\n\", model)"}, {"line_number": 35, "line_content": "\t\treturn"}, {"line_number": 36, "line_content": "\t}"}, {"line_number": 37, "line_content": "\tdefer net.Close()"}, {"line_content": "\tnet.SetPreferableBackend(gocv.NetBackendType(backend))", "line_number": 38}, {"line_number": 39, "line_content": "\tnet.SetPreferableTarget(gocv.NetTargetType(target))"}, {"line_content": "", "line_number": 40}, {"line_number": 41, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_content": "", "line_number": 42}, {"line_number": 43, "line_content": "\tfor {"}, {"line_number": 44, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 45, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_content": "\t\t\treturn", "line_number": 46}, {"line_number": 47, "line_content": "\t\t}"}, {"line_number": 48, "line_content": "\t\tif img.Empty() {"}, {"line_number": 49, "line_content": "\t\t\tcontinue"}, {"line_number": 50, "line_content": "\t\t}"}, {"line_number": 51, "line_content": ""}, {"line_number": 52, "line_content": "\t\tblob := gocv.BlobFromImage(img, 1.0, image.Pt(640, 480), gocv.NewScalar(103.939, 116.779, 123.68, 0), false, false)"}, {"line_number": 53, "line_content": ""}, {"line_content": "\t\tnet.SetInput(blob, \"\")", "line_number": 54}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\t\tprobMat := net.Forward(\"\")"}, {"line_number": 57, "line_content": "\t\tsz := probMat.Size()"}, {"line_number": 58, "line_content": "\t\tdims := sz[2] * sz[3]"}, {"line_number": 59, "line_content": "\t\tout := gocv.NewMatWithSize(480, 640, gocv.MatTypeCV8UC3)"}, {"line_number": 60, "line_content": ""}, {"line_number": 61, "line_content": "\t\tfor i := 0; i < dims; i++ {"}, {"line_number": 62, "line_content": "\t\t\tr := probMat.GetFloatAt(0, i)"}, {"line_number": 63, "line_content": "\t\t\tr += 103.939"}, {"line_content": "", "line_number": 64}, {"line_number": 65, "line_content": "\t\t\tg := probMat.GetFloatAt(0, i+dims)"}, {"line_number": 66, "line_content": "\t\t\tg += 116.779"}, {"line_number": 67, "line_content": ""}, {"line_number": 68, "line_content": "\t\t\tb := probMat.GetFloatAt(0, i+dims*2)"}, {"line_number": 69, "line_content": "\t\t\tb += 123.68"}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "\t\t\tout.SetUCharAt(0, i*3, uint8(r))"}, {"line_content": "\t\t\tout.SetUCharAt(0, i*3+1, uint8(g))", "line_number": 72}, {"line_number": 73, "line_content": "\t\t\tout.SetUCharAt(0, i*3+2, uint8(b))"}, {"line_number": 74, "line_content": "\t\t}"}, {"line_number": 75, "line_content": ""}, {"line_number": 76, "line_content": "\t\twindow.IMShow(out)"}, {"line_number": 77, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_content": "\t\t\tbreak", "line_number": 78}, {"line_number": 79, "line_content": "\t\t}"}, {"line_number": 80, "line_content": ""}, {"line_number": 81, "line_content": "\t\tprobMat.Close()"}, {"line_number": 82, "line_content": "\t\tblob.Close()"}, {"line_number": 83, "line_content": "\t\tout.Close()"}, {"line_number": 84, "line_content": "\t}"}, {"line_number": 85, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 56, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 3 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tfaceblur [camera ID] [classifier XML file]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 5}, {"line_content": "", "line_number": 6}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\txmlFile := os.Args[2]"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tfmt.Printf(\"error opening video capture device: %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 13}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tdefer webcam.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\twindow := gocv.NewWindow(\"Face Blur\")"}, {"line_number": 18, "line_content": "\tdefer window.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\timg := gocv.NewMat()"}, {"line_content": "\tdefer img.Close()", "line_number": 21}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\tclassifier := gocv.NewCascadeClassifier()"}, {"line_number": 24, "line_content": "\tdefer classifier.Close()"}, {"line_number": 25, "line_content": ""}, {"line_content": "\tif !classifier.Load(xmlFile) {", "line_number": 26}, {"line_number": 27, "line_content": "\t\tfmt.Printf(\"Error reading cascade file: %v\\n\", xmlFile)"}, {"line_number": 28, "line_content": "\t\treturn"}, {"line_number": 29, "line_content": "\t}"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 32, "line_content": "\tfor {"}, {"line_content": "\t\tif ok := webcam.Read(&img); !ok {", "line_number": 33}, {"line_number": 34, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 35, "line_content": "\t\t\treturn"}, {"line_number": 36, "line_content": "\t\t}"}, {"line_number": 37, "line_content": "\t\tif img.Empty() {"}, {"line_number": 38, "line_content": "\t\t\tcontinue"}, {"line_number": 39, "line_content": "\t\t}"}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "\t\trects := classifier.DetectMultiScale(img)"}, {"line_content": "\t\tfmt.Printf(\"found %d faces\\n\", len(rects))", "line_number": 42}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "\t\tfor _, r := range rects {"}, {"line_number": 45, "line_content": "\t\t\timgFace := img.Region(r)"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "\t\t\tgocv.GaussianBlur(imgFace, &imgFace, image.Pt(75, 75), 0, 0, gocv.BorderDefault)"}, {"line_number": 48, "line_content": "\t\t\timgFace.Close()"}, {"line_content": "\t\t}", "line_number": 49}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 52, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 53, "line_content": "\t\t\tbreak"}, {"line_number": 54, "line_content": "\t\t}"}, {"line_content": "\t}", "line_number": 55}, {"line_number": 56, "line_content": "}"}]}}
{"contents": {"total_lines": 59, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 3 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tfacedetect [camera ID] [classifier XML file]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\txmlFile := os.Args[2]"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tfmt.Printf(\"error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 13, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 14}, {"line_number": 15, "line_content": "\tdefer webcam.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\twindow := gocv.NewWindow(\"Face Detect\")"}, {"line_number": 18, "line_content": "\tdefer window.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 21, "line_content": "\tdefer img.Close()"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\tblue := color.RGBA{0, 0, 255, 0}"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tclassifier := gocv.NewCascadeClassifier()"}, {"line_number": 26, "line_content": "\tdefer classifier.Close()"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\tif !classifier.Load(xmlFile) {"}, {"line_number": 29, "line_content": "\t\tfmt.Printf(\"Error reading cascade file: %v\\n\", xmlFile)"}, {"line_number": 30, "line_content": "\t\treturn"}, {"line_number": 31, "line_content": "\t}"}, {"line_content": "", "line_number": 32}, {"line_number": 33, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 34, "line_content": "\tfor {"}, {"line_number": 35, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 36, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_content": "\t\t\treturn", "line_number": 37}, {"line_number": 38, "line_content": "\t\t}"}, {"line_content": "\t\tif img.Empty() {", "line_number": 39}, {"line_number": 40, "line_content": "\t\t\tcontinue"}, {"line_number": 41, "line_content": "\t\t}"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\t\trects := classifier.DetectMultiScale(img)"}, {"line_number": 44, "line_content": "\t\tfmt.Printf(\"found %d faces\\n\", len(rects))"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "\t\tfor _, r := range rects {"}, {"line_number": 47, "line_content": "\t\t\tgocv.Rectangle(&img, r, blue, 3)"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\t\t\tsize := gocv.GetTextSize(\"Human\", gocv.FontHersheyPlain, 1.2, 2)"}, {"line_number": 50, "line_content": "\t\t\tpt := image.Pt(r.Min.X+(r.Min.X/2)-(size.X/2), r.Min.Y-2)"}, {"line_number": 51, "line_content": "\t\t\tgocv.PutText(&img, \"Human\", pt, gocv.FontHersheyPlain, 1.2, blue, 2)"}, {"line_content": "\t\t}", "line_number": 52}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 55, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 56, "line_content": "\t\t\tbreak"}, {"line_number": 57, "line_content": "\t\t}"}, {"line_number": 58, "line_content": "\t}"}, {"line_number": 59, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 47, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_content": "\tif len(os.Args) < 4 {", "line_number": 2}, {"line_content": "\t\tfmt.Println(\"How to run:\\n\\tfacedetect-from-url [image URL] [classifier XML file] [image file]\")", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_content": "\timageURL := os.Args[1]", "line_number": 7}, {"line_number": 8, "line_content": "\txmlFile := os.Args[2]"}, {"line_content": "\tsaveFile := os.Args[3]", "line_number": 9}, {"line_number": 10, "line_content": ""}, {"line_content": "\tblue := color.RGBA{0, 0, 255, 0}", "line_number": 11}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tclassifier := gocv.NewCascadeClassifier()"}, {"line_number": 14, "line_content": "\tdefer classifier.Close()"}, {"line_number": 15, "line_content": ""}, {"line_content": "\tif !classifier.Load(xmlFile) {", "line_number": 16}, {"line_number": 17, "line_content": "\t\tfmt.Printf(\"Error reading cascade file: %v\\n\", xmlFile)"}, {"line_number": 18, "line_content": "\t\treturn"}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": ""}, {"line_content": "\tres, err := http.Get(imageURL)", "line_number": 21}, {"line_number": 22, "line_content": "\tif err != nil {"}, {"line_number": 23, "line_content": "\t\tlog.Fatal(err)"}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "\tresByte, err := ioutil.ReadAll(res.Body)"}, {"line_number": 27, "line_content": "\tif err != nil {"}, {"line_number": 28, "line_content": "\t\tlog.Fatal(err)"}, {"line_number": 29, "line_content": "\t}"}, {"line_number": 30, "line_content": "\timg, err := gocv.IMDecode(resByte, 1)"}, {"line_number": 31, "line_content": "\tif err != nil {"}, {"line_number": 32, "line_content": "\t\tlog.Fatal(err)"}, {"line_number": 33, "line_content": "\t}"}, {"line_number": 34, "line_content": ""}, {"line_number": 35, "line_content": "\trects := classifier.DetectMultiScale(img)"}, {"line_content": "\tfmt.Printf(\"found %d faces\\n\", len(rects))", "line_number": 36}, {"line_content": "", "line_number": 37}, {"line_number": 38, "line_content": "\tfor _, r := range rects {"}, {"line_content": "\t\tgocv.Rectangle(&img, r, blue, 3)", "line_number": 39}, {"line_number": 40, "line_content": ""}, {"line_number": 41, "line_content": "\t\tsize := gocv.GetTextSize(\"Human\", gocv.FontHersheyPlain, 1.2, 2)"}, {"line_number": 42, "line_content": "\t\tpt := image.Pt(r.Min.X+(r.Min.X/2)-(size.X/2), r.Min.Y-2)"}, {"line_number": 43, "line_content": "\t\tgocv.PutText(&img, \"Human\", pt, gocv.FontHersheyPlain, 1.2, blue, 2)"}, {"line_number": 44, "line_content": "\t}"}, {"line_number": 45, "line_content": "\tgocv.IMWrite(saveFile, img)"}, {"line_number": 46, "line_content": "\tfmt.Printf(\"saved to %s\\n\", saveFile)"}, {"line_number": 47, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 56, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_content": "\tif len(os.Args) != 3 {", "line_number": 2}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"Usage: feature-matching /path/to/query /path/to/train\")"}, {"line_number": 4, "line_content": "\t\tpanic(\"error: no files provided\")"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tquery := gocv.IMRead(os.Args[1], gocv.IMReadGrayScale)"}, {"line_number": 8, "line_content": "\tdefer query.Close()"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\ttrain := gocv.IMRead(os.Args[2], gocv.IMReadGrayScale)"}, {"line_content": "\tdefer train.Close()", "line_number": 11}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tsift := gocv.NewSIFT()"}, {"line_number": 14, "line_content": "\tdefer sift.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tkp1, des1 := sift.DetectAndCompute(query, gocv.NewMat())"}, {"line_number": 17, "line_content": "\tkp2, des2 := sift.DetectAndCompute(train, gocv.NewMat())"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tbf := gocv.NewBFMatcher()"}, {"line_number": 20, "line_content": "\tmatches := bf.KnnMatch(des1, des2, 2)"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tvar good []gocv.DMatch"}, {"line_number": 23, "line_content": "\tfor _, m := range matches {"}, {"line_number": 24, "line_content": "\t\tif len(m) > 1 {"}, {"line_number": 25, "line_content": "\t\t\tif m[0].Distance < 0.75*m[1].Distance {"}, {"line_number": 26, "line_content": "\t\t\t\tgood = append(good, m[0])"}, {"line_content": "\t\t\t}", "line_number": 27}, {"line_number": 28, "line_content": "\t\t}"}, {"line_content": "\t}", "line_number": 29}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\tc1 := color.RGBA{"}, {"line_number": 32, "line_content": "\t\tR:\t0,"}, {"line_number": 33, "line_content": "\t\tG:\t255,"}, {"line_number": 34, "line_content": "\t\tB:\t0,"}, {"line_number": 35, "line_content": "\t\tA:\t0,"}, {"line_number": 36, "line_content": "\t}"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\tc2 := color.RGBA{"}, {"line_number": 39, "line_content": "\t\tR:\t255,"}, {"line_number": 40, "line_content": "\t\tG:\t0,"}, {"line_number": 41, "line_content": "\t\tB:\t0,"}, {"line_number": 42, "line_content": "\t\tA:\t0,"}, {"line_number": 43, "line_content": "\t}"}, {"line_number": 44, "line_content": ""}, {"line_number": 45, "line_content": "\tmask := make([]byte, 0)"}, {"line_number": 46, "line_content": ""}, {"line_number": 47, "line_content": "\tout := gocv.NewMat()"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\tgocv.DrawMatches(query, kp1, train, kp2, good, &out, c1, c2, mask, gocv.DrawDefault)"}, {"line_number": 50, "line_content": ""}, {"line_content": "\twindow := gocv.NewWindow(\"Output\")", "line_number": 51}, {"line_number": 52, "line_content": "\twindow.IMShow(out)"}, {"line_number": 53, "line_content": "\tdefer window.Close()"}, {"line_number": 54, "line_content": ""}, {"line_number": 55, "line_content": "\twindow.WaitKey(0)"}, {"line_number": 56, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 47, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tfind-chessboard [imgfile]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tfilename := os.Args[1]"}, {"line_content": "\timg := gocv.IMRead(filename, gocv.IMReadColor)", "line_number": 8}, {"line_content": "", "line_number": 9}, {"line_content": "\tif img.Empty() {", "line_number": 10}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error reading chessboard image\")"}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_number": 13, "line_content": "\t}"}, {"line_content": "\tdefer img.Close()", "line_number": 14}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tcorners := gocv.NewMat()"}, {"line_number": 17, "line_content": "\tdefer corners.Close()"}, {"line_number": 18, "line_content": "\tsz := image.Point{X: 4, Y: 6}"}, {"line_content": "\tfound := gocv.FindChessboardCorners(img, sz, &corners, 0)", "line_number": 19}, {"line_number": 20, "line_content": "\tif found == false {"}, {"line_content": "\t\tfmt.Printf(\"chessboard pattern not found\")", "line_number": 21}, {"line_number": 22, "line_content": "\t\treturn"}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": "\tif corners.Empty() {"}, {"line_number": 25, "line_content": "\t\tfmt.Printf(\"corners mat is empty\")"}, {"line_number": 26, "line_content": "\t\treturn"}, {"line_number": 27, "line_content": "\t}"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "\tfmt.Printf(\"Corners Found. Size: %+v Rows: %+v Cols: %+v\\n\", corners.Size(), corners.Rows(), corners.Cols())"}, {"line_number": 30, "line_content": "\tclone := img.Clone()"}, {"line_content": "\tdefer clone.Close()", "line_number": 31}, {"line_number": 32, "line_content": "\tgocv.DrawChessboardCorners(&clone, sz, corners, found)"}, {"line_number": 33, "line_content": "\tif clone.Empty() {"}, {"line_number": 34, "line_content": "\t\tfmt.Printf(\"Error writing to chessboard image\")"}, {"line_number": 35, "line_content": "\t\treturn"}, {"line_number": 36, "line_content": "\t}"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\twindow := gocv.NewWindow(\"Chessboards\")"}, {"line_number": 39, "line_content": "\tdefer window.Close()"}, {"line_number": 40, "line_content": "\tfor {"}, {"line_content": "\t\twindow.IMShow(clone)", "line_number": 41}, {"line_content": "", "line_number": 42}, {"line_number": 43, "line_content": "\t\tif window.WaitKey(10) >= 0 {"}, {"line_number": 44, "line_content": "\t\t\tbreak"}, {"line_number": 45, "line_content": "\t\t}"}, {"line_number": 46, "line_content": "\t}"}, {"line_content": "}", "line_number": 47}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 60, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_content": "\t\tfmt.Println(\"How to run:\\n\\tfind-circles [imgfile]\")", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tfilename := os.Args[1]"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twindow := gocv.NewWindow(\"detected circles\")"}, {"line_number": 10, "line_content": "\tdefer window.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\timg := gocv.IMRead(filename, gocv.IMReadGrayScale)"}, {"line_number": 13, "line_content": "\tdefer img.Close()"}, {"line_content": "", "line_number": 14}, {"line_number": 15, "line_content": "\tgocv.MedianBlur(img, &img, 5)"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\tcimg := gocv.NewMat()"}, {"line_number": 18, "line_content": "\tdefer cimg.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\tgocv.CvtColor(img, &cimg, gocv.ColorGrayToBGR)"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tcircles := gocv.NewMat()"}, {"line_number": 23, "line_content": "\tdefer circles.Close()"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tgocv.HoughCirclesWithParams("}, {"line_number": 26, "line_content": "\t\timg,"}, {"line_number": 27, "line_content": "\t\t&circles,"}, {"line_number": 28, "line_content": "\t\tgocv.HoughGradient,"}, {"line_number": 29, "line_content": "\t\t1,"}, {"line_number": 30, "line_content": "\t\tfloat64(img.Rows()/8),"}, {"line_content": "\t\t75,", "line_number": 31}, {"line_content": "\t\t20,", "line_number": 32}, {"line_number": 33, "line_content": "\t\t10,"}, {"line_number": 34, "line_content": "\t\t0,"}, {"line_number": 35, "line_content": "\t)"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "\tblue := color.RGBA{0, 0, 255, 0}"}, {"line_number": 38, "line_content": "\tred := color.RGBA{255, 0, 0, 0}"}, {"line_number": 39, "line_content": ""}, {"line_number": 40, "line_content": "\tfor i := 0; i < circles.Cols(); i++ {"}, {"line_number": 41, "line_content": "\t\tv := circles.GetVecfAt(0, i)"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\t\tif len(v) > 2 {"}, {"line_number": 44, "line_content": "\t\t\tx := int(v[0])"}, {"line_number": 45, "line_content": "\t\t\ty := int(v[1])"}, {"line_number": 46, "line_content": "\t\t\tr := int(v[2])"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\t\t\tgocv.Circle(&cimg, image.Pt(x, y), r, blue, 2)"}, {"line_number": 49, "line_content": "\t\t\tgocv.Circle(&cimg, image.Pt(x, y), 2, red, 3)"}, {"line_number": 50, "line_content": "\t\t}"}, {"line_number": 51, "line_content": "\t}"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\tfor {"}, {"line_number": 54, "line_content": "\t\twindow.IMShow(cimg)"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\t\tif window.WaitKey(10) >= 0 {"}, {"line_number": 57, "line_content": "\t\t\tbreak"}, {"line_number": 58, "line_content": "\t\t}"}, {"line_number": 59, "line_content": "\t}"}, {"line_number": 60, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tfilename := os.Args[1]"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\tmat := gocv.IMRead(filename, gocv.IMReadColor)"}, {"line_number": 5, "line_content": ""}, {"line_content": "\tmatCanny := gocv.NewMat()", "line_number": 6}, {"line_number": 7, "line_content": "\tmatLines := gocv.NewMat()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twindow := gocv.NewWindow(\"detected lines\")"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tgocv.Canny(mat, &matCanny, 50, 200)"}, {"line_number": 12, "line_content": "\tgocv.HoughLinesP(matCanny, &matLines, 1, math.Pi/180, 80)"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\tfmt.Println(matLines.Cols())"}, {"line_number": 15, "line_content": "\tfmt.Println(matLines.Rows())"}, {"line_number": 16, "line_content": "\tfor i := 0; i < matLines.Rows(); i++ {"}, {"line_content": "\t\tpt1 := image.Pt(int(matLines.GetVeciAt(i, 0)[0]), int(matLines.GetVeciAt(i, 0)[1]))", "line_number": 17}, {"line_number": 18, "line_content": "\t\tpt2 := image.Pt(int(matLines.GetVeciAt(i, 0)[2]), int(matLines.GetVeciAt(i, 0)[3]))"}, {"line_content": "\t\tgocv.Line(&mat, pt1, pt2, color.RGBA{0, 255, 0, 50}, 10)", "line_number": 19}, {"line_number": 20, "line_content": "\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tfor {"}, {"line_number": 23, "line_content": "\t\twindow.IMShow(mat)"}, {"line_number": 24, "line_content": "\t\tif window.WaitKey(10) >= 0 {"}, {"line_number": 25, "line_content": "\t\t\tbreak"}, {"line_number": 26, "line_content": "\t\t}"}, {"line_number": 27, "line_content": "\t}"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 90, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\thand-gestures [camera ID]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 10, "line_content": "\tif err != nil {"}, {"line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)", "line_number": 11}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 13}, {"line_number": 14, "line_content": "\tdefer webcam.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\twindow := gocv.NewWindow(\"Hand Gestures\")"}, {"line_content": "\tdefer window.Close()", "line_number": 17}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 20, "line_content": "\tdefer img.Close()"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\timgGrey := gocv.NewMat()"}, {"line_content": "\tdefer imgGrey.Close()", "line_number": 23}, {"line_number": 24, "line_content": ""}, {"line_content": "\timgBlur := gocv.NewMat()", "line_number": 25}, {"line_content": "\tdefer imgBlur.Close()", "line_number": 26}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\timgThresh := gocv.NewMat()"}, {"line_number": 29, "line_content": "\tdefer imgThresh.Close()"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\thull := gocv.NewMat()"}, {"line_number": 32, "line_content": "\tdefer hull.Close()"}, {"line_content": "", "line_number": 33}, {"line_number": 34, "line_content": "\tdefects := gocv.NewMat()"}, {"line_content": "\tdefer defects.Close()", "line_number": 35}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "\tgreen := color.RGBA{0, 255, 0, 0}"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 40, "line_content": "\tfor {"}, {"line_number": 41, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 42, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 43, "line_content": "\t\t\treturn"}, {"line_number": 44, "line_content": "\t\t}"}, {"line_content": "\t\tif img.Empty() {", "line_number": 45}, {"line_number": 46, "line_content": "\t\t\tcontinue"}, {"line_number": 47, "line_content": "\t\t}"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\t\tgocv.CvtColor(img, &imgGrey, gocv.ColorBGRToGray)"}, {"line_number": 50, "line_content": "\t\tgocv.GaussianBlur(imgGrey, &imgBlur, image.Pt(35, 35), 0, 0, gocv.BorderDefault)"}, {"line_content": "\t\tgocv.Threshold(imgBlur, &imgThresh, 0, 255, gocv.ThresholdBinaryInv+gocv.ThresholdOtsu)", "line_number": 51}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\t\tcontours := gocv.FindContours(imgThresh, gocv.RetrievalExternal, gocv.ChainApproxSimple)"}, {"line_number": 54, "line_content": "\t\tc := getBiggestContour(contours)"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\t\tgocv.ConvexHull(c, &hull, true, false)"}, {"line_content": "\t\tgocv.ConvexityDefects(c, hull, &defects)", "line_number": 57}, {"line_number": 58, "line_content": ""}, {"line_number": 59, "line_content": "\t\tvar angle float64"}, {"line_content": "\t\tdefectCount := 0", "line_number": 60}, {"line_number": 61, "line_content": "\t\tfor i := 0; i < defects.Rows(); i++ {"}, {"line_number": 62, "line_content": "\t\t\tstart := c.At(int(defects.GetIntAt(i, 0)))"}, {"line_number": 63, "line_content": "\t\t\tend := c.At(int(defects.GetIntAt(i, 1)))"}, {"line_number": 64, "line_content": "\t\t\tfar := c.At(int(defects.GetIntAt(i, 2)))"}, {"line_number": 65, "line_content": ""}, {"line_number": 66, "line_content": "\t\t\ta := math.Sqrt(math.Pow(float64(end.X-start.X), 2) + math.Pow(float64(end.Y-start.Y), 2))"}, {"line_number": 67, "line_content": "\t\t\tb := math.Sqrt(math.Pow(float64(far.X-start.X), 2) + math.Pow(float64(far.Y-start.Y), 2))"}, {"line_number": 68, "line_content": "\t\t\tc := math.Sqrt(math.Pow(float64(end.X-far.X), 2) + math.Pow(float64(end.Y-far.Y), 2))"}, {"line_number": 69, "line_content": ""}, {"line_number": 70, "line_content": "\t\t\tangle = math.Acos((math.Pow(b, 2)+math.Pow(c, 2)-math.Pow(a, 2))/(2*b*c)) * 57"}, {"line_number": 71, "line_content": ""}, {"line_content": "\t\t\tif angle <= 90 {", "line_number": 72}, {"line_number": 73, "line_content": "\t\t\t\tdefectCount++"}, {"line_number": 74, "line_content": "\t\t\t\tgocv.Circle(&img, far, 1, green, 2)"}, {"line_content": "\t\t\t}", "line_number": 75}, {"line_number": 76, "line_content": "\t\t}"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "\t\tstatus := fmt.Sprintf(\"defectCount: %d\", defectCount+1)"}, {"line_number": 79, "line_content": ""}, {"line_number": 80, "line_content": "\t\trect := gocv.BoundingRect(c)"}, {"line_number": 81, "line_content": "\t\tgocv.Rectangle(&img, rect, color.RGBA{255, 255, 255, 0}, 2)"}, {"line_number": 82, "line_content": ""}, {"line_number": 83, "line_content": "\t\tgocv.PutText(&img, status, image.Pt(10, 20), gocv.FontHersheyPlain, 1.2, green, 2)"}, {"line_number": 84, "line_content": ""}, {"line_number": 85, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 86, "line_content": "\t\tif window.WaitKey(1) == 27 {"}, {"line_number": 87, "line_content": "\t\t\tbreak"}, {"line_number": 88, "line_content": "\t\t}"}, {"line_number": 89, "line_content": "\t}"}, {"line_number": 90, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "func getBiggestContour(contours gocv.PointsVector) gocv.PointVector {"}, {"line_number": 2, "line_content": "\tvar area float64"}, {"line_content": "\tindex := 0", "line_number": 3}, {"line_number": 4, "line_content": "\tfor i := 0; i < contours.Size(); i++ {"}, {"line_number": 5, "line_content": "\t\tnewArea := gocv.ContourArea(contours.At(i))"}, {"line_number": 6, "line_content": "\t\tif newArea > area {"}, {"line_number": 7, "line_content": "\t\t\tarea = newArea"}, {"line_number": 8, "line_content": "\t\t\tindex = i"}, {"line_number": 9, "line_content": "\t\t}"}, {"line_content": "\t}", "line_number": 10}, {"line_number": 11, "line_content": "\treturn contours.At(index)"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\twebcam, _ := gocv.OpenVideoCapture(0)"}, {"line_number": 3, "line_content": "\twindow := gocv.NewWindow(\"Hello\")"}, {"line_number": 4, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 5, "line_content": ""}, {"line_content": "\tfor {", "line_number": 6}, {"line_number": 7, "line_content": "\t\twebcam.Read(&img)"}, {"line_number": 8, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 9, "line_content": "\t\twindow.WaitKey(1)"}, {"line_number": 10, "line_content": "\t}"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 34, "lines": [{"line_content": "func setupHashes() []contrib.ImgHashBase {", "line_number": 1}, {"line_number": 2, "line_content": "\tvar hashes []contrib.ImgHashBase"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\tif *usePHash || *useAll {"}, {"line_number": 5, "line_content": "\t\thashes = append(hashes, contrib.PHash{})"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tif *useAverage || *useAll {"}, {"line_number": 8, "line_content": "\t\thashes = append(hashes, contrib.AverageHash{})"}, {"line_number": 9, "line_content": "\t}"}, {"line_content": "\tif *useBlockMean0 || *useAll {", "line_number": 10}, {"line_number": 11, "line_content": "\t\thashes = append(hashes, contrib.BlockMeanHash{})"}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": "\tif *useBlockMean1 || *useAll {"}, {"line_number": 14, "line_content": "\t\thashes = append(hashes, contrib.BlockMeanHash{Mode: contrib.BlockMeanHashMode1})"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "\tif *useColorMoment || *useAll {"}, {"line_number": 17, "line_content": "\t\thashes = append(hashes, contrib.ColorMomentHash{})"}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": "\tif *useMarrHildreth || *useAll {"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\t\thashes = append(hashes, contrib.NewMarrHildrethHash())"}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": "\tif *useRadialVariance || *useAll {"}, {"line_content": "", "line_number": 24}, {"line_number": 25, "line_content": "\t\thashes = append(hashes, contrib.NewRadialVarianceHash())"}, {"line_number": 26, "line_content": "\t}"}, {"line_content": "", "line_number": 27}, {"line_number": 28, "line_content": "\tif len(hashes) == 0 {"}, {"line_number": 29, "line_content": "\t\t*useAll = true"}, {"line_number": 30, "line_content": "\t\treturn setupHashes()"}, {"line_number": 31, "line_content": "\t}"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\treturn hashes"}, {"line_content": "}", "line_number": 34}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 55, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tflag.Usage = func() {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\timg-similarity [-flags] [image1.jpg] [image2.jpg]\")"}, {"line_number": 4, "line_content": "\t\tflag.PrintDefaults()"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "", "line_number": 6}, {"line_number": 7, "line_content": "\tprintHashes := flag.Bool(\"print\", false, \"print hash values\")"}, {"line_number": 8, "line_content": "\tflag.Parse()"}, {"line_number": 9, "line_content": "\tif flag.NArg() < 2 {"}, {"line_number": 10, "line_content": "\t\tflag.Usage()"}, {"line_number": 11, "line_content": "\t\treturn"}, {"line_number": 12, "line_content": "\t}"}, {"line_content": "", "line_number": 13}, {"line_number": 14, "line_content": "\tinputs := flag.Args()"}, {"line_number": 15, "line_content": "\timages := make([]gocv.Mat, len(inputs))"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\tfor i := 0; i < 2; i++ {"}, {"line_number": 18, "line_content": "\t\timg := gocv.IMRead(inputs[i], gocv.IMReadColor)"}, {"line_number": 19, "line_content": "\t\tif img.Empty() {"}, {"line_content": "\t\t\tfmt.Printf(\"cannot read image %s\\n\", inputs[i])", "line_number": 20}, {"line_number": 21, "line_content": "\t\t\treturn"}, {"line_content": "\t\t}", "line_number": 22}, {"line_number": 23, "line_content": "\t\tdefer img.Close()"}, {"line_content": "", "line_number": 24}, {"line_number": 25, "line_content": "\t\timages[i] = img"}, {"line_number": 26, "line_content": "\t}"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\thashes := setupHashes()"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\tfor _, hash := range hashes {"}, {"line_number": 31, "line_content": "\t\tresults := make([]gocv.Mat, len(images))"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\t\tfor i, img := range images {"}, {"line_number": 34, "line_content": "\t\t\tresults[i] = gocv.NewMat()"}, {"line_number": 35, "line_content": "\t\t\tdefer results[i].Close()"}, {"line_number": 36, "line_content": "\t\t\thash.Compute(img, &results[i])"}, {"line_number": 37, "line_content": "\t\t\tif results[i].Empty() {"}, {"line_number": 38, "line_content": "\t\t\t\tfmt.Printf(\"error computing hash for %s\\n\", inputs[i])"}, {"line_number": 39, "line_content": "\t\t\t\treturn"}, {"line_number": 40, "line_content": "\t\t\t}"}, {"line_number": 41, "line_content": "\t\t}"}, {"line_number": 42, "line_content": ""}, {"line_content": "\t\tsimilar := hash.Compare(results[0], results[1])", "line_number": 43}, {"line_number": 44, "line_content": ""}, {"line_content": "\t\tname := strings.TrimPrefix(fmt.Sprintf(\"%T\", hash), \"contrib.\")", "line_number": 45}, {"line_number": 46, "line_content": "\t\tfmt.Printf(\"%s: similarity %g\\n\", name, similar)"}, {"line_content": "", "line_number": 47}, {"line_number": 48, "line_content": "\t\tif *printHashes {"}, {"line_content": "", "line_number": 49}, {"line_number": 50, "line_content": "\t\t\tfor i, path := range inputs {"}, {"line_number": 51, "line_content": "\t\t\t\tfmt.Printf(\"\\t%s = %x\\n\", path, results[i].ToBytes())"}, {"line_number": 52, "line_content": "\t\t\t}"}, {"line_number": 53, "line_content": "\t\t}"}, {"line_number": 54, "line_content": "\t}"}, {"line_number": 55, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 3 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tmjpeg-streamer [camera ID] [host:port]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\thost := os.Args[2]"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\twebcam, err = gocv.OpenVideoCapture(deviceID)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_content": "\t\tfmt.Printf(\"Error opening capture device: %v\\n\", deviceID)", "line_number": 12}, {"line_number": 13, "line_content": "\t\treturn"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tdefer webcam.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\tstream = mjpeg.NewStream()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tgo mjpegCapture()"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\tfmt.Println(\"Capturing. Point your browser to \" + host)"}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\thttp.Handle(\"/\", stream)"}, {"line_number": 24, "line_content": "\tlog.Fatal(http.ListenAndServe(host, nil))"}, {"line_number": 25, "line_content": "}"}]}}
{"contents": {"total_lines": 18, "lines": [{"line_content": "func mjpegCapture() {", "line_number": 1}, {"line_number": 2, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 3, "line_content": "\tdefer img.Close()"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tfor {"}, {"line_number": 6, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 7, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 8, "line_content": "\t\t\treturn"}, {"line_number": 9, "line_content": "\t\t}"}, {"line_number": 10, "line_content": "\t\tif img.Empty() {"}, {"line_number": 11, "line_content": "\t\t\tcontinue"}, {"line_number": 12, "line_content": "\t\t}"}, {"line_content": "", "line_number": 13}, {"line_number": 14, "line_content": "\t\tbuf, _ := gocv.IMEncode(\".jpg\", img)"}, {"line_number": 15, "line_content": "\t\tstream.UpdateJPEG(buf.GetBytes())"}, {"line_number": 16, "line_content": "\t\tbuf.Close()"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 79, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tmotion-detect [camera ID]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_content": "\tdeviceID := os.Args[1]", "line_number": 7}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 10, "line_content": "\tif err != nil {"}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tdefer webcam.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\twindow := gocv.NewWindow(\"Motion Window\")"}, {"line_number": 17, "line_content": "\tdefer window.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 20, "line_content": "\tdefer img.Close()"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\timgDelta := gocv.NewMat()"}, {"line_number": 23, "line_content": "\tdefer imgDelta.Close()"}, {"line_content": "", "line_number": 24}, {"line_number": 25, "line_content": "\timgThresh := gocv.NewMat()"}, {"line_content": "\tdefer imgThresh.Close()", "line_number": 26}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\tmog2 := gocv.NewBackgroundSubtractorMOG2()"}, {"line_content": "\tdefer mog2.Close()", "line_number": 29}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\tstatus := \"Ready\""}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 34, "line_content": "\tfor {"}, {"line_number": 35, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 36, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 37, "line_content": "\t\t\treturn"}, {"line_number": 38, "line_content": "\t\t}"}, {"line_number": 39, "line_content": "\t\tif img.Empty() {"}, {"line_number": 40, "line_content": "\t\t\tcontinue"}, {"line_number": 41, "line_content": "\t\t}"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\t\tstatus = \"Ready\""}, {"line_number": 44, "line_content": "\t\tstatusColor := color.RGBA{0, 255, 0, 0}"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "\t\tmog2.Apply(img, &imgDelta)"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\t\tgocv.Threshold(imgDelta, &imgThresh, 25, 255, gocv.ThresholdBinary)"}, {"line_number": 49, "line_content": ""}, {"line_number": 50, "line_content": "\t\tkernel := gocv.GetStructuringElement(gocv.MorphRect, image.Pt(3, 3))"}, {"line_number": 51, "line_content": "\t\tgocv.Dilate(imgThresh, &imgThresh, kernel)"}, {"line_number": 52, "line_content": "\t\tkernel.Close()"}, {"line_content": "", "line_number": 53}, {"line_number": 54, "line_content": "\t\tcontours := gocv.FindContours(imgThresh, gocv.RetrievalExternal, gocv.ChainApproxSimple)"}, {"line_number": 55, "line_content": ""}, {"line_content": "\t\tfor i := 0; i < contours.Size(); i++ {", "line_number": 56}, {"line_number": 57, "line_content": "\t\t\tarea := gocv.ContourArea(contours.At(i))"}, {"line_number": 58, "line_content": "\t\t\tif area < MinimumArea {"}, {"line_number": 59, "line_content": "\t\t\t\tcontinue"}, {"line_number": 60, "line_content": "\t\t\t}"}, {"line_number": 61, "line_content": ""}, {"line_number": 62, "line_content": "\t\t\tstatus = \"Motion detected\""}, {"line_number": 63, "line_content": "\t\t\tstatusColor = color.RGBA{255, 0, 0, 0}"}, {"line_number": 64, "line_content": "\t\t\tgocv.DrawContours(&img, contours, i, statusColor, 2)"}, {"line_content": "", "line_number": 65}, {"line_number": 66, "line_content": "\t\t\trect := gocv.BoundingRect(contours.At(i))"}, {"line_content": "\t\t\tgocv.Rectangle(&img, rect, color.RGBA{0, 0, 255, 0}, 2)", "line_number": 67}, {"line_number": 68, "line_content": "\t\t}"}, {"line_number": 69, "line_content": ""}, {"line_number": 70, "line_content": "\t\tcontours.Close()"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "\t\tgocv.PutText(&img, status, image.Pt(10, 20), gocv.FontHersheyPlain, 1.2, statusColor, 2)"}, {"line_content": "", "line_number": 73}, {"line_number": 74, "line_content": "\t\twindow.IMShow(img)"}, {"line_content": "\t\tif window.WaitKey(1) == 27 {", "line_number": 75}, {"line_number": 76, "line_content": "\t\t\tbreak"}, {"line_content": "\t\t}", "line_number": 77}, {"line_number": 78, "line_content": "\t}"}, {"line_number": 79, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tfmt.Printf(\"gocv version: %s\\n\", gocv.Version())"}, {"line_number": 3, "line_content": "\tfmt.Printf(\"OpenVINO Inference Engine version: %s\\n\", ie.Version())"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 30, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 3 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tsaveimage [camera ID] [image file]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "", "line_number": 6}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_content": "\tsaveFile := os.Args[2]", "line_number": 8}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 13, "line_content": "\t\treturn"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tdefer webcam.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 18, "line_content": "\tdefer img.Close()"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 21, "line_content": "\t\tfmt.Printf(\"cannot read device %v\\n\", deviceID)"}, {"line_number": 22, "line_content": "\t\treturn"}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": "\tif img.Empty() {"}, {"line_number": 25, "line_content": "\t\tfmt.Printf(\"no image on device %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 26}, {"line_number": 27, "line_content": "\t}"}, {"line_number": 28, "line_content": ""}, {"line_number": 29, "line_content": "\tgocv.IMWrite(saveFile, img)"}, {"line_number": 30, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 43, "lines": [{"line_content": "func main() {", "line_number": 1}, {"line_number": 2, "line_content": "\tif len(os.Args) < 3 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tsavevideo [camera ID] [video file]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\tsaveFile := os.Args[2]"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 13}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tdefer webcam.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 18, "line_content": "\tdefer img.Close()"}, {"line_number": 19, "line_content": ""}, {"line_content": "\tif ok := webcam.Read(&img); !ok {", "line_number": 20}, {"line_number": 21, "line_content": "\t\tfmt.Printf(\"Cannot read device %v\\n\", deviceID)"}, {"line_content": "\t\treturn", "line_number": 22}, {"line_content": "\t}", "line_number": 23}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\twriter, err := gocv.VideoWriterFile(saveFile, \"MJPG\", 25, img.Cols(), img.Rows(), true)"}, {"line_number": 26, "line_content": "\tif err != nil {"}, {"line_content": "\t\tfmt.Printf(\"error opening video writer device: %v\\n\", saveFile)", "line_number": 27}, {"line_number": 28, "line_content": "\t\treturn"}, {"line_number": 29, "line_content": "\t}"}, {"line_number": 30, "line_content": "\tdefer writer.Close()"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\tfor i := 0; i < 100; i++ {"}, {"line_number": 33, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 34, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 35, "line_content": "\t\t\treturn"}, {"line_number": 36, "line_content": "\t\t}"}, {"line_number": 37, "line_content": "\t\tif img.Empty() {"}, {"line_number": 38, "line_content": "\t\t\tcontinue"}, {"line_number": 39, "line_content": "\t\t}"}, {"line_content": "", "line_number": 40}, {"line_number": 41, "line_content": "\t\twriter.Write(img)"}, {"line_number": 42, "line_content": "\t}"}, {"line_content": "}", "line_number": 43}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_content": "\t\tfmt.Println(\"How to run:\\n\\tshowimage [imgfile]\")", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tfilename := os.Args[1]"}, {"line_number": 8, "line_content": "\twindow := gocv.NewWindow(\"Hello\")"}, {"line_number": 9, "line_content": "\timg := gocv.IMRead(filename, gocv.IMReadColor)"}, {"line_number": 10, "line_content": "\tif img.Empty() {"}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error reading image from: %v\\n\", filename)"}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tfor {"}, {"line_number": 15, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 16, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 17, "line_content": "\t\t\tbreak"}, {"line_number": 18, "line_content": "\t\t}"}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": "}"}], "total_lines": 20}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "func min(a, b float32) float32 {"}, {"line_number": 2, "line_content": "\tif a < b {"}, {"line_number": 3, "line_content": "\t\treturn a"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": "\treturn b"}, {"line_number": 6, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func max(a, b float32) float32 {"}, {"line_number": 2, "line_content": "\tif a > b {"}, {"line_number": 3, "line_content": "\t\treturn a"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": "\treturn b"}, {"line_number": 6, "line_content": "}"}], "total_lines": 6}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 83, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 4 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\nssd-facedetect [camera ID] [protofile] [modelfile]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\tproto := os.Args[2]"}, {"line_number": 9, "line_content": "\tmodel := os.Args[3]"}, {"line_number": 10, "line_content": ""}, {"line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)", "line_number": 11}, {"line_content": "\tif err != nil {", "line_number": 12}, {"line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)", "line_number": 13}, {"line_number": 14, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 15}, {"line_number": 16, "line_content": "\tdefer webcam.Close()"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "\twindow := gocv.NewWindow(\"SSD Face Detection\")"}, {"line_number": 19, "line_content": "\tdefer window.Close()"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 22, "line_content": "\tdefer img.Close()"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "\tnet := gocv.ReadNetFromCaffe(proto, model)"}, {"line_number": 25, "line_content": "\tif net.Empty() {"}, {"line_number": 26, "line_content": "\t\tfmt.Printf(\"Error reading network model from : %v %v\\n\", proto, model)"}, {"line_number": 27, "line_content": "\t\treturn"}, {"line_number": 28, "line_content": "\t}"}, {"line_number": 29, "line_content": "\tdefer net.Close()"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\tgreen := color.RGBA{0, 255, 0, 0}"}, {"line_number": 32, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "\tfor {"}, {"line_content": "\t\tif ok := webcam.Read(&img); !ok {", "line_number": 35}, {"line_number": 36, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 37, "line_content": "\t\t\treturn"}, {"line_number": 38, "line_content": "\t\t}"}, {"line_number": 39, "line_content": "\t\tif img.Empty() {"}, {"line_number": 40, "line_content": "\t\t\tcontinue"}, {"line_number": 41, "line_content": "\t\t}"}, {"line_number": 42, "line_content": ""}, {"line_number": 43, "line_content": "\t\tW := float32(img.Cols())"}, {"line_number": 44, "line_content": "\t\tH := float32(img.Rows())"}, {"line_number": 45, "line_content": ""}, {"line_number": 46, "line_content": "\t\tblob := gocv.BlobFromImage(img, 1.0, image.Pt(128, 96), gocv.NewScalar(104.0, 177.0, 123.0, 0), false, false)"}, {"line_number": 47, "line_content": "\t\tdefer blob.Close()"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\t\tnet.SetInput(blob, \"data\")"}, {"line_number": 50, "line_content": ""}, {"line_number": 51, "line_content": "\t\tdetBlob := net.Forward(\"detection_out\")"}, {"line_number": 52, "line_content": "\t\tdefer detBlob.Close()"}, {"line_number": 53, "line_content": ""}, {"line_number": 54, "line_content": "\t\tdetections := gocv.GetBlobChannel(detBlob, 0, 0)"}, {"line_number": 55, "line_content": "\t\tdefer detections.Close()"}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "\t\tfor r := 0; r < detections.Rows(); r++ {"}, {"line_number": 58, "line_content": ""}, {"line_number": 59, "line_content": "\t\t\tconfidence := detections.GetFloatAt(r, 2)"}, {"line_content": "\t\t\tif confidence < 0.5 {", "line_number": 60}, {"line_number": 61, "line_content": "\t\t\t\tcontinue"}, {"line_content": "\t\t\t}", "line_number": 62}, {"line_number": 63, "line_content": ""}, {"line_number": 64, "line_content": "\t\t\tleft := detections.GetFloatAt(r, 3) * W"}, {"line_content": "\t\t\ttop := detections.GetFloatAt(r, 4) * H", "line_number": 65}, {"line_content": "\t\t\tright := detections.GetFloatAt(r, 5) * W", "line_number": 66}, {"line_number": 67, "line_content": "\t\t\tbottom := detections.GetFloatAt(r, 6) * H"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "\t\t\tleft = min(max(0, left), W-1)"}, {"line_number": 70, "line_content": "\t\t\tright = min(max(0, right), W-1)"}, {"line_number": 71, "line_content": "\t\t\tbottom = min(max(0, bottom), H-1)"}, {"line_number": 72, "line_content": "\t\t\ttop = min(max(0, top), H-1)"}, {"line_number": 73, "line_content": ""}, {"line_number": 74, "line_content": "\t\t\trect := image.Rect(int(left), int(top), int(right), int(bottom))"}, {"line_number": 75, "line_content": "\t\t\tgocv.Rectangle(&img, rect, green, 3)"}, {"line_number": 76, "line_content": "\t\t}"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 79, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 80, "line_content": "\t\t\tbreak"}, {"line_number": 81, "line_content": "\t\t}"}, {"line_number": 82, "line_content": "\t}"}, {"line_number": 83, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 87, "lines": [{"line_content": "func main() {", "line_number": 1}, {"line_number": 2, "line_content": "\tif len(os.Args) < 4 {"}, {"line_number": 3, "line_content": "\t\tfmt.Println(\"How to run:\\ntf-classifier [camera ID] [modelfile] [descriptionsfile]\")"}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": "\tmodel := os.Args[2]"}, {"line_number": 9, "line_content": "\tdescr := os.Args[3]"}, {"line_number": 10, "line_content": "\tdescriptions, err := readDescriptions(descr)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tfmt.Printf(\"Error reading descriptions file: %v\\n\", descr)"}, {"line_number": 13, "line_content": "\t\treturn"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tbackend := gocv.NetBackendDefault"}, {"line_number": 17, "line_content": "\tif len(os.Args) > 4 {"}, {"line_number": 18, "line_content": "\t\tbackend = gocv.ParseNetBackend(os.Args[4])"}, {"line_content": "\t}", "line_number": 19}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\ttarget := gocv.NetTargetCPU"}, {"line_number": 22, "line_content": "\tif len(os.Args) > 5 {"}, {"line_number": 23, "line_content": "\t\ttarget = gocv.ParseNetTarget(os.Args[5])"}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": ""}, {"line_number": 26, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 27, "line_content": "\tif err != nil {"}, {"line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)", "line_number": 28}, {"line_number": 29, "line_content": "\t\treturn"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": "\tdefer webcam.Close()"}, {"line_number": 32, "line_content": ""}, {"line_number": 33, "line_content": "\twindow := gocv.NewWindow(\"Tensorflow Classifier\")"}, {"line_number": 34, "line_content": "\tdefer window.Close()"}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 37, "line_content": "\tdefer img.Close()"}, {"line_number": 38, "line_content": ""}, {"line_number": 39, "line_content": "\tnet := gocv.ReadNet(model, \"\")"}, {"line_number": 40, "line_content": "\tif net.Empty() {"}, {"line_number": 41, "line_content": "\t\tfmt.Printf(\"Error reading network model : %v\\n\", model)"}, {"line_number": 42, "line_content": "\t\treturn"}, {"line_number": 43, "line_content": "\t}"}, {"line_number": 44, "line_content": "\tdefer net.Close()"}, {"line_content": "\tnet.SetPreferableBackend(gocv.NetBackendType(backend))", "line_number": 45}, {"line_number": 46, "line_content": "\tnet.SetPreferableTarget(gocv.NetTargetType(target))"}, {"line_number": 47, "line_content": ""}, {"line_number": 48, "line_content": "\tstatus := \"Ready\""}, {"line_number": 49, "line_content": "\tstatusColor := color.RGBA{0, 255, 0, 0}"}, {"line_number": 50, "line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)"}, {"line_content": "", "line_number": 51}, {"line_content": "\tfor {", "line_number": 52}, {"line_number": 53, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 54, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 55, "line_content": "\t\t\treturn"}, {"line_number": 56, "line_content": "\t\t}"}, {"line_number": 57, "line_content": "\t\tif img.Empty() {"}, {"line_number": 58, "line_content": "\t\t\tcontinue"}, {"line_number": 59, "line_content": "\t\t}"}, {"line_number": 60, "line_content": ""}, {"line_number": 61, "line_content": "\t\tblob := gocv.BlobFromImage(img, 1.0, image.Pt(224, 224), gocv.NewScalar(0, 0, 0, 0), true, false)"}, {"line_number": 62, "line_content": ""}, {"line_number": 63, "line_content": "\t\tnet.SetInput(blob, \"input\")"}, {"line_number": 64, "line_content": ""}, {"line_number": 65, "line_content": "\t\tprob := net.Forward(\"softmax2\")"}, {"line_number": 66, "line_content": ""}, {"line_number": 67, "line_content": "\t\tprobMat := prob.Reshape(1, 1)"}, {"line_number": 68, "line_content": ""}, {"line_number": 69, "line_content": "\t\t_, maxVal, _, maxLoc := gocv.MinMaxLoc(probMat)"}, {"line_number": 70, "line_content": ""}, {"line_number": 71, "line_content": "\t\tdesc := \"Unknown\""}, {"line_content": "\t\tif maxLoc.X < 1000 {", "line_number": 72}, {"line_number": 73, "line_content": "\t\t\tdesc = descriptions[maxLoc.X]"}, {"line_number": 74, "line_content": "\t\t}"}, {"line_number": 75, "line_content": "\t\tstatus = fmt.Sprintf(\"description: %v, maxVal: %v\\n\", desc, maxVal)"}, {"line_number": 76, "line_content": "\t\tgocv.PutText(&img, status, image.Pt(10, 20), gocv.FontHersheyPlain, 1.2, statusColor, 2)"}, {"line_number": 77, "line_content": ""}, {"line_number": 78, "line_content": "\t\tblob.Close()"}, {"line_content": "\t\tprob.Close()", "line_number": 79}, {"line_number": 80, "line_content": "\t\tprobMat.Close()"}, {"line_number": 81, "line_content": ""}, {"line_number": 82, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 83, "line_content": "\t\tif window.WaitKey(1) >= 0 {"}, {"line_number": 84, "line_content": "\t\t\tbreak"}, {"line_number": 85, "line_content": "\t\t}"}, {"line_number": 86, "line_content": "\t}"}, {"line_number": 87, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func readDescriptions(path string) ([]string, error) {"}, {"line_content": "\tfile, err := os.Open(path)", "line_number": 2}, {"line_number": 3, "line_content": "\tif err != nil {"}, {"line_number": 4, "line_content": "\t\treturn nil, err"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer file.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tvar lines []string"}, {"line_number": 9, "line_content": "\tscanner := bufio.NewScanner(file)"}, {"line_number": 10, "line_content": "\tfor scanner.Scan() {"}, {"line_number": 11, "line_content": "\t\tlines = append(lines, scanner.Text())"}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": "\treturn lines, scanner.Err()"}, {"line_number": 14, "line_content": "}"}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": "\tif len(os.Args) < 2 {"}, {"line_content": "\t\tfmt.Println(\"How to run:\\n\\ttracking [camera ID]\")", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdeviceID := os.Args[1]"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\twebcam, err := gocv.OpenVideoCapture(deviceID)"}, {"line_number": 10, "line_content": "\tif err != nil {"}, {"line_number": 11, "line_content": "\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)"}, {"line_number": 12, "line_content": "\t\treturn"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tdefer webcam.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\twindow := gocv.NewWindow(\"Tracking\")"}, {"line_number": 17, "line_content": "\tdefer window.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\ttracker := contrib.NewTrackerKCF()"}, {"line_number": 20, "line_content": "\tdefer tracker.Close()"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\timg := gocv.NewMat()"}, {"line_content": "\tdefer img.Close()", "line_number": 23}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 26, "line_content": "\t\tfmt.Printf(\"cannot read device %v\\n\", deviceID)"}, {"line_number": 27, "line_content": "\t\treturn"}, {"line_number": 28, "line_content": "\t}"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\trect := gocv.SelectROI(\"Tracking\", img)"}, {"line_content": "\tif rect.Max.X == 0 {", "line_number": 31}, {"line_number": 32, "line_content": "\t\tfmt.Printf(\"user cancelled roi selection\\n\")"}, {"line_number": 33, "line_content": "\t\treturn"}, {"line_content": "\t}", "line_number": 34}, {"line_number": 35, "line_content": ""}, {"line_number": 36, "line_content": "\tinit := tracker.Init(img, rect)"}, {"line_number": 37, "line_content": "\tif !init {"}, {"line_number": 38, "line_content": "\t\tfmt.Printf(\"Could not initialize the Tracker\")"}, {"line_number": 39, "line_content": "\t\treturn"}, {"line_number": 40, "line_content": "\t}"}, {"line_number": 41, "line_content": ""}, {"line_number": 42, "line_content": "\tblue := color.RGBA{0, 0, 255, 0}"}, {"line_content": "\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)", "line_number": 43}, {"line_number": 44, "line_content": "\tfor {"}, {"line_number": 45, "line_content": "\t\tif ok := webcam.Read(&img); !ok {"}, {"line_number": 46, "line_content": "\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)"}, {"line_number": 47, "line_content": "\t\t\treturn"}, {"line_content": "\t\t}", "line_number": 48}, {"line_number": 49, "line_content": "\t\tif img.Empty() {"}, {"line_number": 50, "line_content": "\t\t\tcontinue"}, {"line_number": 51, "line_content": "\t\t}"}, {"line_number": 52, "line_content": ""}, {"line_number": 53, "line_content": "\t\trect, _ := tracker.Update(img)"}, {"line_number": 54, "line_content": ""}, {"line_content": "\t\tgocv.Rectangle(&img, rect, blue, 3)", "line_number": 55}, {"line_number": 56, "line_content": ""}, {"line_number": 57, "line_content": "\t\twindow.IMShow(img)"}, {"line_number": 58, "line_content": "\t\tif window.WaitKey(10) >= 0 {"}, {"line_number": 59, "line_content": "\t\t\tbreak"}, {"line_number": 60, "line_content": "\t\t}"}, {"line_number": 61, "line_content": "\t}"}, {"line_number": 62, "line_content": "}"}], "total_lines": 62}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func main() {", "line_number": 1}, {"line_number": 2, "line_content": "\tfmt.Printf(\"gocv version: %s\\n\", gocv.Version())"}, {"line_number": 3, "line_content": "\tfmt.Printf(\"opencv lib version: %s\\n\", gocv.OpenCVVersion())"}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}, "type": "functions"}
{"contents": {"total_lines": 51, "lines": [{"line_number": 1, "line_content": "func Inpaint() {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tjpgImage := gocv.IMRead(\"./images/space_shuttle.jpg\", gocv.IMReadColor)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tif jpgImage.Empty() {"}, {"line_number": 6, "line_content": "\t\tfmt.Printf(\"Invalid read of Source Mat in TestInpaint test\\n\")"}, {"line_content": "\t\treturn", "line_number": 7}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tsrc := gocv.NewMat()"}, {"line_number": 11, "line_content": "\tdefer src.Close()"}, {"line_number": 12, "line_content": "\tsizeImage := jpgImage.Size()"}, {"line_number": 13, "line_content": "\tjpgImage.ConvertTo(&src, gocv.MatTypeCV8UC3)"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tmaskFsrFast := gocv.NewMatWithSizes(sizeImage, gocv.MatTypeCV8UC1)"}, {"line_number": 16, "line_content": "\tdefer maskFsrFast.Close()"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "\tdstShitMap := gocv.NewMat()"}, {"line_content": "\tdefer dstShitMap.Close()", "line_number": 19}, {"line_number": 20, "line_content": "\tcontrib.Inpaint(&src, &maskFsrFast, &dstShitMap, contrib.FsrFast)"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tdstFsrFast := gocv.NewMat()"}, {"line_number": 23, "line_content": "\tdefer dstFsrFast.Close()"}, {"line_number": 24, "line_content": "\tcontrib.Inpaint(&src, &maskFsrFast, &dstFsrFast, contrib.FsrFast)"}, {"line_number": 25, "line_content": ""}, {"line_content": "\tdstFsrBest := gocv.NewMat()", "line_number": 26}, {"line_number": 27, "line_content": "\tdefer dstFsrBest.Close()"}, {"line_number": 28, "line_content": "\tcontrib.Inpaint(&src, &maskFsrFast, &dstFsrBest, contrib.FsrFast)"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\tif dstShitMap.Empty() || dstShitMap.Rows() != src.Rows() || dstShitMap.Cols() != src.Cols() || dstShitMap.Type() != src.Type() {"}, {"line_number": 31, "line_content": "\t\tfmt.Printf(\"Invlalid TestInpaint ShitMap test\\n\")"}, {"line_number": 32, "line_content": "\t\treturn"}, {"line_number": 33, "line_content": "\t}"}, {"line_number": 34, "line_content": "\tfmt.Printf(\"ShitMap : MAT %d <> %d : %d\\n\", dstShitMap.Rows(), src.Rows(), dstShitMap.Type())"}, {"line_number": 35, "line_content": "\tgocv.IMWrite(\"ShitMap_inpaint.png\", dstShitMap)"}, {"line_number": 36, "line_content": ""}, {"line_number": 37, "line_content": "\tif dstFsrFast.Empty() || dstFsrFast.Rows() != src.Rows() || dstFsrFast.Cols() != src.Cols() || dstFsrFast.Type() != src.Type() {"}, {"line_number": 38, "line_content": "\t\tfmt.Printf(\"Invlalid TestInpaint FsrFast test\\n\")"}, {"line_number": 39, "line_content": "\t\treturn"}, {"line_number": 40, "line_content": "\t}"}, {"line_number": 41, "line_content": "\tfmt.Printf(\"FsrFast : MAT %d <> %d : %d\\n\", dstFsrFast.Rows(), src.Rows(), dstFsrFast.Type())"}, {"line_number": 42, "line_content": "\tgocv.IMWrite(\"FsrFast_inpaint.png\", dstFsrFast)"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "\tif dstFsrBest.Empty() || dstFsrBest.Rows() != src.Rows() || dstFsrBest.Cols() != src.Cols() || dstFsrBest.Type() != src.Type() {"}, {"line_number": 45, "line_content": "\t\tfmt.Printf(\"Invlalid TestInpaint FsrBest test\\n\")"}, {"line_content": "\t\treturn", "line_number": 46}, {"line_number": 47, "line_content": "\t}"}, {"line_number": 48, "line_content": "\tfmt.Printf(\"FsrBest : MAT %d <> %d : %d\\n\", dstFsrBest.Rows(), src.Rows(), dstFsrBest.Type())"}, {"line_number": 49, "line_content": "\tgocv.IMWrite(\"FsrBest_inpaint.png\", dstFsrBest)"}, {"line_number": 50, "line_content": ""}, {"line_content": "}", "line_number": 51}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "func BalanceWhite() {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tfileGrayWorld := \"grayworld_space_shuttle.png\""}, {"line_number": 4, "line_content": "\tsrc := gocv.IMRead(\"./images/space_shuttle.jpg\", gocv.IMReadColor)"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tif src.Empty() {"}, {"line_number": 7, "line_content": "\t\tfmt.Printf(\"Invalid read of Source Mat in TestInpaint test\\n\")"}, {"line_number": 8, "line_content": "\t\treturn"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tdefer src.Close()"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfmt.Println(\"using GrayworldWB with white balance function\")"}, {"line_number": 13, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 14, "line_content": "\tdefer dst.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tgrayworldwb := contrib.NewGrayworldWB()"}, {"line_number": 17, "line_content": "\tdefer grayworldwb.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tgrayworldwb.SetSaturationThreshold(0.7)"}, {"line_number": 20, "line_content": "\tgrayworldwb.BalanceWhite(src, &dst)"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tgocv.IMWrite(fileGrayWorld, dst)"}, {"line_number": 23, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "func main() {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tif len(os.Args) < 2 {"}, {"line_number": 4, "line_content": "\t\tfmt.Println(\"How to run:\\n\\tmain [-i] [-b]\")"}, {"line_number": 5, "line_content": "\t\treturn"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tbalanceWhitePtr := flag.Bool(\"b\", false, \"GrayworldWB functions\")"}, {"line_number": 8, "line_content": "\tinpaintPtr := flag.Bool(\"i\", false, \"Inpaint functions\")"}, {"line_content": "\tflag.Parse()", "line_number": 9}, {"line_number": 10, "line_content": ""}, {"line_content": "\tif *balanceWhitePtr {", "line_number": 11}, {"line_number": 12, "line_content": "\t\tBalanceWhite()"}, {"line_number": 13, "line_content": "\t}"}, {"line_content": "", "line_number": 14}, {"line_number": 15, "line_content": "\tif *inpaintPtr {"}, {"line_number": 16, "line_content": "\t\tInpaint()"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 32, "lines": [{"line_number": 1, "line_content": "func DetectMarkersWithDictID(input gocv.Mat, dictionaryId ArucoDictionaryCode, params ArucoDetectorParameters) ("}, {"line_number": 2, "line_content": "\tmarkerCorners [][]gocv.Point2f, markerIds []int, rejectedCandidates [][]gocv.Point2f,"}, {"line_number": 3, "line_content": ") {"}, {"line_number": 4, "line_content": "\tpvsCorners := gocv.NewPoints2fVector()"}, {"line_number": 5, "line_content": "\tdefer pvsCorners.Close()"}, {"line_number": 6, "line_content": "\tpvsRejected := gocv.NewPoints2fVector()"}, {"line_number": 7, "line_content": "\tdefer pvsRejected.Close()"}, {"line_number": 8, "line_content": "\tcmarkerIds := C.IntVector{}"}, {"line_number": 9, "line_content": "\tdefer C.free(unsafe.Pointer(cmarkerIds.val))"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tC.detectMarkersWithDictId("}, {"line_number": 12, "line_content": "\t\tC.Mat(input.Ptr()),"}, {"line_number": 13, "line_content": "\t\tC.int(dictionaryId),"}, {"line_content": "\t\tC.Points2fVector(pvsCorners.P()),", "line_number": 14}, {"line_number": 15, "line_content": "\t\t&cmarkerIds,"}, {"line_content": "\t\tC.ArucoDetectorParameters(params.p),", "line_number": 16}, {"line_number": 17, "line_content": "\t\tC.Points2fVector(pvsRejected.P()),"}, {"line_number": 18, "line_content": "\t)"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 21, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(cmarkerIds.val)),"}, {"line_number": 22, "line_content": "\t\tLen:\tint(cmarkerIds.length),"}, {"line_number": 23, "line_content": "\t\tCap:\tint(cmarkerIds.length),"}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": "\tpcids := *(*[]C.int)(unsafe.Pointer(h))"}, {"line_number": 26, "line_content": "\tmarkerIds = []int{}"}, {"line_number": 27, "line_content": "\tfor i := 0; i < int(cmarkerIds.length); i++ {"}, {"line_number": 28, "line_content": "\t\tmarkerIds = append(markerIds, int(pcids[i]))"}, {"line_number": 29, "line_content": "\t}"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\treturn pvsCorners.ToPoints(), markerIds, pvsRejected.ToPoints()"}, {"line_number": 32, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 33, "lines": [{"line_number": 1, "line_content": "func DetectMarkers(input gocv.Mat, dictionary ArucoDictionary, params ArucoDetectorParameters) ("}, {"line_content": "\tmarkerCorners [][]gocv.Point2f, markerIds []int, rejectedCandidates [][]gocv.Point2f,", "line_number": 2}, {"line_number": 3, "line_content": ") {"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tpvsCorners := gocv.NewPoints2fVector()"}, {"line_number": 6, "line_content": "\tdefer pvsCorners.Close()"}, {"line_number": 7, "line_content": "\tpvsRejected := gocv.NewPoints2fVector()"}, {"line_number": 8, "line_content": "\tdefer pvsRejected.Close()"}, {"line_number": 9, "line_content": "\tcmarkerIds := C.IntVector{}"}, {"line_number": 10, "line_content": "\tdefer C.free(unsafe.Pointer(cmarkerIds.val))"}, {"line_content": "", "line_number": 11}, {"line_number": 12, "line_content": "\tC.detectMarkers("}, {"line_content": "\t\tC.Mat(input.Ptr()),", "line_number": 13}, {"line_number": 14, "line_content": "\t\tC.ArucoDictionary(dictionary.p),"}, {"line_number": 15, "line_content": "\t\tC.Points2fVector(pvsCorners.P()),"}, {"line_number": 16, "line_content": "\t\t&cmarkerIds,"}, {"line_number": 17, "line_content": "\t\tC.ArucoDetectorParameters(params.p),"}, {"line_number": 18, "line_content": "\t\tC.Points2fVector(pvsRejected.P()),"}, {"line_number": 19, "line_content": "\t)"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 22, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(cmarkerIds.val)),"}, {"line_number": 23, "line_content": "\t\tLen:\tint(cmarkerIds.length),"}, {"line_content": "\t\tCap:\tint(cmarkerIds.length),", "line_number": 24}, {"line_number": 25, "line_content": "\t}"}, {"line_number": 26, "line_content": "\tpcids := *(*[]C.int)(unsafe.Pointer(h))"}, {"line_content": "\tmarkerIds = []int{}", "line_number": 27}, {"line_number": 28, "line_content": "\tfor i := 0; i < int(cmarkerIds.length); i++ {"}, {"line_number": 29, "line_content": "\t\tmarkerIds = append(markerIds, int(pcids[i]))"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\treturn pvsCorners.ToPoints(), markerIds, pvsRejected.ToPoints()"}, {"line_number": 33, "line_content": "}"}]}}
{"contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func DrawDetectedMarkers(img gocv.Mat, markerCorners [][]gocv.Point2f, markerIds []int, borderColor gocv.Scalar) {"}, {"line_number": 2, "line_content": "\tcMarkerIds := make([]C.int, len(markerIds))"}, {"line_content": "\tfor i, s := range markerIds {", "line_number": 3}, {"line_number": 4, "line_content": "\t\tcMarkerIds[i] = C.int(s)"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tmarkerIdsIntVec := C.IntVector{"}, {"line_number": 7, "line_content": "\t\tval:\t(*C.int)(&cMarkerIds[0]),"}, {"line_content": "\t\tlength:\tC.int(len(cMarkerIds)),", "line_number": 8}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\t_markerCorners := gocv.NewPoints2fVectorFromPoints(markerCorners)"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tcBorderColor := C.struct_Scalar{"}, {"line_number": 13, "line_content": "\t\tval1:\tC.double(borderColor.Val1),"}, {"line_number": 14, "line_content": "\t\tval2:\tC.double(borderColor.Val2),"}, {"line_number": 15, "line_content": "\t\tval3:\tC.double(borderColor.Val3),"}, {"line_number": 16, "line_content": "\t\tval4:\tC.double(borderColor.Val4),"}, {"line_content": "\t}", "line_number": 17}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tC.drawDetectedMarkers("}, {"line_number": 20, "line_content": "\t\tC.Mat(img.Ptr()),"}, {"line_number": 21, "line_content": "\t\tC.Points2fVector(_markerCorners.P()),"}, {"line_number": 22, "line_content": "\t\tmarkerIdsIntVec,"}, {"line_content": "\t\tcBorderColor,", "line_number": 23}, {"line_content": "\t)", "line_number": 24}, {"line_number": 25, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func DrawMarker(dictionaryId ArucoDictionaryCode, id int, sidePixels int, img gocv.Mat, borderBits int) {"}, {"line_content": "", "line_number": 2}, {"line_number": 3, "line_content": "\tC.drawMarker(C.int(dictionaryId), C.int(id), C.int(sidePixels), C.Mat(img.Ptr()), C.int(borderBits))"}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func GetPredefinedDictionary(dictionaryId ArucoDictionaryCode) ArucoDictionary {"}, {"line_number": 2, "line_content": "\tvar p C.ArucoDictionary = C.getPredefinedDictionary(C.int(dictionaryId))"}, {"line_number": 3, "line_content": "\treturn ArucoDictionary{p}"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewArucoDetectorParameters() ArucoDetectorParameters {"}, {"line_number": 2, "line_content": "\treturn ArucoDetectorParameters{p: C.ArucoDetectorParameters_Create()}"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAdaptiveThreshWinSizeMin(adaptiveThreshWinSizeMin int) {"}, {"line_number": 2, "line_content": "\tp.p.adaptiveThreshWinSizeMin = C.int(adaptiveThreshWinSizeMin)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAdaptiveThreshWinSizeMin() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.adaptiveThreshWinSizeMin)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAdaptiveThreshWinSizeMax(adaptiveThreshWinSizeMax int) {"}, {"line_number": 2, "line_content": "\tp.p.adaptiveThreshWinSizeMax = C.int(adaptiveThreshWinSizeMax)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAdaptiveThreshWinSizeMax() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.adaptiveThreshWinSizeMax)"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAdaptiveThreshWinSizeStep(adaptiveThreshWinSizeStep int) {"}, {"line_content": "\tp.p.adaptiveThreshWinSizeStep = C.int(adaptiveThreshWinSizeStep)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAdaptiveThreshWinSizeStep() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.adaptiveThreshWinSizeStep)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAdaptiveThreshConstant(adaptiveThreshConstant float64) {"}, {"line_number": 2, "line_content": "\tp.p.adaptiveThreshConstant = C.double(adaptiveThreshConstant)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAdaptiveThreshConstant() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.adaptiveThreshConstant)"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMinMarkerPerimeterRate(minMarkerPerimeterRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.minMarkerPerimeterRate = C.double(minMarkerPerimeterRate)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMinMarkerPerimeterRate() float64 {"}, {"line_content": "\treturn float64(p.p.minMarkerPerimeterRate)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMaxMarkerPerimeterRate(maxMarkerPerimeterRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.maxMarkerPerimeterRate = C.double(maxMarkerPerimeterRate)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMaxMarkerPerimeterRate() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.maxMarkerPerimeterRate)"}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetPolygonalApproxAccuracyRate(polygonalApproxAccuracyRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.polygonalApproxAccuracyRate = C.double(polygonalApproxAccuracyRate)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetPolygonalApproxAccuracyRate() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.polygonalApproxAccuracyRate)"}, {"line_content": "}", "line_number": 3}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMinCornerDistanceRate(minCornerDistanceRate float64) {"}, {"line_content": "\tp.p.minCornerDistanceRate = C.double(minCornerDistanceRate)", "line_number": 2}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMinCornerDistanceRate() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.minCornerDistanceRate)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMinDistanceToBorder(minDistanceToBorder int) {"}, {"line_number": 2, "line_content": "\tp.p.minDistanceToBorder = C.int(minDistanceToBorder)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMinDistanceToBorder() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.minDistanceToBorder)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMinMarkerDistanceRate(minMarkerDistanceRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.minMarkerDistanceRate = C.double(minMarkerDistanceRate)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMinMarkerDistanceRate() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.minMarkerDistanceRate)"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (p *ArucoDetectorParameters) SetCornerRefinementMethod(cornerRefinementMethod int) {", "line_number": 1}, {"line_number": 2, "line_content": "\tp.p.cornerRefinementMethod = C.int(cornerRefinementMethod)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetCornerRefinementMethod() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.cornerRefinementMethod)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetCornerRefinementWinSize(cornerRefinementWinSize int) {"}, {"line_number": 2, "line_content": "\tp.p.cornerRefinementWinSize = C.int(cornerRefinementWinSize)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetCornerRefinementWinSize() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.cornerRefinementWinSize)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetCornerRefinementMaxIterations(cornerRefinementMaxIterations int) {"}, {"line_number": 2, "line_content": "\tp.p.cornerRefinementMaxIterations = C.int(cornerRefinementMaxIterations)"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetCornerRefinementMaxIterations() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.cornerRefinementMaxIterations)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetCornerRefinementMinAccuracy(cornerRefinementMinAccuracy float64) {"}, {"line_number": 2, "line_content": "\tp.p.cornerRefinementMinAccuracy = C.double(cornerRefinementMinAccuracy)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetCornerRefinementMinAccuracy() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.cornerRefinementMinAccuracy)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMarkerBorderBits(markerBorderBits int) {"}, {"line_content": "\tp.p.markerBorderBits = C.int(markerBorderBits)", "line_number": 2}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMarkerBorderBits() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.markerBorderBits)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetPerspectiveRemovePixelPerCell(perspectiveRemovePixelPerCell int) {"}, {"line_number": 2, "line_content": "\tp.p.perspectiveRemovePixelPerCell = C.int(perspectiveRemovePixelPerCell)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (p *ArucoDetectorParameters) GetPerspectiveRemovePixelPerCell() int {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn int(p.p.perspectiveRemovePixelPerCell)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetPerspectiveRemoveIgnoredMarginPerCell(perspectiveRemoveIgnoredMarginPerCell float64) {"}, {"line_number": 2, "line_content": "\tp.p.perspectiveRemoveIgnoredMarginPerCell = C.double(perspectiveRemoveIgnoredMarginPerCell)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetPerspectiveRemoveIgnoredMarginPerCell() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.perspectiveRemoveIgnoredMarginPerCell)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMaxErroneousBitsInBorderRate(maxErroneousBitsInBorderRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.maxErroneousBitsInBorderRate = C.double(maxErroneousBitsInBorderRate)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMaxErroneousBitsInBorderRate() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(p.p.maxErroneousBitsInBorderRate)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetMinOtsuStdDev(minOtsuStdDev float64) {"}, {"line_number": 2, "line_content": "\tp.p.minOtsuStdDev = C.double(minOtsuStdDev)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetMinOtsuStdDev() float64 {"}, {"line_content": "\treturn float64(p.p.minOtsuStdDev)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetErrorCorrectionRate(errorCorrectionRate float64) {"}, {"line_number": 2, "line_content": "\tp.p.errorCorrectionRate = C.double(errorCorrectionRate)"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (p *ArucoDetectorParameters) GetErrorCorrectionRate() float64 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn float64(p.p.errorCorrectionRate)"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}, "type": "functions"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagQuadDecimate(aprilTagQuadDecimate float32) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagQuadDecimate = C.float(aprilTagQuadDecimate)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagQuadDecimate() float32 {"}, {"line_content": "\treturn float32(p.p.aprilTagQuadDecimate)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagQuadSigma(aprilTagQuadSigma float32) {"}, {"line_content": "\tp.p.aprilTagQuadSigma = C.float(aprilTagQuadSigma)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (p *ArucoDetectorParameters) GetAprilTagQuadSigma() float32 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn float32(p.p.aprilTagQuadSigma)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagMinClusterPixels(aprilTagMinClusterPixels int) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagMinClusterPixels = C.int(aprilTagMinClusterPixels)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagMinClusterPixels() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.aprilTagMinClusterPixels)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagMaxNmaxima(aprilTagMaxNmaxima int) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagMaxNmaxima = C.int(aprilTagMaxNmaxima)"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagMaxNmaxima() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.aprilTagMaxNmaxima)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagCriticalRad(aprilTagCriticalRad float32) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagCriticalRad = C.float(aprilTagCriticalRad)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (p *ArucoDetectorParameters) GetAprilTagCriticalRad() float32 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn float32(p.p.aprilTagCriticalRad)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagMaxLineFitMse(aprilTagMaxLineFitMse float32) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagMaxLineFitMse = C.float(aprilTagMaxLineFitMse)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagMaxLineFitMse() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(p.p.aprilTagMaxLineFitMse)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagMinWhiteBlackDiff(aprilTagMinWhiteBlackDiff int) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagMinWhiteBlackDiff = C.int(aprilTagMinWhiteBlackDiff)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagMinWhiteBlackDiff() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.aprilTagMinWhiteBlackDiff)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) SetAprilTagDeglitch(aprilTagDeglitch int) {"}, {"line_number": 2, "line_content": "\tp.p.aprilTagDeglitch = C.int(aprilTagDeglitch)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetAprilTagDeglitch() int {"}, {"line_number": 2, "line_content": "\treturn int(p.p.aprilTagDeglitch)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (p *ArucoDetectorParameters) SetDetectInvertedMarker(detectInvertedMarker bool) {", "line_number": 1}, {"line_number": 2, "line_content": "\tp.p.detectInvertedMarker = C.bool(detectInvertedMarker)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (p *ArucoDetectorParameters) GetDetectInvertedMarker() bool {"}, {"line_number": 2, "line_content": "\treturn bool(p.p.detectInvertedMarker)"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 151, "lines": [{"line_number": 1, "line_content": "func TestArucoDetectorParams(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_content": "\tadaptiveThreshWinSizeMin := 4", "line_number": 3}, {"line_content": "\tadaptiveThreshWinSizeMax := 22", "line_number": 4}, {"line_number": 5, "line_content": "\tadaptiveThreshWinSizeStep := 1"}, {"line_number": 6, "line_content": "\tadaptiveThreshConstant := 1.0"}, {"line_number": 7, "line_content": "\tminMarkerPerimeterRate := 0.2"}, {"line_number": 8, "line_content": "\tmaxMarkerPerimeterRate := 0.5"}, {"line_number": 9, "line_content": "\tpolygonalApproxAccuracyRate := 1.0"}, {"line_number": 10, "line_content": "\tminCornerDistanceRate := 0.1"}, {"line_content": "\tminDistanceToBorder := 0", "line_number": 11}, {"line_number": 12, "line_content": "\tminMarkerDistanceRate := 1.0"}, {"line_number": 13, "line_content": "\tcornerRefinementMethod := 1"}, {"line_number": 14, "line_content": "\tcornerRefinementWinSize := 1"}, {"line_number": 15, "line_content": "\tcornerRefinementMaxIterations := 1"}, {"line_number": 16, "line_content": "\tcornerRefinementMinAccuracy := 0.5"}, {"line_number": 17, "line_content": "\tmarkerBorderBits := 1"}, {"line_number": 18, "line_content": "\tperspectiveRemovePixelPerCell := 1"}, {"line_number": 19, "line_content": "\tperspectiveRemoveIgnoredMarginPerCell := 1.0"}, {"line_number": 20, "line_content": "\tmaxErroneousBitsInBorderRate := 0.5"}, {"line_number": 21, "line_content": "\tminOtsuStdDev := .5"}, {"line_number": 22, "line_content": "\terrorCorrectionRate := 0.2"}, {"line_number": 23, "line_content": "\taprilTagQuadDecimate := float32(0.5)"}, {"line_number": 24, "line_content": "\taprilTagQuadSigma := float32(1)"}, {"line_number": 25, "line_content": "\taprilTagMinClusterPixels := 1"}, {"line_content": "\taprilTagMaxNmaxima := 1", "line_number": 26}, {"line_number": 27, "line_content": "\taprilTagCriticalRad := float32(0.2)"}, {"line_number": 28, "line_content": "\taprilTagMaxLineFitMse := float32(0.2)"}, {"line_number": 29, "line_content": "\taprilTagMinWhiteBlackDiff := 1"}, {"line_content": "\taprilTagDeglitch := 1", "line_number": 30}, {"line_number": 31, "line_content": "\tdetectInvertedMarker := false"}, {"line_content": "", "line_number": 32}, {"line_number": 33, "line_content": "\tparams := NewArucoDetectorParameters()"}, {"line_number": 34, "line_content": "\tparams.SetAdaptiveThreshWinSizeMin(adaptiveThreshWinSizeMin)"}, {"line_number": 35, "line_content": "\tparams.SetAdaptiveThreshWinSizeMax(adaptiveThreshWinSizeMax)"}, {"line_number": 36, "line_content": "\tparams.SetAdaptiveThreshWinSizeStep(adaptiveThreshWinSizeStep)"}, {"line_number": 37, "line_content": "\tparams.SetAdaptiveThreshConstant(adaptiveThreshConstant)"}, {"line_number": 38, "line_content": "\tparams.SetMinMarkerPerimeterRate(minMarkerPerimeterRate)"}, {"line_number": 39, "line_content": "\tparams.SetMaxMarkerPerimeterRate(maxMarkerPerimeterRate)"}, {"line_number": 40, "line_content": "\tparams.SetPolygonalApproxAccuracyRate(polygonalApproxAccuracyRate)"}, {"line_number": 41, "line_content": "\tparams.SetMinCornerDistanceRate(minCornerDistanceRate)"}, {"line_number": 42, "line_content": "\tparams.SetMinDistanceToBorder(minDistanceToBorder)"}, {"line_content": "\tparams.SetMinMarkerDistanceRate(minMarkerDistanceRate)", "line_number": 43}, {"line_number": 44, "line_content": "\tparams.SetCornerRefinementMethod(cornerRefinementMethod)"}, {"line_number": 45, "line_content": "\tparams.SetCornerRefinementWinSize(cornerRefinementWinSize)"}, {"line_number": 46, "line_content": "\tparams.SetCornerRefinementMaxIterations(cornerRefinementMaxIterations)"}, {"line_number": 47, "line_content": "\tparams.SetCornerRefinementMinAccuracy(cornerRefinementMinAccuracy)"}, {"line_number": 48, "line_content": "\tparams.SetMarkerBorderBits(markerBorderBits)"}, {"line_number": 49, "line_content": "\tparams.SetPerspectiveRemovePixelPerCell(perspectiveRemovePixelPerCell)"}, {"line_number": 50, "line_content": "\tparams.SetPerspectiveRemoveIgnoredMarginPerCell(perspectiveRemoveIgnoredMarginPerCell)"}, {"line_number": 51, "line_content": "\tparams.SetMaxErroneousBitsInBorderRate(maxErroneousBitsInBorderRate)"}, {"line_number": 52, "line_content": "\tparams.SetMinOtsuStdDev(minOtsuStdDev)"}, {"line_number": 53, "line_content": "\tparams.SetErrorCorrectionRate(errorCorrectionRate)"}, {"line_number": 54, "line_content": "\tparams.SetAprilTagQuadDecimate(aprilTagQuadDecimate)"}, {"line_number": 55, "line_content": "\tparams.SetAprilTagQuadSigma(aprilTagQuadSigma)"}, {"line_number": 56, "line_content": "\tparams.SetAprilTagMinClusterPixels(aprilTagMinClusterPixels)"}, {"line_number": 57, "line_content": "\tparams.SetAprilTagMaxNmaxima(aprilTagMaxNmaxima)"}, {"line_content": "\tparams.SetAprilTagCriticalRad(aprilTagCriticalRad)", "line_number": 58}, {"line_number": 59, "line_content": "\tparams.SetAprilTagMaxLineFitMse(aprilTagMaxLineFitMse)"}, {"line_number": 60, "line_content": "\tparams.SetAprilTagMinWhiteBlackDiff(aprilTagMinWhiteBlackDiff)"}, {"line_number": 61, "line_content": "\tparams.SetAprilTagDeglitch(aprilTagDeglitch)"}, {"line_number": 62, "line_content": "\tparams.SetDetectInvertedMarker(detectInvertedMarker)"}, {"line_number": 63, "line_content": "\tif params.GetAdaptiveThreshWinSizeMin() != adaptiveThreshWinSizeMin {"}, {"line_number": 64, "line_content": "\t\tt.Error(fmt.Sprintf(\"AdaptiveThreshWinSizeMin expected %v got %v\", adaptiveThreshWinSizeMin, params.GetAdaptiveThreshWinSizeMin()))"}, {"line_number": 65, "line_content": "\t}"}, {"line_number": 66, "line_content": "\tif params.GetAdaptiveThreshWinSizeMax() != adaptiveThreshWinSizeMax {"}, {"line_number": 67, "line_content": "\t\tt.Error(fmt.Sprintf(\"AdaptiveThreshWinSizeMax expected %v got %v\", adaptiveThreshWinSizeMax, params.GetAdaptiveThreshWinSizeMax()))"}, {"line_number": 68, "line_content": "\t}"}, {"line_number": 69, "line_content": "\tif params.GetAdaptiveThreshWinSizeStep() != adaptiveThreshWinSizeStep {"}, {"line_number": 70, "line_content": "\t\tt.Error(fmt.Sprintf(\"AdaptiveThreshWinSizeStep expected %v got %v\", adaptiveThreshWinSizeStep, params.GetAdaptiveThreshWinSizeStep()))"}, {"line_number": 71, "line_content": "\t}"}, {"line_number": 72, "line_content": "\tif params.GetAdaptiveThreshConstant() != adaptiveThreshConstant {"}, {"line_number": 73, "line_content": "\t\tt.Error(fmt.Sprintf(\"AdaptiveThreshConstant expected %v got %v\", adaptiveThreshConstant, params.GetAdaptiveThreshConstant()))"}, {"line_number": 74, "line_content": "\t}"}, {"line_number": 75, "line_content": "\tif params.GetMinMarkerPerimeterRate() != minMarkerPerimeterRate {"}, {"line_content": "\t\tt.Error(fmt.Sprintf(\"MinMarkerPerimeterRate expected %v got %v\", minMarkerPerimeterRate, params.GetMinMarkerPerimeterRate()))", "line_number": 76}, {"line_number": 77, "line_content": "\t}"}, {"line_number": 78, "line_content": "\tif params.GetMaxMarkerPerimeterRate() != maxMarkerPerimeterRate {"}, {"line_number": 79, "line_content": "\t\tt.Error(fmt.Sprintf(\"MaxMarkerPerimeterRate expected %v got %v\", maxMarkerPerimeterRate, params.GetMaxMarkerPerimeterRate()))"}, {"line_number": 80, "line_content": "\t}"}, {"line_number": 81, "line_content": "\tif params.GetPolygonalApproxAccuracyRate() != polygonalApproxAccuracyRate {"}, {"line_number": 82, "line_content": "\t\tt.Error(fmt.Sprintf(\"PolygonalApproxAccuracyRate expected %v got %v\", polygonalApproxAccuracyRate, params.GetPolygonalApproxAccuracyRate()))"}, {"line_number": 83, "line_content": "\t}"}, {"line_number": 84, "line_content": "\tif params.GetMinCornerDistanceRate() != minCornerDistanceRate {"}, {"line_number": 85, "line_content": "\t\tt.Error(fmt.Sprintf(\"MinCornerDistanceRate expected %v got %v\", minCornerDistanceRate, params.GetMinCornerDistanceRate()))"}, {"line_number": 86, "line_content": "\t}"}, {"line_number": 87, "line_content": "\tif params.GetMinDistanceToBorder() != minDistanceToBorder {"}, {"line_number": 88, "line_content": "\t\tt.Error(fmt.Sprintf(\"MinDistanceToBorder expected %v got %v\", minDistanceToBorder, params.GetMinDistanceToBorder()))"}, {"line_number": 89, "line_content": "\t}"}, {"line_number": 90, "line_content": "\tif params.GetMinMarkerDistanceRate() != minMarkerDistanceRate {"}, {"line_number": 91, "line_content": "\t\tt.Error(fmt.Sprintf(\"MinMarkerDistanceRate expected %v got %v\", minMarkerDistanceRate, params.GetMinMarkerDistanceRate()))"}, {"line_number": 92, "line_content": "\t}"}, {"line_content": "\tif params.GetCornerRefinementMethod() != cornerRefinementMethod {", "line_number": 93}, {"line_number": 94, "line_content": "\t\tt.Error(fmt.Sprintf(\"CornerRefinementMethod expected %v got %v\", cornerRefinementMethod, params.GetCornerRefinementMethod()))"}, {"line_number": 95, "line_content": "\t}"}, {"line_number": 96, "line_content": "\tif params.GetCornerRefinementWinSize() != cornerRefinementWinSize {"}, {"line_number": 97, "line_content": "\t\tt.Error(fmt.Sprintf(\"CornerRefinementWinSize expected %v got %v\", cornerRefinementWinSize, params.GetCornerRefinementWinSize()))"}, {"line_number": 98, "line_content": "\t}"}, {"line_number": 99, "line_content": "\tif params.GetCornerRefinementMaxIterations() != cornerRefinementMaxIterations {"}, {"line_number": 100, "line_content": "\t\tt.Error(fmt.Sprintf(\"CornerRefinementMaxIterations expected %v got %v\", cornerRefinementMaxIterations, params.GetCornerRefinementMaxIterations()))"}, {"line_number": 101, "line_content": "\t}"}, {"line_number": 102, "line_content": "\tif params.GetCornerRefinementMinAccuracy() != cornerRefinementMinAccuracy {"}, {"line_number": 103, "line_content": "\t\tt.Error(fmt.Sprintf(\"CornerRefinementMinAccuracy expected %v got %v\", cornerRefinementMinAccuracy, params.GetCornerRefinementMinAccuracy()))"}, {"line_number": 104, "line_content": "\t}"}, {"line_number": 105, "line_content": "\tif params.GetMarkerBorderBits() != markerBorderBits {"}, {"line_number": 106, "line_content": "\t\tt.Error(fmt.Sprintf(\"MarkerBorderBits expected %v got %v\", markerBorderBits, params.GetMarkerBorderBits()))"}, {"line_number": 107, "line_content": "\t}"}, {"line_number": 108, "line_content": "\tif params.GetPerspectiveRemovePixelPerCell() != perspectiveRemovePixelPerCell {"}, {"line_number": 109, "line_content": "\t\tt.Error(fmt.Sprintf(\"PerspectiveRemovePixelPerCell expected %v got %v\", perspectiveRemovePixelPerCell, params.GetPerspectiveRemovePixelPerCell()))"}, {"line_content": "\t}", "line_number": 110}, {"line_number": 111, "line_content": "\tif params.GetPerspectiveRemoveIgnoredMarginPerCell() != perspectiveRemoveIgnoredMarginPerCell {"}, {"line_number": 112, "line_content": "\t\tt.Error(fmt.Sprintf(\"PerspectiveRemoveIgnoredMarginPerCell expected %v got %v\", perspectiveRemoveIgnoredMarginPerCell, params.GetPerspectiveRemoveIgnoredMarginPerCell()))"}, {"line_number": 113, "line_content": "\t}"}, {"line_content": "\tif params.GetMaxErroneousBitsInBorderRate() != maxErroneousBitsInBorderRate {", "line_number": 114}, {"line_number": 115, "line_content": "\t\tt.Error(fmt.Sprintf(\"MaxErroneousBitsInBorderRate expected %v got %v\", maxErroneousBitsInBorderRate, params.GetMaxErroneousBitsInBorderRate()))"}, {"line_number": 116, "line_content": "\t}"}, {"line_number": 117, "line_content": "\tif params.GetMinOtsuStdDev() != minOtsuStdDev {"}, {"line_number": 118, "line_content": "\t\tt.Error(fmt.Sprintf(\"MinOtsuStdDev expected %v got %v\", minOtsuStdDev, params.GetMinOtsuStdDev()))"}, {"line_number": 119, "line_content": "\t}"}, {"line_number": 120, "line_content": "\tif params.GetErrorCorrectionRate() != errorCorrectionRate {"}, {"line_number": 121, "line_content": "\t\tt.Error(fmt.Sprintf(\"ErrorCorrectionRate expected %v got %v\", errorCorrectionRate, params.GetErrorCorrectionRate()))"}, {"line_number": 122, "line_content": "\t}"}, {"line_number": 123, "line_content": "\tif params.GetAprilTagQuadDecimate() != aprilTagQuadDecimate {"}, {"line_number": 124, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagQuadDecimate expected %v got %v\", aprilTagQuadDecimate, params.GetAprilTagQuadDecimate()))"}, {"line_number": 125, "line_content": "\t}"}, {"line_number": 126, "line_content": "\tif params.GetAprilTagQuadSigma() != aprilTagQuadSigma {"}, {"line_number": 127, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagQuadSigma expected %v got %v\", aprilTagQuadSigma, params.GetAprilTagQuadSigma()))"}, {"line_number": 128, "line_content": "\t}"}, {"line_number": 129, "line_content": "\tif params.GetAprilTagMinClusterPixels() != aprilTagMinClusterPixels {"}, {"line_number": 130, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagMinClusterPixels expected %v got %v\", aprilTagMinClusterPixels, params.GetAprilTagMinClusterPixels()))"}, {"line_number": 131, "line_content": "\t}"}, {"line_number": 132, "line_content": "\tif params.GetAprilTagMaxNmaxima() != aprilTagMaxNmaxima {"}, {"line_number": 133, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagMaxNmaxima expected %v got %v\", aprilTagMaxNmaxima, params.GetAprilTagMaxNmaxima()))"}, {"line_number": 134, "line_content": "\t}"}, {"line_number": 135, "line_content": "\tif params.GetAprilTagCriticalRad() != aprilTagCriticalRad {"}, {"line_number": 136, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagCriticalRad expected %v got %v\", aprilTagCriticalRad, params.GetAprilTagCriticalRad()))"}, {"line_number": 137, "line_content": "\t}"}, {"line_number": 138, "line_content": "\tif params.GetAprilTagMaxLineFitMse() != aprilTagMaxLineFitMse {"}, {"line_number": 139, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagMaxLineFitMse expected %v got %v\", aprilTagMaxLineFitMse, params.GetAprilTagMaxLineFitMse()))"}, {"line_content": "\t}", "line_number": 140}, {"line_number": 141, "line_content": "\tif params.GetAprilTagMinWhiteBlackDiff() != aprilTagMinWhiteBlackDiff {"}, {"line_number": 142, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagMinWhiteBlackDiff expected %v got %v\", aprilTagMinWhiteBlackDiff, params.GetAprilTagMinWhiteBlackDiff()))"}, {"line_number": 143, "line_content": "\t}"}, {"line_content": "\tif params.GetAprilTagDeglitch() != aprilTagDeglitch {", "line_number": 144}, {"line_number": 145, "line_content": "\t\tt.Error(fmt.Sprintf(\"AprilTagDeglitch expected %v got %v\", aprilTagDeglitch, params.GetAprilTagDeglitch()))"}, {"line_number": 146, "line_content": "\t}"}, {"line_number": 147, "line_content": "\tif params.GetDetectInvertedMarker() != detectInvertedMarker {"}, {"line_number": 148, "line_content": "\t\tt.Error(fmt.Sprintf(\"DetectInvertedMarker expected %v got %v\", detectInvertedMarker, params.GetDetectInvertedMarker()))"}, {"line_number": 149, "line_content": "\t}"}, {"line_content": "", "line_number": 150}, {"line_content": "}", "line_number": 151}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func TestDetectMarkersWithDictID(t *testing.T) {"}, {"line_number": 2, "line_content": "\tpath := arucoImage6X6_250"}, {"line_number": 3, "line_content": "\timg := gocv.IMRead(path, gocv.IMReadColor)"}, {"line_content": "\tif img.Empty() {", "line_number": 4}, {"line_number": 5, "line_content": "\t\tt.Error(errors.New(\"Invalid input\"))"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_number": 8, "line_content": ""}, {"line_content": "\tparams := NewArucoDetectorParameters()", "line_number": 9}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\t_, markerIds, _ := DetectMarkersWithDictID(img, ArucoDict6x6_250, params)"}, {"line_content": "\texpected := []int{40, 98, 62, 23, 124, 203}", "line_number": 12}, {"line_number": 13, "line_content": "\tif !reflect.DeepEqual(markerIds, expected) {"}, {"line_number": 14, "line_content": "\t\tt.Error(fmt.Sprintf(\"Marker id expected %v got %v\", expected, markerIds))"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func TestDetectMarkers(t *testing.T) {"}, {"line_number": 2, "line_content": "\tpath := arucoImage6X6_250"}, {"line_number": 3, "line_content": "\timg := gocv.IMRead(path, gocv.IMReadColor)"}, {"line_content": "\tif img.Empty() {", "line_number": 4}, {"line_number": 5, "line_content": "\t\tt.Error(errors.New(\"Invalid input\"))"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\tdefer img.Close()"}, {"line_content": "", "line_number": 8}, {"line_number": 9, "line_content": "\tparams := NewArucoDetectorParameters()"}, {"line_number": 10, "line_content": "\tdict := GetPredefinedDictionary(ArucoDict6x6_250)"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\t_, markerIds, _ := DetectMarkers(img, dict, params)"}, {"line_number": 13, "line_content": "\texpected := []int{40, 98, 62, 23, 124, 203}"}, {"line_number": 14, "line_content": "\tif !reflect.DeepEqual(markerIds, expected) {"}, {"line_number": 15, "line_content": "\t\tt.Error(fmt.Sprintf(\"Marker id expected %v got %v\", expected, markerIds))"}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 31, "lines": [{"line_number": 1, "line_content": "func TestDrawDetectedMarkers(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tborderColor := gocv.NewScalar(200, 0, 0, 0)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\timg := gocv.IMRead(arucoImage6X6_250, gocv.IMReadColor)"}, {"line_number": 6, "line_content": "\tdefer img.Close()"}, {"line_content": "\tif img.Empty() {", "line_number": 7}, {"line_number": 8, "line_content": "\t\tt.Error(errors.New(\"Invalid input\"))"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tdefer img.Close()"}, {"line_number": 11, "line_content": "\timgExpected := gocv.IMRead(arucoImage6X6_250_contour, gocv.IMReadColor)"}, {"line_number": 12, "line_content": "\tif imgExpected.Empty() {"}, {"line_number": 13, "line_content": "\t\tt.Error(errors.New(\"Invalid input\"))"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tdefer imgExpected.Close()"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\tparams := NewArucoDetectorParameters()"}, {"line_number": 18, "line_content": "\tmarkerCorners, markerIds, _ := DetectMarkersWithDictID(img, ArucoDict6x6_250, params)"}, {"line_number": 19, "line_content": ""}, {"line_content": "\tDrawDetectedMarkers(img, markerCorners, markerIds, borderColor)", "line_number": 20}, {"line_number": 21, "line_content": "\tdiff := gocv.NewMat()"}, {"line_content": "\tdefer diff.Close()", "line_number": 22}, {"line_number": 23, "line_content": "\tgocv.AbsDiff(img, imgExpected, &diff)"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tgray := gocv.NewMat()"}, {"line_number": 26, "line_content": "\tdefer gray.Close()"}, {"line_number": 27, "line_content": "\tgocv.CvtColor(diff, &gray, gocv.ColorBGRToGray)"}, {"line_number": 28, "line_content": "\tif gocv.CountNonZero(gray) > 0 {"}, {"line_number": 29, "line_content": "\t\tt.Errorf(\"expected output to match %s\", arucoImage6X6_250_contour)"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "func TestDrawMarker(t *testing.T) {"}, {"line_number": 2, "line_content": "\timgExpected := gocv.IMRead(arucoImage6X6_250_1, gocv.IMReadGrayScale)"}, {"line_number": 3, "line_content": "\tif imgExpected.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(fmt.Errorf(\"Invalid marker image '%s'\", arucoImage6X6_250_1))"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer imgExpected.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\timg := gocv.NewMat()"}, {"line_number": 9, "line_content": "\tdefer img.Close()"}, {"line_number": 10, "line_content": "\tDrawMarker(ArucoDict6x6_250, 1, 200, img, 1)"}, {"line_content": "", "line_number": 11}, {"line_number": 12, "line_content": "\tdiff := gocv.NewMat()"}, {"line_number": 13, "line_content": "\tdefer diff.Close()"}, {"line_number": 14, "line_content": "\tgocv.AbsDiff(img, imgExpected, &diff)"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tif gocv.CountNonZero(diff) > 0 {"}, {"line_number": 17, "line_content": "\t\tt.Errorf(\"expected output to match %s\", arucoImage6X6_250_1)"}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func TestGetPredefinedDictionary(t *testing.T) {"}, {"line_number": 2, "line_content": "\tpath := arucoImage6X6_250"}, {"line_number": 3, "line_content": "\timg := gocv.IMRead(path, gocv.IMReadColor)"}, {"line_number": 4, "line_content": "\tif img.Empty() {"}, {"line_number": 5, "line_content": "\t\tt.Error(fmt.Errorf(\"Invalid arucoImage6X6_250 %s\", path))"}, {"line_number": 6, "line_content": "\t}"}, {"line_content": "\tdefer img.Close()", "line_number": 7}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tdict := GetPredefinedDictionary(ArucoDict6x6_250)"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tparams := NewArucoDetectorParameters()"}, {"line_number": 12, "line_content": "\t_, markerIds, _ := DetectMarkers(img, dict, params)"}, {"line_number": 13, "line_content": "\texpected := []int{40, 98, 62, 23, 124, 203}"}, {"line_content": "\tif !reflect.DeepEqual(markerIds, expected) {", "line_number": 14}, {"line_number": 15, "line_content": "\t\tt.Error(fmt.Sprintf(\"Marker id expected %v got %v\", expected, markerIds))"}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewBackgroundSubtractorCNT() BackgroundSubtractorCNT {"}, {"line_number": 2, "line_content": "\treturn BackgroundSubtractorCNT{p: unsafe.Pointer(C.BackgroundSubtractorCNT_Create())}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (b *BackgroundSubtractorCNT) Close() error {"}, {"line_number": 2, "line_content": "\tC.BackgroundSubtractorCNT_Close((C.BackgroundSubtractorCNT)(b.p))"}, {"line_number": 3, "line_content": "\tb.p = nil"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\treturn nil"}, {"line_number": 6, "line_content": "}"}], "total_lines": 6}}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (b *BackgroundSubtractorCNT) Apply(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.BackgroundSubtractorCNT_Apply((C.BackgroundSubtractorCNT)(b.p), (C.Mat)(src.Ptr()), (C.Mat)(dst.Ptr()))"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\treturn"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 19, "lines": [{"line_number": 1, "line_content": "func TestCNT(t *testing.T) {"}, {"line_number": 2, "line_content": "\timg := gocv.IMRead(\"../images/face.jpg\", gocv.IMReadColor)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tt.Error(\"Invalid Mat in CNT test\")"}, {"line_content": "\t}", "line_number": 5}, {"line_number": 6, "line_content": "\tdefer img.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 9, "line_content": "\tdefer dst.Close()"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tcnt := NewBackgroundSubtractorCNT()"}, {"line_number": 12, "line_content": "\tdefer cnt.Close()"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\tcnt.Apply(img, &dst)"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tif dst.Empty() {"}, {"line_number": 17, "line_content": "\t\tt.Error(\"Error in TestCNT test\")"}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewLBPHFaceRecognizer() *LBPHFaceRecognizer {"}, {"line_number": 2, "line_content": "\treturn &LBPHFaceRecognizer{p: C.CreateLBPHFaceRecognizer()}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) Train(images []gocv.Mat, labels []int) {"}, {"line_number": 2, "line_content": "\tcparams := []C.int{}"}, {"line_content": "\tfor _, v := range labels {", "line_number": 3}, {"line_number": 4, "line_content": "\t\tcparams = append(cparams, C.int(v))"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tlabelsVector := C.struct_IntVector{}"}, {"line_number": 7, "line_content": "\tlabelsVector.val = (*C.int)(&cparams[0])"}, {"line_number": 8, "line_content": "\tlabelsVector.length = (C.int)(len(cparams))"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tcMatArray := make([]C.Mat, len(images))"}, {"line_number": 11, "line_content": "\tfor i, r := range images {"}, {"line_number": 12, "line_content": "\t\tcMatArray[i] = (C.Mat)(r.Ptr())"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tmatsVector := C.struct_Mats{"}, {"line_number": 15, "line_content": "\t\tmats:\t(*C.Mat)(&cMatArray[0]),"}, {"line_number": 16, "line_content": "\t\tlength:\tC.int(len(images)),"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tC.LBPHFaceRecognizer_Train(fr.p, matsVector, labelsVector)"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) Update(newImages []gocv.Mat, newLabels []int) {"}, {"line_number": 2, "line_content": "\tcparams := []C.int{}"}, {"line_content": "\tfor _, v := range newLabels {", "line_number": 3}, {"line_number": 4, "line_content": "\t\tcparams = append(cparams, C.int(v))"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "\tlabelsVector := C.struct_IntVector{}", "line_number": 6}, {"line_number": 7, "line_content": "\tlabelsVector.val = (*C.int)(&cparams[0])"}, {"line_number": 8, "line_content": "\tlabelsVector.length = (C.int)(len(cparams))"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tcMatArray := make([]C.Mat, len(newImages))"}, {"line_number": 11, "line_content": "\tfor i, r := range newImages {"}, {"line_number": 12, "line_content": "\t\tcMatArray[i] = (C.Mat)(r.Ptr())"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tmatsVector := C.struct_Mats{"}, {"line_number": 15, "line_content": "\t\tmats:\t(*C.Mat)(&cMatArray[0]),"}, {"line_number": 16, "line_content": "\t\tlength:\tC.int(len(newImages)),"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tC.LBPHFaceRecognizer_Update(fr.p, matsVector, labelsVector)"}, {"line_number": 20, "line_content": "}"}], "total_lines": 20}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) Predict(sample gocv.Mat) int {"}, {"line_number": 2, "line_content": "\tlabel := C.LBPHFaceRecognizer_Predict(fr.p, (C.Mat)(sample.Ptr()))"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\treturn int(label)"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) PredictExtendedResponse(sample gocv.Mat) PredictResponse {"}, {"line_number": 2, "line_content": "\trespp := C.LBPHFaceRecognizer_PredictExtended(fr.p, (C.Mat)(sample.Ptr()))"}, {"line_number": 3, "line_content": "\tresp := PredictResponse{"}, {"line_number": 4, "line_content": "\t\tLabel:\t\tint32(respp.label),"}, {"line_number": 5, "line_content": "\t\tConfidence:\tfloat32(respp.confidence),"}, {"line_content": "\t}", "line_number": 6}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\treturn resp"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) SetThreshold(threshold float32) {"}, {"line_number": 2, "line_content": "\tC.LBPHFaceRecognizer_SetThreshold(fr.p, (C.double)(threshold))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) SetNeighbors(neighbors int) {"}, {"line_content": "\tC.LBPHFaceRecognizer_SetNeighbors(fr.p, (C.int)(neighbors))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) GetNeighbors() int {"}, {"line_number": 2, "line_content": "\tn := C.LBPHFaceRecognizer_GetNeighbors(fr.p)"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\treturn int(n)"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) SetRadius(radius int) {"}, {"line_number": 2, "line_content": "\tC.LBPHFaceRecognizer_SetRadius(fr.p, (C.int)(radius))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) SaveFile(fname string) {"}, {"line_number": 2, "line_content": "\tcName := C.CString(fname)"}, {"line_number": 3, "line_content": "\tdefer C.free(unsafe.Pointer(cName))"}, {"line_content": "\tC.LBPHFaceRecognizer_SaveFile(fr.p, cName)", "line_number": 4}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (fr *LBPHFaceRecognizer) LoadFile(fname string) {"}, {"line_number": 2, "line_content": "\tcName := C.CString(fname)"}, {"line_number": 3, "line_content": "\tdefer C.free(unsafe.Pointer(cName))"}, {"line_number": 4, "line_content": "\tC.LBPHFaceRecognizer_LoadFile(fr.p, cName)"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 80, "lines": [{"line_number": 1, "line_content": "func TestLBPHFaceRecognizer_Methods(t *testing.T) {"}, {"line_content": "\tmodel := NewLBPHFaceRecognizer()", "line_number": 2}, {"line_number": 3, "line_content": "\tif model == nil {"}, {"line_number": 4, "line_content": "\t\tt.Errorf(\"Invalid NewLBPHFaceRecognizer call %v\", model)"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tlabels := []int{1, 1, 1, 1, 2, 2, 2, 2}"}, {"line_number": 8, "line_content": "\timages := []gocv.Mat{"}, {"line_number": 9, "line_content": "\t\tgocv.IMRead(\"./att_faces/s1/1.pgm\", gocv.IMReadGrayScale),"}, {"line_content": "\t\tgocv.IMRead(\"./att_faces/s1/2.pgm\", gocv.IMReadGrayScale),", "line_number": 10}, {"line_number": 11, "line_content": "\t\tgocv.IMRead(\"./att_faces/s1/3.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 12, "line_content": "\t\tgocv.IMRead(\"./att_faces/s1/4.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 13, "line_content": "\t\tgocv.IMRead(\"./att_faces/s2/1.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 14, "line_content": "\t\tgocv.IMRead(\"./att_faces/s2/2.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 15, "line_content": "\t\tgocv.IMRead(\"./att_faces/s2/3.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 16, "line_content": "\t\tgocv.IMRead(\"./att_faces/s2/4.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": "\tmodel.Train(images, labels)"}, {"line_number": 19, "line_content": ""}, {"line_content": "\tsample := gocv.IMRead(\"./att_faces/s2/5.pgm\", gocv.IMReadGrayScale)", "line_number": 20}, {"line_number": 21, "line_content": "\tlabel := model.Predict(sample)"}, {"line_number": 22, "line_content": "\tif label != 2 {"}, {"line_number": 23, "line_content": "\t\tt.Errorf(\"Invalid simple predict! label: %d\", label)"}, {"line_number": 24, "line_content": "\t}"}, {"line_number": 25, "line_content": "\tresp := model.PredictExtendedResponse(sample)"}, {"line_number": 26, "line_content": "\tif resp.Label != 2 {"}, {"line_number": 27, "line_content": "\t\tt.Errorf(\"Invalid extended result predict! label: %d\", resp.Label)"}, {"line_number": 28, "line_content": "\t}"}, {"line_number": 29, "line_content": ""}, {"line_number": 30, "line_content": "\tmodel.SetThreshold(0.0)"}, {"line_number": 31, "line_content": "\tlabel = model.Predict(sample)"}, {"line_number": 32, "line_content": "\tif label != -1 {"}, {"line_number": 33, "line_content": "\t\tt.Errorf(\"Invalid set wrong threshold! label: %d\", label)"}, {"line_number": 34, "line_content": "\t}"}, {"line_content": "", "line_number": 35}, {"line_number": 36, "line_content": "\tmodel.SetThreshold(math.MaxFloat32)"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "\tmodel.SetRadius(0)"}, {"line_number": 39, "line_content": "\tlabel = model.Predict(sample)"}, {"line_number": 40, "line_content": "\tif label == 2 {"}, {"line_number": 41, "line_content": "\t\tt.Errorf(\"Invalid set wrong radius! label: %d\", label)"}, {"line_number": 42, "line_content": "\t}"}, {"line_number": 43, "line_content": ""}, {"line_number": 44, "line_content": "\tneighbors := model.GetNeighbors()"}, {"line_content": "\tif neighbors == 0 {", "line_number": 45}, {"line_number": 46, "line_content": "\t\tt.Errorf(\"Invalid get neighbors! n: %d\", neighbors)"}, {"line_number": 47, "line_content": "\t}"}, {"line_number": 48, "line_content": ""}, {"line_number": 49, "line_content": "\tmodel.SetRadius(1)"}, {"line_number": 50, "line_content": "\tmodel.SetNeighbors(8)"}, {"line_number": 51, "line_content": "\tlabel = model.Predict(sample)"}, {"line_number": 52, "line_content": "\tif label != 2 {"}, {"line_number": 53, "line_content": "\t\tt.Errorf(\"Invalid set neighbors! label: %d\", label)"}, {"line_number": 54, "line_content": "\t}"}, {"line_number": 55, "line_content": ""}, {"line_number": 56, "line_content": "\tsample = gocv.IMRead(\"./att_faces/s3/10.pgm\", gocv.IMReadGrayScale)"}, {"line_number": 57, "line_content": "\tnewLabels := []int{3, 3, 3, 3, 3, 3}"}, {"line_number": 58, "line_content": "\tnewImages := []gocv.Mat{"}, {"line_number": 59, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/1.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 60, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/2.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 61, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/3.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 62, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/4.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 63, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/5.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 64, "line_content": "\t\tgocv.IMRead(\"./att_faces/s3/6.pgm\", gocv.IMReadGrayScale),"}, {"line_number": 65, "line_content": "\t}"}, {"line_number": 66, "line_content": "\tmodel.Update(newImages, newLabels)"}, {"line_number": 67, "line_content": "\tlabel = model.Predict(sample)"}, {"line_number": 68, "line_content": "\tif label != 3 {"}, {"line_number": 69, "line_content": "\t\tt.Errorf(\"Invalid new data update: %d\", label)"}, {"line_number": 70, "line_content": "\t}"}, {"line_number": 71, "line_content": ""}, {"line_number": 72, "line_content": "\tfName := \"data.yaml\""}, {"line_number": 73, "line_content": "\tmodel.SaveFile(fName)"}, {"line_content": "\tmodelNew := NewLBPHFaceRecognizer()", "line_number": 74}, {"line_number": 75, "line_content": "\tmodelNew.LoadFile(fName)"}, {"line_number": 76, "line_content": "\tlabel = modelNew.Predict(sample)"}, {"line_content": "\tif label != 3 {", "line_number": 77}, {"line_content": "\t\tt.Errorf(\"Invalid loaded data: %d\", label)", "line_number": 78}, {"line_number": 79, "line_content": "\t}"}, {"line_number": 80, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (hash PHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.pHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (hash PHash) Compare(a, b gocv.Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.pHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr())))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (hash AverageHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.averageHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (hash AverageHash) Compare(a, b gocv.Mat) float64 {"}, {"line_content": "\treturn float64(C.averageHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr())))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (hash BlockMeanHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.blockMeanHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()), C.int(hash.Mode))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (hash BlockMeanHash) Compare(a, b gocv.Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.blockMeanHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr()), C.int(hash.Mode)))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (hash ColorMomentHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.colorMomentHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (hash ColorMomentHash) Compare(a, b gocv.Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.colorMomentHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr())))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewMarrHildrethHash() MarrHildrethHash {"}, {"line_number": 2, "line_content": "\treturn MarrHildrethHash{2.0, 1.0}"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (hash MarrHildrethHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_content": "\tC.marrHildrethHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()),", "line_number": 2}, {"line_number": 3, "line_content": "\t\tC.float(hash.Alpha), C.float(hash.Scale))"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (hash MarrHildrethHash) Compare(a, b gocv.Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.marrHildrethHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr()),"}, {"line_content": "\t\tC.float(hash.Alpha), C.float(hash.Scale)))", "line_number": 3}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func NewRadialVarianceHash() RadialVarianceHash {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn RadialVarianceHash{1, 180}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (hash RadialVarianceHash) Compute(input gocv.Mat, output *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.radialVarianceHashCompute(C.Mat(input.Ptr()), C.Mat(output.Ptr()),"}, {"line_number": 3, "line_content": "\t\tC.double(hash.Sigma), C.int(hash.NumOfAngleLine))"}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (hash RadialVarianceHash) Compare(a, b gocv.Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.radialVarianceHashCompare(C.Mat(a.Ptr()), C.Mat(b.Ptr()),"}, {"line_number": 3, "line_content": "\t\tC.double(hash.Sigma), C.int(hash.NumOfAngleLine)))"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 9, "lines": [{"line_content": "func (c BlockMeanHashMode) String() string {", "line_number": 1}, {"line_number": 2, "line_content": "\tswitch c {"}, {"line_number": 3, "line_content": "\tcase BlockMeanHashMode0:"}, {"line_number": 4, "line_content": "\t\treturn \"block-mean-hash-mode0\""}, {"line_number": 5, "line_content": "\tcase BlockMeanHashMode1:"}, {"line_number": 6, "line_content": "\t\treturn \"block-mean-hash-mode1\""}, {"line_content": "\t}", "line_number": 7}, {"line_number": 8, "line_content": "\treturn \"\""}, {"line_number": 9, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func compute(path string, hash ImgHashBase) (*gocv.Mat, error) {"}, {"line_number": 2, "line_content": "\timg := gocv.IMRead(path, gocv.IMReadColor)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\treturn nil, errors.New(\"Invalid input\")"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer img.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 9, "line_content": "\thash.Compute(img, &dst)"}, {"line_content": "\tif dst.Empty() {", "line_number": 10}, {"line_number": 11, "line_content": "\t\tdst.Close()"}, {"line_number": 12, "line_content": "\t\treturn nil, errors.New(\"Empty output\")"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\treturn &dst, nil"}, {"line_number": 16, "line_content": "}"}], "total_lines": 16}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "func testHash(t *testing.T, hash ImgHashBase) {"}, {"line_number": 2, "line_content": "\tresult, err := compute(testImage, hash)"}, {"line_number": 3, "line_content": "\tif err != nil {"}, {"line_number": 4, "line_content": "\t\tt.Error(err)"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer result.Close()"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tt.Logf(\"%T: %x\", hash, result.ToBytes())"}, {"line_content": "", "line_number": 9}, {"line_number": 10, "line_content": "\tresult2, err := compute(testImage2, hash)"}, {"line_number": 11, "line_content": "\tif err != nil {"}, {"line_number": 12, "line_content": "\t\tt.Error(err)"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "\tdefer result2.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tsimilar := hash.Compare(*result, *result2)"}, {"line_number": 17, "line_content": "\tt.Logf(\"%T: similarity %g\", hash, similar)"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tif similar == 0 {"}, {"line_number": 20, "line_content": "\t\tt.Error(\"Image similarity is zero?\")"}, {"line_number": 21, "line_content": "\t}"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "func TestHashes(t *testing.T) {"}, {"line_number": 2, "line_content": "\tt.Run(\"PHash\", func(t *testing.T) { testHash(t, PHash{}) })"}, {"line_number": 3, "line_content": "\tt.Run(\"AverageHash\", func(t *testing.T) { testHash(t, AverageHash{}) })"}, {"line_number": 4, "line_content": "\tt.Run(\"BlockMeanHash\", func(t *testing.T) { testHash(t, BlockMeanHash{}) })"}, {"line_number": 5, "line_content": "\tt.Run(\"ColorMomentHash\", func(t *testing.T) { testHash(t, ColorMomentHash{}) })"}, {"line_number": 6, "line_content": "\tt.Run(\"MarrHidlrethHash\", func(t *testing.T) { testHash(t, NewMarrHildrethHash()) })"}, {"line_number": 7, "line_content": "\tt.Run(\"RadialVarianceHash\", func(t *testing.T) { testHash(t, NewRadialVarianceHash()) })"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "func BenchmarkCompute(b *testing.B) {"}, {"line_number": 2, "line_content": "\timg := gocv.IMRead(testImage, gocv.IMReadColor)"}, {"line_number": 3, "line_content": "\tif img.Empty() {"}, {"line_number": 4, "line_content": "\t\tb.Error(\"Invalid input\")"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tdefer img.Close()"}, {"line_number": 7, "line_content": "\tb.ResetTimer()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tcompute := func(b *testing.B, hash ImgHashBase) {"}, {"line_number": 10, "line_content": "\t\tfor i := 0; i < b.N; i++ {"}, {"line_number": 11, "line_content": "\t\t\tdst := gocv.NewMat()"}, {"line_number": 12, "line_content": "\t\t\thash.Compute(img, &dst)"}, {"line_number": 13, "line_content": "\t\t\tif dst.Empty() {"}, {"line_number": 14, "line_content": "\t\t\t\tb.Error(\"Empty output\")"}, {"line_number": 15, "line_content": "\t\t\t\tdst.Close()"}, {"line_number": 16, "line_content": "\t\t\t\treturn"}, {"line_number": 17, "line_content": "\t\t\t}"}, {"line_number": 18, "line_content": "\t\t\tdst.Close()"}, {"line_number": 19, "line_content": "\t\t}"}, {"line_number": 20, "line_content": "\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tb.Run(\"PHash\", func(b *testing.B) { compute(b, PHash{}) })"}, {"line_number": 23, "line_content": "\tb.Run(\"AverageHash\", func(b *testing.B) { compute(b, AverageHash{}) })"}, {"line_number": 24, "line_content": "\tb.Run(\"BlockMeanHash\", func(b *testing.B) { compute(b, BlockMeanHash{}) })"}, {"line_number": 25, "line_content": "\tb.Run(\"ColorMomentHash\", func(b *testing.B) { compute(b, ColorMomentHash{}) })"}, {"line_number": 26, "line_content": "\tb.Run(\"MarrHidlrethHash\", func(b *testing.B) { compute(b, NewMarrHildrethHash()) })"}, {"line_number": 27, "line_content": "\tb.Run(\"RadialVarianceHash\", func(b *testing.B) { compute(b, NewRadialVarianceHash()) })"}, {"line_content": "}", "line_number": 28}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 27, "lines": [{"line_number": 1, "line_content": "func BenchmarkCompare(b *testing.B) {"}, {"line_number": 2, "line_content": "\tcompare := func(b *testing.B, hash ImgHashBase) {"}, {"line_number": 3, "line_content": "\t\tresult1, err := compute(testImage, hash)"}, {"line_number": 4, "line_content": "\t\tif err != nil {"}, {"line_number": 5, "line_content": "\t\t\tb.Error(err)"}, {"line_number": 6, "line_content": "\t\t}"}, {"line_number": 7, "line_content": "\t\tdefer result1.Close()"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\t\tresult2, err := compute(testImage2, hash)"}, {"line_number": 10, "line_content": "\t\tif err != nil {"}, {"line_number": 11, "line_content": "\t\t\tb.Error(err)"}, {"line_number": 12, "line_content": "\t\t}"}, {"line_number": 13, "line_content": "\t\tdefer result2.Close()"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\t\tb.ResetTimer()"}, {"line_number": 16, "line_content": "\t\tfor i := 0; i < b.N; i++ {"}, {"line_number": 17, "line_content": "\t\t\thash.Compare(*result1, *result2)"}, {"line_number": 18, "line_content": "\t\t}"}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": ""}, {"line_number": 21, "line_content": "\tb.Run(\"PHash\", func(b *testing.B) { compare(b, PHash{}) })"}, {"line_number": 22, "line_content": "\tb.Run(\"AverageHash\", func(b *testing.B) { compare(b, AverageHash{}) })"}, {"line_content": "\tb.Run(\"BlockMeanHash\", func(b *testing.B) { compare(b, BlockMeanHash{}) })", "line_number": 23}, {"line_number": 24, "line_content": "\tb.Run(\"ColorMomentHash\", func(b *testing.B) { compare(b, ColorMomentHash{}) })"}, {"line_number": 25, "line_content": "\tb.Run(\"MarrHidlrethHash\", func(b *testing.B) { compare(b, NewMarrHildrethHash()) })"}, {"line_content": "\tb.Run(\"RadialVarianceHash\", func(b *testing.B) { compare(b, NewRadialVarianceHash()) })", "line_number": 26}, {"line_number": 27, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewTrackerKCF() gocv.Tracker {"}, {"line_number": 2, "line_content": "\treturn TrackerKCF{p: C.TrackerKCF_Create()}"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (trk TrackerKCF) Close() error {"}, {"line_number": 2, "line_content": "\tC.TrackerKCF_Close(trk.p)"}, {"line_number": 3, "line_content": "\ttrk.p = nil"}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_content": "}", "line_number": 5}], "total_lines": 5}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (trk TrackerKCF) Init(img gocv.Mat, boundingBox image.Rectangle) bool {"}, {"line_number": 2, "line_content": "\treturn trackerInit(C.Tracker(trk.p), img, boundingBox)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (trk TrackerKCF) Update(img gocv.Mat) (image.Rectangle, bool) {"}, {"line_number": 2, "line_content": "\treturn trackerUpdate(C.Tracker(trk.p), img)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func NewTrackerCSRT() gocv.Tracker {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn TrackerCSRT{p: C.TrackerCSRT_Create()}"}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (trk TrackerCSRT) Close() error {"}, {"line_number": 2, "line_content": "\tC.TrackerCSRT_Close(trk.p)"}, {"line_number": 3, "line_content": "\ttrk.p = nil"}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (trk TrackerCSRT) Init(img gocv.Mat, boundingBox image.Rectangle) bool {"}, {"line_number": 2, "line_content": "\treturn trackerInit(C.Tracker(trk.p), img, boundingBox)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (trk TrackerCSRT) Update(img gocv.Mat) (image.Rectangle, bool) {"}, {"line_number": 2, "line_content": "\treturn trackerUpdate(C.Tracker(trk.p), img)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "func trackerInit(trk C.Tracker, img gocv.Mat, boundingBox image.Rectangle) bool {"}, {"line_number": 2, "line_content": "\tcBox := C.struct_Rect{"}, {"line_number": 3, "line_content": "\t\tx:\tC.int(boundingBox.Min.X),"}, {"line_number": 4, "line_content": "\t\ty:\tC.int(boundingBox.Min.Y),"}, {"line_number": 5, "line_content": "\t\twidth:\tC.int(boundingBox.Size().X),"}, {"line_content": "\t\theight:\tC.int(boundingBox.Size().Y),", "line_number": 6}, {"line_content": "\t}", "line_number": 7}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tret := C.TrackerSubclass_Init(trk, C.Mat(img.Ptr()), cBox)"}, {"line_number": 10, "line_content": "\treturn bool(ret)"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "func trackerUpdate(trk C.Tracker, img gocv.Mat) (image.Rectangle, bool) {"}, {"line_content": "\tcBox := C.struct_Rect{}", "line_number": 2}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\tret := C.TrackerSubclass_Update(trk, C.Mat(img.Ptr()), &cBox)"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\trect := image.Rect(int(cBox.x), int(cBox.y), int(cBox.x+cBox.width), int(cBox.y+cBox.height))"}, {"line_number": 7, "line_content": "\treturn rect, bool(ret)"}, {"line_number": 8, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "func BaseTestTracker(t *testing.T, tracker gocv.Tracker, name string) {"}, {"line_number": 2, "line_content": "\tif tracker == nil {"}, {"line_content": "\t\tt.Error(\"TestTracker \" + name + \" should not be nil\")", "line_number": 3}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\timg := gocv.IMRead(\"../images/face.jpg\", 1)"}, {"line_number": 7, "line_content": "\tif img.Empty() {"}, {"line_number": 8, "line_content": "\t\tt.Error(\"TestTracker \" + name + \" input img failed to load\")"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tdefer img.Close()"}, {"line_content": "", "line_number": 11}, {"line_number": 12, "line_content": "\trect := image.Rect(250, 150, 250+200, 150+250)"}, {"line_number": 13, "line_content": "\tinit := tracker.Init(img, rect)"}, {"line_number": 14, "line_content": "\tif !init {"}, {"line_number": 15, "line_content": "\t\tt.Error(\"TestTracker \" + name + \" failed in Init\")"}, {"line_content": "\t}", "line_number": 16}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "\t_, ok := tracker.Update(img)"}, {"line_number": 19, "line_content": "\tif !ok {"}, {"line_number": 20, "line_content": "\t\tt.Error(\"TestTracker \" + name + \" lost object in Update\")"}, {"line_number": 21, "line_content": "\t}"}, {"line_number": 22, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func TestSingleTrackers(t *testing.T) {"}, {"line_number": 2, "line_content": "\ttab := []struct {"}, {"line_number": 3, "line_content": "\t\tname\tstring"}, {"line_number": 4, "line_content": "\t\ttracker\tgocv.Tracker"}, {"line_number": 5, "line_content": "\t}{"}, {"line_number": 6, "line_content": "\t\t{\"KCF\", NewTrackerKCF()},"}, {"line_number": 7, "line_content": "\t\t{\"CSRT\", NewTrackerCSRT()},"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tfor _, test := range tab {"}, {"line_number": 11, "line_content": "\t\tfunc() {"}, {"line_number": 12, "line_content": "\t\t\tdefer test.tracker.Close()"}, {"line_number": 13, "line_content": "\t\t\tBaseTestTracker(t, test.tracker, test.name)"}, {"line_number": 14, "line_content": "\t\t}()"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewWeChatQRCode(detectProtoTxt, detectCaffe, superProtoTxt, superCaffe string) *WeChatQRCode {"}, {"line_content": "\tdp := C.CString(detectProtoTxt)", "line_number": 2}, {"line_number": 3, "line_content": "\tdc := C.CString(detectCaffe)"}, {"line_number": 4, "line_content": "\tsp := C.CString(superProtoTxt)"}, {"line_number": 5, "line_content": "\tsc := C.CString(superCaffe)"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tdefer C.free(unsafe.Pointer(dp))"}, {"line_number": 8, "line_content": "\tdefer C.free(unsafe.Pointer(dc))"}, {"line_content": "\tdefer C.free(unsafe.Pointer(sp))", "line_number": 9}, {"line_number": 10, "line_content": "\tdefer C.free(unsafe.Pointer(sc))"}, {"line_number": 11, "line_content": "\treturn &WeChatQRCode{p: C.NewWeChatQRCode(dp, dc, sp, sc)}"}, {"line_number": 12, "line_content": "}"}], "total_lines": 12}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func (wq *WeChatQRCode) DetectAndDecode(img gocv.Mat, point *[]gocv.Mat) []string {"}, {"line_number": 2, "line_content": "\tcMats := C.struct_Mats{}"}, {"line_number": 3, "line_content": "\tdefer C.WeChatQRCode_Mats_Close(cMats)"}, {"line_number": 4, "line_content": "\tcDecoded := C.CStrings{}"}, {"line_content": "\tdefer C.WeChatQRCode_CStrings_Close(cDecoded)", "line_number": 5}, {"line_content": "\tcCodes := C.NewStringsVector()", "line_number": 6}, {"line_number": 7, "line_content": "\tdefer C.free(unsafe.Pointer(cCodes))"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tcDecoded = C.WeChatQRCode_DetectAndDecode((C.WeChatQRCode)(wq.p), (C.Mat)(img.Ptr()), &(cMats), cCodes)"}, {"line_content": "\tps := make([]gocv.Mat, cMats.length)", "line_number": 10}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfor i := C.int(0); i < cMats.length; i++ {"}, {"line_content": "\t\tps[i] = gocv.NewMat()", "line_number": 13}, {"line_content": "\t\tC.WeChatQRCode_Mats_to(cMats, i, (C.Mat)(ps[i].Ptr()))", "line_number": 14}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\t*point = ps"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tresult := make([]string, 0)"}, {"line_content": "\tfor _, v := range toGoStrings(cDecoded) {", "line_number": 20}, {"line_number": 21, "line_content": "\t\tresult = append(result, v)"}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "\treturn result"}, {"line_number": 25, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func toGoStrings(strs C.CStrings) []string {"}, {"line_number": 2, "line_content": "\tlength := int(strs.length)"}, {"line_number": 3, "line_content": "\ttmpslice := (*[1 << 20]*C.char)(unsafe.Pointer(strs.strs))[:length:length]"}, {"line_number": 4, "line_content": "\tgostrings := make([]string, length)"}, {"line_number": 5, "line_content": "\tfor i, s := range tmpslice {"}, {"line_number": 6, "line_content": "\t\tgostrings[i] = C.GoString(s)"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": "\treturn gostrings"}, {"line_number": 9, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 23, "lines": [{"line_number": 1, "line_content": "func TestNewWeChatQRCode(t *testing.T) {"}, {"line_number": 2, "line_content": "\ttests := []struct {"}, {"line_number": 3, "line_content": "\t\tname\tstring"}, {"line_number": 4, "line_content": "\t\tnotWant\t*WeChatQRCode"}, {"line_number": 5, "line_content": "\t}{"}, {"line_number": 6, "line_content": "\t\t{\"testNewWeChatQRCode\", nil},"}, {"line_number": 7, "line_content": "\t}"}, {"line_content": "", "line_number": 8}, {"line_number": 9, "line_content": "\tpath := os.Getenv(\"GOCV_CAFFE_TEST_FILES\")"}, {"line_number": 10, "line_content": "\tif path == \"\" {"}, {"line_number": 11, "line_content": "\t\tt.Skip(\"Unable to locate Caffe model files for tests\")"}, {"line_number": 12, "line_content": "\t}"}, {"line_number": 13, "line_content": ""}, {"line_number": 14, "line_content": "\tfor _, tt := range tests {"}, {"line_number": 15, "line_content": "\t\tt.Run(tt.name, func(t *testing.T) {"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\t\t\tif got := NewWeChatQRCode(path+\"/detect.prototxt\", path+\"/detect.caffemodel\","}, {"line_content": "\t\t\t\tpath+\"/sr.prototxt\", path+\"/sr.caffemodel\"); reflect.DeepEqual(got, tt.notWant) {", "line_number": 18}, {"line_number": 19, "line_content": "\t\t\t\tt.Errorf(\"NewWeChatQRCode() = %v, want %v\", got, tt.notWant)"}, {"line_number": 20, "line_content": "\t\t\t}"}, {"line_content": "\t\t})", "line_number": 21}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": "}"}]}}
{"contents": {"total_lines": 36, "lines": [{"line_number": 1, "line_content": "func TestWeChatQRCode_DetectAndDecode(t *testing.T) {"}, {"line_number": 2, "line_content": "\tmat := gocv.IMRead(\"../images/qrcode.png\", gocv.IMReadColor)"}, {"line_number": 3, "line_content": "\tmats := make([]gocv.Mat, 0)"}, {"line_number": 4, "line_content": "\tdefer mat.Close()"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\ttype args struct {"}, {"line_number": 7, "line_content": "\t\timg\tgocv.Mat"}, {"line_content": "\t\tpoint\t*[]gocv.Mat", "line_number": 8}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\ttests := []struct {"}, {"line_number": 11, "line_content": "\t\tname\t\tstring"}, {"line_number": 12, "line_content": "\t\targs\t\targs"}, {"line_number": 13, "line_content": "\t\twant\t\t[]string"}, {"line_number": 14, "line_content": "\t\tqrCounts\tint"}, {"line_content": "\t}{", "line_number": 15}, {"line_number": 16, "line_content": "\t\t{\"TestDetectAndDecode\", args{point: &mats, img: mat}, []string{\"Hello World!\"}, 1},"}, {"line_content": "\t}", "line_number": 17}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tpath := os.Getenv(\"GOCV_CAFFE_TEST_FILES\")"}, {"line_number": 20, "line_content": "\tif path == \"\" {"}, {"line_number": 21, "line_content": "\t\tt.Skip(\"Unable to locate Caffe model files for tests\")"}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "\tfor _, tt := range tests {"}, {"line_number": 25, "line_content": "\t\tt.Run(tt.name, func(t *testing.T) {"}, {"line_number": 26, "line_content": "\t\t\twq := NewWeChatQRCode(path+\"/detect.prototxt\", path+\"/detect.caffemodel\","}, {"line_number": 27, "line_content": "\t\t\t\tpath+\"/sr.prototxt\", path+\"/sr.caffemodel\")"}, {"line_number": 28, "line_content": "\t\t\tif got := wq.DetectAndDecode(tt.args.img, tt.args.point); !reflect.DeepEqual(got, tt.want) {"}, {"line_number": 29, "line_content": "\t\t\t\tt.Errorf(\"DetectAndDecode() = %v, want %v\", got, tt.want)"}, {"line_content": "\t\t\t}", "line_number": 30}, {"line_number": 31, "line_content": "\t\t\tif len(mats) != tt.qrCounts {"}, {"line_number": 32, "line_content": "\t\t\t\tt.Errorf(\"DetectAndDecode() = %v, want qrcode counts %v\", tt.qrCounts, len(mats))"}, {"line_number": 33, "line_content": "\t\t\t}"}, {"line_number": 34, "line_content": "\t\t})"}, {"line_number": 35, "line_content": "\t}"}, {"line_number": 36, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewSURF() SURF {"}, {"line_number": 2, "line_content": "\treturn SURF{p: unsafe.Pointer(C.SURF_Create())}"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (d *SURF) Close() error {"}, {"line_number": 2, "line_content": "\tC.SURF_Close((C.SURF)(d.p))"}, {"line_content": "\td.p = nil", "line_number": 3}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (d *SURF) Detect(src gocv.Mat) []gocv.KeyPoint {"}, {"line_number": 2, "line_content": "\tret := C.SURF_Detect((C.SURF)(d.p), C.Mat(src.Ptr()))"}, {"line_number": 3, "line_content": ""}, {"line_content": "\treturn getKeyPoints(ret)", "line_number": 4}, {"line_number": 5, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func (d *SURF) DetectAndCompute(src gocv.Mat, mask gocv.Mat) ([]gocv.KeyPoint, gocv.Mat) {"}, {"line_number": 2, "line_content": "\tdesc := gocv.NewMat()"}, {"line_number": 3, "line_content": "\tret := C.SURF_DetectAndCompute((C.SURF)(d.p), C.Mat(src.Ptr()), C.Mat(mask.Ptr()),"}, {"line_number": 4, "line_content": "\t\tC.Mat(desc.Ptr()))"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\treturn getKeyPoints(ret), desc"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 18, "lines": [{"line_number": 1, "line_content": "func getKeyPoints(ret C.KeyPoints) []gocv.KeyPoint {"}, {"line_number": 2, "line_content": "\tcArray := ret.keypoints"}, {"line_number": 3, "line_content": "\tdefer C.free(unsafe.Pointer(cArray))"}, {"line_number": 4, "line_content": "\tlength := int(ret.length)"}, {"line_number": 5, "line_content": "\thdr := reflect.SliceHeader{"}, {"line_number": 6, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(cArray)),"}, {"line_number": 7, "line_content": "\t\tLen:\tlength,"}, {"line_number": 8, "line_content": "\t\tCap:\tlength,"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\ts := *(*[]C.KeyPoint)(unsafe.Pointer(&hdr))"}, {"line_number": 11, "line_content": ""}, {"line_content": "\tkeys := make([]gocv.KeyPoint, length)", "line_number": 12}, {"line_number": 13, "line_content": "\tfor i, r := range s {"}, {"line_number": 14, "line_content": "\t\tkeys[i] = gocv.KeyPoint{X: float64(r.x), Y: float64(r.y), Size: float64(r.size), Angle: float64(r.angle),"}, {"line_number": 15, "line_content": "\t\t\tResponse:\tfloat64(r.response), Octave: int(r.octave), ClassID: int(r.classID)}"}, {"line_number": 16, "line_content": "\t}"}, {"line_number": 17, "line_content": "\treturn keys"}, {"line_number": 18, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "func TestSURF(t *testing.T) {"}, {"line_number": 2, "line_content": "\ttestNonFree := os.Getenv(\"OPENCV_ENABLE_NONFREE\")"}, {"line_number": 3, "line_content": "\tif testNonFree == \"\" {"}, {"line_number": 4, "line_content": "\t\tt.Skip(\"Skipping SURF test since OPENCV_ENABLE_NONFREE was not set\")"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\timg := gocv.IMRead(\"../images/face.jpg\", gocv.IMReadGrayScale)"}, {"line_number": 8, "line_content": "\tif img.Empty() {"}, {"line_number": 9, "line_content": "\t\tt.Error(\"Invalid Mat in SURF test\")"}, {"line_number": 10, "line_content": "\t}"}, {"line_number": 11, "line_content": "\tdefer img.Close()"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 14, "line_content": "\tdefer dst.Close()"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tsi := NewSURF()"}, {"line_number": 17, "line_content": "\tdefer si.Close()"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tkp := si.Detect(img)"}, {"line_number": 20, "line_content": "\tif len(kp) == 512 {"}, {"line_number": 21, "line_content": "\t\tt.Errorf(\"Invalid KeyPoint array in SURF Detect: %d\", len(kp))"}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "\tmask := gocv.NewMat()"}, {"line_number": 25, "line_content": "\tdefer mask.Close()"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\tkp2, desc := si.DetectAndCompute(img, mask)"}, {"line_number": 28, "line_content": "\tif len(kp2) == 512 {"}, {"line_number": 29, "line_content": "\t\tt.Errorf(\"Invalid KeyPoint array in SURF DetectAndCompute: %d\", len(kp2))"}, {"line_number": 30, "line_content": "\t}"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\tif desc.Empty() {"}, {"line_number": 33, "line_content": "\t\tt.Error(\"Invalid Mat desc in SURF DetectAndCompute\")"}, {"line_number": 34, "line_content": "\t}"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_content": "func ApplyChannelGains(src gocv.Mat, dst *gocv.Mat, gainB float32, gainG float32, gainR float32) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Xphoto_ApplyChannelGains(C.Mat(src.Ptr()), C.Mat(dst.Ptr()), C.float(gainB), C.float(gainG), C.float(gainR))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func Bm3dDenoisingStep(src gocv.Mat, dststep1 *gocv.Mat, dststep2 *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.Xphoto_Bm3dDenoising_Step(C.Mat(src.Ptr()), C.Mat(dststep1.Ptr()), C.Mat(dststep2.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func Bm3dDenoisingStepWithParams(src gocv.Mat, dststep1 *gocv.Mat, dststep2 *gocv.Mat,"}, {"line_number": 2, "line_content": "\th float32, templateWindowSize int,"}, {"line_number": 3, "line_content": "\tsearchWindowSize int, blockMatchingStep1 int,"}, {"line_content": "\tblockMatchingStep2 int, groupSize int,", "line_number": 4}, {"line_number": 5, "line_content": "\tslidingStep int, beta float32,"}, {"line_number": 6, "line_content": "\tnormType gocv.NormType, step Bm3dSteps,"}, {"line_number": 7, "line_content": "\ttransformType TransformTypes) {"}, {"line_content": "\tC.Xphoto_Bm3dDenoising_Step_WithParams(C.Mat(src.Ptr()), C.Mat(dststep1.Ptr()), C.Mat(dststep2.Ptr()),", "line_number": 8}, {"line_number": 9, "line_content": "\t\tC.float(h), C.int(templateWindowSize),"}, {"line_number": 10, "line_content": "\t\tC.int(searchWindowSize), C.int(blockMatchingStep1),"}, {"line_number": 11, "line_content": "\t\tC.int(blockMatchingStep2), C.int(groupSize),"}, {"line_number": 12, "line_content": "\t\tC.int(slidingStep), C.float(beta),"}, {"line_number": 13, "line_content": "\t\tC.int(normType), C.int(step),"}, {"line_number": 14, "line_content": "\t\tC.int(transformType))"}, {"line_number": 15, "line_content": "\treturn"}, {"line_number": 16, "line_content": "}"}]}, "type": "functions"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Bm3dDenoising(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.Xphoto_Bm3dDenoising(C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func Bm3dDenoisingWithParams(src gocv.Mat, dst *gocv.Mat,"}, {"line_number": 2, "line_content": "\th float32, templateWindowSize int,"}, {"line_number": 3, "line_content": "\tsearchWindowSize int, blockMatchingStep1 int,"}, {"line_number": 4, "line_content": "\tblockMatchingStep2 int, groupSize int,"}, {"line_content": "\tslidingStep int, beta float32,", "line_number": 5}, {"line_number": 6, "line_content": "\tnormType gocv.NormType, step Bm3dSteps,"}, {"line_number": 7, "line_content": "\ttransformType TransformTypes) {"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tC.Xphoto_Bm3dDenoising_WithParams(C.Mat(src.Ptr()), C.Mat(dst.Ptr()),"}, {"line_number": 10, "line_content": "\t\tC.float(h), C.int(templateWindowSize),"}, {"line_number": 11, "line_content": "\t\tC.int(searchWindowSize), C.int(blockMatchingStep1),"}, {"line_number": 12, "line_content": "\t\tC.int(blockMatchingStep2), C.int(groupSize),"}, {"line_number": 13, "line_content": "\t\tC.int(slidingStep), C.float(beta),"}, {"line_number": 14, "line_content": "\t\tC.int(normType), C.int(step),"}, {"line_number": 15, "line_content": "\t\tC.int(transformType))"}, {"line_number": 16, "line_content": "\treturn"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewGrayworldWB() GrayworldWB {"}, {"line_number": 2, "line_content": "\treturn GrayworldWB{p: unsafe.Pointer(C.GrayworldWB_Create())}"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *GrayworldWB) SetSaturationThreshold(saturationThreshold float32) {"}, {"line_content": "\tC.GrayworldWB_SetSaturationThreshold((C.GrayworldWB)(b.p), C.float(saturationThreshold))", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *GrayworldWB) GetSaturationThreshold() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.GrayworldWB_GetSaturationThreshold((C.GrayworldWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (b *GrayworldWB) Close() error {"}, {"line_number": 2, "line_content": "\tC.GrayworldWB_Close((C.GrayworldWB)(b.p))"}, {"line_number": 3, "line_content": "\tb.p = nil"}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"lines": [{"line_number": 1, "line_content": "func (b *GrayworldWB) BalanceWhite(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.GrayworldWB_BalanceWhite((C.GrayworldWB)(b.p), C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func NewLearningBasedWB() LearningBasedWB {", "line_number": 1}, {"line_content": "\treturn LearningBasedWB{p: unsafe.Pointer(C.LearningBasedWB_Create())}", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func NewLearningBasedWBWithParams(pathmodel string) LearningBasedWB {"}, {"line_content": "\tcpath := C.CString(pathmodel)", "line_number": 2}, {"line_content": "\tdefer C.free(unsafe.Pointer(cpath))", "line_number": 3}, {"line_number": 4, "line_content": "\treturn LearningBasedWB{p: unsafe.Pointer(C.LearningBasedWB_CreateWithParams(cpath))}"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) Close() error {"}, {"line_number": 2, "line_content": "\tC.LearningBasedWB_Close((C.LearningBasedWB)(b.p))"}, {"line_content": "\tb.p = nil", "line_number": 3}, {"line_content": "\treturn nil", "line_number": 4}, {"line_content": "}", "line_number": 5}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_content": "func (b *LearningBasedWB) ExtractSimpleFeatures(src gocv.Mat, dst *gocv.Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.LearningBasedWB_ExtractSimpleFeatures((C.LearningBasedWB)(b.p), C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) GetHistBinNum() int {"}, {"line_content": "\treturn int(C.LearningBasedWB_GetHistBinNum((C.LearningBasedWB)(b.p)))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) GetRangeMaxVal() int {"}, {"line_number": 2, "line_content": "\treturn int(C.LearningBasedWB_GetRangeMaxVal((C.LearningBasedWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) GetSaturationThreshold() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.LearningBasedWB_GetSaturationThreshold((C.LearningBasedWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) SetHistBinNum(val int) {"}, {"line_number": 2, "line_content": "\tC.LearningBasedWB_SetHistBinNum((C.LearningBasedWB)(b.p), C.int(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) SetRangeMaxVal(val int) {"}, {"line_number": 2, "line_content": "\tC.LearningBasedWB_SetRangeMaxVal((C.LearningBasedWB)(b.p), C.int(val))"}, {"line_content": "\treturn", "line_number": 3}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) SetSaturationThreshold(val float32) {"}, {"line_content": "\tC.LearningBasedWB_SetSaturationThreshold((C.LearningBasedWB)(b.p), C.float(val))", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *LearningBasedWB) BalanceWhite(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.LearningBasedWB_BalanceWhite((C.LearningBasedWB)(b.p), C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewSimpleWB() SimpleWB {"}, {"line_number": 2, "line_content": "\treturn SimpleWB{p: unsafe.Pointer(C.SimpleWB_Create())}"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) Close() error {"}, {"line_number": 2, "line_content": "\tC.SimpleWB_Close((C.SimpleWB)(b.p))"}, {"line_number": 3, "line_content": "\tb.p = nil"}, {"line_number": 4, "line_content": "\treturn nil"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) GetInputMax() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.SimpleWB_GetInputMax((C.SimpleWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) GetInputMin() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.SimpleWB_GetInputMin((C.SimpleWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) GetOutputMax() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.SimpleWB_GetOutputMax((C.SimpleWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) GetOutputMin() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.SimpleWB_GetOutputMin((C.SimpleWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) GetP() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.SimpleWB_GetP((C.SimpleWB)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) SetInputMax(val float32) {"}, {"line_number": 2, "line_content": "\tC.SimpleWB_SetInputMax((C.SimpleWB)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) SetInputMin(val float32) {"}, {"line_number": 2, "line_content": "\tC.SimpleWB_SetInputMin((C.SimpleWB)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) SetOutputMax(val float32) {"}, {"line_content": "\tC.SimpleWB_SetOutputMax((C.SimpleWB)(b.p), C.float(val))", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_content": "func (b *SimpleWB) SetOutputMin(val float32) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.SimpleWB_SetOutputMin((C.SimpleWB)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) SetP(val float32) {"}, {"line_number": 2, "line_content": "\tC.SimpleWB_SetP((C.SimpleWB)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *SimpleWB) BalanceWhite(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.SimpleWB_BalanceWhite((C.SimpleWB)(b.p), C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewTonemapDurand() TonemapDurand {"}, {"line_content": "\treturn TonemapDurand{p: unsafe.Pointer(C.TonemapDurand_Create())}", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func NewTonemapDurandWithParams(gamma float32, contrast float32, saturation float32,"}, {"line_number": 2, "line_content": "\tsigma_color float32, sigma_space float32) TonemapDurand {"}, {"line_number": 3, "line_content": "\treturn TonemapDurand{p: unsafe.Pointer(C.TonemapDurand_CreateWithParams(C.float(gamma), C.float(contrast),"}, {"line_content": "\t\tC.float(saturation), C.float(sigma_color), C.float(sigma_space)))}", "line_number": 4}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) Close() error {"}, {"line_content": "\tC.TonemapDurand_Close((C.TonemapDurand)(b.p))", "line_number": 2}, {"line_number": 3, "line_content": "\tb.p = nil"}, {"line_content": "\treturn nil", "line_number": 4}, {"line_number": 5, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) GetContrast() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.TonemapDurand_GetContrast((C.TonemapDurand)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) GetSaturation() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.TonemapDurand_GetSaturation((C.TonemapDurand)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) GetSigmaColor() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.TonemapDurand_GetSigmaColor((C.TonemapDurand)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) GetSigmaSpace() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.TonemapDurand_GetSigmaSpace((C.TonemapDurand)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) SetContrast(val float32) {"}, {"line_number": 2, "line_content": "\tC.TonemapDurand_SetContrast((C.TonemapDurand)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) SetSaturation(val float32) {"}, {"line_number": 2, "line_content": "\tC.TonemapDurand_SetSaturation((C.TonemapDurand)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) SetSigmaColor(val float32) {"}, {"line_number": 2, "line_content": "\tC.TonemapDurand_SetSigmaColor((C.TonemapDurand)(b.p), C.float(val))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) SetSigmaSpace(val float32) {"}, {"line_content": "\tC.TonemapDurand_SetSigmaSpace((C.TonemapDurand)(b.p), C.float(val))", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) GetGamma() float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.TonemapDurand_GetGamma((C.TonemapDurand)(b.p)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) SetGamma(val float32) {"}, {"line_content": "\tC.TonemapDurand_SetGamma((C.TonemapDurand)(b.p), C.float(val))", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (b *TonemapDurand) Process(src gocv.Mat, dst *gocv.Mat) {"}, {"line_number": 2, "line_content": "\tC.TonemapDurand_Process((C.TonemapDurand)(b.p), C.Mat(src.Ptr()), C.Mat(dst.Ptr()))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func Inpaint(src *gocv.Mat, mask *gocv.Mat, dst *gocv.Mat, algorithmType InpaintTypes) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Inpaint(C.Mat(src.Ptr()), C.Mat(mask.Ptr()), C.Mat(dst.Ptr()), C.int(algorithmType))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func OilPaintingWithParams(src gocv.Mat, dst gocv.Mat, size int, dynRatio int, code gocv.ColorConversionCode) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.OilPaintingWithParams(C.Mat(src.Ptr()), C.Mat(dst.Ptr()), C.int(size), C.int(dynRatio), C.int(code))"}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func OilPainting(src gocv.Mat, dst *gocv.Mat, size int, dynRatio int) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.OilPainting(C.Mat(src.Ptr()), C.Mat(dst.Ptr()), C.int(size), C.int(dynRatio))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 22, "lines": [{"line_number": 1, "line_content": "func TestBm3dDenoisingStepWithParams(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tsrc := gocv.NewMatWithSize(200, 200, gocv.MatTypeCV8UC1)"}, {"line_number": 4, "line_content": "\tdefer src.Close()"}, {"line_number": 5, "line_content": "\tdst1 := gocv.NewMat()"}, {"line_number": 6, "line_content": "\tdefer dst1.Close()"}, {"line_number": 7, "line_content": "\tdst2 := gocv.NewMat()"}, {"line_number": 8, "line_content": "\tdefer dst2.Close()"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tBm3dDenoisingStepWithParams(src, &dst1, &dst2,"}, {"line_number": 11, "line_content": "\t\tfloat32(1.0), int(4),"}, {"line_number": 12, "line_content": "\t\tint(16), int(2500),"}, {"line_content": "\t\tint(400), int(8),", "line_number": 13}, {"line_number": 14, "line_content": "\t\tint(1), float32(2.0),"}, {"line_number": 15, "line_content": "\t\tgocv.NormL2,"}, {"line_number": 16, "line_content": "\t\tBm3dAlgoStepAll,"}, {"line_number": 17, "line_content": "\t\tBm3dTypeHaar)"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tif src.Empty() || dst1.Rows() != src.Rows() || dst1.Cols() != src.Cols() {"}, {"line_number": 20, "line_content": "\t\tt.Error(\"Invlalid TestBm3dDenoisingStepWithParams test\")"}, {"line_number": 21, "line_content": "\t}"}, {"line_number": 22, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 20, "lines": [{"line_number": 1, "line_content": "func TestBm3dDenoisingWithParams(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tsrc := gocv.NewMatWithSize(200, 200, gocv.MatTypeCV8UC1)"}, {"line_number": 4, "line_content": "\tdefer src.Close()"}, {"line_number": 5, "line_content": "\tdst := gocv.NewMat()"}, {"line_content": "\tdefer dst.Close()", "line_number": 6}, {"line_number": 7, "line_content": ""}, {"line_content": "\tBm3dDenoisingWithParams(src, &dst,", "line_number": 8}, {"line_number": 9, "line_content": "\t\tfloat32(1.0), int(4),"}, {"line_number": 10, "line_content": "\t\tint(16), int(2500),"}, {"line_content": "\t\tint(400), int(8),", "line_number": 11}, {"line_number": 12, "line_content": "\t\tint(1), float32(2.0),"}, {"line_number": 13, "line_content": "\t\tgocv.NormL2,"}, {"line_number": 14, "line_content": "\t\tBm3dAlgoStepAll,"}, {"line_number": 15, "line_content": "\t\tBm3dTypeHaar)"}, {"line_number": 16, "line_content": ""}, {"line_content": "\tif src.Empty() || dst.Rows() != src.Rows() || dst.Cols() != src.Cols() || dst.Type() != src.Type() {", "line_number": 17}, {"line_number": 18, "line_content": "\t\tt.Error(\"Invlalid BalanceWhite test\")"}, {"line_number": 19, "line_content": "\t}"}, {"line_number": 20, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func TestSetSaturationThreshold(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tgrayworldwb := NewGrayworldWB()"}, {"line_number": 4, "line_content": "\tvar saturation float32 = 0.7"}, {"line_number": 5, "line_content": "\tgrayworldwb.SetSaturationThreshold(saturation)"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tif grayworldwb.GetSaturationThreshold() < 0 {"}, {"line_number": 8, "line_content": "\t\tt.Error(\" Invlalid SetSaturationThreshold test\")"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func TestBalanceWhite(t *testing.T) {"}, {"line_number": 2, "line_content": "\tgrayworldwb := NewGrayworldWB()"}, {"line_number": 3, "line_content": "\tdefer grayworldwb.Close()"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tsrc := gocv.NewMatWithSize(200, 200, gocv.MatTypeCV8UC3)"}, {"line_number": 6, "line_content": "\tdefer src.Close()"}, {"line_number": 7, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 8, "line_content": "\tdefer dst.Close()"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tgrayworldwb.BalanceWhite(src, &dst)"}, {"line_number": 11, "line_content": "\tif src.Empty() || dst.Rows() != src.Rows() || dst.Cols() != src.Cols() {"}, {"line_number": 12, "line_content": "\t\tt.Error(\"Invlalid BalanceWhite test\")"}, {"line_content": "\t}", "line_number": 13}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 26, "lines": [{"line_number": 1, "line_content": "func TestNewLearningBasedWB(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tlearningbasedwb := NewLearningBasedWB()"}, {"line_number": 4, "line_content": "\tdefer learningbasedwb.Close()"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tvalueset := 2"}, {"line_number": 7, "line_content": "\tlearningbasedwb.SetHistBinNum(valueset)"}, {"line_content": "\tlearningbasedwb.SetRangeMaxVal(valueset)", "line_number": 8}, {"line_number": 9, "line_content": "\tlearningbasedwb.SetSaturationThreshold(float32(valueset))"}, {"line_number": 10, "line_content": ""}, {"line_content": "\tvaluehistbinNum := learningbasedwb.GetHistBinNum()", "line_number": 11}, {"line_number": 12, "line_content": "\tvaluerangemaxval := learningbasedwb.GetRangeMaxVal()"}, {"line_number": 13, "line_content": "\tvaluesaturation := learningbasedwb.GetSaturationThreshold()"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tif valueset != valuehistbinNum {"}, {"line_number": 16, "line_content": "\t\tt.Error(\"Invalid TestNewLearningBasedWB : Set/Get HistBinNum test\")"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tif valueset != valuerangemaxval {"}, {"line_number": 20, "line_content": "\t\tt.Error(\"Invalid TestNewLearningBasedWB : Set/Get RangeMaxVal test\")"}, {"line_content": "\t}", "line_number": 21}, {"line_number": 22, "line_content": ""}, {"line_number": 23, "line_content": "\tif valuesaturation < 0 {"}, {"line_number": 24, "line_content": "\t\tt.Error(\"Invalid TestNewLearningBasedWB : Set/Get SaturationThreshold test\")"}, {"line_number": 25, "line_content": "\t}"}, {"line_number": 26, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "func TestNewSimpleWB(t *testing.T) {"}, {"line_content": "", "line_number": 2}, {"line_number": 3, "line_content": "\tsimplewb := NewSimpleWB()"}, {"line_content": "\tdefer simplewb.Close()", "line_number": 4}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 38, "lines": [{"line_number": 1, "line_content": "func TestNewTonemapDurand(t *testing.T) {"}, {"line_content": "", "line_number": 2}, {"line_content": "\ttonemapdurand := NewTonemapDurand()", "line_number": 3}, {"line_number": 4, "line_content": "\tdefer tonemapdurand.Close()"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tvar valueset float32 = 2.05"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\ttonemapdurand.SetContrast(valueset)"}, {"line_number": 9, "line_content": "\ttonemapdurand.SetSaturation(valueset)"}, {"line_number": 10, "line_content": "\ttonemapdurand.SetSigmaColor(valueset)"}, {"line_number": 11, "line_content": "\ttonemapdurand.SetSigmaSpace(valueset)"}, {"line_content": "", "line_number": 12}, {"line_number": 13, "line_content": "\tvaluecontrast := tonemapdurand.GetContrast()"}, {"line_number": 14, "line_content": "\tvaluestaturation := tonemapdurand.GetSaturation()"}, {"line_content": "\tvaluesigmacolor := tonemapdurand.GetSigmaColor()", "line_number": 15}, {"line_number": 16, "line_content": "\tvaluesigmaspace := tonemapdurand.GetSigmaSpace()"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "\tif valueset != valuecontrast {"}, {"line_number": 19, "line_content": "\t\tt.Error(\"Invalid result TestNewTonemapDurand : Set/Get Contrast test\")"}, {"line_content": "\t}", "line_number": 20}, {"line_number": 21, "line_content": "\tif valueset != valuestaturation {"}, {"line_number": 22, "line_content": "\t\tt.Error(\"Invalid result TestNewTonemapDurand : Set/Get Saturation test\")"}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": "\tif valueset != valuesigmacolor {"}, {"line_number": 25, "line_content": "\t\tt.Error(\"Invalid result TestNewTonemapDurand : Set/Get SigmaColor test\")"}, {"line_number": 26, "line_content": "\t}"}, {"line_number": 27, "line_content": "\tif valueset != valuesigmaspace {"}, {"line_number": 28, "line_content": "\t\tt.Error(\"Invalid result TestNewTonemapDurand : Set/Get SigmaSpace test\")"}, {"line_number": 29, "line_content": "\t}"}, {"line_number": 30, "line_content": ""}, {"line_number": 31, "line_content": "\ttonemapdurand.SetGamma(valueset)"}, {"line_number": 32, "line_content": "\tvaluegamma := tonemapdurand.GetGamma()"}, {"line_number": 33, "line_content": ""}, {"line_number": 34, "line_content": "\tif valueset != valuegamma {"}, {"line_content": "\t\tt.Error(\"Invalid result TestNewTonemapDurand : Set/Get Gamma test\")", "line_number": 35}, {"line_number": 36, "line_content": "\t}"}, {"line_number": 37, "line_content": ""}, {"line_number": 38, "line_content": "}"}]}}
{"contents": {"total_lines": 15, "lines": [{"line_number": 1, "line_content": "func TestTonemapDurandProcess(t *testing.T) {"}, {"line_number": 2, "line_content": "\ttonemapdurand := NewTonemapDurand()"}, {"line_number": 3, "line_content": "\tdefer tonemapdurand.Close()"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tsrc := gocv.NewMatWithSize(200, 200, gocv.MatTypeCV32FC3)"}, {"line_number": 6, "line_content": "\tdefer src.Close()"}, {"line_number": 7, "line_content": "\tdst := gocv.NewMat()"}, {"line_number": 8, "line_content": "\tdefer dst.Close()"}, {"line_content": "", "line_number": 9}, {"line_number": 10, "line_content": "\ttonemapdurand.Process(src, &dst)"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tif src.Empty() || dst.Rows() != src.Rows() || dst.Cols() != src.Cols() || dst.Type() != gocv.MatTypeCV32FC3 {"}, {"line_number": 13, "line_content": "\t\tt.Error(\"Invlalid TestTonemapDurandProcess test\")"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 28, "lines": [{"line_number": 1, "line_content": "func TestOilPainting(t *testing.T) {"}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tjpgImageOilPainting := gocv.IMRead(\"../images/space_shuttle.jpg\", gocv.IMReadColor)"}, {"line_number": 4, "line_content": "\tif jpgImageOilPainting.Empty() {"}, {"line_number": 5, "line_content": "\t\tt.Error(\"Invalid read of Source Mat in TestInpaint test\")"}, {"line_number": 6, "line_content": "\t}"}, {"line_content": "\tdefer jpgImageOilPainting.Close()", "line_number": 7}, {"line_content": "", "line_number": 8}, {"line_number": 9, "line_content": "\tt.Logf(\"Read of Source Mat in TestOilPainting test : %d x %d\", jpgImageOilPainting.Cols(), jpgImageOilPainting.Rows())"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tsrcOilPainting := gocv.NewMat()"}, {"line_number": 12, "line_content": "\tdefer srcOilPainting.Close()"}, {"line_content": "\tjpgImageOilPainting.ConvertTo(&srcOilPainting, gocv.MatTypeCV8UC3)", "line_number": 13}, {"line_content": "", "line_number": 14}, {"line_number": 15, "line_content": "\tdstOilPainting := gocv.NewMat()"}, {"line_number": 16, "line_content": "\tdefer dstOilPainting.Close()"}, {"line_number": 17, "line_content": ""}, {"line_number": 18, "line_content": "\tOilPainting(srcOilPainting, &dstOilPainting, 2, 2)"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\tt.Logf(\"OilPainting : MAT %d <> %d : %d\", dstOilPainting.Rows(), srcOilPainting.Rows(), dstOilPainting.Type())"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\tif srcOilPainting.Empty() || dstOilPainting.Rows() != srcOilPainting.Rows() || dstOilPainting.Cols() != srcOilPainting.Cols() {"}, {"line_number": 23, "line_content": "\t\tt.Error(\"Invlalid TestInpaint OilPainting test\")"}, {"line_number": 24, "line_content": "\t\treturn"}, {"line_number": 25, "line_content": "\t}"}, {"line_number": 26, "line_content": ""}, {"line_number": 27, "line_content": "\tgocv.IMWrite(\"testOilPainting.png\", dstOilPainting)"}, {"line_number": 28, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint2f(x, y float32) Point2f {"}, {"line_content": "\treturn Point2f{x, y}", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func NewMat() Mat {"}, {"line_content": "\treturn newMat(C.Mat_New())", "line_number": 2}, {"line_content": "}", "line_number": 3}], "total_lines": 3}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewMatWithSize(rows int, cols int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_NewWithSize(C.int(rows), C.int(cols), C.int(mt)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "func NewMatWithSizes(sizes []int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\tsizesArray := make([]C.int, len(sizes))"}, {"line_content": "\tfor i, s := range sizes {", "line_number": 3}, {"line_number": 4, "line_content": "\t\tsizesArray[i] = C.int(s)"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tsizesIntVector := C.IntVector{"}, {"line_number": 8, "line_content": "\t\tval:\t(*C.int)(&sizesArray[0]),"}, {"line_content": "\t\tlength:\tC.int(len(sizes)),", "line_number": 9}, {"line_number": 10, "line_content": "\t}"}, {"line_number": 11, "line_content": "\treturn newMat(C.Mat_NewWithSizes(sizesIntVector, C.int(mt)))"}, {"line_number": 12, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 18, "lines": [{"line_content": "func NewMatWithSizesWithScalar(sizes []int, mt MatType, s Scalar) Mat {", "line_number": 1}, {"line_number": 2, "line_content": "\tcsizes := []C.int{}"}, {"line_number": 3, "line_content": "\tfor _, v := range sizes {"}, {"line_content": "\t\tcsizes = append(csizes, C.int(v))", "line_number": 4}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tsizesVector := C.struct_IntVector{}"}, {"line_number": 7, "line_content": "\tsizesVector.val = (*C.int)(&csizes[0])"}, {"line_content": "\tsizesVector.length = (C.int)(len(csizes))", "line_number": 8}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tsVal := C.struct_Scalar{"}, {"line_content": "\t\tval1:\tC.double(s.Val1),", "line_number": 11}, {"line_number": 12, "line_content": "\t\tval2:\tC.double(s.Val2),"}, {"line_content": "\t\tval3:\tC.double(s.Val3),", "line_number": 13}, {"line_number": 14, "line_content": "\t\tval4:\tC.double(s.Val4),"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": ""}, {"line_number": 17, "line_content": "\treturn newMat(C.Mat_NewWithSizesFromScalar(sizesVector, C.int(mt), sVal))"}, {"line_number": 18, "line_content": "}"}]}}
{"contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func NewMatWithSizesFromBytes(sizes []int, mt MatType, data []byte) (Mat, error) {"}, {"line_number": 2, "line_content": "\tcBytes, err := toByteArray(data)"}, {"line_content": "\tif err != nil {", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn Mat{}, err"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tcsizes := []C.int{}"}, {"line_number": 8, "line_content": "\tfor _, v := range sizes {"}, {"line_number": 9, "line_content": "\t\tcsizes = append(csizes, C.int(v))"}, {"line_content": "\t}", "line_number": 10}, {"line_number": 11, "line_content": "\tsizesVector := C.struct_IntVector{}"}, {"line_number": 12, "line_content": "\tsizesVector.val = (*C.int)(&csizes[0])"}, {"line_number": 13, "line_content": "\tsizesVector.length = (C.int)(len(csizes))"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\treturn newMat(C.Mat_NewWithSizesFromBytes(sizesVector, C.int(mt), *cBytes)), nil"}, {"line_number": 16, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func NewMatFromScalar(s Scalar, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\tsVal := C.struct_Scalar{"}, {"line_number": 3, "line_content": "\t\tval1:\tC.double(s.Val1),"}, {"line_number": 4, "line_content": "\t\tval2:\tC.double(s.Val2),"}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(s.Val3),"}, {"line_content": "\t\tval4:\tC.double(s.Val4),", "line_number": 6}, {"line_number": 7, "line_content": "\t}"}, {"line_content": "", "line_number": 8}, {"line_number": 9, "line_content": "\treturn newMat(C.Mat_NewFromScalar(sVal, C.int(mt)))"}, {"line_number": 10, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func NewMatWithSizeFromScalar(s Scalar, rows int, cols int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\tsVal := C.struct_Scalar{"}, {"line_number": 3, "line_content": "\t\tval1:\tC.double(s.Val1),"}, {"line_content": "\t\tval2:\tC.double(s.Val2),", "line_number": 4}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(s.Val3),"}, {"line_number": 6, "line_content": "\t\tval4:\tC.double(s.Val4),"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_content": "\treturn newMat(C.Mat_NewWithSizeFromScalar(sVal, C.int(rows), C.int(cols), C.int(mt)))", "line_number": 9}, {"line_number": 10, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewMatFromBytes(rows int, cols int, mt MatType, data []byte) (Mat, error) {"}, {"line_number": 2, "line_content": "\tcBytes, err := toByteArray(data)"}, {"line_content": "\tif err != nil {", "line_number": 3}, {"line_number": 4, "line_content": "\t\treturn Mat{}, err"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tmat := newMat(C.Mat_NewFromBytes(C.int(rows), C.int(cols), C.int(mt), *cBytes))"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\tmat.d = data"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\treturn mat, nil"}, {"line_number": 11, "line_content": "}"}], "total_lines": 11}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Eye(rows int, cols int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Eye(C.int(rows), C.int(cols), C.int(mt)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Zeros(rows int, cols int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Zeros(C.int(rows), C.int(cols), C.int(mt)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Ones(rows int, cols int, mt MatType) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Ones(C.int(rows), C.int(cols), C.int(mt)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) FromPtr(rows int, cols int, mt MatType, prow int, pcol int) (Mat, error) {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_FromPtr(m.p, C.int(rows), C.int(cols), C.int(mt), C.int(prow), C.int(pcol))), nil"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Ptr() C.Mat {"}, {"line_content": "\treturn m.p", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Empty() bool {"}, {"line_number": 2, "line_content": "\tisEmpty := C.Mat_Empty(m.p)"}, {"line_number": 3, "line_content": "\treturn isEmpty != 0"}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) IsContinuous() bool {"}, {"line_number": 2, "line_content": "\treturn bool(C.Mat_IsContinuous(m.p))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (m *Mat) Clone() Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_Clone(m.p))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) CopyTo(dst *Mat) {"}, {"line_content": "\tC.Mat_CopyTo(m.p, dst.p)", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) CopyToWithMask(dst *Mat, mask Mat) {"}, {"line_content": "\tC.Mat_CopyToWithMask(m.p, dst.p, mask.p)", "line_number": 2}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) ConvertTo(dst *Mat, mt MatType) {"}, {"line_number": 2, "line_content": "\tC.Mat_ConvertTo(m.p, dst.p, C.int(mt))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) ConvertToWithParams(dst *Mat, mt MatType, alpha, beta float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_ConvertToWithParams(m.p, dst.p, C.int(mt), C.float(alpha), C.float(beta))"}, {"line_number": 3, "line_content": "\treturn"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Total() int {"}, {"line_number": 2, "line_content": "\treturn int(C.Mat_Total(m.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Size() (dims []int) {"}, {"line_number": 2, "line_content": "\tcdims := C.IntVector{}"}, {"line_number": 3, "line_content": "\tC.Mat_Size(m.p, &cdims)"}, {"line_number": 4, "line_content": "\tdefer C.IntVector_Close(cdims)"}, {"line_content": "", "line_number": 5}, {"line_number": 6, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 7, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(cdims.val)),"}, {"line_number": 8, "line_content": "\t\tLen:\tint(cdims.length),"}, {"line_number": 9, "line_content": "\t\tCap:\tint(cdims.length),"}, {"line_number": 10, "line_content": "\t}"}, {"line_number": 11, "line_content": "\tpdims := *(*[]C.int)(unsafe.Pointer(h))"}, {"line_number": 12, "line_content": ""}, {"line_number": 13, "line_content": "\tfor i := 0; i < int(cdims.length); i++ {"}, {"line_number": 14, "line_content": "\t\tdims = append(dims, int(pdims[i]))"}, {"line_content": "\t}", "line_number": 15}, {"line_number": 16, "line_content": "\treturn"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) ToBytes() []byte {"}, {"line_number": 2, "line_content": "\tb := C.Mat_DataPtr(m.p)"}, {"line_content": "\treturn toGoBytes(b)", "line_number": 3}, {"line_number": 4, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DataPtrUint8() ([]uint8, error) {"}, {"line_number": 2, "line_content": "\tif !m.IsContinuous() {"}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrUint8 requires continuous Mat\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tp := C.Mat_DataPtr(m.p)"}, {"line_number": 7, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 8, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),"}, {"line_number": 9, "line_content": "\t\tLen:\tint(p.length),"}, {"line_number": 10, "line_content": "\t\tCap:\tint(p.length),"}, {"line_number": 11, "line_content": "\t}"}, {"line_number": 12, "line_content": "\treturn *(*[]uint8)(unsafe.Pointer(h)), nil"}, {"line_number": 13, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DataPtrInt8() ([]int8, error) {"}, {"line_number": 2, "line_content": "\tif m.Type()&MatTypeCV8S != MatTypeCV8S {"}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrInt8 only supports MatTypeCV8S\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_content": "\tif !m.IsContinuous() {", "line_number": 6}, {"line_number": 7, "line_content": "\t\treturn nil, errors.New(\"DataPtrInt8 requires continuous Mat\")"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tp := C.Mat_DataPtr(m.p)"}, {"line_number": 11, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 12, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),"}, {"line_number": 13, "line_content": "\t\tLen:\tint(p.length),"}, {"line_number": 14, "line_content": "\t\tCap:\tint(p.length),"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "\treturn *(*[]int8)(unsafe.Pointer(h)), nil"}, {"line_number": 17, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (m *Mat) DataPtrUint16() ([]uint16, error) {", "line_number": 1}, {"line_number": 2, "line_content": "\tif m.Type()&MatTypeCV16U != MatTypeCV16U {"}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrUint16 only supports MatTypeCV16U\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_content": "", "line_number": 5}, {"line_number": 6, "line_content": "\tif !m.IsContinuous() {"}, {"line_content": "\t\treturn nil, errors.New(\"DataPtrUint16 requires continuous Mat\")", "line_number": 7}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tp := C.Mat_DataPtr(m.p)"}, {"line_number": 11, "line_content": "\th := &reflect.SliceHeader{"}, {"line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),", "line_number": 12}, {"line_content": "\t\tLen:\tint(p.length) / 2,", "line_number": 13}, {"line_number": 14, "line_content": "\t\tCap:\tint(p.length) / 2,"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "\treturn *(*[]uint16)(unsafe.Pointer(h)), nil"}, {"line_number": 17, "line_content": "}"}], "total_lines": 17}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DataPtrInt16() ([]int16, error) {"}, {"line_number": 2, "line_content": "\tif m.Type()&MatTypeCV16S != MatTypeCV16S {"}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrInt16 only supports MatTypeCV16S\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tif !m.IsContinuous() {"}, {"line_number": 7, "line_content": "\t\treturn nil, errors.New(\"DataPtrInt16 requires continuous Mat\")"}, {"line_number": 8, "line_content": "\t}"}, {"line_content": "", "line_number": 9}, {"line_content": "\tp := C.Mat_DataPtr(m.p)", "line_number": 10}, {"line_number": 11, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 12, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),"}, {"line_content": "\t\tLen:\tint(p.length) / 2,", "line_number": 13}, {"line_number": 14, "line_content": "\t\tCap:\tint(p.length) / 2,"}, {"line_content": "\t}", "line_number": 15}, {"line_number": 16, "line_content": "\treturn *(*[]int16)(unsafe.Pointer(h)), nil"}, {"line_number": 17, "line_content": "}"}]}}
{"contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DataPtrFloat32() ([]float32, error) {"}, {"line_number": 2, "line_content": "\tif m.Type()&MatTypeCV32F != MatTypeCV32F {"}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrFloat32 only supports MatTypeCV32F\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tif !m.IsContinuous() {"}, {"line_number": 7, "line_content": "\t\treturn nil, errors.New(\"DataPtrFloat32 requires continuous Mat\")"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_content": "\tp := C.Mat_DataPtr(m.p)", "line_number": 10}, {"line_number": 11, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 12, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),"}, {"line_number": 13, "line_content": "\t\tLen:\tint(p.length) / 4,"}, {"line_number": 14, "line_content": "\t\tCap:\tint(p.length) / 4,"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "\treturn *(*[]float32)(unsafe.Pointer(h)), nil"}, {"line_number": 17, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_content": "func (m *Mat) DataPtrFloat64() ([]float64, error) {", "line_number": 1}, {"line_content": "\tif m.Type()&MatTypeCV64F != MatTypeCV64F {", "line_number": 2}, {"line_number": 3, "line_content": "\t\treturn nil, errors.New(\"DataPtrFloat64 only supports MatTypeCV64F\")"}, {"line_number": 4, "line_content": "\t}"}, {"line_content": "", "line_number": 5}, {"line_content": "\tif !m.IsContinuous() {", "line_number": 6}, {"line_number": 7, "line_content": "\t\treturn nil, errors.New(\"DataPtrFloat64 requires continuous Mat\")"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tp := C.Mat_DataPtr(m.p)"}, {"line_number": 11, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 12, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p.data)),"}, {"line_number": 13, "line_content": "\t\tLen:\tint(p.length) / 8,"}, {"line_number": 14, "line_content": "\t\tCap:\tint(p.length) / 8,"}, {"line_number": 15, "line_content": "\t}"}, {"line_number": 16, "line_content": "\treturn *(*[]float64)(unsafe.Pointer(h)), nil"}, {"line_number": 17, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Region(rio image.Rectangle) Mat {"}, {"line_number": 2, "line_content": "\tcRect := C.struct_Rect{"}, {"line_number": 3, "line_content": "\t\tx:\tC.int(rio.Min.X),"}, {"line_number": 4, "line_content": "\t\ty:\tC.int(rio.Min.Y),"}, {"line_content": "\t\twidth:\tC.int(rio.Size().X),", "line_number": 5}, {"line_number": 6, "line_content": "\t\theight:\tC.int(rio.Size().Y),"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn newMat(C.Mat_Region(m.p, cRect))"}, {"line_content": "}", "line_number": 10}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Reshape(cn int, rows int) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_Reshape(m.p, C.int(cn), C.int(rows)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) ConvertFp16() Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_ConvertFp16(m.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (m *Mat) Mean() Scalar {"}, {"line_number": 2, "line_content": "\ts := C.Mat_Mean(m.p)"}, {"line_number": 3, "line_content": "\treturn NewScalar(float64(s.val1), float64(s.val2), float64(s.val3), float64(s.val4))"}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) MeanWithMask(mask Mat) Scalar {"}, {"line_number": 2, "line_content": "\ts := C.Mat_MeanWithMask(m.p, mask.p)"}, {"line_number": 3, "line_content": "\treturn NewScalar(float64(s.val1), float64(s.val2), float64(s.val3), float64(s.val4))"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) Sqrt() Mat {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_Sqrt(m.p))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Sum() Scalar {"}, {"line_number": 2, "line_content": "\ts := C.Mat_Sum(m.p)"}, {"line_number": 3, "line_content": "\treturn NewScalar(float64(s.val1), float64(s.val2), float64(s.val3), float64(s.val4))"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) PatchNaNs() {"}, {"line_number": 2, "line_content": "\tC.Mat_PatchNaNs(m.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func LUT(src, wbLUT Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.LUT(src.p, wbLUT.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) Rows() int {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn int(C.Mat_Rows(m.p))"}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Cols() int {"}, {"line_number": 2, "line_content": "\treturn int(C.Mat_Cols(m.p))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Channels() int {"}, {"line_content": "\treturn int(C.Mat_Channels(m.p))", "line_number": 2}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (m *Mat) Type() MatType {"}, {"line_number": 2, "line_content": "\treturn MatType(C.Mat_Type(m.p))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) Step() int {"}, {"line_number": 2, "line_content": "\treturn int(C.Mat_Step(m.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetUCharAt(row int, col int) uint8 {"}, {"line_number": 2, "line_content": "\treturn uint8(C.Mat_GetUChar(m.p, C.int(row), C.int(col)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) GetUCharAt3(x, y, z int) uint8 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn uint8(C.Mat_GetUChar3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetSCharAt(row int, col int) int8 {"}, {"line_number": 2, "line_content": "\treturn int8(C.Mat_GetSChar(m.p, C.int(row), C.int(col)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetSCharAt3(x, y, z int) int8 {"}, {"line_number": 2, "line_content": "\treturn int8(C.Mat_GetSChar3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetShortAt(row int, col int) int16 {"}, {"line_number": 2, "line_content": "\treturn int16(C.Mat_GetShort(m.p, C.int(row), C.int(col)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetShortAt3(x, y, z int) int16 {"}, {"line_number": 2, "line_content": "\treturn int16(C.Mat_GetShort3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetIntAt(row int, col int) int32 {"}, {"line_content": "\treturn int32(C.Mat_GetInt(m.p, C.int(row), C.int(col)))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetIntAt3(x, y, z int) int32 {"}, {"line_number": 2, "line_content": "\treturn int32(C.Mat_GetInt3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetFloatAt(row int, col int) float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.Mat_GetFloat(m.p, C.int(row), C.int(col)))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetFloatAt3(x, y, z int) float32 {"}, {"line_number": 2, "line_content": "\treturn float32(C.Mat_GetFloat3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetDoubleAt(row int, col int) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.Mat_GetDouble(m.p, C.int(row), C.int(col)))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (m *Mat) GetDoubleAt3(x, y, z int) float64 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn float64(C.Mat_GetDouble3(m.p, C.int(x), C.int(y), C.int(z)))"}, {"line_content": "}", "line_number": 3}], "total_lines": 3}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_content": "func (m *Mat) SetTo(s Scalar) {", "line_number": 1}, {"line_number": 2, "line_content": "\tsVal := C.struct_Scalar{"}, {"line_number": 3, "line_content": "\t\tval1:\tC.double(s.Val1),"}, {"line_number": 4, "line_content": "\t\tval2:\tC.double(s.Val2),"}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(s.Val3),"}, {"line_number": 6, "line_content": "\t\tval4:\tC.double(s.Val4),"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tC.Mat_SetTo(m.p, sVal)"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetUCharAt(row int, col int, val uint8) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetUChar(m.p, C.int(row), C.int(col), C.uint8_t(val))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetUCharAt3(x, y, z int, val uint8) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetUChar3(m.p, C.int(x), C.int(y), C.int(z), C.uint8_t(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetSCharAt(row int, col int, val int8) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetSChar(m.p, C.int(row), C.int(col), C.int8_t(val))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetSCharAt3(x, y, z int, val int8) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetSChar3(m.p, C.int(x), C.int(y), C.int(z), C.int8_t(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetShortAt(row int, col int, val int16) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetShort(m.p, C.int(row), C.int(col), C.int16_t(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"lines": [{"line_number": 1, "line_content": "func (m *Mat) SetShortAt3(x, y, z int, val int16) {"}, {"line_content": "\tC.Mat_SetShort3(m.p, C.int(x), C.int(y), C.int(z), C.int16_t(val))", "line_number": 2}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetIntAt(row int, col int, val int32) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetInt(m.p, C.int(row), C.int(col), C.int32_t(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (m *Mat) SetIntAt3(x, y, z int, val int32) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetInt3(m.p, C.int(x), C.int(y), C.int(z), C.int32_t(val))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetFloatAt(row int, col int, val float32) {"}, {"line_content": "\tC.Mat_SetFloat(m.p, C.int(row), C.int(col), C.float(val))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetFloatAt3(x, y, z int, val float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetFloat3(m.p, C.int(x), C.int(y), C.int(z), C.float(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetDoubleAt(row int, col int, val float64) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetDouble(m.p, C.int(row), C.int(col), C.double(val))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SetDoubleAt3(x, y, z int, val float64) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetDouble3(m.p, C.int(x), C.int(y), C.int(z), C.double(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) AddUChar(val uint8) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_AddUChar(m.p, C.uint8_t(val))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) SubtractUChar(val uint8) {", "line_number": 1}, {"line_content": "\tC.Mat_SubtractUChar(m.p, C.uint8_t(val))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) MultiplyUChar(val uint8) {"}, {"line_number": 2, "line_content": "\tC.Mat_MultiplyUChar(m.p, C.uint8_t(val))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DivideUChar(val uint8) {"}, {"line_content": "\tC.Mat_DivideUChar(m.p, C.uint8_t(val))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) AddFloat(val float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_AddFloat(m.p, C.float(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) SubtractFloat(val float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_SubtractFloat(m.p, C.float(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) MultiplyFloat(val float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_MultiplyFloat(m.p, C.float(val))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) DivideFloat(val float32) {"}, {"line_number": 2, "line_content": "\tC.Mat_DivideFloat(m.p, C.float(val))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func (m *Mat) MultiplyMatrix(x Mat) Mat {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_MultiplyMatrix(m.p, x.p))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) T() Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_T(m.p))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func AbsDiff(src1, src2 Mat, dst *Mat) {"}, {"line_content": "\tC.Mat_AbsDiff(src1.p, src2.p, dst.p)", "line_number": 2}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Add(src1, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Add(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func AddWeighted(src1 Mat, alpha float64, src2 Mat, beta float64, gamma float64, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_AddWeighted(src1.p, C.double(alpha),"}, {"line_number": 3, "line_content": "\t\tsrc2.p, C.double(beta), C.double(gamma), dst.p)"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseAnd(src1 Mat, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseAnd(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseAndWithMask(src1 Mat, src2 Mat, dst *Mat, mask Mat) {"}, {"line_content": "\tC.Mat_BitwiseAndWithMask(src1.p, src2.p, dst.p, mask.p)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseNot(src1 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseNot(src1.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseNotWithMask(src1 Mat, dst *Mat, mask Mat) {"}, {"line_content": "\tC.Mat_BitwiseNotWithMask(src1.p, dst.p, mask.p)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseOr(src1 Mat, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseOr(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseOrWithMask(src1 Mat, src2 Mat, dst *Mat, mask Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseOrWithMask(src1.p, src2.p, dst.p, mask.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseXor(src1 Mat, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseXor(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BitwiseXorWithMask(src1 Mat, src2 Mat, dst *Mat, mask Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_BitwiseXorWithMask(src1.p, src2.p, dst.p, mask.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func BatchDistance(src1 Mat, src2 Mat, dist Mat, dtype MatType, nidx Mat, normType NormType, K int, mask Mat, update int, crosscheck bool) {"}, {"line_number": 2, "line_content": "\tC.Mat_BatchDistance(src1.p, src2.p, dist.p, C.int(dtype), nidx.p, C.int(normType), C.int(K), mask.p, C.int(update), C.bool(crosscheck))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func BorderInterpolate(p int, len int, borderType CovarFlags) int {"}, {"line_number": 2, "line_content": "\tret := C.Mat_BorderInterpolate(C.int(p), C.int(len), C.int(borderType))"}, {"line_number": 3, "line_content": "\treturn int(ret)"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func CalcCovarMatrix(samples Mat, covar *Mat, mean *Mat, flags CovarFlags, ctype MatType) {"}, {"line_number": 2, "line_content": "\tC.Mat_CalcCovarMatrix(samples.p, covar.p, mean.p, C.int(flags), C.int(ctype))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func CartToPolar(x Mat, y Mat, magnitude *Mat, angle *Mat, angleInDegrees bool) {"}, {"line_number": 2, "line_content": "\tC.Mat_CartToPolar(x.p, y.p, magnitude.p, angle.p, C.bool(angleInDegrees))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func CheckRange(src Mat) bool {"}, {"line_number": 2, "line_content": "\treturn bool(C.Mat_CheckRange(src.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Compare(src1 Mat, src2 Mat, dst *Mat, ct CompareType) {"}, {"line_number": 2, "line_content": "\tC.Mat_Compare(src1.p, src2.p, dst.p, C.int(ct))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func CountNonZero(src Mat) int {"}, {"line_number": 2, "line_content": "\treturn int(C.Mat_CountNonZero(src.p))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func CompleteSymm(m Mat, lowerToUpper bool) {"}, {"line_number": 2, "line_content": "\tC.Mat_CompleteSymm(m.p, C.bool(lowerToUpper))"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func ConvertScaleAbs(src Mat, dst *Mat, alpha float64, beta float64) {"}, {"line_number": 2, "line_content": "\tC.Mat_ConvertScaleAbs(src.p, dst.p, C.double(alpha), C.double(beta))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_content": "func CopyMakeBorder(src Mat, dst *Mat, top int, bottom int, left int, right int, bt BorderType, value color.RGBA) {", "line_number": 1}, {"line_number": 2, "line_content": ""}, {"line_number": 3, "line_content": "\tcValue := C.struct_Scalar{"}, {"line_number": 4, "line_content": "\t\tval1:\tC.double(value.B),"}, {"line_number": 5, "line_content": "\t\tval2:\tC.double(value.G),"}, {"line_number": 6, "line_content": "\t\tval3:\tC.double(value.R),"}, {"line_number": 7, "line_content": "\t\tval4:\tC.double(value.A),"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\tC.Mat_CopyMakeBorder(src.p, dst.p, C.int(top), C.int(bottom), C.int(left), C.int(right), C.int(bt), cValue)"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func DCT(src Mat, dst *Mat, flags DftFlags) {"}, {"line_number": 2, "line_content": "\tC.Mat_DCT(src.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Determinant(src Mat) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.Mat_Determinant(src.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func DFT(src Mat, dst *Mat, flags DftFlags) {"}, {"line_number": 2, "line_content": "\tC.Mat_DFT(src.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Divide(src1 Mat, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Divide(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func Eigen(src Mat, eigenvalues *Mat, eigenvectors *Mat) bool {"}, {"line_number": 2, "line_content": "\tret := C.Mat_Eigen(src.p, eigenvalues.p, eigenvectors.p)"}, {"line_number": 3, "line_content": "\treturn bool(ret)"}, {"line_number": 4, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func EigenNonSymmetric(src Mat, eigenvalues *Mat, eigenvectors *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_EigenNonSymmetric(src.p, eigenvalues.p, eigenvectors.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Exp(src Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Exp(src.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func ExtractChannel(src Mat, dst *Mat, coi int) {"}, {"line_number": 2, "line_content": "\tC.Mat_ExtractChannel(src.p, dst.p, C.int(coi))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func FindNonZero(src Mat, idx *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_FindNonZero(src.p, idx.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Flip(src Mat, dst *Mat, flipCode int) {"}, {"line_number": 2, "line_content": "\tC.Mat_Flip(src.p, dst.p, C.int(flipCode))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Gemm(src1, src2 Mat, alpha float64, src3 Mat, beta float64, dst *Mat, flags int) {"}, {"line_number": 2, "line_content": "\tC.Mat_Gemm(src1.p, src2.p, C.double(alpha), src3.p, C.double(beta), dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func GetOptimalDFTSize(vecsize int) int {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn int(C.Mat_GetOptimalDFTSize(C.int(vecsize)))"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Hconcat(src1, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Hconcat(src1.p, src2.p, dst.p)"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Vconcat(src1, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Vconcat(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Rotate(src Mat, dst *Mat, code RotateFlag) {"}, {"line_number": 2, "line_content": "\tC.Rotate(src.p, dst.p, C.int(code))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func IDCT(src Mat, dst *Mat, flags int) {"}, {"line_number": 2, "line_content": "\tC.Mat_Idct(src.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func IDFT(src Mat, dst *Mat, flags, nonzeroRows int) {"}, {"line_number": 2, "line_content": "\tC.Mat_Idft(src.p, dst.p, C.int(flags), C.int(nonzeroRows))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func InRange(src, lb, ub Mat, dst *Mat) {"}, {"line_content": "\tC.Mat_InRange(src.p, lb.p, ub.p, dst.p)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 17, "lines": [{"line_number": 1, "line_content": "func InRangeWithScalar(src Mat, lb, ub Scalar, dst *Mat) {"}, {"line_number": 2, "line_content": "\tlbVal := C.struct_Scalar{"}, {"line_number": 3, "line_content": "\t\tval1:\tC.double(lb.Val1),"}, {"line_number": 4, "line_content": "\t\tval2:\tC.double(lb.Val2),"}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(lb.Val3),"}, {"line_number": 6, "line_content": "\t\tval4:\tC.double(lb.Val4),"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tubVal := C.struct_Scalar{"}, {"line_number": 10, "line_content": "\t\tval1:\tC.double(ub.Val1),"}, {"line_number": 11, "line_content": "\t\tval2:\tC.double(ub.Val2),"}, {"line_number": 12, "line_content": "\t\tval3:\tC.double(ub.Val3),"}, {"line_number": 13, "line_content": "\t\tval4:\tC.double(ub.Val4),"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": ""}, {"line_number": 16, "line_content": "\tC.Mat_InRangeWithScalar(src.p, lbVal, ubVal, dst.p)"}, {"line_number": 17, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func InsertChannel(src Mat, dst *Mat, coi int) {"}, {"line_content": "\tC.Mat_InsertChannel(src.p, dst.p, C.int(coi))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func Invert(src Mat, dst *Mat, flags SolveDecompositionFlags) float64 {"}, {"line_number": 2, "line_content": "\tret := C.Mat_Invert(src.p, dst.p, C.int(flags))"}, {"line_content": "\treturn float64(ret)", "line_number": 3}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_number": 1, "line_content": "func KMeans(data Mat, k int, bestLabels *Mat, criteria TermCriteria, attempts int, flags KMeansFlags, centers *Mat) float64 {"}, {"line_number": 2, "line_content": "\tret := C.KMeans(data.p, C.int(k), bestLabels.p, criteria.p, C.int(attempts), C.int(flags), centers.p)"}, {"line_number": 3, "line_content": "\treturn float64(ret)"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_content": "func KMeansPoints(points PointVector, k int, bestLabels *Mat, criteria TermCriteria, attempts int, flags KMeansFlags, centers *Mat) float64 {", "line_number": 1}, {"line_number": 2, "line_content": "\tret := C.KMeansPoints(points.p, C.int(k), bestLabels.p, criteria.p, C.int(attempts), C.int(flags), centers.p)"}, {"line_number": 3, "line_content": "\treturn float64(ret)"}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Log(src Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Log(src.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Magnitude(x, y Mat, magnitude *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Magnitude(x.p, y.p, magnitude.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func Max(src1, src2 Mat, dst *Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_Max(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"lines": [{"line_content": "func MeanStdDev(src Mat, dst *Mat, dstStdDev *Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_MeanStdDev(src.p, dst.p, dstStdDev.p)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 12, "lines": [{"line_number": 1, "line_content": "func Merge(mv []Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tcMatArray := make([]C.Mat, len(mv))"}, {"line_number": 3, "line_content": "\tfor i, r := range mv {"}, {"line_number": 4, "line_content": "\t\tcMatArray[i] = r.p"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tcMats := C.struct_Mats{"}, {"line_number": 7, "line_content": "\t\tmats:\t(*C.Mat)(&cMatArray[0]),"}, {"line_number": 8, "line_content": "\t\tlength:\tC.int(len(mv)),"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tC.Mat_Merge(cMats, dst.p)"}, {"line_number": 12, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Min(src1, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Min(src1.p, src2.p, dst.p)"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func MinMaxIdx(input Mat) (minVal, maxVal float32, minIdx, maxIdx int) {"}, {"line_number": 2, "line_content": "\tvar cMinVal C.double"}, {"line_content": "\tvar cMaxVal C.double", "line_number": 3}, {"line_number": 4, "line_content": "\tvar cMinIdx C.int"}, {"line_number": 5, "line_content": "\tvar cMaxIdx C.int"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tC.Mat_MinMaxIdx(input.p, &cMinVal, &cMaxVal, &cMinIdx, &cMaxIdx)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn float32(cMinVal), float32(cMaxVal), int(minIdx), int(maxIdx)"}, {"line_number": 10, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 13, "lines": [{"line_number": 1, "line_content": "func MinMaxLoc(input Mat) (minVal, maxVal float32, minLoc, maxLoc image.Point) {"}, {"line_content": "\tvar cMinVal C.double", "line_number": 2}, {"line_number": 3, "line_content": "\tvar cMaxVal C.double"}, {"line_content": "\tvar cMinLoc C.struct_Point", "line_number": 4}, {"line_number": 5, "line_content": "\tvar cMaxLoc C.struct_Point"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\tC.Mat_MinMaxLoc(input.p, &cMinVal, &cMaxVal, &cMinLoc, &cMaxLoc)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\tminLoc = image.Pt(int(cMinLoc.x), int(cMinLoc.y))"}, {"line_number": 10, "line_content": "\tmaxLoc = image.Pt(int(cMaxLoc.x), int(cMaxLoc.y))"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\treturn float32(cMinVal), float32(cMaxVal), minLoc, maxLoc"}, {"line_number": 13, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 35, "lines": [{"line_number": 1, "line_content": "func MixChannels(src []Mat, dst []Mat, fromTo []int) {"}, {"line_number": 2, "line_content": "\tcSrcArray := make([]C.Mat, len(src))"}, {"line_number": 3, "line_content": "\tfor i, r := range src {"}, {"line_number": 4, "line_content": "\t\tcSrcArray[i] = r.p"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": "\tcSrcMats := C.struct_Mats{"}, {"line_number": 7, "line_content": "\t\tmats:\t(*C.Mat)(&cSrcArray[0]),"}, {"line_number": 8, "line_content": "\t\tlength:\tC.int(len(src)),"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\tcDstArray := make([]C.Mat, len(dst))"}, {"line_number": 12, "line_content": "\tfor i, r := range dst {"}, {"line_number": 13, "line_content": "\t\tcDstArray[i] = r.p"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\tcDstMats := C.struct_Mats{"}, {"line_number": 16, "line_content": "\t\tmats:\t(*C.Mat)(&cDstArray[0]),"}, {"line_content": "\t\tlength:\tC.int(len(dst)),", "line_number": 17}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\tcFromToArray := make([]C.int, len(fromTo))"}, {"line_number": 21, "line_content": "\tfor i, ft := range fromTo {"}, {"line_number": 22, "line_content": "\t\tcFromToArray[i] = C.int(ft)"}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\tcFromToIntVector := C.IntVector{"}, {"line_number": 26, "line_content": "\t\tval:\t(*C.int)(&cFromToArray[0]),"}, {"line_number": 27, "line_content": "\t\tlength:\tC.int(len(fromTo)),"}, {"line_number": 28, "line_content": "\t}"}, {"line_content": "", "line_number": 29}, {"line_number": 30, "line_content": "\tC.Mat_MixChannels(cSrcMats, cDstMats, cFromToIntVector)"}, {"line_number": 31, "line_content": ""}, {"line_number": 32, "line_content": "\tfor i := C.int(0); i < cDstMats.length; i++ {"}, {"line_number": 33, "line_content": "\t\tdst[i].p = C.Mats_get(cDstMats, i)"}, {"line_number": 34, "line_content": "\t}"}, {"line_number": 35, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func MulSpectrums(a Mat, b Mat, dst *Mat, flags DftFlags) {"}, {"line_number": 2, "line_content": "\tC.Mat_MulSpectrums(a.p, b.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func Multiply(src1 Mat, src2 Mat, dst *Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_Multiply(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func MultiplyWithParams(src1 Mat, src2 Mat, dst *Mat, scale float64, dtype MatType) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_MultiplyWithParams(src1.p, src2.p, dst.p, C.double(scale), C.int(dtype))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func Normalize(src Mat, dst *Mat, alpha float64, beta float64, typ NormType) {"}, {"line_number": 2, "line_content": "\tC.Mat_Normalize(src.p, dst.p, C.double(alpha), C.double(beta), C.int(typ))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func Norm(src1 Mat, normType NormType) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.Norm(src1.p, C.int(normType)))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NormWithMats(src1 Mat, src2 Mat, normType NormType) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.NormWithMats(src1.p, src2.p, C.int(normType)))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func PerspectiveTransform(src Mat, dst *Mat, tm Mat) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.Mat_PerspectiveTransform(src.p, dst.p, tm.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func Solve(src1 Mat, src2 Mat, dst *Mat, flags SolveDecompositionFlags) bool {"}, {"line_number": 2, "line_content": "\treturn bool(C.Mat_Solve(src1.p, src2.p, dst.p, C.int(flags)))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func SolveCubic(coeffs Mat, roots *Mat) int {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn int(C.Mat_SolveCubic(coeffs.p, roots.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func SolvePoly(coeffs Mat, roots *Mat, maxIters int) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.Mat_SolvePoly(coeffs.p, roots.p, C.int(maxIters)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Reduce(src Mat, dst *Mat, dim int, rType ReduceTypes, dType MatType) {"}, {"line_number": 2, "line_content": "\tC.Mat_Reduce(src.p, dst.p, C.int(dim), C.int(rType), C.int(dType))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Repeat(src Mat, nY int, nX int, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Repeat(src.p, C.int(nY), C.int(nX), dst.p)"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func ScaleAdd(src1 Mat, alpha float64, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_ScaleAdd(src1.p, C.double(alpha), src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func SetIdentity(src Mat, scalar float64) {"}, {"line_number": 2, "line_content": "\tC.Mat_SetIdentity(src.p, C.double(scalar))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Sort(src Mat, dst *Mat, flags SortFlags) {"}, {"line_number": 2, "line_content": "\tC.Mat_Sort(src.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func SortIdx(src Mat, dst *Mat, flags SortFlags) {"}, {"line_number": 2, "line_content": "\tC.Mat_SortIdx(src.p, dst.p, C.int(flags))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "func Split(src Mat) (mv []Mat) {"}, {"line_number": 2, "line_content": "\tcMats := C.struct_Mats{}"}, {"line_content": "\tC.Mat_Split(src.p, &(cMats))", "line_number": 3}, {"line_number": 4, "line_content": "\tdefer C.Mats_Close(cMats)"}, {"line_number": 5, "line_content": "\tmv = make([]Mat, cMats.length)"}, {"line_number": 6, "line_content": "\tfor i := C.int(0); i < cMats.length; i++ {"}, {"line_number": 7, "line_content": "\t\tmv[i].p = C.Mats_get(cMats, i)"}, {"line_number": 8, "line_content": "\t\taddMatToProfile(mv[i].p)"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\treturn"}, {"line_number": 11, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Subtract(src1 Mat, src2 Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Subtract(src1.p, src2.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 4, "lines": [{"line_content": "func Trace(src Mat) Scalar {", "line_number": 1}, {"line_number": 2, "line_content": "\ts := C.Mat_Trace(src.p)"}, {"line_content": "\treturn NewScalar(float64(s.val1), float64(s.val2), float64(s.val3), float64(s.val4))", "line_number": 3}, {"line_number": 4, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Transform(src Mat, dst *Mat, tm Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Transform(src.p, dst.p, tm.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Transpose(src Mat, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Transpose(src.p, dst.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func Pow(src Mat, power float64, dst *Mat) {"}, {"line_number": 2, "line_content": "\tC.Mat_Pow(src.p, C.double(power), dst.p)"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func PolarToCart(magnitude Mat, degree Mat, x *Mat, y *Mat, angleInDegrees bool) {"}, {"line_content": "\tC.Mat_PolarToCart(magnitude.p, degree.p, x.p, y.p, C.bool(angleInDegrees))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func Phase(x, y Mat, angle *Mat, angleInDegrees bool) {", "line_number": 1}, {"line_content": "\tC.Mat_Phase(x.p, y.p, angle.p, C.bool(angleInDegrees))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func NewTermCriteria(typ TermCriteriaType, maxCount int, epsilon float64) TermCriteria {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn TermCriteria{p: C.TermCriteria_New(C.int(typ), C.int(maxCount), C.double(epsilon))}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewScalar(v1 float64, v2 float64, v3 float64, v4 float64) Scalar {"}, {"line_number": 2, "line_content": "\ts := Scalar{Val1: v1, Val2: v2, Val3: v3, Val4: v4}"}, {"line_content": "\treturn s", "line_number": 3}, {"line_number": 4, "line_content": "}"}], "total_lines": 4}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetVecbAt(row int, col int) Vecb {"}, {"line_number": 2, "line_content": "\tch := m.Channels()"}, {"line_number": 3, "line_content": "\tv := make(Vecb, ch)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tfor c := 0; c < ch; c++ {"}, {"line_number": 6, "line_content": "\t\tv[c] = m.GetUCharAt(row, col*ch+c)"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn v"}, {"line_content": "}", "line_number": 10}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetVecfAt(row int, col int) Vecf {"}, {"line_number": 2, "line_content": "\tch := m.Channels()"}, {"line_number": 3, "line_content": "\tv := make(Vecf, ch)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tfor c := 0; c < ch; c++ {"}, {"line_number": 6, "line_content": "\t\tv[c] = m.GetFloatAt(row, col*ch+c)"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn v"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func (m *Mat) GetVecdAt(row int, col int) Vecd {"}, {"line_number": 2, "line_content": "\tch := m.Channels()"}, {"line_number": 3, "line_content": "\tv := make(Vecd, ch)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tfor c := 0; c < ch; c++ {"}, {"line_number": 6, "line_content": "\t\tv[c] = m.GetDoubleAt(row, col*ch+c)"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn v"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_content": "func (m *Mat) GetVeciAt(row int, col int) Veci {", "line_number": 1}, {"line_number": 2, "line_content": "\tch := m.Channels()"}, {"line_number": 3, "line_content": "\tv := make(Veci, ch)"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\tfor c := 0; c < ch; c++ {"}, {"line_content": "\t\tv[c] = m.GetIntAt(row, col*ch+c)", "line_number": 6}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn v"}, {"line_number": 10, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPointVector() PointVector {"}, {"line_number": 2, "line_content": "\treturn PointVector{p: C.PointVector_New()}"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func NewPointVectorFromPoints(pts []image.Point) PointVector {"}, {"line_number": 2, "line_content": "\tp := (*C.struct_Point)(C.malloc(C.size_t(C.sizeof_struct_Point * len(pts))))"}, {"line_number": 3, "line_content": "\tdefer C.free(unsafe.Pointer(p))"}, {"line_content": "", "line_number": 4}, {"line_number": 5, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 6, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p)),"}, {"line_number": 7, "line_content": "\t\tLen:\tlen(pts),"}, {"line_content": "\t\tCap:\tlen(pts),", "line_number": 8}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tpa := *(*[]C.Point)(unsafe.Pointer(h))"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfor j, point := range pts {"}, {"line_number": 13, "line_content": "\t\tpa[j] = C.struct_Point{"}, {"line_number": 14, "line_content": "\t\t\tx:\tC.int(point.X),"}, {"line_content": "\t\t\ty:\tC.int(point.Y),", "line_number": 15}, {"line_content": "\t\t}", "line_number": 16}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_number": 19, "line_content": "\tcpoints := C.struct_Points{"}, {"line_number": 20, "line_content": "\t\tpoints:\t(*C.Point)(p),"}, {"line_number": 21, "line_content": "\t\tlength:\tC.int(len(pts)),"}, {"line_number": 22, "line_content": "\t}"}, {"line_number": 23, "line_content": ""}, {"line_content": "\treturn PointVector{p: C.PointVector_NewFromPoints(cpoints)}", "line_number": 24}, {"line_number": 25, "line_content": "}"}]}, "type": "functions"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPointVectorFromMat(mat Mat) PointVector {"}, {"line_number": 2, "line_content": "\treturn PointVector{p: C.PointVector_NewFromMat(mat.p)}"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (pv PointVector) IsNil() bool {"}, {"line_number": 2, "line_content": "\treturn pv.p == nil"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_content": "func (pv PointVector) Size() int {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn int(C.PointVector_Size(pv.p))"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "func (pv PointVector) At(idx int) image.Point {"}, {"line_number": 2, "line_content": "\tif idx > pv.Size() {"}, {"line_number": 3, "line_content": "\t\treturn image.Point{}"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tcp := C.PointVector_At(pv.p, C.int(idx))"}, {"line_number": 7, "line_content": "\treturn image.Pt(int(cp.x), int(cp.y))"}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 10, "lines": [{"line_number": 1, "line_content": "func (pv PointVector) Append(point image.Point) {"}, {"line_number": 2, "line_content": "\tp := C.struct_Point{"}, {"line_number": 3, "line_content": "\t\tx:\tC.int(point.X),"}, {"line_number": 4, "line_content": "\t\ty:\tC.int(point.Y),"}, {"line_number": 5, "line_content": "\t}"}, {"line_content": "", "line_number": 6}, {"line_number": 7, "line_content": "\tC.PointVector_Append(pv.p, p)"}, {"line_number": 8, "line_content": ""}, {"line_number": 9, "line_content": "\treturn"}, {"line_content": "}", "line_number": 10}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "func (pv PointVector) ToPoints() []image.Point {"}, {"line_number": 2, "line_content": "\tpoints := make([]image.Point, pv.Size())"}, {"line_number": 3, "line_content": ""}, {"line_number": 4, "line_content": "\tfor j := 0; j < pv.Size(); j++ {"}, {"line_content": "\t\tpoints[j] = pv.At(j)", "line_number": 5}, {"line_number": 6, "line_content": "\t}"}, {"line_content": "\treturn points", "line_number": 7}, {"line_number": 8, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pv PointVector) Close() {"}, {"line_number": 2, "line_content": "\tC.PointVector_Close(pv.p)"}, {"line_content": "}", "line_number": 3}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPointsVector() PointsVector {"}, {"line_number": 2, "line_content": "\treturn PointsVector{p: C.PointsVector_New()}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 34, "lines": [{"line_number": 1, "line_content": "func NewPointsVectorFromPoints(pts [][]image.Point) PointsVector {"}, {"line_number": 2, "line_content": "\tpoints := make([]C.struct_Points, len(pts))"}, {"line_number": 3, "line_content": ""}, {"line_content": "\tfor i, pt := range pts {", "line_number": 4}, {"line_number": 5, "line_content": "\t\tp := (*C.struct_Point)(C.malloc(C.size_t(C.sizeof_struct_Point * len(pt))))"}, {"line_number": 6, "line_content": "\t\tdefer C.free(unsafe.Pointer(p))"}, {"line_number": 7, "line_content": ""}, {"line_number": 8, "line_content": "\t\th := &reflect.SliceHeader{"}, {"line_number": 9, "line_content": "\t\t\tData:\tuintptr(unsafe.Pointer(p)),"}, {"line_number": 10, "line_content": "\t\t\tLen:\tlen(pt),"}, {"line_number": 11, "line_content": "\t\t\tCap:\tlen(pt),"}, {"line_number": 12, "line_content": "\t\t}"}, {"line_number": 13, "line_content": "\t\tpa := *(*[]C.Point)(unsafe.Pointer(h))"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\t\tfor j, point := range pt {"}, {"line_number": 16, "line_content": "\t\t\tpa[j] = C.struct_Point{"}, {"line_number": 17, "line_content": "\t\t\t\tx:\tC.int(point.X),"}, {"line_number": 18, "line_content": "\t\t\t\ty:\tC.int(point.Y),"}, {"line_number": 19, "line_content": "\t\t\t}"}, {"line_number": 20, "line_content": "\t\t}"}, {"line_number": 21, "line_content": ""}, {"line_number": 22, "line_content": "\t\tpoints[i] = C.struct_Points{"}, {"line_content": "\t\t\tpoints:\t(*C.Point)(p),", "line_number": 23}, {"line_number": 24, "line_content": "\t\t\tlength:\tC.int(len(pt)),"}, {"line_number": 25, "line_content": "\t\t}"}, {"line_number": 26, "line_content": "\t}"}, {"line_number": 27, "line_content": ""}, {"line_number": 28, "line_content": "\tcPoints := C.struct_Contours{"}, {"line_number": 29, "line_content": "\t\tcontours:\t(*C.struct_Points)(&points[0]),"}, {"line_number": 30, "line_content": "\t\tlength:\t\tC.int(len(pts)),"}, {"line_number": 31, "line_content": "\t}"}, {"line_content": "", "line_number": 32}, {"line_number": 33, "line_content": "\treturn PointsVector{p: C.PointsVector_NewFromPoints(cPoints)}"}, {"line_number": 34, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) P() C.PointsVector {"}, {"line_number": 2, "line_content": "\treturn pvs.p"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) ToPoints() [][]image.Point {"}, {"line_number": 2, "line_content": "\tppoints := make([][]image.Point, pvs.Size())"}, {"line_number": 3, "line_content": "\tfor i := 0; i < pvs.Size(); i++ {"}, {"line_number": 4, "line_content": "\t\tpts := pvs.At(i)"}, {"line_number": 5, "line_content": "\t\tpoints := make([]image.Point, pts.Size())"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\t\tfor j := 0; j < pts.Size(); j++ {"}, {"line_number": 8, "line_content": "\t\t\tpoints[j] = pts.At(j)"}, {"line_number": 9, "line_content": "\t\t}"}, {"line_number": 10, "line_content": "\t\tppoints[i] = points"}, {"line_number": 11, "line_content": "\t}"}, {"line_number": 12, "line_content": ""}, {"line_content": "\treturn ppoints", "line_number": 13}, {"line_number": 14, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) IsNil() bool {"}, {"line_number": 2, "line_content": "\treturn pvs.p == nil"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) Size() int {"}, {"line_number": 2, "line_content": "\treturn int(C.PointsVector_Size(pvs.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) At(idx int) PointVector {"}, {"line_number": 2, "line_content": "\tif idx > pvs.Size() {"}, {"line_number": 3, "line_content": "\t\treturn PointVector{}"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\treturn PointVector{p: C.PointsVector_At(pvs.p, C.int(idx))}"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) Append(pv PointVector) {"}, {"line_number": 2, "line_content": "\tif !pv.IsNil() {"}, {"line_number": 3, "line_content": "\t\tC.PointsVector_Append(pvs.p, pv.p)"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\treturn"}, {"line_number": 7, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (pvs PointsVector) Close() {"}, {"line_number": 2, "line_content": "\tC.PointsVector_Close(pvs.p)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint2fVector() Point2fVector {"}, {"line_number": 2, "line_content": "\treturn Point2fVector{p: C.Point2fVector_New()}"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 25, "lines": [{"line_number": 1, "line_content": "func NewPoint2fVectorFromPoints(pts []Point2f) Point2fVector {"}, {"line_content": "\tp := (*C.struct_Point2f)(C.malloc(C.size_t(C.sizeof_struct_Point2f * len(pts))))", "line_number": 2}, {"line_number": 3, "line_content": "\tdefer C.free(unsafe.Pointer(p))"}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 6, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p)),"}, {"line_number": 7, "line_content": "\t\tLen:\tlen(pts),"}, {"line_number": 8, "line_content": "\t\tCap:\tlen(pts),"}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tpa := *(*[]C.Point2f)(unsafe.Pointer(h))"}, {"line_number": 11, "line_content": ""}, {"line_number": 12, "line_content": "\tfor j, point := range pts {"}, {"line_content": "\t\tpa[j] = C.struct_Point2f{", "line_number": 13}, {"line_number": 14, "line_content": "\t\t\tx:\tC.float(point.X),"}, {"line_number": 15, "line_content": "\t\t\ty:\tC.float(point.Y),"}, {"line_number": 16, "line_content": "\t\t}"}, {"line_number": 17, "line_content": "\t}"}, {"line_number": 18, "line_content": ""}, {"line_content": "\tcpoints := C.struct_Points2f{", "line_number": 19}, {"line_number": 20, "line_content": "\t\tpoints:\t(*C.Point2f)(p),"}, {"line_number": 21, "line_content": "\t\tlength:\tC.int(len(pts)),"}, {"line_content": "\t}", "line_number": 22}, {"line_number": 23, "line_content": ""}, {"line_number": 24, "line_content": "\treturn Point2fVector{p: C.Point2fVector_NewFromPoints(cpoints)}"}, {"line_number": 25, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint2fVectorFromMat(mat Mat) Point2fVector {"}, {"line_number": 2, "line_content": "\treturn Point2fVector{p: C.Point2fVector_NewFromMat(mat.p)}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pfv Point2fVector) IsNil() bool {"}, {"line_number": 2, "line_content": "\treturn pfv.p == nil"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pfv Point2fVector) Size() int {"}, {"line_number": 2, "line_content": "\treturn int(C.Point2fVector_Size(pfv.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 8, "lines": [{"line_content": "func (pfv Point2fVector) At(idx int) Point2f {", "line_number": 1}, {"line_number": 2, "line_content": "\tif idx > pfv.Size() {"}, {"line_content": "\t\treturn Point2f{}", "line_number": 3}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": ""}, {"line_number": 6, "line_content": "\tcp := C.Point2fVector_At(pfv.p, C.int(idx))"}, {"line_number": 7, "line_content": "\treturn Point2f{float32(cp.x), float32(cp.y)}"}, {"line_number": 8, "line_content": "}"}]}}
{"contents": {"total_lines": 8, "lines": [{"line_number": 1, "line_content": "func (pfv Point2fVector) ToPoints() []Point2f {"}, {"line_number": 2, "line_content": "\tpoints := make([]Point2f, pfv.Size())"}, {"line_number": 3, "line_content": ""}, {"line_content": "\tfor j := 0; j < pfv.Size(); j++ {", "line_number": 4}, {"line_number": 5, "line_content": "\t\tpoints[j] = pfv.At(j)"}, {"line_number": 6, "line_content": "\t}"}, {"line_number": 7, "line_content": "\treturn points"}, {"line_number": 8, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pfv Point2fVector) Close() {"}, {"line_content": "\tC.Point2fVector_Close(pfv.p)", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func GetTickCount() float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.GetCVTickCount())"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func GetTickFrequency() float64 {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn float64(C.GetTickFrequency())"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func toByteArray(b []byte) (*C.struct_ByteArray, error) {"}, {"line_number": 2, "line_content": "\tif len(b) == 0 {"}, {"line_number": 3, "line_content": "\t\treturn nil, ErrEmptyByteSlice"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": "\treturn &C.struct_ByteArray{"}, {"line_number": 6, "line_content": "\t\tdata:\t(*C.char)(unsafe.Pointer(&b[0])),"}, {"line_number": 7, "line_content": "\t\tlength:\tC.int(len(b)),"}, {"line_number": 8, "line_content": "\t}, nil"}, {"line_number": 9, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func toGoBytes(b C.struct_ByteArray) []byte {"}, {"line_number": 2, "line_content": "\treturn C.GoBytes(unsafe.Pointer(b.data), b.length)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func toGoStrings(strs C.CStrings) []string {"}, {"line_number": 2, "line_content": "\tlength := int(strs.length)"}, {"line_number": 3, "line_content": "\ttmpslice := (*[1 << 20]*C.char)(unsafe.Pointer(strs.strs))[:length:length]"}, {"line_number": 4, "line_content": "\tgostrings := make([]string, length)"}, {"line_number": 5, "line_content": "\tfor i, s := range tmpslice {"}, {"line_number": 6, "line_content": "\t\tgostrings[i] = C.GoString(s)"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": "\treturn gostrings"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func toRectangles(ret C.Rects) []image.Rectangle {"}, {"line_number": 2, "line_content": "\tcArray := ret.rects"}, {"line_number": 3, "line_content": "\tlength := int(ret.length)"}, {"line_number": 4, "line_content": "\thdr := reflect.SliceHeader{"}, {"line_number": 5, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(cArray)),"}, {"line_number": 6, "line_content": "\t\tLen:\tlength,"}, {"line_number": 7, "line_content": "\t\tCap:\tlength,"}, {"line_number": 8, "line_content": "\t}"}, {"line_number": 9, "line_content": "\ts := *(*[]C.Rect)(unsafe.Pointer(&hdr))"}, {"line_number": 10, "line_content": ""}, {"line_number": 11, "line_content": "\trects := make([]image.Rectangle, length)"}, {"line_number": 12, "line_content": "\tfor i, r := range s {"}, {"line_number": 13, "line_content": "\t\trects[i] = image.Rect(int(r.x), int(r.y), int(r.x+r.width), int(r.y+r.height))"}, {"line_number": 14, "line_content": "\t}"}, {"line_number": 15, "line_content": "\treturn rects"}, {"line_content": "}", "line_number": 16}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func toRect(rect C.Rect) image.Rectangle {"}, {"line_number": 2, "line_content": "\treturn image.Rect(int(rect.x), int(rect.y), int(rect.x+rect.width), int(rect.y+rect.height))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func toCPoints(points []image.Point) C.struct_Points {"}, {"line_number": 2, "line_content": "\tcPointSlice := make([]C.struct_Point, len(points))"}, {"line_number": 3, "line_content": "\tfor i, point := range points {"}, {"line_number": 4, "line_content": "\t\tcPointSlice[i] = C.struct_Point{"}, {"line_content": "\t\t\tx:\tC.int(point.X),", "line_number": 5}, {"line_number": 6, "line_content": "\t\t\ty:\tC.int(point.Y),"}, {"line_content": "\t\t}", "line_number": 7}, {"line_content": "\t}", "line_number": 8}, {"line_number": 9, "line_content": ""}, {"line_number": 10, "line_content": "\treturn C.struct_Points{"}, {"line_number": 11, "line_content": "\t\tpoints:\t(*C.Point)(&cPointSlice[0]),"}, {"line_number": 12, "line_content": "\t\tlength:\tC.int(len(points)),"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 14, "lines": [{"line_number": 1, "line_content": "func toCPoints2f(points []Point2f) C.struct_Points2f {"}, {"line_number": 2, "line_content": "\tcPointSlice := make([]C.struct_Point2f, len(points))"}, {"line_number": 3, "line_content": "\tfor i, point := range points {"}, {"line_number": 4, "line_content": "\t\tcPointSlice[i] = C.struct_Point2f{"}, {"line_number": 5, "line_content": "\t\t\tx:\tC.float(point.X),"}, {"line_number": 6, "line_content": "\t\t\ty:\tC.float(point.Y),"}, {"line_number": 7, "line_content": "\t\t}"}, {"line_content": "\t}", "line_number": 8}, {"line_content": "", "line_number": 9}, {"line_number": 10, "line_content": "\treturn C.struct_Points2f{"}, {"line_number": 11, "line_content": "\t\tpoints:\t(*C.Point2f)(&cPointSlice[0]),"}, {"line_number": 12, "line_content": "\t\tlength:\tC.int(len(points)),"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 11, "lines": [{"line_number": 1, "line_content": "func toCStrings(strs []string) C.struct_CStrings {"}, {"line_content": "\tcStringsSlice := make([]*C.char, len(strs))", "line_number": 2}, {"line_number": 3, "line_content": "\tfor i, s := range strs {"}, {"line_number": 4, "line_content": "\t\tcStringsSlice[i] = C.CString(s)"}, {"line_number": 5, "line_content": "\t}"}, {"line_number": 6, "line_content": ""}, {"line_number": 7, "line_content": "\treturn C.struct_CStrings{"}, {"line_number": 8, "line_content": "\t\tstrs:\t(**C.char)(&cStringsSlice[0]),"}, {"line_number": 9, "line_content": "\t\tlength:\tC.int(len(strs)),"}, {"line_number": 10, "line_content": "\t}"}, {"line_number": 11, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) RowRange(start, end int) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_rowRange(m.p, C.int(start), C.int(end)))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (m *Mat) ColRange(start, end int) Mat {"}, {"line_number": 2, "line_content": "\treturn newMat(C.Mat_colRange(m.p, C.int(start), C.int(end)))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func TheRNG() RNG {"}, {"line_number": 2, "line_content": "\treturn RNG{"}, {"line_number": 3, "line_content": "\t\tp: C.TheRNG(),"}, {"line_content": "\t}", "line_number": 4}, {"line_number": 5, "line_content": "}"}]}}
{"contents": {"total_lines": 3, "lines": [{"line_content": "func SetRNGSeed(seed int) {", "line_number": 1}, {"line_number": 2, "line_content": "\tC.SetRNGSeed(C.int(seed))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (r *RNG) Fill(mat *Mat, distType RNGDistType, a, b float64, saturateRange bool) {"}, {"line_number": 2, "line_content": "\tC.RNG_Fill(r.p, mat.p, C.int(distType), C.double(a), C.double(b), C.bool(saturateRange))"}, {"line_number": 3, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (r *RNG) Gaussian(sigma float64) float64 {"}, {"line_number": 2, "line_content": "\treturn float64(C.RNG_Gaussian(r.p, C.double(sigma)))"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func (r *RNG) Next() uint {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn uint(C.RNG_Next(r.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func RandN(mat *Mat, mean, stddev Scalar) {"}, {"line_content": "\tmeanVal := C.struct_Scalar{", "line_number": 2}, {"line_content": "\t\tval1:\tC.double(mean.Val1),", "line_number": 3}, {"line_number": 4, "line_content": "\t\tval2:\tC.double(mean.Val2),"}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(mean.Val3),"}, {"line_number": 6, "line_content": "\t\tval4:\tC.double(mean.Val4),"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": "\tstddevVal := C.struct_Scalar{"}, {"line_number": 9, "line_content": "\t\tval1:\tC.double(stddev.Val1),"}, {"line_content": "\t\tval2:\tC.double(stddev.Val2),", "line_number": 10}, {"line_number": 11, "line_content": "\t\tval3:\tC.double(stddev.Val3),"}, {"line_number": 12, "line_content": "\t\tval4:\tC.double(stddev.Val4),"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tC.RandN(mat.p, meanVal, stddevVal)"}, {"line_number": 16, "line_content": "}"}]}, "type": "functions"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func RandShuffle(mat *Mat) {"}, {"line_number": 2, "line_content": "\tC.RandShuffle(mat.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func RandShuffleWithParams(mat *Mat, iterFactor float64, rng RNG) {"}, {"line_number": 2, "line_content": "\tC.RandShuffleWithParams(mat.p, C.double(iterFactor), rng.p)"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 16, "lines": [{"line_number": 1, "line_content": "func RandU(mat *Mat, low, high Scalar) {"}, {"line_number": 2, "line_content": "\tlowVal := C.struct_Scalar{"}, {"line_number": 3, "line_content": "\t\tval1:\tC.double(low.Val1),"}, {"line_number": 4, "line_content": "\t\tval2:\tC.double(low.Val2),"}, {"line_number": 5, "line_content": "\t\tval3:\tC.double(low.Val3),"}, {"line_number": 6, "line_content": "\t\tval4:\tC.double(low.Val4),"}, {"line_number": 7, "line_content": "\t}"}, {"line_content": "\thighVal := C.struct_Scalar{", "line_number": 8}, {"line_number": 9, "line_content": "\t\tval1:\tC.double(high.Val1),"}, {"line_number": 10, "line_content": "\t\tval2:\tC.double(high.Val2),"}, {"line_number": 11, "line_content": "\t\tval3:\tC.double(high.Val3),"}, {"line_number": 12, "line_content": "\t\tval4:\tC.double(high.Val4),"}, {"line_number": 13, "line_content": "\t}"}, {"line_number": 14, "line_content": ""}, {"line_number": 15, "line_content": "\tC.RandU(mat.p, lowVal, highVal)"}, {"line_content": "}", "line_number": 16}]}}
{"contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func newNativeByteBuffer() *NativeByteBuffer {"}, {"line_number": 2, "line_content": "\tbuffer := &NativeByteBuffer{}"}, {"line_number": 3, "line_content": "\tC.StdByteVectorInitialize(buffer.nativePointer())"}, {"line_number": 4, "line_content": "\treturn buffer"}, {"line_number": 5, "line_content": "}"}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (buffer *NativeByteBuffer) nativePointer() unsafe.Pointer {"}, {"line_number": 2, "line_content": "\treturn unsafe.Pointer(&buffer.stdVectorOpaq[0])"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (buffer *NativeByteBuffer) dataPointer() unsafe.Pointer {"}, {"line_number": 2, "line_content": "\treturn unsafe.Pointer(C.StdByteVectorData(buffer.nativePointer()))"}, {"line_content": "}", "line_number": 3}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func (buffer *NativeByteBuffer) GetBytes() []byte {"}, {"line_number": 2, "line_content": "\tvar result []byte"}, {"line_number": 3, "line_content": "\tsliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&result))"}, {"line_number": 4, "line_content": "\tvectorLen := int(C.StdByteVectorLen(buffer.nativePointer()))"}, {"line_number": 5, "line_content": "\tsliceHeader.Cap = vectorLen"}, {"line_number": 6, "line_content": "\tsliceHeader.Len = vectorLen"}, {"line_number": 7, "line_content": "\tsliceHeader.Data = uintptr(buffer.dataPointer())"}, {"line_content": "\treturn result", "line_number": 8}, {"line_number": 9, "line_content": "}"}]}, "type": "functions"}
{"contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (buffer *NativeByteBuffer) Len() int {"}, {"line_number": 2, "line_content": "\treturn int(C.StdByteVectorLen(buffer.nativePointer()))"}, {"line_content": "}", "line_number": 3}]}, "type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv"}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (buffer *NativeByteBuffer) Close() {"}, {"line_number": 2, "line_content": "\tC.StdByteVectorFree(buffer.nativePointer())"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_content": "func NewPoints2fVector() Points2fVector {", "line_number": 1}, {"line_number": 2, "line_content": "\treturn Points2fVector{p: C.Points2fVector_New()}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func NewPoints2fVectorFromPoints(pts [][]Point2f) Points2fVector {"}, {"line_number": 2, "line_content": "\tpvf := NewPoints2fVector()"}, {"line_number": 3, "line_content": "\tfor j := 0; j < len(pts); j++ {"}, {"line_number": 4, "line_content": "\t\tpv := NewPoint2fVectorFromPoints(pts[j])"}, {"line_number": 5, "line_content": "\t\tpvf.Append(pv)"}, {"line_number": 6, "line_content": "\t\tpv.Close()"}, {"line_content": "\t}", "line_number": 7}, {"line_number": 8, "line_content": "\treturn pvf"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) P() C.Points2fVector {"}, {"line_number": 2, "line_content": "\treturn pvs.p"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 9, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) ToPoints() [][]Point2f {"}, {"line_content": "\tppoints := make([][]Point2f, pvs.Size())", "line_number": 2}, {"line_number": 3, "line_content": "\tfor j := 0; j < pvs.Size(); j++ {"}, {"line_number": 4, "line_content": "\t\tpts := pvs.At(j)"}, {"line_number": 5, "line_content": "\t\tpoints := pts.ToPoints()"}, {"line_number": 6, "line_content": "\t\tppoints[j] = points"}, {"line_number": 7, "line_content": "\t}"}, {"line_number": 8, "line_content": "\treturn ppoints"}, {"line_number": 9, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) IsNil() bool {"}, {"line_number": 2, "line_content": "\treturn pvs.p == nil"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) Size() int {"}, {"line_content": "\treturn int(C.Points2fVector_Size(pvs.p))", "line_number": 2}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 6, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) At(idx int) Point2fVector {"}, {"line_number": 2, "line_content": "\tif idx > pvs.Size() {"}, {"line_content": "\t\treturn Point2fVector{}", "line_number": 3}, {"line_content": "\t}", "line_number": 4}, {"line_number": 5, "line_content": "\treturn Point2fVector{p: C.Points2fVector_At(pvs.p, C.int(idx))}"}, {"line_number": 6, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 5, "lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) Append(pv Point2fVector) {"}, {"line_content": "\tif !pv.IsNil() {", "line_number": 2}, {"line_number": 3, "line_content": "\t\tC.Points2fVector_Append(pvs.p, pv.p)"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func (pvs Points2fVector) Close() {"}, {"line_number": 2, "line_content": "\tC.Points2fVector_Close(pvs.p)"}, {"line_number": 3, "line_content": "}"}], "total_lines": 3}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint3f(x, y, z float32) Point3f {"}, {"line_number": 2, "line_content": "\treturn Point3f{x, y, z}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint3fVector() Point3fVector {"}, {"line_number": 2, "line_content": "\treturn Point3fVector{p: C.Point3fVector_New()}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"lines": [{"line_number": 1, "line_content": "func NewPoint3fVectorFromPoints(pts []Point3f) Point3fVector {"}, {"line_number": 2, "line_content": "\tp := (*C.struct_Point3f)(C.malloc(C.size_t(C.sizeof_struct_Point3f * len(pts))))"}, {"line_content": "\tdefer C.free(unsafe.Pointer(p))", "line_number": 3}, {"line_number": 4, "line_content": ""}, {"line_number": 5, "line_content": "\th := &reflect.SliceHeader{"}, {"line_number": 6, "line_content": "\t\tData:\tuintptr(unsafe.Pointer(p)),"}, {"line_content": "\t\tLen:\tlen(pts),", "line_number": 7}, {"line_content": "\t\tCap:\tlen(pts),", "line_number": 8}, {"line_number": 9, "line_content": "\t}"}, {"line_number": 10, "line_content": "\tpa := *(*[]C.Point3f)(unsafe.Pointer(h))"}, {"line_content": "", "line_number": 11}, {"line_number": 12, "line_content": "\tfor j, point := range pts {"}, {"line_number": 13, "line_content": "\t\tpa[j] = C.struct_Point3f{"}, {"line_content": "\t\t\tx:\tC.float(point.X),", "line_number": 14}, {"line_number": 15, "line_content": "\t\t\ty:\tC.float(point.Y),"}, {"line_content": "\t\t\tz:\tC.float(point.Z),", "line_number": 16}, {"line_content": "\t\t}", "line_number": 17}, {"line_number": 18, "line_content": "\t}"}, {"line_number": 19, "line_content": ""}, {"line_number": 20, "line_content": "\tcPoints := C.struct_Points3f{"}, {"line_number": 21, "line_content": "\t\tpoints:\t(*C.Point3f)(p),"}, {"line_number": 22, "line_content": "\t\tlength:\tC.int(len(pts)),"}, {"line_number": 23, "line_content": "\t}"}, {"line_number": 24, "line_content": ""}, {"line_number": 25, "line_content": "\treturn Point3fVector{p: C.Point3fVector_NewFromPoints(cPoints)}"}, {"line_number": 26, "line_content": "}"}], "total_lines": 26}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func NewPoint3fVectorFromMat(mat Mat) Point3fVector {"}, {"line_number": 2, "line_content": "\treturn Point3fVector{p: C.Point3fVector_NewFromMat(mat.p)}"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pfv Point3fVector) IsNil() bool {"}, {"line_number": 2, "line_content": "\treturn pfv.p == nil"}, {"line_number": 3, "line_content": "}"}]}}
{"type": "functions", "project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 3, "lines": [{"line_number": 1, "line_content": "func (pfv Point3fVector) Size() int {"}, {"line_number": 2, "line_content": "\treturn int(C.Point3fVector_Size(pfv.p))"}, {"line_number": 3, "line_content": "}"}]}}
{"project_source": "https://github.com/repositories/hybridgroup/gocv", "contents": {"total_lines": 7, "lines": [{"line_number": 1, "line_content": "func (pfv Point3fVector) At(idx int) Point3f {"}, {"line_number": 2, "line_content": "\tif idx > pfv.Size() {"}, {"line_number": 3, "line_content": "\t\treturn Point3f{}"}, {"line_number": 4, "line_content": "\t}"}, {"line_number": 5, "line_content": "\tcp := C.Point3fVector_At(pfv.p, C.int(idx))"}, {"line_number": 6, "line_content": "\treturn Point3f{X: float32(cp.x), Y: float32(cp.y), Z: float32(cp.z)}"}, {"line_number": 7, "line_content": "}"}]}, "type": "functions"}
